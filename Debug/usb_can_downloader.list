
usb_can_downloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08006c4c  08006c4c  00016c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d6c  08006d6c  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08006d6c  08006d6c  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d6c  08006d6c  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d6c  08006d6c  00016d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d70  08006d70  00016d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08006d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000958  20000164  08006ed8  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000abc  08006ed8  00020abc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001490b  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030e4  00000000  00000000  00034a97  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf8  00000000  00000000  00037b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a80  00000000  00000000  00038778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019250  00000000  00000000  000391f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e55a  00000000  00000000  00052448  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b17a  00000000  00000000  000609a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbb1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002818  00000000  00000000  000dbb98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000164 	.word	0x20000164
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006c34 	.word	0x08006c34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000168 	.word	0x20000168
 8000104:	08006c34 	.word	0x08006c34

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <download_app>:
#include "main.h"

static void can_packet_tx_rx(void);

void download_app(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	//uint32_t i;

	while(1)
	{
		if(g_usb_rx_complete == true)
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <download_app+0x18>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d0fb      	beq.n	8000224 <download_app+0x4>
		{
			g_usb_rx_complete = false;
 800022c:	4b02      	ldr	r3, [pc, #8]	; (8000238 <download_app+0x18>)
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

			can_packet_tx_rx();
 8000232:	f000 f803 	bl	800023c <can_packet_tx_rx>
		if(g_usb_rx_complete == true)
 8000236:	e7f5      	b.n	8000224 <download_app+0x4>
 8000238:	20000310 	.word	0x20000310

0800023c <can_packet_tx_rx>:

	} //end of while(1)
}

static void can_packet_tx_rx(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0

	can_tx_buf.id = usb_rx_buf.msg.cmd;
 8000240:	4b13      	ldr	r3, [pc, #76]	; (8000290 <can_packet_tx_rx+0x54>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b13      	ldr	r3, [pc, #76]	; (8000294 <can_packet_tx_rx+0x58>)
 8000246:	605a      	str	r2, [r3, #4]
	can_tx_buf.length = (uint8_t) usb_rx_buf.msg.length;
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <can_packet_tx_rx+0x54>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4b11      	ldr	r3, [pc, #68]	; (8000294 <can_packet_tx_rx+0x58>)
 8000250:	731a      	strb	r2, [r3, #12]
	can_rx_buf.id = 0; //clear CAN rx_cmd
 8000252:	4b11      	ldr	r3, [pc, #68]	; (8000298 <can_packet_tx_rx+0x5c>)
 8000254:	2200      	movs	r2, #0
 8000256:	605a      	str	r2, [r3, #4]

	CAN_Send(&can_tx_buf);
 8000258:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <can_packet_tx_rx+0x58>)
 800025a:	0018      	movs	r0, r3
 800025c:	f000 f87c 	bl	8000358 <CAN_Send>

	while(can_rx_buf.id != (usb_rx_buf.msg.cmd+1)); // wait ACK from loader
 8000260:	46c0      	nop			; (mov r8, r8)
 8000262:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <can_packet_tx_rx+0x5c>)
 8000264:	685a      	ldr	r2, [r3, #4]
 8000266:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <can_packet_tx_rx+0x54>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3301      	adds	r3, #1
 800026c:	429a      	cmp	r2, r3
 800026e:	d1f8      	bne.n	8000262 <can_packet_tx_rx+0x26>

	usb_tx_buf.msg.cmd = can_rx_buf.id;
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <can_packet_tx_rx+0x5c>)
 8000272:	685a      	ldr	r2, [r3, #4]
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <can_packet_tx_rx+0x60>)
 8000276:	601a      	str	r2, [r3, #0]
	usb_tx_buf.msg.length = (uint32_t) can_rx_buf.length;
 8000278:	4b07      	ldr	r3, [pc, #28]	; (8000298 <can_packet_tx_rx+0x5c>)
 800027a:	7b1b      	ldrb	r3, [r3, #12]
 800027c:	001a      	movs	r2, r3
 800027e:	4b07      	ldr	r3, [pc, #28]	; (800029c <can_packet_tx_rx+0x60>)
 8000280:	605a      	str	r2, [r3, #4]
	USB_Send(&usb_tx_buf);
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <can_packet_tx_rx+0x60>)
 8000284:	0018      	movs	r0, r3
 8000286:	f000 f8c1 	bl	800040c <USB_Send>

}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000314 	.word	0x20000314
 8000294:	20000300 	.word	0x20000300
 8000298:	200002b0 	.word	0x200002b0
 800029c:	200002c0 	.word	0x200002c0

080002a0 <message_buffer_init>:
static CAN_RxHeaderTypeDef can_rx_hd;
static uint32_t messagebox;


void message_buffer_init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	usb_rx_buf.msg.data = payload_1;
 80002a4:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <message_buffer_init+0x24>)
 80002a6:	4a08      	ldr	r2, [pc, #32]	; (80002c8 <message_buffer_init+0x28>)
 80002a8:	609a      	str	r2, [r3, #8]
	can_tx_buf.data = payload_1;
 80002aa:	4b08      	ldr	r3, [pc, #32]	; (80002cc <message_buffer_init+0x2c>)
 80002ac:	4a06      	ldr	r2, [pc, #24]	; (80002c8 <message_buffer_init+0x28>)
 80002ae:	609a      	str	r2, [r3, #8]
	usb_tx_buf.msg.data = payload_2;
 80002b0:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <message_buffer_init+0x30>)
 80002b2:	4a08      	ldr	r2, [pc, #32]	; (80002d4 <message_buffer_init+0x34>)
 80002b4:	609a      	str	r2, [r3, #8]
	can_rx_buf.data = payload_2;
 80002b6:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <message_buffer_init+0x38>)
 80002b8:	4a06      	ldr	r2, [pc, #24]	; (80002d4 <message_buffer_init+0x34>)
 80002ba:	609a      	str	r2, [r3, #8]
}
 80002bc:	46c0      	nop			; (mov r8, r8)
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	20000314 	.word	0x20000314
 80002c8:	20000180 	.word	0x20000180
 80002cc:	20000300 	.word	0x20000300
 80002d0:	200002c0 	.word	0x200002c0
 80002d4:	200001b8 	.word	0x200001b8
 80002d8:	200002b0 	.word	0x200002b0

080002dc <CAN_Filter_Init>:
 * Description   : Filter Init and start
 * Implements    :
 *END**************************************************************************/

void CAN_Filter_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
    sFilterConfig.FilterBank = 0;
 80002e0:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <CAN_Filter_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	; (8000350 <CAN_Filter_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <CAN_Filter_Init+0x74>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 80002f2:	4b17      	ldr	r3, [pc, #92]	; (8000350 <CAN_Filter_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <CAN_Filter_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80002fe:	4b14      	ldr	r3, [pc, #80]	; (8000350 <CAN_Filter_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <CAN_Filter_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800030a:	4b11      	ldr	r3, [pc, #68]	; (8000350 <CAN_Filter_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8000310:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <CAN_Filter_Init+0x74>)
 8000312:	2201      	movs	r2, #1
 8000314:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 8000316:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <CAN_Filter_Init+0x74>)
 8000318:	220e      	movs	r2, #14
 800031a:	625a      	str	r2, [r3, #36]	; 0x24

    if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800031c:	4a0c      	ldr	r2, [pc, #48]	; (8000350 <CAN_Filter_Init+0x74>)
 800031e:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <CAN_Filter_Init+0x78>)
 8000320:	0011      	movs	r1, r2
 8000322:	0018      	movs	r0, r3
 8000324:	f000 fbf4 	bl	8000b10 <HAL_CAN_ConfigFilter>
 8000328:	1e03      	subs	r3, r0, #0
 800032a:	d001      	beq.n	8000330 <CAN_Filter_Init+0x54>
    {
        Error_Handler();
 800032c:	f000 f9ac 	bl	8000688 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000330:	4b08      	ldr	r3, [pc, #32]	; (8000354 <CAN_Filter_Init+0x78>)
 8000332:	2103      	movs	r1, #3
 8000334:	0018      	movs	r0, r3
 8000336:	f000 ff56 	bl	80011e6 <HAL_CAN_ActivateNotification>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d001      	beq.n	8000342 <CAN_Filter_Init+0x66>
    {
        /* Notification Error */
        Error_Handler();
 800033e:	f000 f9a3 	bl	8000688 <Error_Handler>
    }

    HAL_CAN_Start(&hcan);
 8000342:	4b04      	ldr	r3, [pc, #16]	; (8000354 <CAN_Filter_Init+0x78>)
 8000344:	0018      	movs	r0, r3
 8000346:	f000 fcd5 	bl	8000cf4 <HAL_CAN_Start>

}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	200001f4 	.word	0x200001f4
 8000354:	20000354 	.word	0x20000354

08000358 <CAN_Send>:
 * Function Name : CAN_Send
 * Description   : CAN message send
 * Implements    :
 *END**************************************************************************/
uint8_t CAN_Send(can_message_t *message)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

    uint32_t tickstart = 0U;
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]

    //can_tx_hd.StdId = 0x321;
    can_tx_hd.ExtId = message->id;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	685a      	ldr	r2, [r3, #4]
 8000368:	4b23      	ldr	r3, [pc, #140]	; (80003f8 <CAN_Send+0xa0>)
 800036a:	605a      	str	r2, [r3, #4]
    can_tx_hd.RTR = CAN_RTR_DATA;
 800036c:	4b22      	ldr	r3, [pc, #136]	; (80003f8 <CAN_Send+0xa0>)
 800036e:	2200      	movs	r2, #0
 8000370:	60da      	str	r2, [r3, #12]
    can_tx_hd.IDE = CAN_ID_EXT;
 8000372:	4b21      	ldr	r3, [pc, #132]	; (80003f8 <CAN_Send+0xa0>)
 8000374:	2204      	movs	r2, #4
 8000376:	609a      	str	r2, [r3, #8]
    can_tx_hd.DLC = message->length;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	7b1b      	ldrb	r3, [r3, #12]
 800037c:	001a      	movs	r2, r3
 800037e:	4b1e      	ldr	r3, [pc, #120]	; (80003f8 <CAN_Send+0xa0>)
 8000380:	611a      	str	r2, [r3, #16]
    can_tx_hd.TransmitGlobalTime = DISABLE;
 8000382:	4b1d      	ldr	r3, [pc, #116]	; (80003f8 <CAN_Send+0xa0>)
 8000384:	2200      	movs	r2, #0
 8000386:	751a      	strb	r2, [r3, #20]

    tickstart = HAL_GetTick();
 8000388:	f000 faba 	bl	8000900 <HAL_GetTick>
 800038c:	0003      	movs	r3, r0
 800038e:	60fb      	str	r3, [r7, #12]
    while( HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8000390:	e009      	b.n	80003a6 <CAN_Send+0x4e>
    {
        if((HAL_GetTick()-tickstart) > 0xFFFF)
 8000392:	f000 fab5 	bl	8000900 <HAL_GetTick>
 8000396:	0002      	movs	r2, r0
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	1ad3      	subs	r3, r2, r3
 800039c:	4a17      	ldr	r2, [pc, #92]	; (80003fc <CAN_Send+0xa4>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d901      	bls.n	80003a6 <CAN_Send+0x4e>
        {
            // fail to get mailbox
            return 1;
 80003a2:	2301      	movs	r3, #1
 80003a4:	e024      	b.n	80003f0 <CAN_Send+0x98>
    while( HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 80003a6:	4b16      	ldr	r3, [pc, #88]	; (8000400 <CAN_Send+0xa8>)
 80003a8:	0018      	movs	r0, r3
 80003aa:	f000 fdc8 	bl	8000f3e <HAL_CAN_GetTxMailboxesFreeLevel>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d0ef      	beq.n	8000392 <CAN_Send+0x3a>
        }
    }

    can_tx_complete = 0;
 80003b2:	4b14      	ldr	r3, [pc, #80]	; (8000404 <CAN_Send+0xac>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80003b8:	f000 faa2 	bl	8000900 <HAL_GetTick>
 80003bc:	0003      	movs	r3, r0
 80003be:	60fb      	str	r3, [r7, #12]

    HAL_CAN_AddTxMessage(&hcan, &can_tx_hd, message->data, &messagebox);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	689a      	ldr	r2, [r3, #8]
 80003c4:	4b10      	ldr	r3, [pc, #64]	; (8000408 <CAN_Send+0xb0>)
 80003c6:	490c      	ldr	r1, [pc, #48]	; (80003f8 <CAN_Send+0xa0>)
 80003c8:	480d      	ldr	r0, [pc, #52]	; (8000400 <CAN_Send+0xa8>)
 80003ca:	f000 fcd9 	bl	8000d80 <HAL_CAN_AddTxMessage>

    while(can_tx_complete == 0)
 80003ce:	e009      	b.n	80003e4 <CAN_Send+0x8c>
    {
        if((HAL_GetTick()-tickstart) > COMM_TIMEOUT)
 80003d0:	f000 fa96 	bl	8000900 <HAL_GetTick>
 80003d4:	0002      	movs	r2, r0
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	1ad3      	subs	r3, r2, r3
 80003da:	4a08      	ldr	r2, [pc, #32]	; (80003fc <CAN_Send+0xa4>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d901      	bls.n	80003e4 <CAN_Send+0x8c>
        {
            //fail to complete send
            return 1;
 80003e0:	2301      	movs	r3, #1
 80003e2:	e005      	b.n	80003f0 <CAN_Send+0x98>
    while(can_tx_complete == 0)
 80003e4:	4b07      	ldr	r3, [pc, #28]	; (8000404 <CAN_Send+0xac>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d0f0      	beq.n	80003d0 <CAN_Send+0x78>
        }
    }
    return 0;
 80003ee:	2300      	movs	r3, #0
}
 80003f0:	0018      	movs	r0, r3
 80003f2:	46bd      	mov	sp, r7
 80003f4:	b004      	add	sp, #16
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	2000021c 	.word	0x2000021c
 80003fc:	0000ffff 	.word	0x0000ffff
 8000400:	20000354 	.word	0x20000354
 8000404:	200001f0 	.word	0x200001f0
 8000408:	20000250 	.word	0x20000250

0800040c <USB_Send>:
 * Function Name : USB_Send
 * Description   : USB message send
 * Implements    :
 *END**************************************************************************/
uint8_t USB_Send(usb_message_t *message)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = 0U;
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]

    tickstart = HAL_GetTick();
 8000418:	f000 fa72 	bl	8000900 <HAL_GetTick>
 800041c:	0003      	movs	r3, r0
 800041e:	60fb      	str	r3, [r7, #12]

    while(USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*)message, 64) != USBD_OK)
 8000420:	e009      	b.n	8000436 <USB_Send+0x2a>
    {
        if((HAL_GetTick()-tickstart) > COMM_TIMEOUT)
 8000422:	f000 fa6d 	bl	8000900 <HAL_GetTick>
 8000426:	0002      	movs	r2, r0
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	1ad3      	subs	r3, r2, r3
 800042c:	4a08      	ldr	r2, [pc, #32]	; (8000450 <USB_Send+0x44>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d901      	bls.n	8000436 <USB_Send+0x2a>
        {
            //fail to send
            return 1;
 8000432:	2301      	movs	r3, #1
 8000434:	e008      	b.n	8000448 <USB_Send+0x3c>
    while(USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*)message, 64) != USBD_OK)
 8000436:	6879      	ldr	r1, [r7, #4]
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <USB_Send+0x48>)
 800043a:	2240      	movs	r2, #64	; 0x40
 800043c:	0018      	movs	r0, r3
 800043e:	f004 fc21 	bl	8004c84 <USBD_CUSTOM_HID_SendReport>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d1ed      	bne.n	8000422 <USB_Send+0x16>
        }
    }
    return 0;
 8000446:	2300      	movs	r3, #0
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	b004      	add	sp, #16
 800044e:	bd80      	pop	{r7, pc}
 8000450:	0000ffff 	.word	0x0000ffff
 8000454:	20000384 	.word	0x20000384

08000458 <HAL_CAN_TxMailbox0CompleteCallback>:
 * Description   :
 * Implements    :
 *END**************************************************************************/

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
    can_tx_complete = 1;
 8000460:	4b03      	ldr	r3, [pc, #12]	; (8000470 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 8000462:	2201      	movs	r2, #1
 8000464:	701a      	strb	r2, [r3, #0]
}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b002      	add	sp, #8
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	200001f0 	.word	0x200001f0

08000474 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_hd, can_rx_buf.data);
 800047c:	4b07      	ldr	r3, [pc, #28]	; (800049c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800047e:	689b      	ldr	r3, [r3, #8]
 8000480:	4a07      	ldr	r2, [pc, #28]	; (80004a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000482:	6878      	ldr	r0, [r7, #4]
 8000484:	2100      	movs	r1, #0
 8000486:	f000 fd92 	bl	8000fae <HAL_CAN_GetRxMessage>
    can_rx_buf.id = can_rx_hd.ExtId;
 800048a:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800048c:	685a      	ldr	r2, [r3, #4]
 800048e:	4b03      	ldr	r3, [pc, #12]	; (800049c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000490:	605a      	str	r2, [r3, #4]
}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	b002      	add	sp, #8
 8000498:	bd80      	pop	{r7, pc}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	200002b0 	.word	0x200002b0
 80004a0:	20000234 	.word	0x20000234

080004a4 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
    Error_Handler();
 80004ac:	f000 f8ec 	bl	8000688 <Error_Handler>
}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b002      	add	sp, #8
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <USB_Receive_Callback>:

void USB_Receive_Callback(uint8_t event_idx, uint8_t state)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	0002      	movs	r2, r0
 80004c0:	1dfb      	adds	r3, r7, #7
 80004c2:	701a      	strb	r2, [r3, #0]
 80004c4:	1dbb      	adds	r3, r7, #6
 80004c6:	1c0a      	adds	r2, r1, #0
 80004c8:	701a      	strb	r2, [r3, #0]

	//USBD_CUSTOM_HID_HandleTypeDef *hhid = hUsbDeviceFS.pClassData;
	memcpy(usb_rx_buf.packet, hUsbDeviceFS.pClassData, 64);
 80004ca:	4a09      	ldr	r2, [pc, #36]	; (80004f0 <USB_Receive_Callback+0x38>)
 80004cc:	23ae      	movs	r3, #174	; 0xae
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	58d3      	ldr	r3, [r2, r3]
 80004d2:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <USB_Receive_Callback+0x3c>)
 80004d4:	0010      	movs	r0, r2
 80004d6:	0019      	movs	r1, r3
 80004d8:	2340      	movs	r3, #64	; 0x40
 80004da:	001a      	movs	r2, r3
 80004dc:	f006 fb98 	bl	8006c10 <memcpy>
	g_usb_rx_complete = 1;
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <USB_Receive_Callback+0x40>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
#ifdef __DEBUG_PRINTF__
	printf("usb data received!\n");
#endif
}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b002      	add	sp, #8
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	20000384 	.word	0x20000384
 80004f4:	20000314 	.word	0x20000314
 80004f8:	20000310 	.word	0x20000310

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 f9a4 	bl	800084c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f80d 	bl	8000522 <SystemClock_Config>
  initialise_monitor_handles();
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f898 	bl	800063c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800050c:	f005 fea6 	bl	800625c <MX_USB_DEVICE_Init>
  MX_CAN_Init();
 8000510:	f000 f85c 	bl	80005cc <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  CAN_Filter_Init();
 8000514:	f7ff fee2 	bl	80002dc <CAN_Filter_Init>
  message_buffer_init();
 8000518:	f7ff fec2 	bl	80002a0 <message_buffer_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  download_app();
 800051c:	f7ff fe80 	bl	8000220 <download_app>

  while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x24>

08000522 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000522:	b590      	push	{r4, r7, lr}
 8000524:	b099      	sub	sp, #100	; 0x64
 8000526:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000528:	242c      	movs	r4, #44	; 0x2c
 800052a:	193b      	adds	r3, r7, r4
 800052c:	0018      	movs	r0, r3
 800052e:	2334      	movs	r3, #52	; 0x34
 8000530:	001a      	movs	r2, r3
 8000532:	2100      	movs	r1, #0
 8000534:	f006 fb75 	bl	8006c22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	231c      	movs	r3, #28
 800053a:	18fb      	adds	r3, r7, r3
 800053c:	0018      	movs	r0, r3
 800053e:	2310      	movs	r3, #16
 8000540:	001a      	movs	r2, r3
 8000542:	2100      	movs	r1, #0
 8000544:	f006 fb6d 	bl	8006c22 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000548:	003b      	movs	r3, r7
 800054a:	0018      	movs	r0, r3
 800054c:	231c      	movs	r3, #28
 800054e:	001a      	movs	r2, r3
 8000550:	2100      	movs	r1, #0
 8000552:	f006 fb66 	bl	8006c22 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000556:	193b      	adds	r3, r7, r4
 8000558:	2220      	movs	r2, #32
 800055a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800055c:	193b      	adds	r3, r7, r4
 800055e:	2201      	movs	r2, #1
 8000560:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2200      	movs	r2, #0
 8000566:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	193b      	adds	r3, r7, r4
 800056a:	0018      	movs	r0, r3
 800056c:	f002 fac8 	bl	8002b00 <HAL_RCC_OscConfig>
 8000570:	1e03      	subs	r3, r0, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000574:	f000 f888 	bl	8000688 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000578:	211c      	movs	r1, #28
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2207      	movs	r2, #7
 800057e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2203      	movs	r2, #3
 8000584:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2101      	movs	r1, #1
 8000596:	0018      	movs	r0, r3
 8000598:	f002 fe38 	bl	800320c <HAL_RCC_ClockConfig>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005a0:	f000 f872 	bl	8000688 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005a4:	003b      	movs	r3, r7
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	0292      	lsls	r2, r2, #10
 80005aa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80005ac:	003b      	movs	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b2:	003b      	movs	r3, r7
 80005b4:	0018      	movs	r0, r3
 80005b6:	f002 ff81 	bl	80034bc <HAL_RCCEx_PeriphCLKConfig>
 80005ba:	1e03      	subs	r3, r0, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005be:	f000 f863 	bl	8000688 <Error_Handler>
  }
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b019      	add	sp, #100	; 0x64
 80005c8:	bd90      	pop	{r4, r7, pc}
	...

080005cc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <MX_CAN_Init+0x68>)
 80005d2:	4a19      	ldr	r2, [pc, #100]	; (8000638 <MX_CAN_Init+0x6c>)
 80005d4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_CAN_Init+0x68>)
 80005d8:	220c      	movs	r2, #12
 80005da:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <MX_CAN_Init+0x68>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_CAN_Init+0x68>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_CAN_Init+0x68>)
 80005ea:	22c0      	movs	r2, #192	; 0xc0
 80005ec:	0292      	lsls	r2, r2, #10
 80005ee:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80005f0:	4b10      	ldr	r3, [pc, #64]	; (8000634 <MX_CAN_Init+0x68>)
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	0392      	lsls	r2, r2, #14
 80005f6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_CAN_Init+0x68>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <MX_CAN_Init+0x68>)
 8000600:	2200      	movs	r2, #0
 8000602:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <MX_CAN_Init+0x68>)
 8000606:	2200      	movs	r2, #0
 8000608:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MX_CAN_Init+0x68>)
 800060c:	2200      	movs	r2, #0
 800060e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <MX_CAN_Init+0x68>)
 8000612:	2200      	movs	r2, #0
 8000614:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <MX_CAN_Init+0x68>)
 8000618:	2200      	movs	r2, #0
 800061a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <MX_CAN_Init+0x68>)
 800061e:	0018      	movs	r0, r3
 8000620:	f000 f978 	bl	8000914 <HAL_CAN_Init>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000628:	f000 f82e 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	20000354 	.word	0x20000354
 8000638:	40006400 	.word	0x40006400

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_GPIO_Init+0x48>)
 8000644:	695a      	ldr	r2, [r3, #20]
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_GPIO_Init+0x48>)
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	0289      	lsls	r1, r1, #10
 800064c:	430a      	orrs	r2, r1
 800064e:	615a      	str	r2, [r3, #20]
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_GPIO_Init+0x48>)
 8000652:	695a      	ldr	r2, [r3, #20]
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	029b      	lsls	r3, r3, #10
 8000658:	4013      	ands	r3, r2
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_GPIO_Init+0x48>)
 8000660:	695a      	ldr	r2, [r3, #20]
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_GPIO_Init+0x48>)
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	02c9      	lsls	r1, r1, #11
 8000668:	430a      	orrs	r2, r1
 800066a:	615a      	str	r2, [r3, #20]
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <MX_GPIO_Init+0x48>)
 800066e:	695a      	ldr	r2, [r3, #20]
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	02db      	lsls	r3, r3, #11
 8000674:	4013      	ands	r3, r2
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b002      	add	sp, #8
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	40021000 	.word	0x40021000

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_MspInit+0x44>)
 800069c:	699a      	ldr	r2, [r3, #24]
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <HAL_MspInit+0x44>)
 80006a0:	2101      	movs	r1, #1
 80006a2:	430a      	orrs	r2, r1
 80006a4:	619a      	str	r2, [r3, #24]
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_MspInit+0x44>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	2201      	movs	r2, #1
 80006ac:	4013      	ands	r3, r2
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <HAL_MspInit+0x44>)
 80006b4:	69da      	ldr	r2, [r3, #28]
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <HAL_MspInit+0x44>)
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	0549      	lsls	r1, r1, #21
 80006bc:	430a      	orrs	r2, r1
 80006be:	61da      	str	r2, [r3, #28]
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <HAL_MspInit+0x44>)
 80006c2:	69da      	ldr	r2, [r3, #28]
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	055b      	lsls	r3, r3, #21
 80006c8:	4013      	ands	r3, r2
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b002      	add	sp, #8
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	40021000 	.word	0x40021000

080006dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	2314      	movs	r3, #20
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	0018      	movs	r0, r3
 80006ea:	2314      	movs	r3, #20
 80006ec:	001a      	movs	r2, r3
 80006ee:	2100      	movs	r1, #0
 80006f0:	f006 fa97 	bl	8006c22 <memset>
  if(hcan->Instance==CAN)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a20      	ldr	r2, [pc, #128]	; (800077c <HAL_CAN_MspInit+0xa0>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d13a      	bne.n	8000774 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <HAL_CAN_MspInit+0xa4>)
 8000700:	69da      	ldr	r2, [r3, #28]
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <HAL_CAN_MspInit+0xa4>)
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	0489      	lsls	r1, r1, #18
 8000708:	430a      	orrs	r2, r1
 800070a:	61da      	str	r2, [r3, #28]
 800070c:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <HAL_CAN_MspInit+0xa4>)
 800070e:	69da      	ldr	r2, [r3, #28]
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	049b      	lsls	r3, r3, #18
 8000714:	4013      	ands	r3, r2
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <HAL_CAN_MspInit+0xa4>)
 800071c:	695a      	ldr	r2, [r3, #20]
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <HAL_CAN_MspInit+0xa4>)
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	02c9      	lsls	r1, r1, #11
 8000724:	430a      	orrs	r2, r1
 8000726:	615a      	str	r2, [r3, #20]
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <HAL_CAN_MspInit+0xa4>)
 800072a:	695a      	ldr	r2, [r3, #20]
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	02db      	lsls	r3, r3, #11
 8000730:	4013      	ands	r3, r2
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000736:	2114      	movs	r1, #20
 8000738:	187b      	adds	r3, r7, r1
 800073a:	22c0      	movs	r2, #192	; 0xc0
 800073c:	0092      	lsls	r2, r2, #2
 800073e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2202      	movs	r2, #2
 8000744:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2203      	movs	r2, #3
 8000750:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2204      	movs	r2, #4
 8000756:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000758:	187b      	adds	r3, r7, r1
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <HAL_CAN_MspInit+0xa8>)
 800075c:	0019      	movs	r1, r3
 800075e:	0010      	movs	r0, r2
 8000760:	f001 f84a 	bl	80017f8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	201e      	movs	r0, #30
 800076a:	f001 f813 	bl	8001794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800076e:	201e      	movs	r0, #30
 8000770:	f001 f825 	bl	80017be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b00a      	add	sp, #40	; 0x28
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40006400 	.word	0x40006400
 8000780:	40021000 	.word	0x40021000
 8000784:	48000400 	.word	0x48000400

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <HardFault_Handler+0x4>

08000798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b0:	f000 f894 	bl	80008dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007c0:	4b03      	ldr	r3, [pc, #12]	; (80007d0 <CEC_CAN_IRQHandler+0x14>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 fd39 	bl	800123a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	20000354 	.word	0x20000354

080007d4 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <USB_IRQHandler+0x14>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f001 fa8e 	bl	8001cfc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000848 	.word	0x20000848

080007ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <LoopForever+0x6>)
  ldr r1, =_edata
 80007fe:	490e      	ldr	r1, [pc, #56]	; (8000838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000800:	4a0e      	ldr	r2, [pc, #56]	; (800083c <LoopForever+0xe>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000814:	4c0b      	ldr	r4, [pc, #44]	; (8000844 <LoopForever+0x16>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000822:	f7ff ffe3 	bl	80007ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000826:	f006 f9cf 	bl	8006bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800082a:	f7ff fe67 	bl	80004fc <main>

0800082e <LoopForever>:

LoopForever:
    b LoopForever
 800082e:	e7fe      	b.n	800082e <LoopForever>
  ldr   r0, =_estack
 8000830:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 800083c:	08006d74 	.word	0x08006d74
  ldr r2, =_sbss
 8000840:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000844:	20000abc 	.word	0x20000abc

08000848 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC1_COMP_IRQHandler>
	...

0800084c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <HAL_Init+0x24>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_Init+0x24>)
 8000856:	2110      	movs	r1, #16
 8000858:	430a      	orrs	r2, r1
 800085a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800085c:	2000      	movs	r0, #0
 800085e:	f000 f809 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000862:	f7ff ff17 	bl	8000694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000866:	2300      	movs	r3, #0
}
 8000868:	0018      	movs	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	40022000 	.word	0x40022000

08000874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_InitTick+0x5c>)
 800087e:	681c      	ldr	r4, [r3, #0]
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <HAL_InitTick+0x60>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	0019      	movs	r1, r3
 8000886:	23fa      	movs	r3, #250	; 0xfa
 8000888:	0098      	lsls	r0, r3, #2
 800088a:	f7ff fc3d 	bl	8000108 <__udivsi3>
 800088e:	0003      	movs	r3, r0
 8000890:	0019      	movs	r1, r3
 8000892:	0020      	movs	r0, r4
 8000894:	f7ff fc38 	bl	8000108 <__udivsi3>
 8000898:	0003      	movs	r3, r0
 800089a:	0018      	movs	r0, r3
 800089c:	f000 ff9f 	bl	80017de <HAL_SYSTICK_Config>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d001      	beq.n	80008a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008a4:	2301      	movs	r3, #1
 80008a6:	e00f      	b.n	80008c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	d80b      	bhi.n	80008c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	2301      	movs	r3, #1
 80008b2:	425b      	negs	r3, r3
 80008b4:	2200      	movs	r2, #0
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 ff6c 	bl	8001794 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_InitTick+0x64>)
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008c2:	2300      	movs	r3, #0
 80008c4:	e000      	b.n	80008c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	0018      	movs	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b003      	add	sp, #12
 80008ce:	bd90      	pop	{r4, r7, pc}
 80008d0:	20000000 	.word	0x20000000
 80008d4:	20000008 	.word	0x20000008
 80008d8:	20000004 	.word	0x20000004

080008dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_IncTick+0x1c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	001a      	movs	r2, r3
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_IncTick+0x20>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	18d2      	adds	r2, r2, r3
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <HAL_IncTick+0x20>)
 80008ee:	601a      	str	r2, [r3, #0]
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000380 	.word	0x20000380

08000900 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  return uwTick;
 8000904:	4b02      	ldr	r3, [pc, #8]	; (8000910 <HAL_GetTick+0x10>)
 8000906:	681b      	ldr	r3, [r3, #0]
}
 8000908:	0018      	movs	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	20000380 	.word	0x20000380

08000914 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d101      	bne.n	8000926 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e0f0      	b.n	8000b08 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2220      	movs	r2, #32
 800092a:	5c9b      	ldrb	r3, [r3, r2]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d103      	bne.n	800093a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	0018      	movs	r0, r3
 8000936:	f7ff fed1 	bl	80006dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2102      	movs	r1, #2
 8000946:	438a      	bics	r2, r1
 8000948:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800094a:	f7ff ffd9 	bl	8000900 <HAL_GetTick>
 800094e:	0003      	movs	r3, r0
 8000950:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000952:	e013      	b.n	800097c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000954:	f7ff ffd4 	bl	8000900 <HAL_GetTick>
 8000958:	0002      	movs	r2, r0
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	2b0a      	cmp	r3, #10
 8000960:	d90c      	bls.n	800097c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	0292      	lsls	r2, r2, #10
 800096a:	431a      	orrs	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2220      	movs	r2, #32
 8000974:	2105      	movs	r1, #5
 8000976:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000978:	2301      	movs	r3, #1
 800097a:	e0c5      	b.n	8000b08 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	2202      	movs	r2, #2
 8000984:	4013      	ands	r3, r2
 8000986:	d1e5      	bne.n	8000954 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2101      	movs	r1, #1
 8000994:	430a      	orrs	r2, r1
 8000996:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000998:	f7ff ffb2 	bl	8000900 <HAL_GetTick>
 800099c:	0003      	movs	r3, r0
 800099e:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009a0:	e013      	b.n	80009ca <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009a2:	f7ff ffad 	bl	8000900 <HAL_GetTick>
 80009a6:	0002      	movs	r2, r0
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	2b0a      	cmp	r3, #10
 80009ae:	d90c      	bls.n	80009ca <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	0292      	lsls	r2, r2, #10
 80009b8:	431a      	orrs	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2220      	movs	r2, #32
 80009c2:	2105      	movs	r1, #5
 80009c4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e09e      	b.n	8000b08 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	4013      	ands	r3, r2
 80009d4:	d0e5      	beq.n	80009a2 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	7e1b      	ldrb	r3, [r3, #24]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d108      	bne.n	80009f0 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2180      	movs	r1, #128	; 0x80
 80009ea:	430a      	orrs	r2, r1
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	e007      	b.n	8000a00 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2180      	movs	r1, #128	; 0x80
 80009fc:	438a      	bics	r2, r1
 80009fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	7e5b      	ldrb	r3, [r3, #25]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d108      	bne.n	8000a1a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2140      	movs	r1, #64	; 0x40
 8000a14:	430a      	orrs	r2, r1
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	e007      	b.n	8000a2a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2140      	movs	r1, #64	; 0x40
 8000a26:	438a      	bics	r2, r1
 8000a28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	7e9b      	ldrb	r3, [r3, #26]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d108      	bne.n	8000a44 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	e007      	b.n	8000a54 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2120      	movs	r1, #32
 8000a50:	438a      	bics	r2, r1
 8000a52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	7edb      	ldrb	r3, [r3, #27]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d108      	bne.n	8000a6e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2110      	movs	r1, #16
 8000a68:	438a      	bics	r2, r1
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	e007      	b.n	8000a7e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2110      	movs	r1, #16
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	7f1b      	ldrb	r3, [r3, #28]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d108      	bne.n	8000a98 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2108      	movs	r1, #8
 8000a92:	430a      	orrs	r2, r1
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	e007      	b.n	8000aa8 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2108      	movs	r1, #8
 8000aa4:	438a      	bics	r2, r1
 8000aa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	7f5b      	ldrb	r3, [r3, #29]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d108      	bne.n	8000ac2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2104      	movs	r1, #4
 8000abc:	430a      	orrs	r2, r1
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e007      	b.n	8000ad2 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2104      	movs	r1, #4
 8000ace:	438a      	bics	r2, r1
 8000ad0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	689a      	ldr	r2, [r3, #8]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	431a      	orrs	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	0011      	movs	r1, r2
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	1e5a      	subs	r2, r3, #1
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	430a      	orrs	r2, r1
 8000af6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2220      	movs	r2, #32
 8000b02:	2101      	movs	r1, #1
 8000b04:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	0018      	movs	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b004      	add	sp, #16
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b20:	2013      	movs	r0, #19
 8000b22:	183b      	adds	r3, r7, r0
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	2120      	movs	r1, #32
 8000b28:	5c52      	ldrb	r2, [r2, r1]
 8000b2a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b2c:	183b      	adds	r3, r7, r0
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d005      	beq.n	8000b40 <HAL_CAN_ConfigFilter+0x30>
 8000b34:	2313      	movs	r3, #19
 8000b36:	18fb      	adds	r3, r7, r3
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d000      	beq.n	8000b40 <HAL_CAN_ConfigFilter+0x30>
 8000b3e:	e0cd      	b.n	8000cdc <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	58d3      	ldr	r3, [r2, r3]
 8000b48:	2201      	movs	r2, #1
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	0011      	movs	r1, r2
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	221f      	movs	r2, #31
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	2201      	movs	r2, #1
 8000b60:	409a      	lsls	r2, r3
 8000b62:	0013      	movs	r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b66:	697a      	ldr	r2, [r7, #20]
 8000b68:	2387      	movs	r3, #135	; 0x87
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	58d3      	ldr	r3, [r2, r3]
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	43d2      	mvns	r2, r2
 8000b72:	401a      	ands	r2, r3
 8000b74:	0011      	movs	r1, r2
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	2387      	movs	r3, #135	; 0x87
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d129      	bne.n	8000bda <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	2383      	movs	r3, #131	; 0x83
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	58d3      	ldr	r3, [r2, r3]
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	43d2      	mvns	r2, r2
 8000b92:	401a      	ands	r2, r3
 8000b94:	0011      	movs	r1, r2
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	2383      	movs	r3, #131	; 0x83
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	041b      	lsls	r3, r3, #16
 8000baa:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bb0:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3248      	adds	r2, #72	; 0x48
 8000bb6:	00d2      	lsls	r2, r2, #3
 8000bb8:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	041b      	lsls	r3, r3, #16
 8000bc6:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bcc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bce:	6979      	ldr	r1, [r7, #20]
 8000bd0:	3348      	adds	r3, #72	; 0x48
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	18cb      	adds	r3, r1, r3
 8000bd6:	3304      	adds	r3, #4
 8000bd8:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d128      	bne.n	8000c34 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	2383      	movs	r3, #131	; 0x83
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	58d2      	ldr	r2, [r2, r3]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	431a      	orrs	r2, r3
 8000bee:	0011      	movs	r1, r2
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	2383      	movs	r3, #131	; 0x83
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	041b      	lsls	r3, r3, #16
 8000c04:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c0a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	3248      	adds	r2, #72	; 0x48
 8000c10:	00d2      	lsls	r2, r2, #3
 8000c12:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	041b      	lsls	r3, r3, #16
 8000c20:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c26:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c28:	6979      	ldr	r1, [r7, #20]
 8000c2a:	3348      	adds	r3, #72	; 0x48
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	18cb      	adds	r3, r1, r3
 8000c30:	3304      	adds	r3, #4
 8000c32:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d10c      	bne.n	8000c56 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	2381      	movs	r3, #129	; 0x81
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	58d3      	ldr	r3, [r2, r3]
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	43d2      	mvns	r2, r2
 8000c48:	401a      	ands	r2, r3
 8000c4a:	0011      	movs	r1, r2
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	2381      	movs	r3, #129	; 0x81
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	50d1      	str	r1, [r2, r3]
 8000c54:	e00a      	b.n	8000c6c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	2381      	movs	r3, #129	; 0x81
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	58d2      	ldr	r2, [r2, r3]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	431a      	orrs	r2, r3
 8000c62:	0011      	movs	r1, r2
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	2381      	movs	r3, #129	; 0x81
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d10c      	bne.n	8000c8e <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	2385      	movs	r3, #133	; 0x85
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	58d3      	ldr	r3, [r2, r3]
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	43d2      	mvns	r2, r2
 8000c80:	401a      	ands	r2, r3
 8000c82:	0011      	movs	r1, r2
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	2385      	movs	r3, #133	; 0x85
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	50d1      	str	r1, [r2, r3]
 8000c8c:	e00a      	b.n	8000ca4 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	2385      	movs	r3, #133	; 0x85
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	58d2      	ldr	r2, [r2, r3]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	0011      	movs	r1, r2
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	2385      	movs	r3, #133	; 0x85
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	6a1b      	ldr	r3, [r3, #32]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d10a      	bne.n	8000cc2 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	2387      	movs	r3, #135	; 0x87
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	58d2      	ldr	r2, [r2, r3]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	431a      	orrs	r2, r3
 8000cb8:	0011      	movs	r1, r2
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	2387      	movs	r3, #135	; 0x87
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	58d3      	ldr	r3, [r2, r3]
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4393      	bics	r3, r2
 8000cce:	0019      	movs	r1, r3
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	e007      	b.n	8000cec <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	02d2      	lsls	r2, r2, #11
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
  }
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b006      	add	sp, #24
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2220      	movs	r2, #32
 8000d00:	5c9b      	ldrb	r3, [r3, r2]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d12f      	bne.n	8000d68 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2220      	movs	r2, #32
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	438a      	bics	r2, r1
 8000d1e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d20:	f7ff fdee 	bl	8000900 <HAL_GetTick>
 8000d24:	0003      	movs	r3, r0
 8000d26:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d28:	e013      	b.n	8000d52 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d2a:	f7ff fde9 	bl	8000900 <HAL_GetTick>
 8000d2e:	0002      	movs	r2, r0
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2b0a      	cmp	r3, #10
 8000d36:	d90c      	bls.n	8000d52 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3c:	2280      	movs	r2, #128	; 0x80
 8000d3e:	0292      	lsls	r2, r2, #10
 8000d40:	431a      	orrs	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2220      	movs	r2, #32
 8000d4a:	2105      	movs	r1, #5
 8000d4c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e012      	b.n	8000d78 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	d1e5      	bne.n	8000d2a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	e007      	b.n	8000d78 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6c:	2280      	movs	r2, #128	; 0x80
 8000d6e:	0312      	lsls	r2, r2, #12
 8000d70:	431a      	orrs	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
  }
}
 8000d78:	0018      	movs	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b004      	add	sp, #16
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d8e:	201f      	movs	r0, #31
 8000d90:	183b      	adds	r3, r7, r0
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	2120      	movs	r1, #32
 8000d96:	5c52      	ldrb	r2, [r2, r1]
 8000d98:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000da2:	183b      	adds	r3, r7, r0
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d005      	beq.n	8000db6 <HAL_CAN_AddTxMessage+0x36>
 8000daa:	231f      	movs	r3, #31
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d000      	beq.n	8000db6 <HAL_CAN_AddTxMessage+0x36>
 8000db4:	e0b7      	b.n	8000f26 <HAL_CAN_AddTxMessage+0x1a6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	04db      	lsls	r3, r3, #19
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	d10a      	bne.n	8000dd6 <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	051b      	lsls	r3, r3, #20
 8000dc6:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000dc8:	d105      	bne.n	8000dd6 <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	055b      	lsls	r3, r3, #21
 8000dd0:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000dd2:	d100      	bne.n	8000dd6 <HAL_CAN_AddTxMessage+0x56>
 8000dd4:	e09e      	b.n	8000f14 <HAL_CAN_AddTxMessage+0x194>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	0e1b      	lsrs	r3, r3, #24
 8000dda:	2203      	movs	r2, #3
 8000ddc:	4013      	ands	r3, r2
 8000dde:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d908      	bls.n	8000df8 <HAL_CAN_AddTxMessage+0x78>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	2280      	movs	r2, #128	; 0x80
 8000dec:	0412      	lsls	r2, r2, #16
 8000dee:	431a      	orrs	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e09e      	b.n	8000f36 <HAL_CAN_AddTxMessage+0x1b6>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	409a      	lsls	r2, r3
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10c      	bne.n	8000e24 <HAL_CAN_AddTxMessage+0xa4>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4311      	orrs	r1, r2
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	3218      	adds	r2, #24
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	50d1      	str	r1, [r2, r3]
 8000e22:	e00f      	b.n	8000e44 <HAL_CAN_AddTxMessage+0xc4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8000e3a:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	3218      	adds	r2, #24
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	6819      	ldr	r1, [r3, #0]
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	691a      	ldr	r2, [r3, #16]
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	3318      	adds	r3, #24
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	18cb      	adds	r3, r1, r3
 8000e54:	3304      	adds	r3, #4
 8000e56:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	7d1b      	ldrb	r3, [r3, #20]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d112      	bne.n	8000e86 <HAL_CAN_AddTxMessage+0x106>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	3318      	adds	r3, #24
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	18d3      	adds	r3, r2, r3
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6819      	ldr	r1, [r3, #0]
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3318      	adds	r3, #24
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	18cb      	adds	r3, r1, r3
 8000e82:	3304      	adds	r3, #4
 8000e84:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3307      	adds	r3, #7
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	061a      	lsls	r2, r3, #24
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3306      	adds	r3, #6
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	041b      	lsls	r3, r3, #16
 8000e96:	431a      	orrs	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3305      	adds	r3, #5
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6818      	ldr	r0, [r3, #0]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	6979      	ldr	r1, [r7, #20]
 8000eb2:	23c6      	movs	r3, #198	; 0xc6
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	0109      	lsls	r1, r1, #4
 8000eb8:	1841      	adds	r1, r0, r1
 8000eba:	18cb      	adds	r3, r1, r3
 8000ebc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3303      	adds	r3, #3
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	061a      	lsls	r2, r3, #24
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3302      	adds	r3, #2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	041b      	lsls	r3, r3, #16
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	0019      	movs	r1, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	6979      	ldr	r1, [r7, #20]
 8000ee8:	23c4      	movs	r3, #196	; 0xc4
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	0109      	lsls	r1, r1, #4
 8000eee:	1841      	adds	r1, r0, r1
 8000ef0:	18cb      	adds	r3, r1, r3
 8000ef2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	3218      	adds	r2, #24
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	58d2      	ldr	r2, [r2, r3]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2101      	movs	r1, #1
 8000f06:	4311      	orrs	r1, r2
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	3218      	adds	r2, #24
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	e010      	b.n	8000f36 <HAL_CAN_AddTxMessage+0x1b6>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	2280      	movs	r2, #128	; 0x80
 8000f1a:	0392      	lsls	r2, r2, #14
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e007      	b.n	8000f36 <HAL_CAN_AddTxMessage+0x1b6>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2a:	2280      	movs	r2, #128	; 0x80
 8000f2c:	02d2      	lsls	r2, r2, #11
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
  }
}
 8000f36:	0018      	movs	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b008      	add	sp, #32
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b084      	sub	sp, #16
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f4a:	200b      	movs	r0, #11
 8000f4c:	183b      	adds	r3, r7, r0
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	2120      	movs	r1, #32
 8000f52:	5c52      	ldrb	r2, [r2, r1]
 8000f54:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f56:	183b      	adds	r3, r7, r0
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d004      	beq.n	8000f68 <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 8000f5e:	230b      	movs	r3, #11
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d11d      	bne.n	8000fa4 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	04db      	lsls	r3, r3, #19
 8000f72:	4013      	ands	r3, r2
 8000f74:	d002      	beq.n	8000f7c <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689a      	ldr	r2, [r3, #8]
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	051b      	lsls	r3, r3, #20
 8000f86:	4013      	ands	r3, r2
 8000f88:	d002      	beq.n	8000f90 <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	055b      	lsls	r3, r3, #21
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	d002      	beq.n	8000fa4 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
}
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b004      	add	sp, #16
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fbc:	2017      	movs	r0, #23
 8000fbe:	183b      	adds	r3, r7, r0
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	2120      	movs	r1, #32
 8000fc4:	5c52      	ldrb	r2, [r2, r1]
 8000fc6:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fc8:	183b      	adds	r3, r7, r0
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d005      	beq.n	8000fdc <HAL_CAN_GetRxMessage+0x2e>
 8000fd0:	2317      	movs	r3, #23
 8000fd2:	18fb      	adds	r3, r7, r3
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d000      	beq.n	8000fdc <HAL_CAN_GetRxMessage+0x2e>
 8000fda:	e0f8      	b.n	80011ce <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10e      	bne.n	8001000 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	4013      	ands	r3, r2
 8000fec:	d117      	bne.n	800101e <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	0392      	lsls	r2, r2, #14
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e0ee      	b.n	80011de <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	2203      	movs	r2, #3
 8001008:	4013      	ands	r3, r2
 800100a:	d108      	bne.n	800101e <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	0392      	lsls	r2, r2, #14
 8001014:	431a      	orrs	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e0df      	b.n	80011de <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	321b      	adds	r2, #27
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	58d3      	ldr	r3, [r2, r3]
 800102a:	2204      	movs	r2, #4
 800102c:	401a      	ands	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10b      	bne.n	8001052 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	321b      	adds	r2, #27
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	58d3      	ldr	r3, [r2, r3]
 8001046:	0d5b      	lsrs	r3, r3, #21
 8001048:	055b      	lsls	r3, r3, #21
 800104a:	0d5a      	lsrs	r2, r3, #21
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	e00a      	b.n	8001068 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	321b      	adds	r2, #27
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	58d3      	ldr	r3, [r2, r3]
 800105e:	08db      	lsrs	r3, r3, #3
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68ba      	ldr	r2, [r7, #8]
 800106e:	321b      	adds	r2, #27
 8001070:	0112      	lsls	r2, r2, #4
 8001072:	58d3      	ldr	r3, [r2, r3]
 8001074:	2202      	movs	r2, #2
 8001076:	401a      	ands	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	331b      	adds	r3, #27
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	18d3      	adds	r3, r2, r3
 8001088:	3304      	adds	r3, #4
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	220f      	movs	r2, #15
 800108e:	401a      	ands	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	331b      	adds	r3, #27
 800109c:	011b      	lsls	r3, r3, #4
 800109e:	18d3      	adds	r3, r2, r3
 80010a0:	3304      	adds	r3, #4
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	22ff      	movs	r2, #255	; 0xff
 80010a8:	401a      	ands	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	331b      	adds	r3, #27
 80010b6:	011b      	lsls	r3, r3, #4
 80010b8:	18d3      	adds	r3, r2, r3
 80010ba:	3304      	adds	r3, #4
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	0c1b      	lsrs	r3, r3, #16
 80010c0:	041b      	lsls	r3, r3, #16
 80010c2:	0c1a      	lsrs	r2, r3, #16
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6819      	ldr	r1, [r3, #0]
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	23dc      	movs	r3, #220	; 0xdc
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	188a      	adds	r2, r1, r2
 80010d6:	18d3      	adds	r3, r2, r3
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6819      	ldr	r1, [r3, #0]
 80010e4:	68ba      	ldr	r2, [r7, #8]
 80010e6:	23dc      	movs	r3, #220	; 0xdc
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	188a      	adds	r2, r1, r2
 80010ee:	18d3      	adds	r3, r2, r3
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	0a1a      	lsrs	r2, r3, #8
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6819      	ldr	r1, [r3, #0]
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	23dc      	movs	r3, #220	; 0xdc
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	188a      	adds	r2, r1, r2
 800110a:	18d3      	adds	r3, r2, r3
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	0c1a      	lsrs	r2, r3, #16
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	3302      	adds	r3, #2
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6819      	ldr	r1, [r3, #0]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	23dc      	movs	r3, #220	; 0xdc
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	0112      	lsls	r2, r2, #4
 8001124:	188a      	adds	r2, r1, r2
 8001126:	18d3      	adds	r3, r2, r3
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	0e1a      	lsrs	r2, r3, #24
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	3303      	adds	r3, #3
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6819      	ldr	r1, [r3, #0]
 8001138:	68ba      	ldr	r2, [r7, #8]
 800113a:	23de      	movs	r3, #222	; 0xde
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	188a      	adds	r2, r1, r2
 8001142:	18d3      	adds	r3, r2, r3
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	3304      	adds	r3, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6819      	ldr	r1, [r3, #0]
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	23de      	movs	r3, #222	; 0xde
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	188a      	adds	r2, r1, r2
 800115c:	18d3      	adds	r3, r2, r3
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	0a1a      	lsrs	r2, r3, #8
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	3305      	adds	r3, #5
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6819      	ldr	r1, [r3, #0]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	23de      	movs	r3, #222	; 0xde
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	188a      	adds	r2, r1, r2
 8001178:	18d3      	adds	r3, r2, r3
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	0c1a      	lsrs	r2, r3, #16
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	3306      	adds	r3, #6
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6819      	ldr	r1, [r3, #0]
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	23de      	movs	r3, #222	; 0xde
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	188a      	adds	r2, r1, r2
 8001194:	18d3      	adds	r3, r2, r3
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	0e1a      	lsrs	r2, r3, #24
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	3307      	adds	r3, #7
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d108      	bne.n	80011ba <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2120      	movs	r1, #32
 80011b4:	430a      	orrs	r2, r1
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	e007      	b.n	80011ca <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2120      	movs	r1, #32
 80011c6:	430a      	orrs	r2, r1
 80011c8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e007      	b.n	80011de <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	2280      	movs	r2, #128	; 0x80
 80011d4:	02d2      	lsls	r2, r2, #11
 80011d6:	431a      	orrs	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
  }
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b006      	add	sp, #24
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b084      	sub	sp, #16
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011f0:	200f      	movs	r0, #15
 80011f2:	183b      	adds	r3, r7, r0
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	2120      	movs	r1, #32
 80011f8:	5c52      	ldrb	r2, [r2, r1]
 80011fa:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80011fc:	183b      	adds	r3, r7, r0
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d004      	beq.n	800120e <HAL_CAN_ActivateNotification+0x28>
 8001204:	230f      	movs	r3, #15
 8001206:	18fb      	adds	r3, r7, r3
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d109      	bne.n	8001222 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6959      	ldr	r1, [r3, #20]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	430a      	orrs	r2, r1
 800121c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e007      	b.n	8001232 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	2280      	movs	r2, #128	; 0x80
 8001228:	02d2      	lsls	r2, r2, #11
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
  }
}
 8001232:	0018      	movs	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	b004      	add	sp, #16
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b08a      	sub	sp, #40	; 0x28
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	2201      	movs	r2, #1
 800127a:	4013      	ands	r3, r2
 800127c:	d100      	bne.n	8001280 <HAL_CAN_IRQHandler+0x46>
 800127e:	e084      	b.n	800138a <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2201      	movs	r2, #1
 8001284:	4013      	ands	r3, r2
 8001286:	d024      	beq.n	80012d2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2201      	movs	r2, #1
 800128e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	2202      	movs	r2, #2
 8001294:	4013      	ands	r3, r2
 8001296:	d004      	beq.n	80012a2 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	0018      	movs	r0, r3
 800129c:	f7ff f8dc 	bl	8000458 <HAL_CAN_TxMailbox0CompleteCallback>
 80012a0:	e017      	b.n	80012d2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	2204      	movs	r2, #4
 80012a6:	4013      	ands	r3, r2
 80012a8:	d005      	beq.n	80012b6 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	4313      	orrs	r3, r2
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
 80012b4:	e00d      	b.n	80012d2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2208      	movs	r2, #8
 80012ba:	4013      	ands	r3, r2
 80012bc:	d005      	beq.n	80012ca <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	2280      	movs	r2, #128	; 0x80
 80012c2:	0152      	lsls	r2, r2, #5
 80012c4:	4313      	orrs	r3, r2
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
 80012c8:	e003      	b.n	80012d2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	0018      	movs	r0, r3
 80012ce:	f000 f975 	bl	80015bc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4013      	ands	r3, r2
 80012da:	d028      	beq.n	800132e <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2280      	movs	r2, #128	; 0x80
 80012e2:	0052      	lsls	r2, r2, #1
 80012e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4013      	ands	r3, r2
 80012ee:	d004      	beq.n	80012fa <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	0018      	movs	r0, r3
 80012f4:	f000 f952 	bl	800159c <HAL_CAN_TxMailbox1CompleteCallback>
 80012f8:	e019      	b.n	800132e <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4013      	ands	r3, r2
 8001302:	d005      	beq.n	8001310 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	0192      	lsls	r2, r2, #6
 800130a:	4313      	orrs	r3, r2
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
 800130e:	e00e      	b.n	800132e <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	4013      	ands	r3, r2
 8001318:	d005      	beq.n	8001326 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	2280      	movs	r2, #128	; 0x80
 800131e:	01d2      	lsls	r2, r2, #7
 8001320:	4313      	orrs	r3, r2
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
 8001324:	e003      	b.n	800132e <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	0018      	movs	r0, r3
 800132a:	f000 f94f 	bl	80015cc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	025b      	lsls	r3, r3, #9
 8001334:	4013      	ands	r3, r2
 8001336:	d028      	beq.n	800138a <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	0252      	lsls	r2, r2, #9
 8001340:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	029b      	lsls	r3, r3, #10
 8001348:	4013      	ands	r3, r2
 800134a:	d004      	beq.n	8001356 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	0018      	movs	r0, r3
 8001350:	f000 f92c 	bl	80015ac <HAL_CAN_TxMailbox2CompleteCallback>
 8001354:	e019      	b.n	800138a <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	02db      	lsls	r3, r3, #11
 800135c:	4013      	ands	r3, r2
 800135e:	d005      	beq.n	800136c <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	0212      	lsls	r2, r2, #8
 8001366:	4313      	orrs	r3, r2
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
 800136a:	e00e      	b.n	800138a <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	031b      	lsls	r3, r3, #12
 8001372:	4013      	ands	r3, r2
 8001374:	d005      	beq.n	8001382 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	2280      	movs	r2, #128	; 0x80
 800137a:	0252      	lsls	r2, r2, #9
 800137c:	4313      	orrs	r3, r2
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
 8001380:	e003      	b.n	800138a <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	0018      	movs	r0, r3
 8001386:	f000 f929 	bl	80015dc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	2208      	movs	r2, #8
 800138e:	4013      	ands	r3, r2
 8001390:	d00c      	beq.n	80013ac <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2210      	movs	r2, #16
 8001396:	4013      	ands	r3, r2
 8001398:	d008      	beq.n	80013ac <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	2280      	movs	r2, #128	; 0x80
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	4313      	orrs	r3, r2
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2210      	movs	r2, #16
 80013aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80013ac:	6a3b      	ldr	r3, [r7, #32]
 80013ae:	2204      	movs	r2, #4
 80013b0:	4013      	ands	r3, r2
 80013b2:	d00b      	beq.n	80013cc <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2208      	movs	r2, #8
 80013b8:	4013      	ands	r3, r2
 80013ba:	d007      	beq.n	80013cc <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2208      	movs	r2, #8
 80013c2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	0018      	movs	r0, r3
 80013c8:	f000 f910 	bl	80015ec <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	2202      	movs	r2, #2
 80013d0:	4013      	ands	r3, r2
 80013d2:	d009      	beq.n	80013e8 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	2203      	movs	r2, #3
 80013dc:	4013      	ands	r3, r2
 80013de:	d003      	beq.n	80013e8 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	0018      	movs	r0, r3
 80013e4:	f7ff f846 	bl	8000474 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	2240      	movs	r2, #64	; 0x40
 80013ec:	4013      	ands	r3, r2
 80013ee:	d00c      	beq.n	800140a <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	2210      	movs	r2, #16
 80013f4:	4013      	ands	r3, r2
 80013f6:	d008      	beq.n	800140a <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	00d2      	lsls	r2, r2, #3
 80013fe:	4313      	orrs	r3, r2
 8001400:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2210      	movs	r2, #16
 8001408:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	2220      	movs	r2, #32
 800140e:	4013      	ands	r3, r2
 8001410:	d00b      	beq.n	800142a <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	2208      	movs	r2, #8
 8001416:	4013      	ands	r3, r2
 8001418:	d007      	beq.n	800142a <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2208      	movs	r2, #8
 8001420:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	0018      	movs	r0, r3
 8001426:	f000 f8f1 	bl	800160c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	2210      	movs	r2, #16
 800142e:	4013      	ands	r3, r2
 8001430:	d009      	beq.n	8001446 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	2203      	movs	r2, #3
 800143a:	4013      	ands	r3, r2
 800143c:	d003      	beq.n	8001446 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	0018      	movs	r0, r3
 8001442:	f000 f8db 	bl	80015fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001446:	6a3a      	ldr	r2, [r7, #32]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	029b      	lsls	r3, r3, #10
 800144c:	4013      	ands	r3, r2
 800144e:	d00b      	beq.n	8001468 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	2210      	movs	r2, #16
 8001454:	4013      	ands	r3, r2
 8001456:	d007      	beq.n	8001468 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2210      	movs	r2, #16
 800145e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	0018      	movs	r0, r3
 8001464:	f000 f8da 	bl	800161c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001468:	6a3a      	ldr	r2, [r7, #32]
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	025b      	lsls	r3, r3, #9
 800146e:	4013      	ands	r3, r2
 8001470:	d00b      	beq.n	800148a <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	2208      	movs	r2, #8
 8001476:	4013      	ands	r3, r2
 8001478:	d007      	beq.n	800148a <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2208      	movs	r2, #8
 8001480:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	0018      	movs	r0, r3
 8001486:	f000 f8d1 	bl	800162c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800148a:	6a3a      	ldr	r2, [r7, #32]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	4013      	ands	r3, r2
 8001492:	d100      	bne.n	8001496 <HAL_CAN_IRQHandler+0x25c>
 8001494:	e071      	b.n	800157a <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	2204      	movs	r2, #4
 800149a:	4013      	ands	r3, r2
 800149c:	d100      	bne.n	80014a0 <HAL_CAN_IRQHandler+0x266>
 800149e:	e068      	b.n	8001572 <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014a0:	6a3a      	ldr	r2, [r7, #32]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4013      	ands	r3, r2
 80014a8:	d007      	beq.n	80014ba <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2201      	movs	r2, #1
 80014ae:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014b0:	d003      	beq.n	80014ba <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	2201      	movs	r2, #1
 80014b6:	4313      	orrs	r3, r2
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014ba:	6a3a      	ldr	r2, [r7, #32]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4013      	ands	r3, r2
 80014c2:	d007      	beq.n	80014d4 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2202      	movs	r2, #2
 80014c8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014ca:	d003      	beq.n	80014d4 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	2202      	movs	r2, #2
 80014d0:	4313      	orrs	r3, r2
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014d4:	6a3a      	ldr	r2, [r7, #32]
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4013      	ands	r3, r2
 80014dc:	d007      	beq.n	80014ee <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2204      	movs	r2, #4
 80014e2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014e4:	d003      	beq.n	80014ee <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	2204      	movs	r2, #4
 80014ea:	4313      	orrs	r3, r2
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014ee:	6a3a      	ldr	r2, [r7, #32]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4013      	ands	r3, r2
 80014f6:	d03c      	beq.n	8001572 <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2270      	movs	r2, #112	; 0x70
 80014fc:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014fe:	d038      	beq.n	8001572 <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2270      	movs	r2, #112	; 0x70
 8001504:	4013      	ands	r3, r2
 8001506:	2b30      	cmp	r3, #48	; 0x30
 8001508:	d016      	beq.n	8001538 <HAL_CAN_IRQHandler+0x2fe>
 800150a:	d804      	bhi.n	8001516 <HAL_CAN_IRQHandler+0x2dc>
 800150c:	2b10      	cmp	r3, #16
 800150e:	d009      	beq.n	8001524 <HAL_CAN_IRQHandler+0x2ea>
 8001510:	2b20      	cmp	r3, #32
 8001512:	d00c      	beq.n	800152e <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001514:	e025      	b.n	8001562 <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 8001516:	2b50      	cmp	r3, #80	; 0x50
 8001518:	d018      	beq.n	800154c <HAL_CAN_IRQHandler+0x312>
 800151a:	2b60      	cmp	r3, #96	; 0x60
 800151c:	d01b      	beq.n	8001556 <HAL_CAN_IRQHandler+0x31c>
 800151e:	2b40      	cmp	r3, #64	; 0x40
 8001520:	d00f      	beq.n	8001542 <HAL_CAN_IRQHandler+0x308>
            break;
 8001522:	e01e      	b.n	8001562 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	2208      	movs	r2, #8
 8001528:	4313      	orrs	r3, r2
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800152c:	e019      	b.n	8001562 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	2210      	movs	r2, #16
 8001532:	4313      	orrs	r3, r2
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001536:	e014      	b.n	8001562 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	2220      	movs	r2, #32
 800153c:	4313      	orrs	r3, r2
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001540:	e00f      	b.n	8001562 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	2240      	movs	r2, #64	; 0x40
 8001546:	4313      	orrs	r3, r2
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800154a:	e00a      	b.n	8001562 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	2280      	movs	r2, #128	; 0x80
 8001550:	4313      	orrs	r3, r2
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001554:	e005      	b.n	8001562 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	2280      	movs	r2, #128	; 0x80
 800155a:	0052      	lsls	r2, r2, #1
 800155c:	4313      	orrs	r3, r2
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001560:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	699a      	ldr	r2, [r3, #24]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2170      	movs	r1, #112	; 0x70
 800156e:	438a      	bics	r2, r1
 8001570:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2204      	movs	r2, #4
 8001578:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	2b00      	cmp	r3, #0
 800157e:	d009      	beq.n	8001594 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	0018      	movs	r0, r3
 8001590:	f7fe ff88 	bl	80004a4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001594:	46c0      	nop			; (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	b00a      	add	sp, #40	; 0x28
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b002      	add	sp, #8
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80015b4:	46c0      	nop			; (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b002      	add	sp, #8
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80015c4:	46c0      	nop			; (mov r8, r8)
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b002      	add	sp, #8
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b002      	add	sp, #8
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80015f4:	46c0      	nop			; (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b002      	add	sp, #8
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001604:	46c0      	nop			; (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	b002      	add	sp, #8
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001614:	46c0      	nop			; (mov r8, r8)
 8001616:	46bd      	mov	sp, r7
 8001618:	b002      	add	sp, #8
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001624:	46c0      	nop			; (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	b002      	add	sp, #8
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	b002      	add	sp, #8
 800163a:	bd80      	pop	{r7, pc}

0800163c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	0002      	movs	r2, r0
 8001644:	1dfb      	adds	r3, r7, #7
 8001646:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001648:	1dfb      	adds	r3, r7, #7
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b7f      	cmp	r3, #127	; 0x7f
 800164e:	d809      	bhi.n	8001664 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001650:	1dfb      	adds	r3, r7, #7
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	001a      	movs	r2, r3
 8001656:	231f      	movs	r3, #31
 8001658:	401a      	ands	r2, r3
 800165a:	4b04      	ldr	r3, [pc, #16]	; (800166c <__NVIC_EnableIRQ+0x30>)
 800165c:	2101      	movs	r1, #1
 800165e:	4091      	lsls	r1, r2
 8001660:	000a      	movs	r2, r1
 8001662:	601a      	str	r2, [r3, #0]
  }
}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	0002      	movs	r2, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	1dfb      	adds	r3, r7, #7
 800167c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800167e:	1dfb      	adds	r3, r7, #7
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b7f      	cmp	r3, #127	; 0x7f
 8001684:	d828      	bhi.n	80016d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001686:	4a2f      	ldr	r2, [pc, #188]	; (8001744 <__NVIC_SetPriority+0xd4>)
 8001688:	1dfb      	adds	r3, r7, #7
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b25b      	sxtb	r3, r3
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	33c0      	adds	r3, #192	; 0xc0
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	589b      	ldr	r3, [r3, r2]
 8001696:	1dfa      	adds	r2, r7, #7
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	0011      	movs	r1, r2
 800169c:	2203      	movs	r2, #3
 800169e:	400a      	ands	r2, r1
 80016a0:	00d2      	lsls	r2, r2, #3
 80016a2:	21ff      	movs	r1, #255	; 0xff
 80016a4:	4091      	lsls	r1, r2
 80016a6:	000a      	movs	r2, r1
 80016a8:	43d2      	mvns	r2, r2
 80016aa:	401a      	ands	r2, r3
 80016ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	019b      	lsls	r3, r3, #6
 80016b2:	22ff      	movs	r2, #255	; 0xff
 80016b4:	401a      	ands	r2, r3
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	0018      	movs	r0, r3
 80016bc:	2303      	movs	r3, #3
 80016be:	4003      	ands	r3, r0
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c4:	481f      	ldr	r0, [pc, #124]	; (8001744 <__NVIC_SetPriority+0xd4>)
 80016c6:	1dfb      	adds	r3, r7, #7
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	430a      	orrs	r2, r1
 80016d0:	33c0      	adds	r3, #192	; 0xc0
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016d6:	e031      	b.n	800173c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016d8:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <__NVIC_SetPriority+0xd8>)
 80016da:	1dfb      	adds	r3, r7, #7
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	0019      	movs	r1, r3
 80016e0:	230f      	movs	r3, #15
 80016e2:	400b      	ands	r3, r1
 80016e4:	3b08      	subs	r3, #8
 80016e6:	089b      	lsrs	r3, r3, #2
 80016e8:	3306      	adds	r3, #6
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	18d3      	adds	r3, r2, r3
 80016ee:	3304      	adds	r3, #4
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	1dfa      	adds	r2, r7, #7
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	0011      	movs	r1, r2
 80016f8:	2203      	movs	r2, #3
 80016fa:	400a      	ands	r2, r1
 80016fc:	00d2      	lsls	r2, r2, #3
 80016fe:	21ff      	movs	r1, #255	; 0xff
 8001700:	4091      	lsls	r1, r2
 8001702:	000a      	movs	r2, r1
 8001704:	43d2      	mvns	r2, r2
 8001706:	401a      	ands	r2, r3
 8001708:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	019b      	lsls	r3, r3, #6
 800170e:	22ff      	movs	r2, #255	; 0xff
 8001710:	401a      	ands	r2, r3
 8001712:	1dfb      	adds	r3, r7, #7
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	0018      	movs	r0, r3
 8001718:	2303      	movs	r3, #3
 800171a:	4003      	ands	r3, r0
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001720:	4809      	ldr	r0, [pc, #36]	; (8001748 <__NVIC_SetPriority+0xd8>)
 8001722:	1dfb      	adds	r3, r7, #7
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	001c      	movs	r4, r3
 8001728:	230f      	movs	r3, #15
 800172a:	4023      	ands	r3, r4
 800172c:	3b08      	subs	r3, #8
 800172e:	089b      	lsrs	r3, r3, #2
 8001730:	430a      	orrs	r2, r1
 8001732:	3306      	adds	r3, #6
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	18c3      	adds	r3, r0, r3
 8001738:	3304      	adds	r3, #4
 800173a:	601a      	str	r2, [r3, #0]
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b003      	add	sp, #12
 8001742:	bd90      	pop	{r4, r7, pc}
 8001744:	e000e100 	.word	0xe000e100
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	4a0c      	ldr	r2, [pc, #48]	; (800178c <SysTick_Config+0x40>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175e:	2301      	movs	r3, #1
 8001760:	e010      	b.n	8001784 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <SysTick_Config+0x44>)
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	3a01      	subs	r2, #1
 8001768:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176a:	2301      	movs	r3, #1
 800176c:	425b      	negs	r3, r3
 800176e:	2103      	movs	r1, #3
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff ff7d 	bl	8001670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <SysTick_Config+0x44>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <SysTick_Config+0x44>)
 800177e:	2207      	movs	r2, #7
 8001780:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001782:	2300      	movs	r3, #0
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	b002      	add	sp, #8
 800178a:	bd80      	pop	{r7, pc}
 800178c:	00ffffff 	.word	0x00ffffff
 8001790:	e000e010 	.word	0xe000e010

08001794 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	210f      	movs	r1, #15
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	1c02      	adds	r2, r0, #0
 80017a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	0011      	movs	r1, r2
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7ff ff5d 	bl	8001670 <__NVIC_SetPriority>
}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b004      	add	sp, #16
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	0002      	movs	r2, r0
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff ff33 	bl	800163c <__NVIC_EnableIRQ>
}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	46bd      	mov	sp, r7
 80017da:	b002      	add	sp, #8
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff ffaf 	bl	800174c <SysTick_Config>
 80017ee:	0003      	movs	r3, r0
}
 80017f0:	0018      	movs	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b002      	add	sp, #8
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001806:	e155      	b.n	8001ab4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2101      	movs	r1, #1
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4091      	lsls	r1, r2
 8001812:	000a      	movs	r2, r1
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d100      	bne.n	8001820 <HAL_GPIO_Init+0x28>
 800181e:	e146      	b.n	8001aae <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x38>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b12      	cmp	r3, #18
 800182e:	d123      	bne.n	8001878 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	08da      	lsrs	r2, r3, #3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3208      	adds	r2, #8
 8001838:	0092      	lsls	r2, r2, #2
 800183a:	58d3      	ldr	r3, [r2, r3]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	2207      	movs	r2, #7
 8001842:	4013      	ands	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	220f      	movs	r2, #15
 8001848:	409a      	lsls	r2, r3
 800184a:	0013      	movs	r3, r2
 800184c:	43da      	mvns	r2, r3
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2107      	movs	r1, #7
 800185c:	400b      	ands	r3, r1
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	409a      	lsls	r2, r3
 8001862:	0013      	movs	r3, r2
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	08da      	lsrs	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3208      	adds	r2, #8
 8001872:	0092      	lsls	r2, r2, #2
 8001874:	6939      	ldr	r1, [r7, #16]
 8001876:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	409a      	lsls	r2, r3
 8001886:	0013      	movs	r3, r2
 8001888:	43da      	mvns	r2, r3
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2203      	movs	r2, #3
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	409a      	lsls	r2, r3
 800189e:	0013      	movs	r3, r2
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d00b      	beq.n	80018cc <HAL_GPIO_Init+0xd4>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d007      	beq.n	80018cc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018c0:	2b11      	cmp	r3, #17
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b12      	cmp	r3, #18
 80018ca:	d130      	bne.n	800192e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	409a      	lsls	r2, r3
 80018da:	0013      	movs	r3, r2
 80018dc:	43da      	mvns	r2, r3
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	409a      	lsls	r2, r3
 80018ee:	0013      	movs	r3, r2
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001902:	2201      	movs	r2, #1
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
 8001908:	0013      	movs	r3, r2
 800190a:	43da      	mvns	r2, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	2201      	movs	r2, #1
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
 8001920:	0013      	movs	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	409a      	lsls	r2, r3
 800193c:	0013      	movs	r3, r2
 800193e:	43da      	mvns	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	409a      	lsls	r2, r3
 8001950:	0013      	movs	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	055b      	lsls	r3, r3, #21
 8001966:	4013      	ands	r3, r2
 8001968:	d100      	bne.n	800196c <HAL_GPIO_Init+0x174>
 800196a:	e0a0      	b.n	8001aae <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196c:	4b57      	ldr	r3, [pc, #348]	; (8001acc <HAL_GPIO_Init+0x2d4>)
 800196e:	699a      	ldr	r2, [r3, #24]
 8001970:	4b56      	ldr	r3, [pc, #344]	; (8001acc <HAL_GPIO_Init+0x2d4>)
 8001972:	2101      	movs	r1, #1
 8001974:	430a      	orrs	r2, r1
 8001976:	619a      	str	r2, [r3, #24]
 8001978:	4b54      	ldr	r3, [pc, #336]	; (8001acc <HAL_GPIO_Init+0x2d4>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2201      	movs	r2, #1
 800197e:	4013      	ands	r3, r2
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001984:	4a52      	ldr	r2, [pc, #328]	; (8001ad0 <HAL_GPIO_Init+0x2d8>)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	089b      	lsrs	r3, r3, #2
 800198a:	3302      	adds	r3, #2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	589b      	ldr	r3, [r3, r2]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2203      	movs	r2, #3
 8001996:	4013      	ands	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	220f      	movs	r2, #15
 800199c:	409a      	lsls	r2, r3
 800199e:	0013      	movs	r3, r2
 80019a0:	43da      	mvns	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	2390      	movs	r3, #144	; 0x90
 80019ac:	05db      	lsls	r3, r3, #23
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d019      	beq.n	80019e6 <HAL_GPIO_Init+0x1ee>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a47      	ldr	r2, [pc, #284]	; (8001ad4 <HAL_GPIO_Init+0x2dc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d013      	beq.n	80019e2 <HAL_GPIO_Init+0x1ea>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a46      	ldr	r2, [pc, #280]	; (8001ad8 <HAL_GPIO_Init+0x2e0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00d      	beq.n	80019de <HAL_GPIO_Init+0x1e6>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a45      	ldr	r2, [pc, #276]	; (8001adc <HAL_GPIO_Init+0x2e4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d007      	beq.n	80019da <HAL_GPIO_Init+0x1e2>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a44      	ldr	r2, [pc, #272]	; (8001ae0 <HAL_GPIO_Init+0x2e8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d101      	bne.n	80019d6 <HAL_GPIO_Init+0x1de>
 80019d2:	2304      	movs	r3, #4
 80019d4:	e008      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019d6:	2305      	movs	r3, #5
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019da:	2303      	movs	r3, #3
 80019dc:	e004      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019de:	2302      	movs	r3, #2
 80019e0:	e002      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019e6:	2300      	movs	r3, #0
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	2103      	movs	r1, #3
 80019ec:	400a      	ands	r2, r1
 80019ee:	0092      	lsls	r2, r2, #2
 80019f0:	4093      	lsls	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019f8:	4935      	ldr	r1, [pc, #212]	; (8001ad0 <HAL_GPIO_Init+0x2d8>)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a06:	4b37      	ldr	r3, [pc, #220]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	025b      	lsls	r3, r3, #9
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a30:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43da      	mvns	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	029b      	lsls	r3, r3, #10
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a54:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a5a:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43da      	mvns	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	035b      	lsls	r3, r3, #13
 8001a72:	4013      	ands	r3, r2
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43da      	mvns	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	039b      	lsls	r3, r3, #14
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	40da      	lsrs	r2, r3
 8001abc:	1e13      	subs	r3, r2, #0
 8001abe:	d000      	beq.n	8001ac2 <HAL_GPIO_Init+0x2ca>
 8001ac0:	e6a2      	b.n	8001808 <HAL_GPIO_Init+0x10>
  } 
}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b006      	add	sp, #24
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	48000400 	.word	0x48000400
 8001ad8:	48000800 	.word	0x48000800
 8001adc:	48000c00 	.word	0x48000c00
 8001ae0:	48001000 	.word	0x48001000
 8001ae4:	40010400 	.word	0x40010400

08001ae8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aea:	b08b      	sub	sp, #44	; 0x2c
 8001aec:	af06      	add	r7, sp, #24
 8001aee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e0d4      	b.n	8001ca4 <HAL_PCD_Init+0x1bc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a6b      	ldr	r2, [pc, #428]	; (8001cac <HAL_PCD_Init+0x1c4>)
 8001afe:	5c9b      	ldrb	r3, [r3, r2]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d108      	bne.n	8001b18 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	238a      	movs	r3, #138	; 0x8a
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	0018      	movs	r0, r3
 8001b14:	f004 fd24 	bl	8006560 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a64      	ldr	r2, [pc, #400]	; (8001cac <HAL_PCD_Init+0x1c4>)
 8001b1c:	2103      	movs	r1, #3
 8001b1e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f001 fde3 	bl	80036f0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b2a:	230f      	movs	r3, #15
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
 8001b32:	e043      	b.n	8001bbc <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b34:	200f      	movs	r0, #15
 8001b36:	183b      	adds	r3, r7, r0
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	2129      	movs	r1, #41	; 0x29
 8001b3e:	015b      	lsls	r3, r3, #5
 8001b40:	18d3      	adds	r3, r2, r3
 8001b42:	185b      	adds	r3, r3, r1
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b48:	183b      	adds	r3, r7, r0
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	2128      	movs	r1, #40	; 0x28
 8001b50:	015b      	lsls	r3, r3, #5
 8001b52:	18d3      	adds	r3, r2, r3
 8001b54:	185b      	adds	r3, r3, r1
 8001b56:	183a      	adds	r2, r7, r0
 8001b58:	7812      	ldrb	r2, [r2, #0]
 8001b5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b5c:	183b      	adds	r3, r7, r0
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	183a      	adds	r2, r7, r0
 8001b62:	7812      	ldrb	r2, [r2, #0]
 8001b64:	b291      	uxth	r1, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	015b      	lsls	r3, r3, #5
 8001b6a:	18d3      	adds	r3, r2, r3
 8001b6c:	3336      	adds	r3, #54	; 0x36
 8001b6e:	1c0a      	adds	r2, r1, #0
 8001b70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b72:	183b      	adds	r3, r7, r0
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	212b      	movs	r1, #43	; 0x2b
 8001b7a:	015b      	lsls	r3, r3, #5
 8001b7c:	18d3      	adds	r3, r2, r3
 8001b7e:	185b      	adds	r3, r3, r1
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b84:	183b      	adds	r3, r7, r0
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	015b      	lsls	r3, r3, #5
 8001b8c:	18d3      	adds	r3, r2, r3
 8001b8e:	3338      	adds	r3, #56	; 0x38
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b94:	183b      	adds	r3, r7, r0
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	015b      	lsls	r3, r3, #5
 8001b9c:	18d3      	adds	r3, r2, r3
 8001b9e:	333c      	adds	r3, #60	; 0x3c
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ba4:	183b      	adds	r3, r7, r0
 8001ba6:	781a      	ldrb	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3202      	adds	r2, #2
 8001bac:	0152      	lsls	r2, r2, #5
 8001bae:	2100      	movs	r1, #0
 8001bb0:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb2:	183b      	adds	r3, r7, r0
 8001bb4:	781a      	ldrb	r2, [r3, #0]
 8001bb6:	183b      	adds	r3, r7, r0
 8001bb8:	3201      	adds	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	230f      	movs	r3, #15
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d3b4      	bcc.n	8001b34 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bca:	230f      	movs	r3, #15
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	e03f      	b.n	8001c54 <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bd4:	200f      	movs	r0, #15
 8001bd6:	183b      	adds	r3, r7, r0
 8001bd8:	781a      	ldrb	r2, [r3, #0]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	232a      	movs	r3, #42	; 0x2a
 8001bde:	33ff      	adds	r3, #255	; 0xff
 8001be0:	0152      	lsls	r2, r2, #5
 8001be2:	188a      	adds	r2, r1, r2
 8001be4:	18d3      	adds	r3, r2, r3
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bea:	183b      	adds	r3, r7, r0
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	2394      	movs	r3, #148	; 0x94
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	0152      	lsls	r2, r2, #5
 8001bf6:	188a      	adds	r2, r1, r2
 8001bf8:	18d3      	adds	r3, r2, r3
 8001bfa:	183a      	adds	r2, r7, r0
 8001bfc:	7812      	ldrb	r2, [r2, #0]
 8001bfe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c00:	183b      	adds	r3, r7, r0
 8001c02:	781a      	ldrb	r2, [r3, #0]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	232c      	movs	r3, #44	; 0x2c
 8001c08:	33ff      	adds	r3, #255	; 0xff
 8001c0a:	0152      	lsls	r2, r2, #5
 8001c0c:	188a      	adds	r2, r1, r2
 8001c0e:	18d3      	adds	r3, r2, r3
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c14:	183b      	adds	r3, r7, r0
 8001c16:	781a      	ldrb	r2, [r3, #0]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	239c      	movs	r3, #156	; 0x9c
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	0152      	lsls	r2, r2, #5
 8001c20:	188a      	adds	r2, r1, r2
 8001c22:	18d3      	adds	r3, r2, r3
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c28:	183b      	adds	r3, r7, r0
 8001c2a:	781a      	ldrb	r2, [r3, #0]
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	239e      	movs	r3, #158	; 0x9e
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	0152      	lsls	r2, r2, #5
 8001c34:	188a      	adds	r2, r1, r2
 8001c36:	18d3      	adds	r3, r2, r3
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c3c:	183b      	adds	r3, r7, r0
 8001c3e:	781a      	ldrb	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	320a      	adds	r2, #10
 8001c44:	0152      	lsls	r2, r2, #5
 8001c46:	2100      	movs	r1, #0
 8001c48:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c4a:	183b      	adds	r3, r7, r0
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	183b      	adds	r3, r7, r0
 8001c50:	3201      	adds	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]
 8001c54:	230f      	movs	r3, #15
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	781a      	ldrb	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d3b8      	bcc.n	8001bd4 <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	466a      	mov	r2, sp
 8001c6a:	0011      	movs	r1, r2
 8001c6c:	001a      	movs	r2, r3
 8001c6e:	3210      	adds	r2, #16
 8001c70:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001c72:	c170      	stmia	r1!, {r4, r5, r6}
 8001c74:	ca30      	ldmia	r2!, {r4, r5}
 8001c76:	c130      	stmia	r1!, {r4, r5}
 8001c78:	6859      	ldr	r1, [r3, #4]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f001 fd57 	bl	8003730 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2224      	movs	r2, #36	; 0x24
 8001c86:	2100      	movs	r1, #0
 8001c88:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a07      	ldr	r2, [pc, #28]	; (8001cac <HAL_PCD_Init+0x1c4>)
 8001c8e:	2101      	movs	r1, #1
 8001c90:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d103      	bne.n	8001ca2 <HAL_PCD_Init+0x1ba>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f000 fef9 	bl	8002a94 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b005      	add	sp, #20
 8001caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cac:	00000229 	.word	0x00000229

08001cb0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	238a      	movs	r3, #138	; 0x8a
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	5cd3      	ldrb	r3, [r2, r3]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_PCD_Start+0x18>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e014      	b.n	8001cf2 <HAL_PCD_Start+0x42>
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	238a      	movs	r3, #138	; 0x8a
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	2101      	movs	r1, #1
 8001cd0:	54d1      	strb	r1, [r2, r3]
  (void)USB_DevConnect(hpcd->Instance);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f002 fd82 	bl	80047e0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f001 fceb 	bl	80036bc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	238a      	movs	r3, #138	; 0x8a
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	2100      	movs	r1, #0
 8001cee:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b002      	add	sp, #8
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f002 fd7f 	bl	800480c <USB_ReadInterrupts>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	401a      	ands	r2, r3
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d103      	bne.n	8001d26 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f000 fb9b 	bl	800245c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f002 fd6e 	bl	800480c <USB_ReadInterrupts>
 8001d30:	0002      	movs	r2, r0
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	401a      	ands	r2, r3
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d114      	bne.n	8001d6a <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2244      	movs	r2, #68	; 0x44
 8001d46:	5a9b      	ldrh	r3, [r3, r2]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	49a8      	ldr	r1, [pc, #672]	; (8001ff0 <HAL_PCD_IRQHandler+0x2f4>)
 8001d50:	400a      	ands	r2, r1
 8001d52:	b291      	uxth	r1, r2
 8001d54:	2244      	movs	r2, #68	; 0x44
 8001d56:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f004 fc84 	bl	8006668 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2100      	movs	r1, #0
 8001d64:	0018      	movs	r0, r3
 8001d66:	f000 f951 	bl	800200c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f002 fd4c 	bl	800480c <USB_ReadInterrupts>
 8001d74:	0002      	movs	r2, r0
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	01db      	lsls	r3, r3, #7
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	01db      	lsls	r3, r3, #7
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d10b      	bne.n	8001d9c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2244      	movs	r2, #68	; 0x44
 8001d8a:	5a9b      	ldrh	r3, [r3, r2]
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4998      	ldr	r1, [pc, #608]	; (8001ff4 <HAL_PCD_IRQHandler+0x2f8>)
 8001d94:	400a      	ands	r2, r1
 8001d96:	b291      	uxth	r1, r2
 8001d98:	2244      	movs	r2, #68	; 0x44
 8001d9a:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	0018      	movs	r0, r3
 8001da2:	f002 fd33 	bl	800480c <USB_ReadInterrupts>
 8001da6:	0002      	movs	r2, r0
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	019b      	lsls	r3, r3, #6
 8001dac:	401a      	ands	r2, r3
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	019b      	lsls	r3, r3, #6
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d10b      	bne.n	8001dce <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2244      	movs	r2, #68	; 0x44
 8001dbc:	5a9b      	ldrh	r3, [r3, r2]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	498c      	ldr	r1, [pc, #560]	; (8001ff8 <HAL_PCD_IRQHandler+0x2fc>)
 8001dc6:	400a      	ands	r2, r1
 8001dc8:	b291      	uxth	r1, r2
 8001dca:	2244      	movs	r2, #68	; 0x44
 8001dcc:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f002 fd1a 	bl	800480c <USB_ReadInterrupts>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	015b      	lsls	r3, r3, #5
 8001dde:	401a      	ands	r2, r3
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	015b      	lsls	r3, r3, #5
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d137      	bne.n	8001e58 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2240      	movs	r2, #64	; 0x40
 8001dee:	5a9b      	ldrh	r3, [r3, r2]
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2104      	movs	r1, #4
 8001df8:	438a      	bics	r2, r1
 8001dfa:	b291      	uxth	r1, r2
 8001dfc:	2240      	movs	r2, #64	; 0x40
 8001dfe:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2240      	movs	r2, #64	; 0x40
 8001e06:	5a9b      	ldrh	r3, [r3, r2]
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2108      	movs	r1, #8
 8001e10:	438a      	bics	r2, r1
 8001e12:	b291      	uxth	r1, r2
 8001e14:	2240      	movs	r2, #64	; 0x40
 8001e16:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	2398      	movs	r3, #152	; 0x98
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	5cd3      	ldrb	r3, [r2, r3]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d109      	bne.n	8001e38 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	2398      	movs	r3, #152	; 0x98
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2100      	movs	r1, #0
 8001e32:	0018      	movs	r0, r3
 8001e34:	f000 fe58 	bl	8002ae8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f004 fc54 	bl	80066e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2244      	movs	r2, #68	; 0x44
 8001e46:	5a9b      	ldrh	r3, [r3, r2]
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	496b      	ldr	r1, [pc, #428]	; (8001ffc <HAL_PCD_IRQHandler+0x300>)
 8001e50:	400a      	ands	r2, r1
 8001e52:	b291      	uxth	r1, r2
 8001e54:	2244      	movs	r2, #68	; 0x44
 8001e56:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f002 fcd5 	bl	800480c <USB_ReadInterrupts>
 8001e62:	0002      	movs	r2, r0
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	401a      	ands	r2, r3
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d134      	bne.n	8001edc <HAL_PCD_IRQHandler+0x1e0>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2240      	movs	r2, #64	; 0x40
 8001e78:	5a9b      	ldrh	r3, [r3, r2]
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2108      	movs	r1, #8
 8001e82:	430a      	orrs	r2, r1
 8001e84:	b291      	uxth	r1, r2
 8001e86:	2240      	movs	r2, #64	; 0x40
 8001e88:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2244      	movs	r2, #68	; 0x44
 8001e90:	5a9b      	ldrh	r3, [r3, r2]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4959      	ldr	r1, [pc, #356]	; (8002000 <HAL_PCD_IRQHandler+0x304>)
 8001e9a:	400a      	ands	r2, r1
 8001e9c:	b291      	uxth	r1, r2
 8001e9e:	2244      	movs	r2, #68	; 0x44
 8001ea0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2240      	movs	r2, #64	; 0x40
 8001ea8:	5a9b      	ldrh	r3, [r3, r2]
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2104      	movs	r1, #4
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	b291      	uxth	r1, r2
 8001eb6:	2240      	movs	r2, #64	; 0x40
 8001eb8:	5299      	strh	r1, [r3, r2]

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f002 fca4 	bl	800480c <USB_ReadInterrupts>
 8001ec4:	0002      	movs	r2, r0
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	015b      	lsls	r3, r3, #5
 8001eca:	401a      	ands	r2, r3
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	015b      	lsls	r3, r3, #5
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d003      	beq.n	8001edc <HAL_PCD_IRQHandler+0x1e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f004 fbea 	bl	80066b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f002 fc93 	bl	800480c <USB_ReadInterrupts>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b80      	cmp	r3, #128	; 0x80
 8001eee:	d145      	bne.n	8001f7c <HAL_PCD_IRQHandler+0x280>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2244      	movs	r2, #68	; 0x44
 8001ef6:	5a9b      	ldrh	r3, [r3, r2]
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	438a      	bics	r2, r1
 8001f02:	b291      	uxth	r1, r2
 8001f04:	2244      	movs	r2, #68	; 0x44
 8001f06:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	2398      	movs	r3, #152	; 0x98
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	5cd3      	ldrb	r3, [r2, r3]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d12f      	bne.n	8001f74 <HAL_PCD_IRQHandler+0x278>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2240      	movs	r2, #64	; 0x40
 8001f1a:	5a9b      	ldrh	r3, [r3, r2]
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2104      	movs	r1, #4
 8001f24:	430a      	orrs	r2, r1
 8001f26:	b291      	uxth	r1, r2
 8001f28:	2240      	movs	r2, #64	; 0x40
 8001f2a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2240      	movs	r2, #64	; 0x40
 8001f32:	5a9b      	ldrh	r3, [r3, r2]
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2108      	movs	r1, #8
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	b291      	uxth	r1, r2
 8001f40:	2240      	movs	r2, #64	; 0x40
 8001f42:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	2398      	movs	r3, #152	; 0x98
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2254      	movs	r2, #84	; 0x54
 8001f54:	5a9b      	ldrh	r3, [r3, r2]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	223c      	movs	r2, #60	; 0x3c
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	2399      	movs	r3, #153	; 0x99
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f000 fdbb 	bl	8002ae8 <HAL_PCDEx_LPM_Callback>
 8001f72:	e003      	b.n	8001f7c <HAL_PCD_IRQHandler+0x280>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	0018      	movs	r0, r3
 8001f78:	f004 fb9a 	bl	80066b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	0018      	movs	r0, r3
 8001f82:	f002 fc43 	bl	800480c <USB_ReadInterrupts>
 8001f86:	0002      	movs	r2, r0
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	401a      	ands	r2, r3
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d10f      	bne.n	8001fb6 <HAL_PCD_IRQHandler+0x2ba>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2244      	movs	r2, #68	; 0x44
 8001f9c:	5a9b      	ldrh	r3, [r3, r2]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4917      	ldr	r1, [pc, #92]	; (8002004 <HAL_PCD_IRQHandler+0x308>)
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	b291      	uxth	r1, r2
 8001faa:	2244      	movs	r2, #68	; 0x44
 8001fac:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f004 fb4a 	bl	800664a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f002 fc26 	bl	800480c <USB_ReadInterrupts>
 8001fc0:	0002      	movs	r2, r0
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d10b      	bne.n	8001fe8 <HAL_PCD_IRQHandler+0x2ec>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2244      	movs	r2, #68	; 0x44
 8001fd6:	5a9b      	ldrh	r3, [r3, r2]
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	490a      	ldr	r1, [pc, #40]	; (8002008 <HAL_PCD_IRQHandler+0x30c>)
 8001fe0:	400a      	ands	r2, r1
 8001fe2:	b291      	uxth	r1, r2
 8001fe4:	2244      	movs	r2, #68	; 0x44
 8001fe6:	5299      	strh	r1, [r3, r2]
  }
}
 8001fe8:	46c0      	nop			; (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b002      	add	sp, #8
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	fffffbff 	.word	0xfffffbff
 8001ff4:	ffffbfff 	.word	0xffffbfff
 8001ff8:	ffffdfff 	.word	0xffffdfff
 8001ffc:	ffffefff 	.word	0xffffefff
 8002000:	fffff7ff 	.word	0xfffff7ff
 8002004:	fffffdff 	.word	0xfffffdff
 8002008:	fffffeff 	.word	0xfffffeff

0800200c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	000a      	movs	r2, r1
 8002016:	1cfb      	adds	r3, r7, #3
 8002018:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	238a      	movs	r3, #138	; 0x8a
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	5cd3      	ldrb	r3, [r2, r3]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_PCD_SetAddress+0x1e>
 8002026:	2302      	movs	r3, #2
 8002028:	e017      	b.n	800205a <HAL_PCD_SetAddress+0x4e>
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	238a      	movs	r3, #138	; 0x8a
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	2101      	movs	r1, #1
 8002032:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	1cfa      	adds	r2, r7, #3
 8002038:	2124      	movs	r1, #36	; 0x24
 800203a:	7812      	ldrb	r2, [r2, #0]
 800203c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	1cfb      	adds	r3, r7, #3
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	0019      	movs	r1, r3
 8002048:	0010      	movs	r0, r2
 800204a:	f002 fbb5 	bl	80047b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	238a      	movs	r3, #138	; 0x8a
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	2100      	movs	r1, #0
 8002056:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	0018      	movs	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	b002      	add	sp, #8
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002062:	b590      	push	{r4, r7, lr}
 8002064:	b085      	sub	sp, #20
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	000c      	movs	r4, r1
 800206c:	0010      	movs	r0, r2
 800206e:	0019      	movs	r1, r3
 8002070:	1cfb      	adds	r3, r7, #3
 8002072:	1c22      	adds	r2, r4, #0
 8002074:	701a      	strb	r2, [r3, #0]
 8002076:	003b      	movs	r3, r7
 8002078:	1c02      	adds	r2, r0, #0
 800207a:	801a      	strh	r2, [r3, #0]
 800207c:	1cbb      	adds	r3, r7, #2
 800207e:	1c0a      	adds	r2, r1, #0
 8002080:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002082:	230b      	movs	r3, #11
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800208a:	1cfb      	adds	r3, r7, #3
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b25b      	sxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	da0c      	bge.n	80020ae <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002094:	1cfb      	adds	r3, r7, #3
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2207      	movs	r2, #7
 800209a:	4013      	ands	r3, r2
 800209c:	015b      	lsls	r3, r3, #5
 800209e:	3328      	adds	r3, #40	; 0x28
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	18d3      	adds	r3, r2, r3
 80020a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	705a      	strb	r2, [r3, #1]
 80020ac:	e00c      	b.n	80020c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ae:	1cfb      	adds	r3, r7, #3
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2207      	movs	r2, #7
 80020b4:	4013      	ands	r3, r2
 80020b6:	015b      	lsls	r3, r3, #5
 80020b8:	3329      	adds	r3, #41	; 0x29
 80020ba:	33ff      	adds	r3, #255	; 0xff
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	18d3      	adds	r3, r2, r3
 80020c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020c8:	1cfb      	adds	r3, r7, #3
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2207      	movs	r2, #7
 80020ce:	4013      	ands	r3, r2
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020d6:	003b      	movs	r3, r7
 80020d8:	881a      	ldrh	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1cba      	adds	r2, r7, #2
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	785b      	ldrb	r3, [r3, #1]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d004      	beq.n	80020f8 <HAL_PCD_EP_Open+0x96>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020f8:	1cbb      	adds	r3, r7, #2
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d102      	bne.n	8002106 <HAL_PCD_EP_Open+0xa4>
  {
    ep->data_pid_start = 0U;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	238a      	movs	r3, #138	; 0x8a
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	5cd3      	ldrb	r3, [r2, r3]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_PCD_EP_Open+0xb4>
 8002112:	2302      	movs	r3, #2
 8002114:	e013      	b.n	800213e <HAL_PCD_EP_Open+0xdc>
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	238a      	movs	r3, #138	; 0x8a
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	2101      	movs	r1, #1
 800211e:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	0011      	movs	r1, r2
 8002128:	0018      	movs	r0, r3
 800212a:	f001 fb31 	bl	8003790 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	238a      	movs	r3, #138	; 0x8a
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	2100      	movs	r1, #0
 8002136:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002138:	230b      	movs	r3, #11
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	781b      	ldrb	r3, [r3, #0]
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b005      	add	sp, #20
 8002144:	bd90      	pop	{r4, r7, pc}

08002146 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	000a      	movs	r2, r1
 8002150:	1cfb      	adds	r3, r7, #3
 8002152:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002154:	1cfb      	adds	r3, r7, #3
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b25b      	sxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	da0c      	bge.n	8002178 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800215e:	1cfb      	adds	r3, r7, #3
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2207      	movs	r2, #7
 8002164:	4013      	ands	r3, r2
 8002166:	015b      	lsls	r3, r3, #5
 8002168:	3328      	adds	r3, #40	; 0x28
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	18d3      	adds	r3, r2, r3
 800216e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2201      	movs	r2, #1
 8002174:	705a      	strb	r2, [r3, #1]
 8002176:	e00c      	b.n	8002192 <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002178:	1cfb      	adds	r3, r7, #3
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2207      	movs	r2, #7
 800217e:	4013      	ands	r3, r2
 8002180:	015b      	lsls	r3, r3, #5
 8002182:	3329      	adds	r3, #41	; 0x29
 8002184:	33ff      	adds	r3, #255	; 0xff
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	18d3      	adds	r3, r2, r3
 800218a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002192:	1cfb      	adds	r3, r7, #3
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2207      	movs	r2, #7
 8002198:	4013      	ands	r3, r2
 800219a:	b2da      	uxtb	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	238a      	movs	r3, #138	; 0x8a
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_PCD_EP_Close+0x6a>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e011      	b.n	80021d4 <HAL_PCD_EP_Close+0x8e>
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	238a      	movs	r3, #138	; 0x8a
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	2101      	movs	r1, #1
 80021b8:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	0011      	movs	r1, r2
 80021c2:	0018      	movs	r0, r3
 80021c4:	f001 fddc 	bl	8003d80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	238a      	movs	r3, #138	; 0x8a
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	2100      	movs	r1, #0
 80021d0:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	0018      	movs	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b004      	add	sp, #16
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	200b      	movs	r0, #11
 80021ea:	183b      	adds	r3, r7, r0
 80021ec:	1c0a      	adds	r2, r1, #0
 80021ee:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021f0:	0001      	movs	r1, r0
 80021f2:	187b      	adds	r3, r7, r1
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2207      	movs	r2, #7
 80021f8:	4013      	ands	r3, r2
 80021fa:	015b      	lsls	r3, r3, #5
 80021fc:	3329      	adds	r3, #41	; 0x29
 80021fe:	33ff      	adds	r3, #255	; 0xff
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	18d3      	adds	r3, r2, r3
 8002204:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2200      	movs	r2, #0
 8002216:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2200      	movs	r2, #0
 800221c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800221e:	187b      	adds	r3, r7, r1
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2207      	movs	r2, #7
 8002224:	4013      	ands	r3, r2
 8002226:	b2da      	uxtb	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800222c:	187b      	adds	r3, r7, r1
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2207      	movs	r2, #7
 8002232:	4013      	ands	r3, r2
 8002234:	d107      	bne.n	8002246 <HAL_PCD_EP_Receive+0x6a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	0011      	movs	r1, r2
 800223e:	0018      	movs	r0, r3
 8002240:	f001 ff14 	bl	800406c <USB_EPStartXfer>
 8002244:	e006      	b.n	8002254 <HAL_PCD_EP_Receive+0x78>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	0011      	movs	r1, r2
 800224e:	0018      	movs	r0, r3
 8002250:	f001 ff0c 	bl	800406c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	0018      	movs	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	b006      	add	sp, #24
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	200b      	movs	r0, #11
 800226c:	183b      	adds	r3, r7, r0
 800226e:	1c0a      	adds	r2, r1, #0
 8002270:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002272:	0001      	movs	r1, r0
 8002274:	187b      	adds	r3, r7, r1
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2207      	movs	r2, #7
 800227a:	4013      	ands	r3, r2
 800227c:	015b      	lsls	r3, r3, #5
 800227e:	3328      	adds	r3, #40	; 0x28
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	18d3      	adds	r3, r2, r3
 8002284:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2200      	movs	r2, #0
 8002296:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2201      	movs	r2, #1
 800229c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800229e:	187b      	adds	r3, r7, r1
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2207      	movs	r2, #7
 80022a4:	4013      	ands	r3, r2
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022ac:	187b      	adds	r3, r7, r1
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2207      	movs	r2, #7
 80022b2:	4013      	ands	r3, r2
 80022b4:	d107      	bne.n	80022c6 <HAL_PCD_EP_Transmit+0x68>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	0011      	movs	r1, r2
 80022be:	0018      	movs	r0, r3
 80022c0:	f001 fed4 	bl	800406c <USB_EPStartXfer>
 80022c4:	e006      	b.n	80022d4 <HAL_PCD_EP_Transmit+0x76>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	0011      	movs	r1, r2
 80022ce:	0018      	movs	r0, r3
 80022d0:	f001 fecc 	bl	800406c <USB_EPStartXfer>
  }

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	0018      	movs	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	b006      	add	sp, #24
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	000a      	movs	r2, r1
 80022e8:	1cfb      	adds	r3, r7, #3
 80022ea:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022ec:	1cfb      	adds	r3, r7, #3
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2207      	movs	r2, #7
 80022f2:	401a      	ands	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d901      	bls.n	8002300 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e050      	b.n	80023a2 <HAL_PCD_EP_SetStall+0xc4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002300:	1cfb      	adds	r3, r7, #3
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	b25b      	sxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	da0c      	bge.n	8002324 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800230a:	1cfb      	adds	r3, r7, #3
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2207      	movs	r2, #7
 8002310:	4013      	ands	r3, r2
 8002312:	015b      	lsls	r3, r3, #5
 8002314:	3328      	adds	r3, #40	; 0x28
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	18d3      	adds	r3, r2, r3
 800231a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	705a      	strb	r2, [r3, #1]
 8002322:	e00a      	b.n	800233a <HAL_PCD_EP_SetStall+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002324:	1cfb      	adds	r3, r7, #3
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	015b      	lsls	r3, r3, #5
 800232a:	3329      	adds	r3, #41	; 0x29
 800232c:	33ff      	adds	r3, #255	; 0xff
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	18d3      	adds	r3, r2, r3
 8002332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002340:	1cfb      	adds	r3, r7, #3
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2207      	movs	r2, #7
 8002346:	4013      	ands	r3, r2
 8002348:	b2da      	uxtb	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	238a      	movs	r3, #138	; 0x8a
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	5cd3      	ldrb	r3, [r2, r3]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_PCD_EP_SetStall+0x80>
 800235a:	2302      	movs	r3, #2
 800235c:	e021      	b.n	80023a2 <HAL_PCD_EP_SetStall+0xc4>
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	238a      	movs	r3, #138	; 0x8a
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	2101      	movs	r1, #1
 8002366:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	0011      	movs	r1, r2
 8002370:	0018      	movs	r0, r3
 8002372:	f002 f94d 	bl	8004610 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002376:	1cfb      	adds	r3, r7, #3
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2207      	movs	r2, #7
 800237c:	4013      	ands	r3, r2
 800237e:	d10a      	bne.n	8002396 <HAL_PCD_EP_SetStall+0xb8>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	218c      	movs	r1, #140	; 0x8c
 8002388:	0089      	lsls	r1, r1, #2
 800238a:	468c      	mov	ip, r1
 800238c:	4463      	add	r3, ip
 800238e:	0019      	movs	r1, r3
 8002390:	0010      	movs	r0, r2
 8002392:	f002 fa49 	bl	8004828 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	238a      	movs	r3, #138	; 0x8a
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	2100      	movs	r1, #0
 800239e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	0018      	movs	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b004      	add	sp, #16
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	000a      	movs	r2, r1
 80023b4:	1cfb      	adds	r3, r7, #3
 80023b6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023b8:	1cfb      	adds	r3, r7, #3
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	220f      	movs	r2, #15
 80023be:	401a      	ands	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d901      	bls.n	80023cc <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e042      	b.n	8002452 <HAL_PCD_EP_ClrStall+0xa8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023cc:	1cfb      	adds	r3, r7, #3
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	b25b      	sxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	da0c      	bge.n	80023f0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023d6:	1cfb      	adds	r3, r7, #3
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2207      	movs	r2, #7
 80023dc:	4013      	ands	r3, r2
 80023de:	015b      	lsls	r3, r3, #5
 80023e0:	3328      	adds	r3, #40	; 0x28
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	18d3      	adds	r3, r2, r3
 80023e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2201      	movs	r2, #1
 80023ec:	705a      	strb	r2, [r3, #1]
 80023ee:	e00c      	b.n	800240a <HAL_PCD_EP_ClrStall+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023f0:	1cfb      	adds	r3, r7, #3
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2207      	movs	r2, #7
 80023f6:	4013      	ands	r3, r2
 80023f8:	015b      	lsls	r3, r3, #5
 80023fa:	3329      	adds	r3, #41	; 0x29
 80023fc:	33ff      	adds	r3, #255	; 0xff
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	18d3      	adds	r3, r2, r3
 8002402:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002410:	1cfb      	adds	r3, r7, #3
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2207      	movs	r2, #7
 8002416:	4013      	ands	r3, r2
 8002418:	b2da      	uxtb	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	238a      	movs	r3, #138	; 0x8a
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	5cd3      	ldrb	r3, [r2, r3]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_PCD_EP_ClrStall+0x84>
 800242a:	2302      	movs	r3, #2
 800242c:	e011      	b.n	8002452 <HAL_PCD_EP_ClrStall+0xa8>
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	238a      	movs	r3, #138	; 0x8a
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	2101      	movs	r1, #1
 8002436:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	0011      	movs	r1, r2
 8002440:	0018      	movs	r0, r3
 8002442:	f002 f927 	bl	8004694 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	238a      	movs	r3, #138	; 0x8a
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	2100      	movs	r1, #0
 800244e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	0018      	movs	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	b004      	add	sp, #16
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b089      	sub	sp, #36	; 0x24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002464:	e2b3      	b.n	80029ce <PCD_EP_ISR_Handler+0x572>
  {
    wIstr = hpcd->Instance->ISTR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	2016      	movs	r0, #22
 800246c:	183b      	adds	r3, r7, r0
 800246e:	2144      	movs	r1, #68	; 0x44
 8002470:	5a52      	ldrh	r2, [r2, r1]
 8002472:	801a      	strh	r2, [r3, #0]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002474:	183b      	adds	r3, r7, r0
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	2015      	movs	r0, #21
 800247c:	183b      	adds	r3, r7, r0
 800247e:	210f      	movs	r1, #15
 8002480:	400a      	ands	r2, r1
 8002482:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8002484:	183b      	adds	r3, r7, r0
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d000      	beq.n	800248e <PCD_EP_ISR_Handler+0x32>
 800248c:	e141      	b.n	8002712 <PCD_EP_ISR_Handler+0x2b6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800248e:	2316      	movs	r3, #22
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	2210      	movs	r2, #16
 8002496:	4013      	ands	r3, r2
 8002498:	d14e      	bne.n	8002538 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	4aca      	ldr	r2, [pc, #808]	; (80027cc <PCD_EP_ISR_Handler+0x370>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	b29c      	uxth	r4, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4ac8      	ldr	r2, [pc, #800]	; (80027d0 <PCD_EP_ISR_Handler+0x374>)
 80024ae:	4322      	orrs	r2, r4
 80024b0:	b292      	uxth	r2, r2
 80024b2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3328      	adds	r3, #40	; 0x28
 80024b8:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2250      	movs	r2, #80	; 0x50
 80024c0:	5a9b      	ldrh	r3, [r3, r2]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	001a      	movs	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	18d2      	adds	r2, r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	18d3      	adds	r3, r2, r3
 80024d4:	4abf      	ldr	r2, [pc, #764]	; (80027d4 <PCD_EP_ISR_Handler+0x378>)
 80024d6:	4694      	mov	ip, r2
 80024d8:	4463      	add	r3, ip
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	059b      	lsls	r3, r3, #22
 80024de:	0d9a      	lsrs	r2, r3, #22
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	18d2      	adds	r2, r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2100      	movs	r1, #0
 80024f6:	0018      	movs	r0, r3
 80024f8:	f004 f88c 	bl	8006614 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2224      	movs	r2, #36	; 0x24
 8002500:	5c9b      	ldrb	r3, [r3, r2]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d100      	bne.n	800250a <PCD_EP_ISR_Handler+0xae>
 8002508:	e261      	b.n	80029ce <PCD_EP_ISR_Handler+0x572>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d000      	beq.n	8002514 <PCD_EP_ISR_Handler+0xb8>
 8002512:	e25c      	b.n	80029ce <PCD_EP_ISR_Handler+0x572>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2224      	movs	r2, #36	; 0x24
 8002518:	5c9b      	ldrb	r3, [r3, r2]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2280      	movs	r2, #128	; 0x80
 800251e:	4252      	negs	r2, r2
 8002520:	4313      	orrs	r3, r2
 8002522:	b2da      	uxtb	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	b291      	uxth	r1, r2
 800252a:	224c      	movs	r2, #76	; 0x4c
 800252c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2224      	movs	r2, #36	; 0x24
 8002532:	2100      	movs	r1, #0
 8002534:	5499      	strb	r1, [r3, r2]
 8002536:	e24a      	b.n	80029ce <PCD_EP_ISR_Handler+0x572>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3329      	adds	r3, #41	; 0x29
 800253c:	33ff      	adds	r3, #255	; 0xff
 800253e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2112      	movs	r1, #18
 8002546:	187b      	adds	r3, r7, r1
 8002548:	8812      	ldrh	r2, [r2, #0]
 800254a:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800254c:	187b      	adds	r3, r7, r1
 800254e:	881a      	ldrh	r2, [r3, #0]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	4013      	ands	r3, r2
 8002556:	d033      	beq.n	80025c0 <PCD_EP_ISR_Handler+0x164>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2250      	movs	r2, #80	; 0x50
 800255e:	5a9b      	ldrh	r3, [r3, r2]
 8002560:	b29b      	uxth	r3, r3
 8002562:	001a      	movs	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	18d2      	adds	r2, r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	18d3      	adds	r3, r2, r3
 8002572:	4a99      	ldr	r2, [pc, #612]	; (80027d8 <PCD_EP_ISR_Handler+0x37c>)
 8002574:	4694      	mov	ip, r2
 8002576:	4463      	add	r3, ip
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	059b      	lsls	r3, r3, #22
 800257c:	0d9a      	lsrs	r2, r3, #22
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	228c      	movs	r2, #140	; 0x8c
 800258a:	0092      	lsls	r2, r2, #2
 800258c:	1899      	adds	r1, r3, r2
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002596:	b29b      	uxth	r3, r3
 8002598:	f002 f993 	bl	80048c2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4a8d      	ldr	r2, [pc, #564]	; (80027dc <PCD_EP_ISR_Handler+0x380>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	b29c      	uxth	r4, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2280      	movs	r2, #128	; 0x80
 80025b0:	4322      	orrs	r2, r4
 80025b2:	b292      	uxth	r2, r2
 80025b4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	0018      	movs	r0, r3
 80025ba:	f003 fff9 	bl	80065b0 <HAL_PCD_SetupStageCallback>
 80025be:	e206      	b.n	80029ce <PCD_EP_ISR_Handler+0x572>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025c0:	2312      	movs	r3, #18
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	2200      	movs	r2, #0
 80025c6:	5e9b      	ldrsh	r3, [r3, r2]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	db00      	blt.n	80025ce <PCD_EP_ISR_Handler+0x172>
 80025cc:	e1ff      	b.n	80029ce <PCD_EP_ISR_Handler+0x572>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	4a81      	ldr	r2, [pc, #516]	; (80027dc <PCD_EP_ISR_Handler+0x380>)
 80025d8:	4013      	ands	r3, r2
 80025da:	b29c      	uxth	r4, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2280      	movs	r2, #128	; 0x80
 80025e2:	4322      	orrs	r2, r4
 80025e4:	b292      	uxth	r2, r2
 80025e6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2250      	movs	r2, #80	; 0x50
 80025ee:	5a9b      	ldrh	r3, [r3, r2]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	001a      	movs	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	18d2      	adds	r2, r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	18d3      	adds	r3, r2, r3
 8002602:	4a75      	ldr	r2, [pc, #468]	; (80027d8 <PCD_EP_ISR_Handler+0x37c>)
 8002604:	4694      	mov	ip, r2
 8002606:	4463      	add	r3, ip
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	059b      	lsls	r3, r3, #22
 800260c:	0d9a      	lsrs	r2, r3, #22
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d01a      	beq.n	8002650 <PCD_EP_ISR_Handler+0x1f4>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d016      	beq.n	8002650 <PCD_EP_ISR_Handler+0x1f4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6959      	ldr	r1, [r3, #20]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002632:	b29b      	uxth	r3, r3
 8002634:	f002 f945 	bl	80048c2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	18d2      	adds	r2, r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2100      	movs	r1, #0
 800264a:	0018      	movs	r0, r3
 800264c:	f003 ffc5 	bl	80065da <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	001c      	movs	r4, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2250      	movs	r2, #80	; 0x50
 800265c:	5a9b      	ldrh	r3, [r3, r2]
 800265e:	b29b      	uxth	r3, r3
 8002660:	18e4      	adds	r4, r4, r3
 8002662:	4b5d      	ldr	r3, [pc, #372]	; (80027d8 <PCD_EP_ISR_Handler+0x37c>)
 8002664:	18e3      	adds	r3, r4, r3
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10e      	bne.n	800268e <PCD_EP_ISR_Handler+0x232>
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	4a5a      	ldr	r2, [pc, #360]	; (80027e0 <PCD_EP_ISR_Handler+0x384>)
 8002676:	4013      	ands	r3, r2
 8002678:	b29a      	uxth	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	801a      	strh	r2, [r3, #0]
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	4a53      	ldr	r2, [pc, #332]	; (80027d0 <PCD_EP_ISR_Handler+0x374>)
 8002684:	4313      	orrs	r3, r2
 8002686:	b29a      	uxth	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	801a      	strh	r2, [r3, #0]
 800268c:	e02b      	b.n	80026e6 <PCD_EP_ISR_Handler+0x28a>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	2b3e      	cmp	r3, #62	; 0x3e
 8002694:	d812      	bhi.n	80026bc <PCD_EP_ISR_Handler+0x260>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	085b      	lsrs	r3, r3, #1
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	2201      	movs	r2, #1
 80026a4:	4013      	ands	r3, r2
 80026a6:	d002      	beq.n	80026ae <PCD_EP_ISR_Handler+0x252>
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	3301      	adds	r3, #1
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	029b      	lsls	r3, r3, #10
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	801a      	strh	r2, [r3, #0]
 80026ba:	e014      	b.n	80026e6 <PCD_EP_ISR_Handler+0x28a>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	095b      	lsrs	r3, r3, #5
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	221f      	movs	r2, #31
 80026ca:	4013      	ands	r3, r2
 80026cc:	d102      	bne.n	80026d4 <PCD_EP_ISR_Handler+0x278>
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	029b      	lsls	r3, r3, #10
 80026da:	b29b      	uxth	r3, r3
 80026dc:	4a3c      	ldr	r2, [pc, #240]	; (80027d0 <PCD_EP_ISR_Handler+0x374>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	4a3d      	ldr	r2, [pc, #244]	; (80027e4 <PCD_EP_ISR_Handler+0x388>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	b29c      	uxth	r4, r3
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	015b      	lsls	r3, r3, #5
 80026f8:	4063      	eors	r3, r4
 80026fa:	b29c      	uxth	r4, r3
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	019b      	lsls	r3, r3, #6
 8002700:	4063      	eors	r3, r4
 8002702:	b29c      	uxth	r4, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a37      	ldr	r2, [pc, #220]	; (80027e8 <PCD_EP_ISR_Handler+0x38c>)
 800270a:	4322      	orrs	r2, r4
 800270c:	b292      	uxth	r2, r2
 800270e:	801a      	strh	r2, [r3, #0]
 8002710:	e15d      	b.n	80029ce <PCD_EP_ISR_Handler+0x572>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	001a      	movs	r2, r3
 8002718:	2315      	movs	r3, #21
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	18d2      	adds	r2, r2, r3
 8002722:	2112      	movs	r1, #18
 8002724:	187b      	adds	r3, r7, r1
 8002726:	8812      	ldrh	r2, [r2, #0]
 8002728:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800272a:	187b      	adds	r3, r7, r1
 800272c:	2200      	movs	r2, #0
 800272e:	5e9b      	ldrsh	r3, [r3, r2]
 8002730:	2b00      	cmp	r3, #0
 8002732:	db00      	blt.n	8002736 <PCD_EP_ISR_Handler+0x2da>
 8002734:	e0f5      	b.n	8002922 <PCD_EP_ISR_Handler+0x4c6>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	001a      	movs	r2, r3
 800273c:	2115      	movs	r1, #21
 800273e:	187b      	adds	r3, r7, r1
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	18d3      	adds	r3, r2, r3
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	4a24      	ldr	r2, [pc, #144]	; (80027dc <PCD_EP_ISR_Handler+0x380>)
 800274c:	4013      	ands	r3, r2
 800274e:	b29c      	uxth	r4, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	001a      	movs	r2, r3
 8002756:	187b      	adds	r3, r7, r1
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	18d3      	adds	r3, r2, r3
 800275e:	2280      	movs	r2, #128	; 0x80
 8002760:	4322      	orrs	r2, r4
 8002762:	b292      	uxth	r2, r2
 8002764:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002766:	187b      	adds	r3, r7, r1
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	015b      	lsls	r3, r3, #5
 800276c:	3329      	adds	r3, #41	; 0x29
 800276e:	33ff      	adds	r3, #255	; 0xff
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	18d3      	adds	r3, r2, r3
 8002774:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	7b1b      	ldrb	r3, [r3, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d136      	bne.n	80027ec <PCD_EP_ISR_Handler+0x390>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2250      	movs	r2, #80	; 0x50
 8002784:	5a9b      	ldrh	r3, [r3, r2]
 8002786:	b29b      	uxth	r3, r3
 8002788:	001a      	movs	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	18d2      	adds	r2, r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	18d3      	adds	r3, r2, r3
 8002798:	4a0f      	ldr	r2, [pc, #60]	; (80027d8 <PCD_EP_ISR_Handler+0x37c>)
 800279a:	4694      	mov	ip, r2
 800279c:	4463      	add	r3, ip
 800279e:	881a      	ldrh	r2, [r3, #0]
 80027a0:	211e      	movs	r1, #30
 80027a2:	187b      	adds	r3, r7, r1
 80027a4:	0592      	lsls	r2, r2, #22
 80027a6:	0d92      	lsrs	r2, r2, #22
 80027a8:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 80027aa:	187b      	adds	r3, r7, r1
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d100      	bne.n	80027b4 <PCD_EP_ISR_Handler+0x358>
 80027b2:	e08b      	b.n	80028cc <PCD_EP_ISR_Handler+0x470>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6818      	ldr	r0, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6959      	ldr	r1, [r3, #20]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	88da      	ldrh	r2, [r3, #6]
 80027c0:	231e      	movs	r3, #30
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	f002 f87c 	bl	80048c2 <USB_ReadPMA>
 80027ca:	e07f      	b.n	80028cc <PCD_EP_ISR_Handler+0x470>
 80027cc:	ffff8f0f 	.word	0xffff8f0f
 80027d0:	ffff8000 	.word	0xffff8000
 80027d4:	00000402 	.word	0x00000402
 80027d8:	00000406 	.word	0x00000406
 80027dc:	00000f8f 	.word	0x00000f8f
 80027e0:	ffff83ff 	.word	0xffff83ff
 80027e4:	ffffbf8f 	.word	0xffffbf8f
 80027e8:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	001a      	movs	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	18d3      	adds	r3, r2, r3
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	001a      	movs	r2, r3
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	01db      	lsls	r3, r3, #7
 8002804:	4013      	ands	r3, r2
 8002806:	d025      	beq.n	8002854 <PCD_EP_ISR_Handler+0x3f8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2250      	movs	r2, #80	; 0x50
 800280e:	5a9b      	ldrh	r3, [r3, r2]
 8002810:	b29b      	uxth	r3, r3
 8002812:	001a      	movs	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	18d2      	adds	r2, r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	18d3      	adds	r3, r2, r3
 8002822:	4a72      	ldr	r2, [pc, #456]	; (80029ec <PCD_EP_ISR_Handler+0x590>)
 8002824:	4694      	mov	ip, r2
 8002826:	4463      	add	r3, ip
 8002828:	881a      	ldrh	r2, [r3, #0]
 800282a:	211e      	movs	r1, #30
 800282c:	187b      	adds	r3, r7, r1
 800282e:	0592      	lsls	r2, r2, #22
 8002830:	0d92      	lsrs	r2, r2, #22
 8002832:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8002834:	187b      	adds	r3, r7, r1
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d030      	beq.n	800289e <PCD_EP_ISR_Handler+0x442>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6959      	ldr	r1, [r3, #20]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	891a      	ldrh	r2, [r3, #8]
 8002848:	231e      	movs	r3, #30
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	f002 f838 	bl	80048c2 <USB_ReadPMA>
 8002852:	e024      	b.n	800289e <PCD_EP_ISR_Handler+0x442>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2250      	movs	r2, #80	; 0x50
 800285a:	5a9b      	ldrh	r3, [r3, r2]
 800285c:	b29b      	uxth	r3, r3
 800285e:	001a      	movs	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	18d2      	adds	r2, r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	18d3      	adds	r3, r2, r3
 800286e:	4a60      	ldr	r2, [pc, #384]	; (80029f0 <PCD_EP_ISR_Handler+0x594>)
 8002870:	4694      	mov	ip, r2
 8002872:	4463      	add	r3, ip
 8002874:	881a      	ldrh	r2, [r3, #0]
 8002876:	211e      	movs	r1, #30
 8002878:	187b      	adds	r3, r7, r1
 800287a:	0592      	lsls	r2, r2, #22
 800287c:	0d92      	lsrs	r2, r2, #22
 800287e:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8002880:	187b      	adds	r3, r7, r1
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <PCD_EP_ISR_Handler+0x442>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6959      	ldr	r1, [r3, #20]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	895a      	ldrh	r2, [r3, #10]
 8002894:	231e      	movs	r3, #30
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	f002 f812 	bl	80048c2 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	001a      	movs	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	18d3      	adds	r3, r2, r3
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	4a50      	ldr	r2, [pc, #320]	; (80029f4 <PCD_EP_ISR_Handler+0x598>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	b29c      	uxth	r4, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	001a      	movs	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	18d3      	adds	r3, r2, r3
 80028c4:	4a4c      	ldr	r2, [pc, #304]	; (80029f8 <PCD_EP_ISR_Handler+0x59c>)
 80028c6:	4322      	orrs	r2, r4
 80028c8:	b292      	uxth	r2, r2
 80028ca:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	69da      	ldr	r2, [r3, #28]
 80028d0:	211e      	movs	r1, #30
 80028d2:	187b      	adds	r3, r7, r1
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	18d2      	adds	r2, r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	187b      	adds	r3, r7, r1
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	18d2      	adds	r2, r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d006      	beq.n	8002900 <PCD_EP_ISR_Handler+0x4a4>
 80028f2:	231e      	movs	r3, #30
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	881a      	ldrh	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d207      	bcs.n	8002910 <PCD_EP_ISR_Handler+0x4b4>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	781a      	ldrb	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	0011      	movs	r1, r2
 8002908:	0018      	movs	r0, r3
 800290a:	f003 fe66 	bl	80065da <HAL_PCD_DataOutStageCallback>
 800290e:	e008      	b.n	8002922 <PCD_EP_ISR_Handler+0x4c6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	7819      	ldrb	r1, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff fc5d 	bl	80021dc <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002922:	2312      	movs	r3, #18
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	2280      	movs	r2, #128	; 0x80
 800292a:	4013      	ands	r3, r2
 800292c:	d04f      	beq.n	80029ce <PCD_EP_ISR_Handler+0x572>
      {
        ep = &hpcd->IN_ep[epindex];
 800292e:	2115      	movs	r1, #21
 8002930:	187b      	adds	r3, r7, r1
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	015b      	lsls	r3, r3, #5
 8002936:	3328      	adds	r3, #40	; 0x28
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	18d3      	adds	r3, r2, r3
 800293c:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	001a      	movs	r2, r3
 8002944:	187b      	adds	r3, r7, r1
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	18d3      	adds	r3, r2, r3
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	4a2a      	ldr	r2, [pc, #168]	; (80029fc <PCD_EP_ISR_Handler+0x5a0>)
 8002952:	4013      	ands	r3, r2
 8002954:	b29c      	uxth	r4, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	001a      	movs	r2, r3
 800295c:	187b      	adds	r3, r7, r1
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	18d3      	adds	r3, r2, r3
 8002964:	4a26      	ldr	r2, [pc, #152]	; (8002a00 <PCD_EP_ISR_Handler+0x5a4>)
 8002966:	4322      	orrs	r2, r4
 8002968:	b292      	uxth	r2, r2
 800296a:	801a      	strh	r2, [r3, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2250      	movs	r2, #80	; 0x50
 8002972:	5a9b      	ldrh	r3, [r3, r2]
 8002974:	b29b      	uxth	r3, r3
 8002976:	001a      	movs	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	18d2      	adds	r2, r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	18d3      	adds	r3, r2, r3
 8002986:	4a19      	ldr	r2, [pc, #100]	; (80029ec <PCD_EP_ISR_Handler+0x590>)
 8002988:	4694      	mov	ip, r2
 800298a:	4463      	add	r3, ip
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	059b      	lsls	r3, r3, #22
 8002990:	0d9a      	lsrs	r2, r3, #22
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	18d2      	adds	r2, r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d107      	bne.n	80029bc <PCD_EP_ISR_Handler+0x560>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	781a      	ldrb	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	0011      	movs	r1, r2
 80029b4:	0018      	movs	r0, r3
 80029b6:	f003 fe2d 	bl	8006614 <HAL_PCD_DataInStageCallback>
 80029ba:	e008      	b.n	80029ce <PCD_EP_ISR_Handler+0x572>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	7819      	ldrb	r1, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff fc48 	bl	800225e <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2244      	movs	r2, #68	; 0x44
 80029d4:	5a9b      	ldrh	r3, [r3, r2]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	b21b      	sxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	da00      	bge.n	80029e0 <PCD_EP_ISR_Handler+0x584>
 80029de:	e542      	b.n	8002466 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b009      	add	sp, #36	; 0x24
 80029e8:	bd90      	pop	{r4, r7, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	00000402 	.word	0x00000402
 80029f0:	00000406 	.word	0x00000406
 80029f4:	ffff8f8f 	.word	0xffff8f8f
 80029f8:	ffff80c0 	.word	0xffff80c0
 80029fc:	ffff8f0f 	.word	0xffff8f0f
 8002a00:	ffff8000 	.word	0xffff8000

08002a04 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	0008      	movs	r0, r1
 8002a0e:	0011      	movs	r1, r2
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	240a      	movs	r4, #10
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	1c02      	adds	r2, r0, #0
 8002a18:	801a      	strh	r2, [r3, #0]
 8002a1a:	2308      	movs	r3, #8
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	1c0a      	adds	r2, r1, #0
 8002a20:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a22:	193b      	adds	r3, r7, r4
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	2280      	movs	r2, #128	; 0x80
 8002a28:	4013      	ands	r3, r2
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_PCDEx_PMAConfig+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a30:	230a      	movs	r3, #10
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	2207      	movs	r2, #7
 8002a38:	4013      	ands	r3, r2
 8002a3a:	015b      	lsls	r3, r3, #5
 8002a3c:	3328      	adds	r3, #40	; 0x28
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	18d3      	adds	r3, r2, r3
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	e008      	b.n	8002a58 <HAL_PCDEx_PMAConfig+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a46:	230a      	movs	r3, #10
 8002a48:	18fb      	adds	r3, r7, r3
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	015b      	lsls	r3, r3, #5
 8002a4e:	3329      	adds	r3, #41	; 0x29
 8002a50:	33ff      	adds	r3, #255	; 0xff
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	18d3      	adds	r3, r2, r3
 8002a56:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a58:	2308      	movs	r3, #8
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d107      	bne.n	8002a72 <HAL_PCDEx_PMAConfig+0x6e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2200      	movs	r2, #0
 8002a66:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	80da      	strh	r2, [r3, #6]
 8002a70:	e00b      	b.n	8002a8a <HAL_PCDEx_PMAConfig+0x86>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2201      	movs	r2, #1
 8002a76:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	0c1b      	lsrs	r3, r3, #16
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b007      	add	sp, #28
 8002a92:	bd90      	pop	{r4, r7, pc}

08002a94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	239a      	movs	r3, #154	; 0x9a
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	2398      	movs	r3, #152	; 0x98
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2254      	movs	r2, #84	; 0x54
 8002aba:	5a9b      	ldrh	r3, [r3, r2]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	b299      	uxth	r1, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2254      	movs	r2, #84	; 0x54
 8002ac8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2254      	movs	r2, #84	; 0x54
 8002ace:	5a9b      	ldrh	r3, [r3, r2]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	b299      	uxth	r1, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2254      	movs	r2, #84	; 0x54
 8002adc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b004      	add	sp, #16
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	000a      	movs	r2, r1
 8002af2:	1cfb      	adds	r3, r7, #3
 8002af4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b002      	add	sp, #8
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d102      	bne.n	8002b14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f000 fb76 	bl	8003200 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d100      	bne.n	8002b20 <HAL_RCC_OscConfig+0x20>
 8002b1e:	e08e      	b.n	8002c3e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b20:	4bc5      	ldr	r3, [pc, #788]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	220c      	movs	r2, #12
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d00e      	beq.n	8002b4a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b2c:	4bc2      	ldr	r3, [pc, #776]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	220c      	movs	r2, #12
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d117      	bne.n	8002b68 <HAL_RCC_OscConfig+0x68>
 8002b38:	4bbf      	ldr	r3, [pc, #764]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	23c0      	movs	r3, #192	; 0xc0
 8002b3e:	025b      	lsls	r3, r3, #9
 8002b40:	401a      	ands	r2, r3
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	025b      	lsls	r3, r3, #9
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d10e      	bne.n	8002b68 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4a:	4bbb      	ldr	r3, [pc, #748]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	029b      	lsls	r3, r3, #10
 8002b52:	4013      	ands	r3, r2
 8002b54:	d100      	bne.n	8002b58 <HAL_RCC_OscConfig+0x58>
 8002b56:	e071      	b.n	8002c3c <HAL_RCC_OscConfig+0x13c>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d000      	beq.n	8002b62 <HAL_RCC_OscConfig+0x62>
 8002b60:	e06c      	b.n	8002c3c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f000 fb4c 	bl	8003200 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d107      	bne.n	8002b80 <HAL_RCC_OscConfig+0x80>
 8002b70:	4bb1      	ldr	r3, [pc, #708]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4bb0      	ldr	r3, [pc, #704]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002b76:	2180      	movs	r1, #128	; 0x80
 8002b78:	0249      	lsls	r1, r1, #9
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e02f      	b.n	8002be0 <HAL_RCC_OscConfig+0xe0>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10c      	bne.n	8002ba2 <HAL_RCC_OscConfig+0xa2>
 8002b88:	4bab      	ldr	r3, [pc, #684]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4baa      	ldr	r3, [pc, #680]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002b8e:	49ab      	ldr	r1, [pc, #684]	; (8002e3c <HAL_RCC_OscConfig+0x33c>)
 8002b90:	400a      	ands	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	4ba8      	ldr	r3, [pc, #672]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4ba7      	ldr	r3, [pc, #668]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002b9a:	49a9      	ldr	r1, [pc, #676]	; (8002e40 <HAL_RCC_OscConfig+0x340>)
 8002b9c:	400a      	ands	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	e01e      	b.n	8002be0 <HAL_RCC_OscConfig+0xe0>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d10e      	bne.n	8002bc8 <HAL_RCC_OscConfig+0xc8>
 8002baa:	4ba3      	ldr	r3, [pc, #652]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	4ba2      	ldr	r3, [pc, #648]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002bb0:	2180      	movs	r1, #128	; 0x80
 8002bb2:	02c9      	lsls	r1, r1, #11
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	4b9f      	ldr	r3, [pc, #636]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b9e      	ldr	r3, [pc, #632]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002bbe:	2180      	movs	r1, #128	; 0x80
 8002bc0:	0249      	lsls	r1, r1, #9
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e00b      	b.n	8002be0 <HAL_RCC_OscConfig+0xe0>
 8002bc8:	4b9b      	ldr	r3, [pc, #620]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b9a      	ldr	r3, [pc, #616]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002bce:	499b      	ldr	r1, [pc, #620]	; (8002e3c <HAL_RCC_OscConfig+0x33c>)
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	4b98      	ldr	r3, [pc, #608]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b97      	ldr	r3, [pc, #604]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002bda:	4999      	ldr	r1, [pc, #612]	; (8002e40 <HAL_RCC_OscConfig+0x340>)
 8002bdc:	400a      	ands	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d014      	beq.n	8002c12 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be8:	f7fd fe8a 	bl	8000900 <HAL_GetTick>
 8002bec:	0003      	movs	r3, r0
 8002bee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf2:	f7fd fe85 	bl	8000900 <HAL_GetTick>
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b64      	cmp	r3, #100	; 0x64
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e2fd      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c04:	4b8c      	ldr	r3, [pc, #560]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	029b      	lsls	r3, r3, #10
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCC_OscConfig+0xf2>
 8002c10:	e015      	b.n	8002c3e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7fd fe75 	bl	8000900 <HAL_GetTick>
 8002c16:	0003      	movs	r3, r0
 8002c18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7fd fe70 	bl	8000900 <HAL_GetTick>
 8002c20:	0002      	movs	r2, r0
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e2e8      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2e:	4b82      	ldr	r3, [pc, #520]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	029b      	lsls	r3, r3, #10
 8002c36:	4013      	ands	r3, r2
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x11c>
 8002c3a:	e000      	b.n	8002c3e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2202      	movs	r2, #2
 8002c44:	4013      	ands	r3, r2
 8002c46:	d100      	bne.n	8002c4a <HAL_RCC_OscConfig+0x14a>
 8002c48:	e06c      	b.n	8002d24 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c4a:	4b7b      	ldr	r3, [pc, #492]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	220c      	movs	r2, #12
 8002c50:	4013      	ands	r3, r2
 8002c52:	d00e      	beq.n	8002c72 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c54:	4b78      	ldr	r3, [pc, #480]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	220c      	movs	r2, #12
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d11f      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x1a0>
 8002c60:	4b75      	ldr	r3, [pc, #468]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	23c0      	movs	r3, #192	; 0xc0
 8002c66:	025b      	lsls	r3, r3, #9
 8002c68:	401a      	ands	r2, r3
 8002c6a:	2380      	movs	r3, #128	; 0x80
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d116      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c72:	4b71      	ldr	r3, [pc, #452]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2202      	movs	r2, #2
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_OscConfig+0x188>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e2bb      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c88:	4b6b      	ldr	r3, [pc, #428]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	22f8      	movs	r2, #248	; 0xf8
 8002c8e:	4393      	bics	r3, r2
 8002c90:	0019      	movs	r1, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00da      	lsls	r2, r3, #3
 8002c98:	4b67      	ldr	r3, [pc, #412]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9e:	e041      	b.n	8002d24 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d024      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca8:	4b63      	ldr	r3, [pc, #396]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4b62      	ldr	r3, [pc, #392]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002cae:	2101      	movs	r1, #1
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7fd fe24 	bl	8000900 <HAL_GetTick>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cbe:	f7fd fe1f 	bl	8000900 <HAL_GetTick>
 8002cc2:	0002      	movs	r2, r0
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e297      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd0:	4b59      	ldr	r3, [pc, #356]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d0f1      	beq.n	8002cbe <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cda:	4b57      	ldr	r3, [pc, #348]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	22f8      	movs	r2, #248	; 0xf8
 8002ce0:	4393      	bics	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	00da      	lsls	r2, r3, #3
 8002cea:	4b53      	ldr	r3, [pc, #332]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002cec:	430a      	orrs	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	e018      	b.n	8002d24 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf2:	4b51      	ldr	r3, [pc, #324]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	438a      	bics	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fd fdff 	bl	8000900 <HAL_GetTick>
 8002d02:	0003      	movs	r3, r0
 8002d04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d08:	f7fd fdfa 	bl	8000900 <HAL_GetTick>
 8002d0c:	0002      	movs	r2, r0
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e272      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	4b47      	ldr	r3, [pc, #284]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	4013      	ands	r3, r2
 8002d22:	d1f1      	bne.n	8002d08 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2208      	movs	r2, #8
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d036      	beq.n	8002d9c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d019      	beq.n	8002d6a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d36:	4b40      	ldr	r3, [pc, #256]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d42:	f7fd fddd 	bl	8000900 <HAL_GetTick>
 8002d46:	0003      	movs	r3, r0
 8002d48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d4c:	f7fd fdd8 	bl	8000900 <HAL_GetTick>
 8002d50:	0002      	movs	r2, r0
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e250      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5e:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	2202      	movs	r2, #2
 8002d64:	4013      	ands	r3, r2
 8002d66:	d0f1      	beq.n	8002d4c <HAL_RCC_OscConfig+0x24c>
 8002d68:	e018      	b.n	8002d9c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d6a:	4b33      	ldr	r3, [pc, #204]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002d6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d6e:	4b32      	ldr	r3, [pc, #200]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002d70:	2101      	movs	r1, #1
 8002d72:	438a      	bics	r2, r1
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d76:	f7fd fdc3 	bl	8000900 <HAL_GetTick>
 8002d7a:	0003      	movs	r3, r0
 8002d7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d80:	f7fd fdbe 	bl	8000900 <HAL_GetTick>
 8002d84:	0002      	movs	r2, r0
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e236      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d92:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	2202      	movs	r2, #2
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d1f1      	bne.n	8002d80 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2204      	movs	r2, #4
 8002da2:	4013      	ands	r3, r2
 8002da4:	d100      	bne.n	8002da8 <HAL_RCC_OscConfig+0x2a8>
 8002da6:	e0b5      	b.n	8002f14 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002da8:	231f      	movs	r3, #31
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db0:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	055b      	lsls	r3, r3, #21
 8002db8:	4013      	ands	r3, r2
 8002dba:	d111      	bne.n	8002de0 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002dbe:	69da      	ldr	r2, [r3, #28]
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002dc2:	2180      	movs	r1, #128	; 0x80
 8002dc4:	0549      	lsls	r1, r1, #21
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	61da      	str	r2, [r3, #28]
 8002dca:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002dcc:	69da      	ldr	r2, [r3, #28]
 8002dce:	2380      	movs	r3, #128	; 0x80
 8002dd0:	055b      	lsls	r3, r3, #21
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002dd8:	231f      	movs	r3, #31
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de0:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <HAL_RCC_OscConfig+0x344>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4013      	ands	r3, r2
 8002dea:	d11a      	bne.n	8002e22 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dec:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <HAL_RCC_OscConfig+0x344>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <HAL_RCC_OscConfig+0x344>)
 8002df2:	2180      	movs	r1, #128	; 0x80
 8002df4:	0049      	lsls	r1, r1, #1
 8002df6:	430a      	orrs	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dfa:	f7fd fd81 	bl	8000900 <HAL_GetTick>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e04:	f7fd fd7c 	bl	8000900 <HAL_GetTick>
 8002e08:	0002      	movs	r2, r0
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	; 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e1f4      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_OscConfig+0x344>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d10e      	bne.n	8002e48 <HAL_RCC_OscConfig+0x348>
 8002e2a:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002e2c:	6a1a      	ldr	r2, [r3, #32]
 8002e2e:	4b02      	ldr	r3, [pc, #8]	; (8002e38 <HAL_RCC_OscConfig+0x338>)
 8002e30:	2101      	movs	r1, #1
 8002e32:	430a      	orrs	r2, r1
 8002e34:	621a      	str	r2, [r3, #32]
 8002e36:	e035      	b.n	8002ea4 <HAL_RCC_OscConfig+0x3a4>
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	fffeffff 	.word	0xfffeffff
 8002e40:	fffbffff 	.word	0xfffbffff
 8002e44:	40007000 	.word	0x40007000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10c      	bne.n	8002e6a <HAL_RCC_OscConfig+0x36a>
 8002e50:	4bca      	ldr	r3, [pc, #808]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002e52:	6a1a      	ldr	r2, [r3, #32]
 8002e54:	4bc9      	ldr	r3, [pc, #804]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002e56:	2101      	movs	r1, #1
 8002e58:	438a      	bics	r2, r1
 8002e5a:	621a      	str	r2, [r3, #32]
 8002e5c:	4bc7      	ldr	r3, [pc, #796]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002e5e:	6a1a      	ldr	r2, [r3, #32]
 8002e60:	4bc6      	ldr	r3, [pc, #792]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002e62:	2104      	movs	r1, #4
 8002e64:	438a      	bics	r2, r1
 8002e66:	621a      	str	r2, [r3, #32]
 8002e68:	e01c      	b.n	8002ea4 <HAL_RCC_OscConfig+0x3a4>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b05      	cmp	r3, #5
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x38c>
 8002e72:	4bc2      	ldr	r3, [pc, #776]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002e74:	6a1a      	ldr	r2, [r3, #32]
 8002e76:	4bc1      	ldr	r3, [pc, #772]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002e78:	2104      	movs	r1, #4
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	621a      	str	r2, [r3, #32]
 8002e7e:	4bbf      	ldr	r3, [pc, #764]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002e80:	6a1a      	ldr	r2, [r3, #32]
 8002e82:	4bbe      	ldr	r3, [pc, #760]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002e84:	2101      	movs	r1, #1
 8002e86:	430a      	orrs	r2, r1
 8002e88:	621a      	str	r2, [r3, #32]
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0x3a4>
 8002e8c:	4bbb      	ldr	r3, [pc, #748]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002e8e:	6a1a      	ldr	r2, [r3, #32]
 8002e90:	4bba      	ldr	r3, [pc, #744]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002e92:	2101      	movs	r1, #1
 8002e94:	438a      	bics	r2, r1
 8002e96:	621a      	str	r2, [r3, #32]
 8002e98:	4bb8      	ldr	r3, [pc, #736]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002e9a:	6a1a      	ldr	r2, [r3, #32]
 8002e9c:	4bb7      	ldr	r3, [pc, #732]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002e9e:	2104      	movs	r1, #4
 8002ea0:	438a      	bics	r2, r1
 8002ea2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d014      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eac:	f7fd fd28 	bl	8000900 <HAL_GetTick>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb4:	e009      	b.n	8002eca <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7fd fd23 	bl	8000900 <HAL_GetTick>
 8002eba:	0002      	movs	r2, r0
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	4aaf      	ldr	r2, [pc, #700]	; (8003180 <HAL_RCC_OscConfig+0x680>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e19a      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eca:	4bac      	ldr	r3, [pc, #688]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x3b6>
 8002ed4:	e013      	b.n	8002efe <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed6:	f7fd fd13 	bl	8000900 <HAL_GetTick>
 8002eda:	0003      	movs	r3, r0
 8002edc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ede:	e009      	b.n	8002ef4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7fd fd0e 	bl	8000900 <HAL_GetTick>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	4aa5      	ldr	r2, [pc, #660]	; (8003180 <HAL_RCC_OscConfig+0x680>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e185      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef4:	4ba1      	ldr	r3, [pc, #644]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	4013      	ands	r3, r2
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002efe:	231f      	movs	r3, #31
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d105      	bne.n	8002f14 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f08:	4b9c      	ldr	r3, [pc, #624]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	4b9b      	ldr	r3, [pc, #620]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002f0e:	499d      	ldr	r1, [pc, #628]	; (8003184 <HAL_RCC_OscConfig+0x684>)
 8002f10:	400a      	ands	r2, r1
 8002f12:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2210      	movs	r2, #16
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d063      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d12a      	bne.n	8002f7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f26:	4b95      	ldr	r3, [pc, #596]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f2a:	4b94      	ldr	r3, [pc, #592]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002f2c:	2104      	movs	r1, #4
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002f32:	4b92      	ldr	r3, [pc, #584]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f36:	4b91      	ldr	r3, [pc, #580]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002f38:	2101      	movs	r1, #1
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3e:	f7fd fcdf 	bl	8000900 <HAL_GetTick>
 8002f42:	0003      	movs	r3, r0
 8002f44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f48:	f7fd fcda 	bl	8000900 <HAL_GetTick>
 8002f4c:	0002      	movs	r2, r0
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e152      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002f5a:	4b88      	ldr	r3, [pc, #544]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5e:	2202      	movs	r2, #2
 8002f60:	4013      	ands	r3, r2
 8002f62:	d0f1      	beq.n	8002f48 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f64:	4b85      	ldr	r3, [pc, #532]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f68:	22f8      	movs	r2, #248	; 0xf8
 8002f6a:	4393      	bics	r3, r2
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	00da      	lsls	r2, r3, #3
 8002f74:	4b81      	ldr	r3, [pc, #516]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002f76:	430a      	orrs	r2, r1
 8002f78:	635a      	str	r2, [r3, #52]	; 0x34
 8002f7a:	e034      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	3305      	adds	r3, #5
 8002f82:	d111      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002f84:	4b7d      	ldr	r3, [pc, #500]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f88:	4b7c      	ldr	r3, [pc, #496]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002f8a:	2104      	movs	r1, #4
 8002f8c:	438a      	bics	r2, r1
 8002f8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f90:	4b7a      	ldr	r3, [pc, #488]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f94:	22f8      	movs	r2, #248	; 0xf8
 8002f96:	4393      	bics	r3, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	00da      	lsls	r2, r3, #3
 8002fa0:	4b76      	ldr	r3, [pc, #472]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	635a      	str	r2, [r3, #52]	; 0x34
 8002fa6:	e01e      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002fa8:	4b74      	ldr	r3, [pc, #464]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fac:	4b73      	ldr	r3, [pc, #460]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002fae:	2104      	movs	r1, #4
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002fb4:	4b71      	ldr	r3, [pc, #452]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002fb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fb8:	4b70      	ldr	r3, [pc, #448]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002fba:	2101      	movs	r1, #1
 8002fbc:	438a      	bics	r2, r1
 8002fbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc0:	f7fd fc9e 	bl	8000900 <HAL_GetTick>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002fca:	f7fd fc99 	bl	8000900 <HAL_GetTick>
 8002fce:	0002      	movs	r2, r0
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e111      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002fdc:	4b67      	ldr	r3, [pc, #412]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d1f1      	bne.n	8002fca <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2220      	movs	r2, #32
 8002fec:	4013      	ands	r3, r2
 8002fee:	d05c      	beq.n	80030aa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002ff0:	4b62      	ldr	r3, [pc, #392]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	220c      	movs	r2, #12
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	d00e      	beq.n	800301a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002ffc:	4b5f      	ldr	r3, [pc, #380]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	220c      	movs	r2, #12
 8003002:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003004:	2b08      	cmp	r3, #8
 8003006:	d114      	bne.n	8003032 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003008:	4b5c      	ldr	r3, [pc, #368]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	23c0      	movs	r3, #192	; 0xc0
 800300e:	025b      	lsls	r3, r3, #9
 8003010:	401a      	ands	r2, r3
 8003012:	23c0      	movs	r3, #192	; 0xc0
 8003014:	025b      	lsls	r3, r3, #9
 8003016:	429a      	cmp	r2, r3
 8003018:	d10b      	bne.n	8003032 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800301a:	4b58      	ldr	r3, [pc, #352]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 800301c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	025b      	lsls	r3, r3, #9
 8003022:	4013      	ands	r3, r2
 8003024:	d040      	beq.n	80030a8 <HAL_RCC_OscConfig+0x5a8>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d03c      	beq.n	80030a8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e0e6      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d01b      	beq.n	8003072 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800303a:	4b50      	ldr	r3, [pc, #320]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 800303c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800303e:	4b4f      	ldr	r3, [pc, #316]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8003040:	2180      	movs	r1, #128	; 0x80
 8003042:	0249      	lsls	r1, r1, #9
 8003044:	430a      	orrs	r2, r1
 8003046:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003048:	f7fd fc5a 	bl	8000900 <HAL_GetTick>
 800304c:	0003      	movs	r3, r0
 800304e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003052:	f7fd fc55 	bl	8000900 <HAL_GetTick>
 8003056:	0002      	movs	r2, r0
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e0cd      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003064:	4b45      	ldr	r3, [pc, #276]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8003066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	025b      	lsls	r3, r3, #9
 800306c:	4013      	ands	r3, r2
 800306e:	d0f0      	beq.n	8003052 <HAL_RCC_OscConfig+0x552>
 8003070:	e01b      	b.n	80030aa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003072:	4b42      	ldr	r3, [pc, #264]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8003074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003076:	4b41      	ldr	r3, [pc, #260]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8003078:	4943      	ldr	r1, [pc, #268]	; (8003188 <HAL_RCC_OscConfig+0x688>)
 800307a:	400a      	ands	r2, r1
 800307c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307e:	f7fd fc3f 	bl	8000900 <HAL_GetTick>
 8003082:	0003      	movs	r3, r0
 8003084:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003088:	f7fd fc3a 	bl	8000900 <HAL_GetTick>
 800308c:	0002      	movs	r2, r0
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e0b2      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800309a:	4b38      	ldr	r3, [pc, #224]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 800309c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	025b      	lsls	r3, r3, #9
 80030a2:	4013      	ands	r3, r2
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x588>
 80030a6:	e000      	b.n	80030aa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80030a8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d100      	bne.n	80030b4 <HAL_RCC_OscConfig+0x5b4>
 80030b2:	e0a4      	b.n	80031fe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030b4:	4b31      	ldr	r3, [pc, #196]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	220c      	movs	r2, #12
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d100      	bne.n	80030c2 <HAL_RCC_OscConfig+0x5c2>
 80030c0:	e078      	b.n	80031b4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d14c      	bne.n	8003164 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ca:	4b2c      	ldr	r3, [pc, #176]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4b2b      	ldr	r3, [pc, #172]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 80030d0:	492e      	ldr	r1, [pc, #184]	; (800318c <HAL_RCC_OscConfig+0x68c>)
 80030d2:	400a      	ands	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d6:	f7fd fc13 	bl	8000900 <HAL_GetTick>
 80030da:	0003      	movs	r3, r0
 80030dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e0:	f7fd fc0e 	bl	8000900 <HAL_GetTick>
 80030e4:	0002      	movs	r2, r0
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e086      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f2:	4b22      	ldr	r3, [pc, #136]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	049b      	lsls	r3, r3, #18
 80030fa:	4013      	ands	r3, r2
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030fe:	4b1f      	ldr	r3, [pc, #124]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	220f      	movs	r2, #15
 8003104:	4393      	bics	r3, r2
 8003106:	0019      	movs	r1, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800310c:	4b1b      	ldr	r3, [pc, #108]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 800310e:	430a      	orrs	r2, r1
 8003110:	62da      	str	r2, [r3, #44]	; 0x2c
 8003112:	4b1a      	ldr	r3, [pc, #104]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <HAL_RCC_OscConfig+0x690>)
 8003118:	4013      	ands	r3, r2
 800311a:	0019      	movs	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	431a      	orrs	r2, r3
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8003128:	430a      	orrs	r2, r1
 800312a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800312c:	4b13      	ldr	r3, [pc, #76]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8003132:	2180      	movs	r1, #128	; 0x80
 8003134:	0449      	lsls	r1, r1, #17
 8003136:	430a      	orrs	r2, r1
 8003138:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7fd fbe1 	bl	8000900 <HAL_GetTick>
 800313e:	0003      	movs	r3, r0
 8003140:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003144:	f7fd fbdc 	bl	8000900 <HAL_GetTick>
 8003148:	0002      	movs	r2, r0
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e054      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003156:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	049b      	lsls	r3, r3, #18
 800315e:	4013      	ands	r3, r2
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x644>
 8003162:	e04c      	b.n	80031fe <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4b04      	ldr	r3, [pc, #16]	; (800317c <HAL_RCC_OscConfig+0x67c>)
 800316a:	4908      	ldr	r1, [pc, #32]	; (800318c <HAL_RCC_OscConfig+0x68c>)
 800316c:	400a      	ands	r2, r1
 800316e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fd fbc6 	bl	8000900 <HAL_GetTick>
 8003174:	0003      	movs	r3, r0
 8003176:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003178:	e015      	b.n	80031a6 <HAL_RCC_OscConfig+0x6a6>
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	40021000 	.word	0x40021000
 8003180:	00001388 	.word	0x00001388
 8003184:	efffffff 	.word	0xefffffff
 8003188:	fffeffff 	.word	0xfffeffff
 800318c:	feffffff 	.word	0xfeffffff
 8003190:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003194:	f7fd fbb4 	bl	8000900 <HAL_GetTick>
 8003198:	0002      	movs	r2, r0
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e02c      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a6:	4b18      	ldr	r3, [pc, #96]	; (8003208 <HAL_RCC_OscConfig+0x708>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	2380      	movs	r3, #128	; 0x80
 80031ac:	049b      	lsls	r3, r3, #18
 80031ae:	4013      	ands	r3, r2
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x694>
 80031b2:	e024      	b.n	80031fe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e01f      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80031c0:	4b11      	ldr	r3, [pc, #68]	; (8003208 <HAL_RCC_OscConfig+0x708>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80031c6:	4b10      	ldr	r3, [pc, #64]	; (8003208 <HAL_RCC_OscConfig+0x708>)
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	23c0      	movs	r3, #192	; 0xc0
 80031d0:	025b      	lsls	r3, r3, #9
 80031d2:	401a      	ands	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	429a      	cmp	r2, r3
 80031da:	d10e      	bne.n	80031fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	220f      	movs	r2, #15
 80031e0:	401a      	ands	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d107      	bne.n	80031fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	23f0      	movs	r3, #240	; 0xf0
 80031ee:	039b      	lsls	r3, r3, #14
 80031f0:	401a      	ands	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d001      	beq.n	80031fe <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	0018      	movs	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	b008      	add	sp, #32
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000

0800320c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0bf      	b.n	80033a0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003220:	4b61      	ldr	r3, [pc, #388]	; (80033a8 <HAL_RCC_ClockConfig+0x19c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2201      	movs	r2, #1
 8003226:	4013      	ands	r3, r2
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d911      	bls.n	8003252 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b5e      	ldr	r3, [pc, #376]	; (80033a8 <HAL_RCC_ClockConfig+0x19c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2201      	movs	r2, #1
 8003234:	4393      	bics	r3, r2
 8003236:	0019      	movs	r1, r3
 8003238:	4b5b      	ldr	r3, [pc, #364]	; (80033a8 <HAL_RCC_ClockConfig+0x19c>)
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003240:	4b59      	ldr	r3, [pc, #356]	; (80033a8 <HAL_RCC_ClockConfig+0x19c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2201      	movs	r2, #1
 8003246:	4013      	ands	r3, r2
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d001      	beq.n	8003252 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e0a6      	b.n	80033a0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2202      	movs	r2, #2
 8003258:	4013      	ands	r3, r2
 800325a:	d015      	beq.n	8003288 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2204      	movs	r2, #4
 8003262:	4013      	ands	r3, r2
 8003264:	d006      	beq.n	8003274 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003266:	4b51      	ldr	r3, [pc, #324]	; (80033ac <HAL_RCC_ClockConfig+0x1a0>)
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	4b50      	ldr	r3, [pc, #320]	; (80033ac <HAL_RCC_ClockConfig+0x1a0>)
 800326c:	21e0      	movs	r1, #224	; 0xe0
 800326e:	00c9      	lsls	r1, r1, #3
 8003270:	430a      	orrs	r2, r1
 8003272:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003274:	4b4d      	ldr	r3, [pc, #308]	; (80033ac <HAL_RCC_ClockConfig+0x1a0>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	22f0      	movs	r2, #240	; 0xf0
 800327a:	4393      	bics	r3, r2
 800327c:	0019      	movs	r1, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	4b4a      	ldr	r3, [pc, #296]	; (80033ac <HAL_RCC_ClockConfig+0x1a0>)
 8003284:	430a      	orrs	r2, r1
 8003286:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2201      	movs	r2, #1
 800328e:	4013      	ands	r3, r2
 8003290:	d04c      	beq.n	800332c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d107      	bne.n	80032aa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329a:	4b44      	ldr	r3, [pc, #272]	; (80033ac <HAL_RCC_ClockConfig+0x1a0>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	2380      	movs	r3, #128	; 0x80
 80032a0:	029b      	lsls	r3, r3, #10
 80032a2:	4013      	ands	r3, r2
 80032a4:	d120      	bne.n	80032e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e07a      	b.n	80033a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b2:	4b3e      	ldr	r3, [pc, #248]	; (80033ac <HAL_RCC_ClockConfig+0x1a0>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	049b      	lsls	r3, r3, #18
 80032ba:	4013      	ands	r3, r2
 80032bc:	d114      	bne.n	80032e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e06e      	b.n	80033a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80032ca:	4b38      	ldr	r3, [pc, #224]	; (80033ac <HAL_RCC_ClockConfig+0x1a0>)
 80032cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ce:	2380      	movs	r3, #128	; 0x80
 80032d0:	025b      	lsls	r3, r3, #9
 80032d2:	4013      	ands	r3, r2
 80032d4:	d108      	bne.n	80032e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e062      	b.n	80033a0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032da:	4b34      	ldr	r3, [pc, #208]	; (80033ac <HAL_RCC_ClockConfig+0x1a0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2202      	movs	r2, #2
 80032e0:	4013      	ands	r3, r2
 80032e2:	d101      	bne.n	80032e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e05b      	b.n	80033a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032e8:	4b30      	ldr	r3, [pc, #192]	; (80033ac <HAL_RCC_ClockConfig+0x1a0>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2203      	movs	r2, #3
 80032ee:	4393      	bics	r3, r2
 80032f0:	0019      	movs	r1, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	4b2d      	ldr	r3, [pc, #180]	; (80033ac <HAL_RCC_ClockConfig+0x1a0>)
 80032f8:	430a      	orrs	r2, r1
 80032fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032fc:	f7fd fb00 	bl	8000900 <HAL_GetTick>
 8003300:	0003      	movs	r3, r0
 8003302:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003304:	e009      	b.n	800331a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003306:	f7fd fafb 	bl	8000900 <HAL_GetTick>
 800330a:	0002      	movs	r2, r0
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	4a27      	ldr	r2, [pc, #156]	; (80033b0 <HAL_RCC_ClockConfig+0x1a4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e042      	b.n	80033a0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	4b24      	ldr	r3, [pc, #144]	; (80033ac <HAL_RCC_ClockConfig+0x1a0>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	220c      	movs	r2, #12
 8003320:	401a      	ands	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	429a      	cmp	r2, r3
 800332a:	d1ec      	bne.n	8003306 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800332c:	4b1e      	ldr	r3, [pc, #120]	; (80033a8 <HAL_RCC_ClockConfig+0x19c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2201      	movs	r2, #1
 8003332:	4013      	ands	r3, r2
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d211      	bcs.n	800335e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333a:	4b1b      	ldr	r3, [pc, #108]	; (80033a8 <HAL_RCC_ClockConfig+0x19c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2201      	movs	r2, #1
 8003340:	4393      	bics	r3, r2
 8003342:	0019      	movs	r1, r3
 8003344:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <HAL_RCC_ClockConfig+0x19c>)
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334c:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <HAL_RCC_ClockConfig+0x19c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2201      	movs	r2, #1
 8003352:	4013      	ands	r3, r2
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d001      	beq.n	800335e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e020      	b.n	80033a0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2204      	movs	r2, #4
 8003364:	4013      	ands	r3, r2
 8003366:	d009      	beq.n	800337c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003368:	4b10      	ldr	r3, [pc, #64]	; (80033ac <HAL_RCC_ClockConfig+0x1a0>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	4a11      	ldr	r2, [pc, #68]	; (80033b4 <HAL_RCC_ClockConfig+0x1a8>)
 800336e:	4013      	ands	r3, r2
 8003370:	0019      	movs	r1, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <HAL_RCC_ClockConfig+0x1a0>)
 8003378:	430a      	orrs	r2, r1
 800337a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800337c:	f000 f820 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 8003380:	0001      	movs	r1, r0
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <HAL_RCC_ClockConfig+0x1a0>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	220f      	movs	r2, #15
 800338a:	4013      	ands	r3, r2
 800338c:	4a0a      	ldr	r2, [pc, #40]	; (80033b8 <HAL_RCC_ClockConfig+0x1ac>)
 800338e:	5cd3      	ldrb	r3, [r2, r3]
 8003390:	000a      	movs	r2, r1
 8003392:	40da      	lsrs	r2, r3
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_RCC_ClockConfig+0x1b0>)
 8003396:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003398:	2000      	movs	r0, #0
 800339a:	f7fd fa6b 	bl	8000874 <HAL_InitTick>
  
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	0018      	movs	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b004      	add	sp, #16
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40022000 	.word	0x40022000
 80033ac:	40021000 	.word	0x40021000
 80033b0:	00001388 	.word	0x00001388
 80033b4:	fffff8ff 	.word	0xfffff8ff
 80033b8:	08006ccc 	.word	0x08006ccc
 80033bc:	20000000 	.word	0x20000000

080033c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c0:	b590      	push	{r4, r7, lr}
 80033c2:	b08f      	sub	sp, #60	; 0x3c
 80033c4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80033c6:	2314      	movs	r3, #20
 80033c8:	18fb      	adds	r3, r7, r3
 80033ca:	4a37      	ldr	r2, [pc, #220]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xe8>)
 80033cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80033ce:	c313      	stmia	r3!, {r0, r1, r4}
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80033d4:	1d3b      	adds	r3, r7, #4
 80033d6:	4a35      	ldr	r2, [pc, #212]	; (80034ac <HAL_RCC_GetSysClockFreq+0xec>)
 80033d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80033da:	c313      	stmia	r3!, {r0, r1, r4}
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e4:	2300      	movs	r3, #0
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80033e8:	2300      	movs	r3, #0
 80033ea:	637b      	str	r3, [r7, #52]	; 0x34
 80033ec:	2300      	movs	r3, #0
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80033f4:	4b2e      	ldr	r3, [pc, #184]	; (80034b0 <HAL_RCC_GetSysClockFreq+0xf0>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fc:	220c      	movs	r2, #12
 80033fe:	4013      	ands	r3, r2
 8003400:	2b08      	cmp	r3, #8
 8003402:	d006      	beq.n	8003412 <HAL_RCC_GetSysClockFreq+0x52>
 8003404:	2b0c      	cmp	r3, #12
 8003406:	d043      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0xd0>
 8003408:	2b04      	cmp	r3, #4
 800340a:	d144      	bne.n	8003496 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800340c:	4b29      	ldr	r3, [pc, #164]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800340e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003410:	e044      	b.n	800349c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	0c9b      	lsrs	r3, r3, #18
 8003416:	220f      	movs	r2, #15
 8003418:	4013      	ands	r3, r2
 800341a:	2214      	movs	r2, #20
 800341c:	18ba      	adds	r2, r7, r2
 800341e:	5cd3      	ldrb	r3, [r2, r3]
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003422:	4b23      	ldr	r3, [pc, #140]	; (80034b0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	220f      	movs	r2, #15
 8003428:	4013      	ands	r3, r2
 800342a:	1d3a      	adds	r2, r7, #4
 800342c:	5cd3      	ldrb	r3, [r2, r3]
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003432:	23c0      	movs	r3, #192	; 0xc0
 8003434:	025b      	lsls	r3, r3, #9
 8003436:	401a      	ands	r2, r3
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	025b      	lsls	r3, r3, #9
 800343c:	429a      	cmp	r2, r3
 800343e:	d109      	bne.n	8003454 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003442:	481c      	ldr	r0, [pc, #112]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003444:	f7fc fe60 	bl	8000108 <__udivsi3>
 8003448:	0003      	movs	r3, r0
 800344a:	001a      	movs	r2, r3
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	4353      	muls	r3, r2
 8003450:	637b      	str	r3, [r7, #52]	; 0x34
 8003452:	e01a      	b.n	800348a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003456:	23c0      	movs	r3, #192	; 0xc0
 8003458:	025b      	lsls	r3, r3, #9
 800345a:	401a      	ands	r2, r3
 800345c:	23c0      	movs	r3, #192	; 0xc0
 800345e:	025b      	lsls	r3, r3, #9
 8003460:	429a      	cmp	r2, r3
 8003462:	d109      	bne.n	8003478 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003466:	4814      	ldr	r0, [pc, #80]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003468:	f7fc fe4e 	bl	8000108 <__udivsi3>
 800346c:	0003      	movs	r3, r0
 800346e:	001a      	movs	r2, r3
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	4353      	muls	r3, r2
 8003474:	637b      	str	r3, [r7, #52]	; 0x34
 8003476:	e008      	b.n	800348a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800347a:	480e      	ldr	r0, [pc, #56]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800347c:	f7fc fe44 	bl	8000108 <__udivsi3>
 8003480:	0003      	movs	r3, r0
 8003482:	001a      	movs	r2, r3
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	4353      	muls	r3, r2
 8003488:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800348a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800348e:	e005      	b.n	800349c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003490:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003492:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003494:	e002      	b.n	800349c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003496:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003498:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800349a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800349e:	0018      	movs	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b00f      	add	sp, #60	; 0x3c
 80034a4:	bd90      	pop	{r4, r7, pc}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	08006c4c 	.word	0x08006c4c
 80034ac:	08006c5c 	.word	0x08006c5c
 80034b0:	40021000 	.word	0x40021000
 80034b4:	007a1200 	.word	0x007a1200
 80034b8:	02dc6c00 	.word	0x02dc6c00

080034bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	025b      	lsls	r3, r3, #9
 80034d4:	4013      	ands	r3, r2
 80034d6:	d100      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80034d8:	e08f      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80034da:	2317      	movs	r3, #23
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034e2:	4b6f      	ldr	r3, [pc, #444]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80034e4:	69da      	ldr	r2, [r3, #28]
 80034e6:	2380      	movs	r3, #128	; 0x80
 80034e8:	055b      	lsls	r3, r3, #21
 80034ea:	4013      	ands	r3, r2
 80034ec:	d111      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034ee:	4b6c      	ldr	r3, [pc, #432]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80034f0:	69da      	ldr	r2, [r3, #28]
 80034f2:	4b6b      	ldr	r3, [pc, #428]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80034f4:	2180      	movs	r1, #128	; 0x80
 80034f6:	0549      	lsls	r1, r1, #21
 80034f8:	430a      	orrs	r2, r1
 80034fa:	61da      	str	r2, [r3, #28]
 80034fc:	4b68      	ldr	r3, [pc, #416]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80034fe:	69da      	ldr	r2, [r3, #28]
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	055b      	lsls	r3, r3, #21
 8003504:	4013      	ands	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800350a:	2317      	movs	r3, #23
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	2201      	movs	r2, #1
 8003510:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003512:	4b64      	ldr	r3, [pc, #400]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	4013      	ands	r3, r2
 800351c:	d11a      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800351e:	4b61      	ldr	r3, [pc, #388]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4b60      	ldr	r3, [pc, #384]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003524:	2180      	movs	r1, #128	; 0x80
 8003526:	0049      	lsls	r1, r1, #1
 8003528:	430a      	orrs	r2, r1
 800352a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800352c:	f7fd f9e8 	bl	8000900 <HAL_GetTick>
 8003530:	0003      	movs	r3, r0
 8003532:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003534:	e008      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003536:	f7fd f9e3 	bl	8000900 <HAL_GetTick>
 800353a:	0002      	movs	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b64      	cmp	r3, #100	; 0x64
 8003542:	d901      	bls.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e0a6      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003548:	4b56      	ldr	r3, [pc, #344]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4013      	ands	r3, r2
 8003552:	d0f0      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003554:	4b52      	ldr	r3, [pc, #328]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003556:	6a1a      	ldr	r2, [r3, #32]
 8003558:	23c0      	movs	r3, #192	; 0xc0
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4013      	ands	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d034      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	23c0      	movs	r3, #192	; 0xc0
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4013      	ands	r3, r2
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	429a      	cmp	r2, r3
 8003574:	d02c      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003576:	4b4a      	ldr	r3, [pc, #296]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4a4b      	ldr	r2, [pc, #300]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800357c:	4013      	ands	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003580:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003582:	6a1a      	ldr	r2, [r3, #32]
 8003584:	4b46      	ldr	r3, [pc, #280]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003586:	2180      	movs	r1, #128	; 0x80
 8003588:	0249      	lsls	r1, r1, #9
 800358a:	430a      	orrs	r2, r1
 800358c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800358e:	4b44      	ldr	r3, [pc, #272]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003590:	6a1a      	ldr	r2, [r3, #32]
 8003592:	4b43      	ldr	r3, [pc, #268]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003594:	4945      	ldr	r1, [pc, #276]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003596:	400a      	ands	r2, r1
 8003598:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800359a:	4b41      	ldr	r3, [pc, #260]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2201      	movs	r2, #1
 80035a4:	4013      	ands	r3, r2
 80035a6:	d013      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f7fd f9aa 	bl	8000900 <HAL_GetTick>
 80035ac:	0003      	movs	r3, r0
 80035ae:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b0:	e009      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b2:	f7fd f9a5 	bl	8000900 <HAL_GetTick>
 80035b6:	0002      	movs	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	4a3c      	ldr	r2, [pc, #240]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e067      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c6:	4b36      	ldr	r3, [pc, #216]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	2202      	movs	r2, #2
 80035cc:	4013      	ands	r3, r2
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035d0:	4b33      	ldr	r3, [pc, #204]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	4a34      	ldr	r2, [pc, #208]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	4b30      	ldr	r3, [pc, #192]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80035e0:	430a      	orrs	r2, r1
 80035e2:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035e4:	2317      	movs	r3, #23
 80035e6:	18fb      	adds	r3, r7, r3
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d105      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ee:	4b2c      	ldr	r3, [pc, #176]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80035f0:	69da      	ldr	r2, [r3, #28]
 80035f2:	4b2b      	ldr	r3, [pc, #172]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80035f4:	492f      	ldr	r1, [pc, #188]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035f6:	400a      	ands	r2, r1
 80035f8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2201      	movs	r2, #1
 8003600:	4013      	ands	r3, r2
 8003602:	d009      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003604:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	2203      	movs	r2, #3
 800360a:	4393      	bics	r3, r2
 800360c:	0019      	movs	r1, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003614:	430a      	orrs	r2, r1
 8003616:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2202      	movs	r2, #2
 800361e:	4013      	ands	r3, r2
 8003620:	d009      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003622:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	4a24      	ldr	r2, [pc, #144]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003628:	4013      	ands	r3, r2
 800362a:	0019      	movs	r1, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003632:	430a      	orrs	r2, r1
 8003634:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2220      	movs	r2, #32
 800363c:	4013      	ands	r3, r2
 800363e:	d009      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003640:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	2210      	movs	r2, #16
 8003646:	4393      	bics	r3, r2
 8003648:	0019      	movs	r1, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003650:	430a      	orrs	r2, r1
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	029b      	lsls	r3, r3, #10
 800365c:	4013      	ands	r3, r2
 800365e:	d009      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	2280      	movs	r2, #128	; 0x80
 8003666:	4393      	bics	r3, r2
 8003668:	0019      	movs	r1, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003670:	430a      	orrs	r2, r1
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	2380      	movs	r3, #128	; 0x80
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4013      	ands	r3, r2
 800367e:	d009      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003680:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	2240      	movs	r2, #64	; 0x40
 8003686:	4393      	bics	r3, r2
 8003688:	0019      	movs	r1, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695a      	ldr	r2, [r3, #20]
 800368e:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003690:	430a      	orrs	r2, r1
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	0018      	movs	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	b006      	add	sp, #24
 800369c:	bd80      	pop	{r7, pc}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40007000 	.word	0x40007000
 80036a8:	fffffcff 	.word	0xfffffcff
 80036ac:	fffeffff 	.word	0xfffeffff
 80036b0:	00001388 	.word	0x00001388
 80036b4:	efffffff 	.word	0xefffffff
 80036b8:	fffcffff 	.word	0xfffcffff

080036bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80036c4:	210e      	movs	r1, #14
 80036c6:	187b      	adds	r3, r7, r1
 80036c8:	4a08      	ldr	r2, [pc, #32]	; (80036ec <USB_EnableGlobalInt+0x30>)
 80036ca:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2240      	movs	r2, #64	; 0x40
 80036d0:	5a9b      	ldrh	r3, [r3, r2]
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	187b      	adds	r3, r7, r1
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	4313      	orrs	r3, r2
 80036da:	b299      	uxth	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2240      	movs	r2, #64	; 0x40
 80036e0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	0018      	movs	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b004      	add	sp, #16
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	ffffbf80 	.word	0xffffbf80

080036f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80036f8:	210e      	movs	r1, #14
 80036fa:	187b      	adds	r3, r7, r1
 80036fc:	4a0b      	ldr	r2, [pc, #44]	; (800372c <USB_DisableGlobalInt+0x3c>)
 80036fe:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2240      	movs	r2, #64	; 0x40
 8003704:	5a9b      	ldrh	r3, [r3, r2]
 8003706:	b29b      	uxth	r3, r3
 8003708:	b21b      	sxth	r3, r3
 800370a:	187a      	adds	r2, r7, r1
 800370c:	2100      	movs	r1, #0
 800370e:	5e52      	ldrsh	r2, [r2, r1]
 8003710:	43d2      	mvns	r2, r2
 8003712:	b212      	sxth	r2, r2
 8003714:	4013      	ands	r3, r2
 8003716:	b21b      	sxth	r3, r3
 8003718:	b299      	uxth	r1, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2240      	movs	r2, #64	; 0x40
 800371e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	0018      	movs	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	b004      	add	sp, #16
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	ffffbf80 	.word	0xffffbf80

08003730 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003730:	b084      	sub	sp, #16
 8003732:	b590      	push	{r4, r7, lr}
 8003734:	46c6      	mov	lr, r8
 8003736:	b500      	push	{lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	2004      	movs	r0, #4
 8003740:	2410      	movs	r4, #16
 8003742:	46a4      	mov	ip, r4
 8003744:	2408      	movs	r4, #8
 8003746:	46a0      	mov	r8, r4
 8003748:	44b8      	add	r8, r7
 800374a:	44c4      	add	ip, r8
 800374c:	4460      	add	r0, ip
 800374e:	6001      	str	r1, [r0, #0]
 8003750:	6042      	str	r2, [r0, #4]
 8003752:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2240      	movs	r2, #64	; 0x40
 8003758:	2101      	movs	r1, #1
 800375a:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2240      	movs	r2, #64	; 0x40
 8003760:	2100      	movs	r1, #0
 8003762:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2244      	movs	r2, #68	; 0x44
 8003768:	2100      	movs	r1, #0
 800376a:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2250      	movs	r2, #80	; 0x50
 8003770:	2100      	movs	r1, #0
 8003772:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	0018      	movs	r0, r3
 8003778:	f7ff ffa0 	bl	80036bc <USB_EnableGlobalInt>

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	0018      	movs	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	b002      	add	sp, #8
 8003784:	bc04      	pop	{r2}
 8003786:	4690      	mov	r8, r2
 8003788:	bc90      	pop	{r4, r7}
 800378a:	bc08      	pop	{r3}
 800378c:	b004      	add	sp, #16
 800378e:	4718      	bx	r3

08003790 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003790:	b590      	push	{r4, r7, lr}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800379a:	2317      	movs	r3, #23
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	2200      	movs	r2, #0
 80037a0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	18d3      	adds	r3, r2, r3
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	2314      	movs	r3, #20
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	49b2      	ldr	r1, [pc, #712]	; (8003a80 <USB_ActivateEndpoint+0x2f0>)
 80037b6:	400a      	ands	r2, r1
 80037b8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	78db      	ldrb	r3, [r3, #3]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d020      	beq.n	8003804 <USB_ActivateEndpoint+0x74>
 80037c2:	dc02      	bgt.n	80037ca <USB_ActivateEndpoint+0x3a>
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <USB_ActivateEndpoint+0x44>
 80037c8:	e025      	b.n	8003816 <USB_ActivateEndpoint+0x86>
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d00b      	beq.n	80037e6 <USB_ActivateEndpoint+0x56>
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d00f      	beq.n	80037f2 <USB_ActivateEndpoint+0x62>
 80037d2:	e020      	b.n	8003816 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80037d4:	2214      	movs	r2, #20
 80037d6:	18bb      	adds	r3, r7, r2
 80037d8:	18ba      	adds	r2, r7, r2
 80037da:	8812      	ldrh	r2, [r2, #0]
 80037dc:	2180      	movs	r1, #128	; 0x80
 80037de:	0089      	lsls	r1, r1, #2
 80037e0:	430a      	orrs	r2, r1
 80037e2:	801a      	strh	r2, [r3, #0]
      break;
 80037e4:	e01c      	b.n	8003820 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80037e6:	2214      	movs	r2, #20
 80037e8:	18bb      	adds	r3, r7, r2
 80037ea:	18ba      	adds	r2, r7, r2
 80037ec:	8812      	ldrh	r2, [r2, #0]
 80037ee:	801a      	strh	r2, [r3, #0]
      break;
 80037f0:	e016      	b.n	8003820 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80037f2:	2214      	movs	r2, #20
 80037f4:	18bb      	adds	r3, r7, r2
 80037f6:	18ba      	adds	r2, r7, r2
 80037f8:	8812      	ldrh	r2, [r2, #0]
 80037fa:	21c0      	movs	r1, #192	; 0xc0
 80037fc:	00c9      	lsls	r1, r1, #3
 80037fe:	430a      	orrs	r2, r1
 8003800:	801a      	strh	r2, [r3, #0]
      break;
 8003802:	e00d      	b.n	8003820 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003804:	2214      	movs	r2, #20
 8003806:	18bb      	adds	r3, r7, r2
 8003808:	18ba      	adds	r2, r7, r2
 800380a:	8812      	ldrh	r2, [r2, #0]
 800380c:	2180      	movs	r1, #128	; 0x80
 800380e:	00c9      	lsls	r1, r1, #3
 8003810:	430a      	orrs	r2, r1
 8003812:	801a      	strh	r2, [r3, #0]
      break;
 8003814:	e004      	b.n	8003820 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8003816:	2317      	movs	r3, #23
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	2201      	movs	r2, #1
 800381c:	701a      	strb	r2, [r3, #0]
      break;
 800381e:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	18d3      	adds	r3, r2, r3
 800382a:	2214      	movs	r2, #20
 800382c:	18ba      	adds	r2, r7, r2
 800382e:	8812      	ldrh	r2, [r2, #0]
 8003830:	4994      	ldr	r1, [pc, #592]	; (8003a84 <USB_ActivateEndpoint+0x2f4>)
 8003832:	430a      	orrs	r2, r1
 8003834:	b292      	uxth	r2, r2
 8003836:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	18d3      	adds	r3, r2, r3
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	b29b      	uxth	r3, r3
 8003846:	b21b      	sxth	r3, r3
 8003848:	4a8f      	ldr	r2, [pc, #572]	; (8003a88 <USB_ActivateEndpoint+0x2f8>)
 800384a:	4013      	ands	r3, r2
 800384c:	b21a      	sxth	r2, r3
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	b21b      	sxth	r3, r3
 8003854:	4313      	orrs	r3, r2
 8003856:	b21b      	sxth	r3, r3
 8003858:	b29c      	uxth	r4, r3
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	18d3      	adds	r3, r2, r3
 8003864:	4a87      	ldr	r2, [pc, #540]	; (8003a84 <USB_ActivateEndpoint+0x2f4>)
 8003866:	4322      	orrs	r2, r4
 8003868:	b292      	uxth	r2, r2
 800386a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	7b1b      	ldrb	r3, [r3, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d000      	beq.n	8003876 <USB_ActivateEndpoint+0xe6>
 8003874:	e11a      	b.n	8003aac <USB_ActivateEndpoint+0x31c>
  {
    if (ep->is_in != 0U)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	785b      	ldrb	r3, [r3, #1]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d062      	beq.n	8003944 <USB_ActivateEndpoint+0x1b4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800387e:	687c      	ldr	r4, [r7, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2250      	movs	r2, #80	; 0x50
 8003884:	5a9b      	ldrh	r3, [r3, r2]
 8003886:	b29b      	uxth	r3, r3
 8003888:	18e4      	adds	r4, r4, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	18e3      	adds	r3, r4, r3
 8003892:	2280      	movs	r2, #128	; 0x80
 8003894:	00d2      	lsls	r2, r2, #3
 8003896:	4694      	mov	ip, r2
 8003898:	4463      	add	r3, ip
 800389a:	001c      	movs	r4, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	88db      	ldrh	r3, [r3, #6]
 80038a0:	085b      	lsrs	r3, r3, #1
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	18db      	adds	r3, r3, r3
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	18d3      	adds	r3, r2, r3
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	b29c      	uxth	r4, r3
 80038b8:	0022      	movs	r2, r4
 80038ba:	2340      	movs	r3, #64	; 0x40
 80038bc:	4013      	ands	r3, r2
 80038be:	d012      	beq.n	80038e6 <USB_ActivateEndpoint+0x156>
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	18d3      	adds	r3, r2, r3
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	4a6e      	ldr	r2, [pc, #440]	; (8003a88 <USB_ActivateEndpoint+0x2f8>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	b29c      	uxth	r4, r3
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	18d3      	adds	r3, r2, r3
 80038de:	4a6b      	ldr	r2, [pc, #428]	; (8003a8c <USB_ActivateEndpoint+0x2fc>)
 80038e0:	4322      	orrs	r2, r4
 80038e2:	b292      	uxth	r2, r2
 80038e4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	78db      	ldrb	r3, [r3, #3]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d016      	beq.n	800391c <USB_ActivateEndpoint+0x18c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	18d3      	adds	r3, r2, r3
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	4a64      	ldr	r2, [pc, #400]	; (8003a90 <USB_ActivateEndpoint+0x300>)
 80038fe:	4013      	ands	r3, r2
 8003900:	b29c      	uxth	r4, r3
 8003902:	2320      	movs	r3, #32
 8003904:	4063      	eors	r3, r4
 8003906:	b29c      	uxth	r4, r3
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	18d3      	adds	r3, r2, r3
 8003912:	4a5c      	ldr	r2, [pc, #368]	; (8003a84 <USB_ActivateEndpoint+0x2f4>)
 8003914:	4322      	orrs	r2, r4
 8003916:	b292      	uxth	r2, r2
 8003918:	801a      	strh	r2, [r3, #0]
 800391a:	e21a      	b.n	8003d52 <USB_ActivateEndpoint+0x5c2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	18d3      	adds	r3, r2, r3
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	b29b      	uxth	r3, r3
 800392a:	4a59      	ldr	r2, [pc, #356]	; (8003a90 <USB_ActivateEndpoint+0x300>)
 800392c:	4013      	ands	r3, r2
 800392e:	b29c      	uxth	r4, r3
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	18d3      	adds	r3, r2, r3
 800393a:	4a52      	ldr	r2, [pc, #328]	; (8003a84 <USB_ActivateEndpoint+0x2f4>)
 800393c:	4322      	orrs	r2, r4
 800393e:	b292      	uxth	r2, r2
 8003940:	801a      	strh	r2, [r3, #0]
 8003942:	e206      	b.n	8003d52 <USB_ActivateEndpoint+0x5c2>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003944:	687c      	ldr	r4, [r7, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2250      	movs	r2, #80	; 0x50
 800394a:	5a9b      	ldrh	r3, [r3, r2]
 800394c:	b29b      	uxth	r3, r3
 800394e:	18e4      	adds	r4, r4, r3
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	18e3      	adds	r3, r4, r3
 8003958:	4a4e      	ldr	r2, [pc, #312]	; (8003a94 <USB_ActivateEndpoint+0x304>)
 800395a:	4694      	mov	ip, r2
 800395c:	4463      	add	r3, ip
 800395e:	001c      	movs	r4, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	88db      	ldrh	r3, [r3, #6]
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	b29b      	uxth	r3, r3
 8003968:	18db      	adds	r3, r3, r3
 800396a:	b29b      	uxth	r3, r3
 800396c:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800396e:	687c      	ldr	r4, [r7, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2250      	movs	r2, #80	; 0x50
 8003974:	5a9b      	ldrh	r3, [r3, r2]
 8003976:	b29b      	uxth	r3, r3
 8003978:	18e4      	adds	r4, r4, r3
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	18e3      	adds	r3, r4, r3
 8003982:	4a45      	ldr	r2, [pc, #276]	; (8003a98 <USB_ActivateEndpoint+0x308>)
 8003984:	4694      	mov	ip, r2
 8003986:	4463      	add	r3, ip
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10e      	bne.n	80039b0 <USB_ActivateEndpoint+0x220>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	4a41      	ldr	r2, [pc, #260]	; (8003a9c <USB_ActivateEndpoint+0x30c>)
 8003998:	4013      	ands	r3, r2
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	801a      	strh	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	4a3e      	ldr	r2, [pc, #248]	; (8003aa0 <USB_ActivateEndpoint+0x310>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	801a      	strh	r2, [r3, #0]
 80039ae:	e02b      	b.n	8003a08 <USB_ActivateEndpoint+0x278>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	2b3e      	cmp	r3, #62	; 0x3e
 80039b6:	d812      	bhi.n	80039de <USB_ActivateEndpoint+0x24e>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	085b      	lsrs	r3, r3, #1
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	2201      	movs	r2, #1
 80039c6:	4013      	ands	r3, r2
 80039c8:	d002      	beq.n	80039d0 <USB_ActivateEndpoint+0x240>
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	3301      	adds	r3, #1
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	029b      	lsls	r3, r3, #10
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	801a      	strh	r2, [r3, #0]
 80039dc:	e014      	b.n	8003a08 <USB_ActivateEndpoint+0x278>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	221f      	movs	r2, #31
 80039ec:	4013      	ands	r3, r2
 80039ee:	d102      	bne.n	80039f6 <USB_ActivateEndpoint+0x266>
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	029b      	lsls	r3, r3, #10
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	4a28      	ldr	r2, [pc, #160]	; (8003aa0 <USB_ActivateEndpoint+0x310>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	18d3      	adds	r3, r2, r3
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	b29c      	uxth	r4, r3
 8003a16:	0022      	movs	r2, r4
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	01db      	lsls	r3, r3, #7
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d012      	beq.n	8003a46 <USB_ActivateEndpoint+0x2b6>
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	18d3      	adds	r3, r2, r3
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	4a16      	ldr	r2, [pc, #88]	; (8003a88 <USB_ActivateEndpoint+0x2f8>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	b29c      	uxth	r4, r3
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	18d3      	adds	r3, r2, r3
 8003a3e:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <USB_ActivateEndpoint+0x314>)
 8003a40:	4322      	orrs	r2, r4
 8003a42:	b292      	uxth	r2, r2
 8003a44:	801a      	strh	r2, [r3, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	18d3      	adds	r3, r2, r3
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	4a14      	ldr	r2, [pc, #80]	; (8003aa8 <USB_ActivateEndpoint+0x318>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	b29c      	uxth	r4, r3
 8003a5a:	2380      	movs	r3, #128	; 0x80
 8003a5c:	015b      	lsls	r3, r3, #5
 8003a5e:	4063      	eors	r3, r4
 8003a60:	b29c      	uxth	r4, r3
 8003a62:	2380      	movs	r3, #128	; 0x80
 8003a64:	019b      	lsls	r3, r3, #6
 8003a66:	4063      	eors	r3, r4
 8003a68:	b29c      	uxth	r4, r3
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	18d3      	adds	r3, r2, r3
 8003a74:	4a03      	ldr	r2, [pc, #12]	; (8003a84 <USB_ActivateEndpoint+0x2f4>)
 8003a76:	4322      	orrs	r2, r4
 8003a78:	b292      	uxth	r2, r2
 8003a7a:	801a      	strh	r2, [r3, #0]
 8003a7c:	e169      	b.n	8003d52 <USB_ActivateEndpoint+0x5c2>
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	ffff898f 	.word	0xffff898f
 8003a84:	ffff8080 	.word	0xffff8080
 8003a88:	ffff8f8f 	.word	0xffff8f8f
 8003a8c:	ffff80c0 	.word	0xffff80c0
 8003a90:	ffff8fbf 	.word	0xffff8fbf
 8003a94:	00000404 	.word	0x00000404
 8003a98:	00000406 	.word	0x00000406
 8003a9c:	ffff83ff 	.word	0xffff83ff
 8003aa0:	ffff8000 	.word	0xffff8000
 8003aa4:	ffffc080 	.word	0xffffc080
 8003aa8:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	18d3      	adds	r3, r2, r3
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	4aa9      	ldr	r2, [pc, #676]	; (8003d60 <USB_ActivateEndpoint+0x5d0>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	b29c      	uxth	r4, r3
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	18d3      	adds	r3, r2, r3
 8003aca:	4aa6      	ldr	r2, [pc, #664]	; (8003d64 <USB_ActivateEndpoint+0x5d4>)
 8003acc:	4322      	orrs	r2, r4
 8003ace:	b292      	uxth	r2, r2
 8003ad0:	801a      	strh	r2, [r3, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003ad2:	687c      	ldr	r4, [r7, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2250      	movs	r2, #80	; 0x50
 8003ad8:	5a9b      	ldrh	r3, [r3, r2]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	18e4      	adds	r4, r4, r3
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	18e3      	adds	r3, r4, r3
 8003ae6:	2280      	movs	r2, #128	; 0x80
 8003ae8:	00d2      	lsls	r2, r2, #3
 8003aea:	4694      	mov	ip, r2
 8003aec:	4463      	add	r3, ip
 8003aee:	001c      	movs	r4, r3
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	891b      	ldrh	r3, [r3, #8]
 8003af4:	085b      	lsrs	r3, r3, #1
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	18db      	adds	r3, r3, r3
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	8023      	strh	r3, [r4, #0]
 8003afe:	687c      	ldr	r4, [r7, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2250      	movs	r2, #80	; 0x50
 8003b04:	5a9b      	ldrh	r3, [r3, r2]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	18e4      	adds	r4, r4, r3
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	18e3      	adds	r3, r4, r3
 8003b12:	4a95      	ldr	r2, [pc, #596]	; (8003d68 <USB_ActivateEndpoint+0x5d8>)
 8003b14:	4694      	mov	ip, r2
 8003b16:	4463      	add	r3, ip
 8003b18:	001c      	movs	r4, r3
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	895b      	ldrh	r3, [r3, #10]
 8003b1e:	085b      	lsrs	r3, r3, #1
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	18db      	adds	r3, r3, r3
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	785b      	ldrb	r3, [r3, #1]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d000      	beq.n	8003b32 <USB_ActivateEndpoint+0x3a2>
 8003b30:	e07e      	b.n	8003c30 <USB_ActivateEndpoint+0x4a0>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	18d3      	adds	r3, r2, r3
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	b29c      	uxth	r4, r3
 8003b40:	0022      	movs	r2, r4
 8003b42:	2380      	movs	r3, #128	; 0x80
 8003b44:	01db      	lsls	r3, r3, #7
 8003b46:	4013      	ands	r3, r2
 8003b48:	d012      	beq.n	8003b70 <USB_ActivateEndpoint+0x3e0>
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	18d3      	adds	r3, r2, r3
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	4a81      	ldr	r2, [pc, #516]	; (8003d60 <USB_ActivateEndpoint+0x5d0>)
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	b29c      	uxth	r4, r3
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	18d3      	adds	r3, r2, r3
 8003b68:	4a80      	ldr	r2, [pc, #512]	; (8003d6c <USB_ActivateEndpoint+0x5dc>)
 8003b6a:	4322      	orrs	r2, r4
 8003b6c:	b292      	uxth	r2, r2
 8003b6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	18d3      	adds	r3, r2, r3
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	b29c      	uxth	r4, r3
 8003b7e:	0022      	movs	r2, r4
 8003b80:	2340      	movs	r3, #64	; 0x40
 8003b82:	4013      	ands	r3, r2
 8003b84:	d012      	beq.n	8003bac <USB_ActivateEndpoint+0x41c>
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	18d3      	adds	r3, r2, r3
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	4a72      	ldr	r2, [pc, #456]	; (8003d60 <USB_ActivateEndpoint+0x5d0>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	b29c      	uxth	r4, r3
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	18d3      	adds	r3, r2, r3
 8003ba4:	4a72      	ldr	r2, [pc, #456]	; (8003d70 <USB_ActivateEndpoint+0x5e0>)
 8003ba6:	4322      	orrs	r2, r4
 8003ba8:	b292      	uxth	r2, r2
 8003baa:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	18d3      	adds	r3, r2, r3
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	4a69      	ldr	r2, [pc, #420]	; (8003d60 <USB_ActivateEndpoint+0x5d0>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	b29c      	uxth	r4, r3
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	18d3      	adds	r3, r2, r3
 8003bca:	4a69      	ldr	r2, [pc, #420]	; (8003d70 <USB_ActivateEndpoint+0x5e0>)
 8003bcc:	4322      	orrs	r2, r4
 8003bce:	b292      	uxth	r2, r2
 8003bd0:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	18d3      	adds	r3, r2, r3
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	4a64      	ldr	r2, [pc, #400]	; (8003d74 <USB_ActivateEndpoint+0x5e4>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	b29c      	uxth	r4, r3
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	015b      	lsls	r3, r3, #5
 8003bea:	4063      	eors	r3, r4
 8003bec:	b29c      	uxth	r4, r3
 8003bee:	2380      	movs	r3, #128	; 0x80
 8003bf0:	019b      	lsls	r3, r3, #6
 8003bf2:	4063      	eors	r3, r4
 8003bf4:	b29c      	uxth	r4, r3
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	18d3      	adds	r3, r2, r3
 8003c00:	4a5d      	ldr	r2, [pc, #372]	; (8003d78 <USB_ActivateEndpoint+0x5e8>)
 8003c02:	4322      	orrs	r2, r4
 8003c04:	b292      	uxth	r2, r2
 8003c06:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	18d3      	adds	r3, r2, r3
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	4a59      	ldr	r2, [pc, #356]	; (8003d7c <USB_ActivateEndpoint+0x5ec>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	b29c      	uxth	r4, r3
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	18d3      	adds	r3, r2, r3
 8003c26:	4a54      	ldr	r2, [pc, #336]	; (8003d78 <USB_ActivateEndpoint+0x5e8>)
 8003c28:	4322      	orrs	r2, r4
 8003c2a:	b292      	uxth	r2, r2
 8003c2c:	801a      	strh	r2, [r3, #0]
 8003c2e:	e090      	b.n	8003d52 <USB_ActivateEndpoint+0x5c2>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	18d3      	adds	r3, r2, r3
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	b29c      	uxth	r4, r3
 8003c3e:	0022      	movs	r2, r4
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	01db      	lsls	r3, r3, #7
 8003c44:	4013      	ands	r3, r2
 8003c46:	d012      	beq.n	8003c6e <USB_ActivateEndpoint+0x4de>
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	18d3      	adds	r3, r2, r3
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	4a42      	ldr	r2, [pc, #264]	; (8003d60 <USB_ActivateEndpoint+0x5d0>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	b29c      	uxth	r4, r3
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	18d3      	adds	r3, r2, r3
 8003c66:	4a41      	ldr	r2, [pc, #260]	; (8003d6c <USB_ActivateEndpoint+0x5dc>)
 8003c68:	4322      	orrs	r2, r4
 8003c6a:	b292      	uxth	r2, r2
 8003c6c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	18d3      	adds	r3, r2, r3
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	b29c      	uxth	r4, r3
 8003c7c:	0022      	movs	r2, r4
 8003c7e:	2340      	movs	r3, #64	; 0x40
 8003c80:	4013      	ands	r3, r2
 8003c82:	d012      	beq.n	8003caa <USB_ActivateEndpoint+0x51a>
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	18d3      	adds	r3, r2, r3
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	4a33      	ldr	r2, [pc, #204]	; (8003d60 <USB_ActivateEndpoint+0x5d0>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	b29c      	uxth	r4, r3
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	18d3      	adds	r3, r2, r3
 8003ca2:	4a33      	ldr	r2, [pc, #204]	; (8003d70 <USB_ActivateEndpoint+0x5e0>)
 8003ca4:	4322      	orrs	r2, r4
 8003ca6:	b292      	uxth	r2, r2
 8003ca8:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	18d3      	adds	r3, r2, r3
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	4a29      	ldr	r2, [pc, #164]	; (8003d60 <USB_ActivateEndpoint+0x5d0>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	b29c      	uxth	r4, r3
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	18d3      	adds	r3, r2, r3
 8003cc8:	4a28      	ldr	r2, [pc, #160]	; (8003d6c <USB_ActivateEndpoint+0x5dc>)
 8003cca:	4322      	orrs	r2, r4
 8003ccc:	b292      	uxth	r2, r2
 8003cce:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	78db      	ldrb	r3, [r3, #3]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d016      	beq.n	8003d06 <USB_ActivateEndpoint+0x576>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	18d3      	adds	r3, r2, r3
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	4a25      	ldr	r2, [pc, #148]	; (8003d7c <USB_ActivateEndpoint+0x5ec>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	b29c      	uxth	r4, r3
 8003cec:	2320      	movs	r3, #32
 8003cee:	4063      	eors	r3, r4
 8003cf0:	b29c      	uxth	r4, r3
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	18d3      	adds	r3, r2, r3
 8003cfc:	4a1e      	ldr	r2, [pc, #120]	; (8003d78 <USB_ActivateEndpoint+0x5e8>)
 8003cfe:	4322      	orrs	r2, r4
 8003d00:	b292      	uxth	r2, r2
 8003d02:	801a      	strh	r2, [r3, #0]
 8003d04:	e012      	b.n	8003d2c <USB_ActivateEndpoint+0x59c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	18d3      	adds	r3, r2, r3
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	4a19      	ldr	r2, [pc, #100]	; (8003d7c <USB_ActivateEndpoint+0x5ec>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	b29c      	uxth	r4, r3
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	18d3      	adds	r3, r2, r3
 8003d24:	4a14      	ldr	r2, [pc, #80]	; (8003d78 <USB_ActivateEndpoint+0x5e8>)
 8003d26:	4322      	orrs	r2, r4
 8003d28:	b292      	uxth	r2, r2
 8003d2a:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	18d3      	adds	r3, r2, r3
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	4a0e      	ldr	r2, [pc, #56]	; (8003d74 <USB_ActivateEndpoint+0x5e4>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	b29c      	uxth	r4, r3
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	18d3      	adds	r3, r2, r3
 8003d4a:	4a0b      	ldr	r2, [pc, #44]	; (8003d78 <USB_ActivateEndpoint+0x5e8>)
 8003d4c:	4322      	orrs	r2, r4
 8003d4e:	b292      	uxth	r2, r2
 8003d50:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8003d52:	2317      	movs	r3, #23
 8003d54:	18fb      	adds	r3, r7, r3
 8003d56:	781b      	ldrb	r3, [r3, #0]
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b007      	add	sp, #28
 8003d5e:	bd90      	pop	{r4, r7, pc}
 8003d60:	ffff8f8f 	.word	0xffff8f8f
 8003d64:	ffff8180 	.word	0xffff8180
 8003d68:	00000404 	.word	0x00000404
 8003d6c:	ffffc080 	.word	0xffffc080
 8003d70:	ffff80c0 	.word	0xffff80c0
 8003d74:	ffffbf8f 	.word	0xffffbf8f
 8003d78:	ffff8080 	.word	0xffff8080
 8003d7c:	ffff8fbf 	.word	0xffff8fbf

08003d80 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d80:	b590      	push	{r4, r7, lr}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	7b1b      	ldrb	r3, [r3, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d168      	bne.n	8003e64 <USB_DeactivateEndpoint+0xe4>
  {
    if (ep->is_in != 0U)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	785b      	ldrb	r3, [r3, #1]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d031      	beq.n	8003dfe <USB_DeactivateEndpoint+0x7e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	18d3      	adds	r3, r2, r3
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	b29c      	uxth	r4, r3
 8003da8:	0022      	movs	r2, r4
 8003daa:	2340      	movs	r3, #64	; 0x40
 8003dac:	4013      	ands	r3, r2
 8003dae:	d012      	beq.n	8003dd6 <USB_DeactivateEndpoint+0x56>
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	18d3      	adds	r3, r2, r3
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	4aa5      	ldr	r2, [pc, #660]	; (8004054 <USB_DeactivateEndpoint+0x2d4>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	b29c      	uxth	r4, r3
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	18d3      	adds	r3, r2, r3
 8003dce:	4aa2      	ldr	r2, [pc, #648]	; (8004058 <USB_DeactivateEndpoint+0x2d8>)
 8003dd0:	4322      	orrs	r2, r4
 8003dd2:	b292      	uxth	r2, r2
 8003dd4:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	18d3      	adds	r3, r2, r3
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	4a9d      	ldr	r2, [pc, #628]	; (800405c <USB_DeactivateEndpoint+0x2dc>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	b29c      	uxth	r4, r3
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	18d3      	adds	r3, r2, r3
 8003df4:	4a9a      	ldr	r2, [pc, #616]	; (8004060 <USB_DeactivateEndpoint+0x2e0>)
 8003df6:	4322      	orrs	r2, r4
 8003df8:	b292      	uxth	r2, r2
 8003dfa:	801a      	strh	r2, [r3, #0]
 8003dfc:	e124      	b.n	8004048 <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	18d3      	adds	r3, r2, r3
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	b29c      	uxth	r4, r3
 8003e0c:	0022      	movs	r2, r4
 8003e0e:	2380      	movs	r3, #128	; 0x80
 8003e10:	01db      	lsls	r3, r3, #7
 8003e12:	4013      	ands	r3, r2
 8003e14:	d012      	beq.n	8003e3c <USB_DeactivateEndpoint+0xbc>
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	18d3      	adds	r3, r2, r3
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	4a8b      	ldr	r2, [pc, #556]	; (8004054 <USB_DeactivateEndpoint+0x2d4>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	b29c      	uxth	r4, r3
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	18d3      	adds	r3, r2, r3
 8003e34:	4a8b      	ldr	r2, [pc, #556]	; (8004064 <USB_DeactivateEndpoint+0x2e4>)
 8003e36:	4322      	orrs	r2, r4
 8003e38:	b292      	uxth	r2, r2
 8003e3a:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	18d3      	adds	r3, r2, r3
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	4a87      	ldr	r2, [pc, #540]	; (8004068 <USB_DeactivateEndpoint+0x2e8>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	b29c      	uxth	r4, r3
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	18d3      	adds	r3, r2, r3
 8003e5a:	4a81      	ldr	r2, [pc, #516]	; (8004060 <USB_DeactivateEndpoint+0x2e0>)
 8003e5c:	4322      	orrs	r2, r4
 8003e5e:	b292      	uxth	r2, r2
 8003e60:	801a      	strh	r2, [r3, #0]
 8003e62:	e0f1      	b.n	8004048 <USB_DeactivateEndpoint+0x2c8>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	785b      	ldrb	r3, [r3, #1]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d000      	beq.n	8003e6e <USB_DeactivateEndpoint+0xee>
 8003e6c:	e076      	b.n	8003f5c <USB_DeactivateEndpoint+0x1dc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	18d3      	adds	r3, r2, r3
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	b29c      	uxth	r4, r3
 8003e7c:	0022      	movs	r2, r4
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	01db      	lsls	r3, r3, #7
 8003e82:	4013      	ands	r3, r2
 8003e84:	d012      	beq.n	8003eac <USB_DeactivateEndpoint+0x12c>
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	18d3      	adds	r3, r2, r3
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	4a6f      	ldr	r2, [pc, #444]	; (8004054 <USB_DeactivateEndpoint+0x2d4>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	b29c      	uxth	r4, r3
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	18d3      	adds	r3, r2, r3
 8003ea4:	4a6f      	ldr	r2, [pc, #444]	; (8004064 <USB_DeactivateEndpoint+0x2e4>)
 8003ea6:	4322      	orrs	r2, r4
 8003ea8:	b292      	uxth	r2, r2
 8003eaa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	18d3      	adds	r3, r2, r3
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	b29c      	uxth	r4, r3
 8003eba:	0022      	movs	r2, r4
 8003ebc:	2340      	movs	r3, #64	; 0x40
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d012      	beq.n	8003ee8 <USB_DeactivateEndpoint+0x168>
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	18d3      	adds	r3, r2, r3
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	4a60      	ldr	r2, [pc, #384]	; (8004054 <USB_DeactivateEndpoint+0x2d4>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	b29c      	uxth	r4, r3
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	18d3      	adds	r3, r2, r3
 8003ee0:	4a5d      	ldr	r2, [pc, #372]	; (8004058 <USB_DeactivateEndpoint+0x2d8>)
 8003ee2:	4322      	orrs	r2, r4
 8003ee4:	b292      	uxth	r2, r2
 8003ee6:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	18d3      	adds	r3, r2, r3
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	4a57      	ldr	r2, [pc, #348]	; (8004054 <USB_DeactivateEndpoint+0x2d4>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	b29c      	uxth	r4, r3
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	18d3      	adds	r3, r2, r3
 8003f06:	4a54      	ldr	r2, [pc, #336]	; (8004058 <USB_DeactivateEndpoint+0x2d8>)
 8003f08:	4322      	orrs	r2, r4
 8003f0a:	b292      	uxth	r2, r2
 8003f0c:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	18d3      	adds	r3, r2, r3
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	4a52      	ldr	r2, [pc, #328]	; (8004068 <USB_DeactivateEndpoint+0x2e8>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	b29c      	uxth	r4, r3
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	18d3      	adds	r3, r2, r3
 8003f2c:	4a4c      	ldr	r2, [pc, #304]	; (8004060 <USB_DeactivateEndpoint+0x2e0>)
 8003f2e:	4322      	orrs	r2, r4
 8003f30:	b292      	uxth	r2, r2
 8003f32:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	18d3      	adds	r3, r2, r3
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	4a46      	ldr	r2, [pc, #280]	; (800405c <USB_DeactivateEndpoint+0x2dc>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	b29c      	uxth	r4, r3
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	18d3      	adds	r3, r2, r3
 8003f52:	4a43      	ldr	r2, [pc, #268]	; (8004060 <USB_DeactivateEndpoint+0x2e0>)
 8003f54:	4322      	orrs	r2, r4
 8003f56:	b292      	uxth	r2, r2
 8003f58:	801a      	strh	r2, [r3, #0]
 8003f5a:	e075      	b.n	8004048 <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	18d3      	adds	r3, r2, r3
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b29c      	uxth	r4, r3
 8003f6a:	0022      	movs	r2, r4
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	01db      	lsls	r3, r3, #7
 8003f70:	4013      	ands	r3, r2
 8003f72:	d012      	beq.n	8003f9a <USB_DeactivateEndpoint+0x21a>
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	18d3      	adds	r3, r2, r3
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	4a34      	ldr	r2, [pc, #208]	; (8004054 <USB_DeactivateEndpoint+0x2d4>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	b29c      	uxth	r4, r3
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	18d3      	adds	r3, r2, r3
 8003f92:	4a34      	ldr	r2, [pc, #208]	; (8004064 <USB_DeactivateEndpoint+0x2e4>)
 8003f94:	4322      	orrs	r2, r4
 8003f96:	b292      	uxth	r2, r2
 8003f98:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	18d3      	adds	r3, r2, r3
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	b29c      	uxth	r4, r3
 8003fa8:	0022      	movs	r2, r4
 8003faa:	2340      	movs	r3, #64	; 0x40
 8003fac:	4013      	ands	r3, r2
 8003fae:	d012      	beq.n	8003fd6 <USB_DeactivateEndpoint+0x256>
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	18d3      	adds	r3, r2, r3
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	4a25      	ldr	r2, [pc, #148]	; (8004054 <USB_DeactivateEndpoint+0x2d4>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	b29c      	uxth	r4, r3
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	18d3      	adds	r3, r2, r3
 8003fce:	4a22      	ldr	r2, [pc, #136]	; (8004058 <USB_DeactivateEndpoint+0x2d8>)
 8003fd0:	4322      	orrs	r2, r4
 8003fd2:	b292      	uxth	r2, r2
 8003fd4:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	18d3      	adds	r3, r2, r3
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	4a1b      	ldr	r2, [pc, #108]	; (8004054 <USB_DeactivateEndpoint+0x2d4>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	b29c      	uxth	r4, r3
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	18d3      	adds	r3, r2, r3
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <USB_DeactivateEndpoint+0x2e4>)
 8003ff6:	4322      	orrs	r2, r4
 8003ff8:	b292      	uxth	r2, r2
 8003ffa:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	18d3      	adds	r3, r2, r3
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	b29b      	uxth	r3, r3
 800400a:	4a14      	ldr	r2, [pc, #80]	; (800405c <USB_DeactivateEndpoint+0x2dc>)
 800400c:	4013      	ands	r3, r2
 800400e:	b29c      	uxth	r4, r3
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	18d3      	adds	r3, r2, r3
 800401a:	4a11      	ldr	r2, [pc, #68]	; (8004060 <USB_DeactivateEndpoint+0x2e0>)
 800401c:	4322      	orrs	r2, r4
 800401e:	b292      	uxth	r2, r2
 8004020:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	18d3      	adds	r3, r2, r3
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	b29b      	uxth	r3, r3
 8004030:	4a0d      	ldr	r2, [pc, #52]	; (8004068 <USB_DeactivateEndpoint+0x2e8>)
 8004032:	4013      	ands	r3, r2
 8004034:	b29c      	uxth	r4, r3
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	18d3      	adds	r3, r2, r3
 8004040:	4a07      	ldr	r2, [pc, #28]	; (8004060 <USB_DeactivateEndpoint+0x2e0>)
 8004042:	4322      	orrs	r2, r4
 8004044:	b292      	uxth	r2, r2
 8004046:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	0018      	movs	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	b003      	add	sp, #12
 8004050:	bd90      	pop	{r4, r7, pc}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	ffff8f8f 	.word	0xffff8f8f
 8004058:	ffff80c0 	.word	0xffff80c0
 800405c:	ffff8fbf 	.word	0xffff8fbf
 8004060:	ffff8080 	.word	0xffff8080
 8004064:	ffffc080 	.word	0xffffc080
 8004068:	ffffbf8f 	.word	0xffffbf8f

0800406c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b095      	sub	sp, #84	; 0x54
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	785b      	ldrb	r3, [r3, #1]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d000      	beq.n	8004080 <USB_EPStartXfer+0x14>
 800407e:	e163      	b.n	8004348 <USB_EPStartXfer+0x2dc>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	699a      	ldr	r2, [r3, #24]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	429a      	cmp	r2, r3
 800408a:	d909      	bls.n	80040a0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004098:	1ad2      	subs	r2, r2, r3
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	619a      	str	r2, [r3, #24]
 800409e:	e005      	b.n	80040ac <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2200      	movs	r2, #0
 80040aa:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	7b1b      	ldrb	r3, [r3, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d11b      	bne.n	80040ec <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	6959      	ldr	r1, [r3, #20]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	88da      	ldrh	r2, [r3, #6]
 80040bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040be:	b29b      	uxth	r3, r3
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fbbb 	bl	800483c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80040c6:	687c      	ldr	r4, [r7, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2250      	movs	r2, #80	; 0x50
 80040cc:	5a9b      	ldrh	r3, [r3, r2]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	18e4      	adds	r4, r4, r3
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	18e3      	adds	r3, r4, r3
 80040da:	4acc      	ldr	r2, [pc, #816]	; (800440c <USB_EPStartXfer+0x3a0>)
 80040dc:	4694      	mov	ip, r2
 80040de:	4463      	add	r3, ip
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	801a      	strh	r2, [r3, #0]
 80040ea:	e113      	b.n	8004314 <USB_EPStartXfer+0x2a8>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	18d3      	adds	r3, r2, r3
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	001a      	movs	r2, r3
 80040fc:	2340      	movs	r3, #64	; 0x40
 80040fe:	4013      	ands	r3, r2
 8004100:	d067      	beq.n	80041d2 <USB_EPStartXfer+0x166>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004102:	687c      	ldr	r4, [r7, #4]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	785b      	ldrb	r3, [r3, #1]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d147      	bne.n	800419c <USB_EPStartXfer+0x130>
 800410c:	687c      	ldr	r4, [r7, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2250      	movs	r2, #80	; 0x50
 8004112:	5a9b      	ldrh	r3, [r3, r2]
 8004114:	b29b      	uxth	r3, r3
 8004116:	18e4      	adds	r4, r4, r3
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	18e3      	adds	r3, r4, r3
 8004120:	4abb      	ldr	r2, [pc, #748]	; (8004410 <USB_EPStartXfer+0x3a4>)
 8004122:	4694      	mov	ip, r2
 8004124:	4463      	add	r3, ip
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10e      	bne.n	800414c <USB_EPStartXfer+0xe0>
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	4ab8      	ldr	r2, [pc, #736]	; (8004414 <USB_EPStartXfer+0x3a8>)
 8004134:	4013      	ands	r3, r2
 8004136:	b29a      	uxth	r2, r3
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	801a      	strh	r2, [r3, #0]
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	4ab5      	ldr	r2, [pc, #724]	; (8004418 <USB_EPStartXfer+0x3ac>)
 8004142:	4313      	orrs	r3, r2
 8004144:	b29a      	uxth	r2, r3
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	801a      	strh	r2, [r3, #0]
 800414a:	e03c      	b.n	80041c6 <USB_EPStartXfer+0x15a>
 800414c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800414e:	2b3e      	cmp	r3, #62	; 0x3e
 8004150:	d810      	bhi.n	8004174 <USB_EPStartXfer+0x108>
 8004152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004154:	085b      	lsrs	r3, r3, #1
 8004156:	647b      	str	r3, [r7, #68]	; 0x44
 8004158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800415a:	2201      	movs	r2, #1
 800415c:	4013      	ands	r3, r2
 800415e:	d002      	beq.n	8004166 <USB_EPStartXfer+0xfa>
 8004160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004162:	3301      	adds	r3, #1
 8004164:	647b      	str	r3, [r7, #68]	; 0x44
 8004166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004168:	b29b      	uxth	r3, r3
 800416a:	029b      	lsls	r3, r3, #10
 800416c:	b29a      	uxth	r2, r3
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	801a      	strh	r2, [r3, #0]
 8004172:	e028      	b.n	80041c6 <USB_EPStartXfer+0x15a>
 8004174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	647b      	str	r3, [r7, #68]	; 0x44
 800417a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800417c:	221f      	movs	r2, #31
 800417e:	4013      	ands	r3, r2
 8004180:	d102      	bne.n	8004188 <USB_EPStartXfer+0x11c>
 8004182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004184:	3b01      	subs	r3, #1
 8004186:	647b      	str	r3, [r7, #68]	; 0x44
 8004188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800418a:	b29b      	uxth	r3, r3
 800418c:	029b      	lsls	r3, r3, #10
 800418e:	b29b      	uxth	r3, r3
 8004190:	4aa1      	ldr	r2, [pc, #644]	; (8004418 <USB_EPStartXfer+0x3ac>)
 8004192:	4313      	orrs	r3, r2
 8004194:	b29a      	uxth	r2, r3
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	801a      	strh	r2, [r3, #0]
 800419a:	e014      	b.n	80041c6 <USB_EPStartXfer+0x15a>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	785b      	ldrb	r3, [r3, #1]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d110      	bne.n	80041c6 <USB_EPStartXfer+0x15a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2250      	movs	r2, #80	; 0x50
 80041a8:	5a9b      	ldrh	r3, [r3, r2]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	18e4      	adds	r4, r4, r3
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	18e3      	adds	r3, r4, r3
 80041b6:	4a96      	ldr	r2, [pc, #600]	; (8004410 <USB_EPStartXfer+0x3a4>)
 80041b8:	4694      	mov	ip, r2
 80041ba:	4463      	add	r3, ip
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80041c6:	234e      	movs	r3, #78	; 0x4e
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	8952      	ldrh	r2, [r2, #10]
 80041ce:	801a      	strh	r2, [r3, #0]
 80041d0:	e066      	b.n	80042a0 <USB_EPStartXfer+0x234>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	785b      	ldrb	r3, [r3, #1]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d147      	bne.n	800426a <USB_EPStartXfer+0x1fe>
 80041da:	687c      	ldr	r4, [r7, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2250      	movs	r2, #80	; 0x50
 80041e0:	5a9b      	ldrh	r3, [r3, r2]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	18e4      	adds	r4, r4, r3
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	18e3      	adds	r3, r4, r3
 80041ee:	4a87      	ldr	r2, [pc, #540]	; (800440c <USB_EPStartXfer+0x3a0>)
 80041f0:	4694      	mov	ip, r2
 80041f2:	4463      	add	r3, ip
 80041f4:	61bb      	str	r3, [r7, #24]
 80041f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10e      	bne.n	800421a <USB_EPStartXfer+0x1ae>
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	4a84      	ldr	r2, [pc, #528]	; (8004414 <USB_EPStartXfer+0x3a8>)
 8004202:	4013      	ands	r3, r2
 8004204:	b29a      	uxth	r2, r3
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	801a      	strh	r2, [r3, #0]
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	4a82      	ldr	r2, [pc, #520]	; (8004418 <USB_EPStartXfer+0x3ac>)
 8004210:	4313      	orrs	r3, r2
 8004212:	b29a      	uxth	r2, r3
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	801a      	strh	r2, [r3, #0]
 8004218:	e03d      	b.n	8004296 <USB_EPStartXfer+0x22a>
 800421a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800421c:	2b3e      	cmp	r3, #62	; 0x3e
 800421e:	d810      	bhi.n	8004242 <USB_EPStartXfer+0x1d6>
 8004220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004222:	085b      	lsrs	r3, r3, #1
 8004224:	643b      	str	r3, [r7, #64]	; 0x40
 8004226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004228:	2201      	movs	r2, #1
 800422a:	4013      	ands	r3, r2
 800422c:	d002      	beq.n	8004234 <USB_EPStartXfer+0x1c8>
 800422e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004230:	3301      	adds	r3, #1
 8004232:	643b      	str	r3, [r7, #64]	; 0x40
 8004234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004236:	b29b      	uxth	r3, r3
 8004238:	029b      	lsls	r3, r3, #10
 800423a:	b29a      	uxth	r2, r3
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	801a      	strh	r2, [r3, #0]
 8004240:	e029      	b.n	8004296 <USB_EPStartXfer+0x22a>
 8004242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	643b      	str	r3, [r7, #64]	; 0x40
 8004248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800424a:	221f      	movs	r2, #31
 800424c:	4013      	ands	r3, r2
 800424e:	d102      	bne.n	8004256 <USB_EPStartXfer+0x1ea>
 8004250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004252:	3b01      	subs	r3, #1
 8004254:	643b      	str	r3, [r7, #64]	; 0x40
 8004256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004258:	b29b      	uxth	r3, r3
 800425a:	029b      	lsls	r3, r3, #10
 800425c:	b29b      	uxth	r3, r3
 800425e:	4a6e      	ldr	r2, [pc, #440]	; (8004418 <USB_EPStartXfer+0x3ac>)
 8004260:	4313      	orrs	r3, r2
 8004262:	b29a      	uxth	r2, r3
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	801a      	strh	r2, [r3, #0]
 8004268:	e015      	b.n	8004296 <USB_EPStartXfer+0x22a>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	785b      	ldrb	r3, [r3, #1]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d111      	bne.n	8004296 <USB_EPStartXfer+0x22a>
 8004272:	687c      	ldr	r4, [r7, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2250      	movs	r2, #80	; 0x50
 8004278:	5a9b      	ldrh	r3, [r3, r2]
 800427a:	b29b      	uxth	r3, r3
 800427c:	18e4      	adds	r4, r4, r3
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	18e3      	adds	r3, r4, r3
 8004286:	4a61      	ldr	r2, [pc, #388]	; (800440c <USB_EPStartXfer+0x3a0>)
 8004288:	4694      	mov	ip, r2
 800428a:	4463      	add	r3, ip
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004290:	b29a      	uxth	r2, r3
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8004296:	234e      	movs	r3, #78	; 0x4e
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	8912      	ldrh	r2, [r2, #8]
 800429e:	801a      	strh	r2, [r3, #0]
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	6959      	ldr	r1, [r3, #20]
 80042a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a6:	b29c      	uxth	r4, r3
 80042a8:	234e      	movs	r3, #78	; 0x4e
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	881a      	ldrh	r2, [r3, #0]
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	0023      	movs	r3, r4
 80042b2:	f000 fac3 	bl	800483c <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	785b      	ldrb	r3, [r3, #1]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d113      	bne.n	80042e6 <USB_EPStartXfer+0x27a>
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	18d3      	adds	r3, r2, r3
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	4a53      	ldr	r2, [pc, #332]	; (800441c <USB_EPStartXfer+0x3b0>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	b29c      	uxth	r4, r3
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	18d3      	adds	r3, r2, r3
 80042dc:	4a50      	ldr	r2, [pc, #320]	; (8004420 <USB_EPStartXfer+0x3b4>)
 80042de:	4322      	orrs	r2, r4
 80042e0:	b292      	uxth	r2, r2
 80042e2:	801a      	strh	r2, [r3, #0]
 80042e4:	e016      	b.n	8004314 <USB_EPStartXfer+0x2a8>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	785b      	ldrb	r3, [r3, #1]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d112      	bne.n	8004314 <USB_EPStartXfer+0x2a8>
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	18d3      	adds	r3, r2, r3
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	4a47      	ldr	r2, [pc, #284]	; (800441c <USB_EPStartXfer+0x3b0>)
 80042fe:	4013      	ands	r3, r2
 8004300:	b29c      	uxth	r4, r3
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	18d3      	adds	r3, r2, r3
 800430c:	4a45      	ldr	r2, [pc, #276]	; (8004424 <USB_EPStartXfer+0x3b8>)
 800430e:	4322      	orrs	r2, r4
 8004310:	b292      	uxth	r2, r2
 8004312:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	18d3      	adds	r3, r2, r3
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	b29b      	uxth	r3, r3
 8004322:	4a41      	ldr	r2, [pc, #260]	; (8004428 <USB_EPStartXfer+0x3bc>)
 8004324:	4013      	ands	r3, r2
 8004326:	b29c      	uxth	r4, r3
 8004328:	2310      	movs	r3, #16
 800432a:	4063      	eors	r3, r4
 800432c:	b29c      	uxth	r4, r3
 800432e:	2320      	movs	r3, #32
 8004330:	4063      	eors	r3, r4
 8004332:	b29c      	uxth	r4, r3
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	18d3      	adds	r3, r2, r3
 800433e:	4a3b      	ldr	r2, [pc, #236]	; (800442c <USB_EPStartXfer+0x3c0>)
 8004340:	4322      	orrs	r2, r4
 8004342:	b292      	uxth	r2, r2
 8004344:	801a      	strh	r2, [r3, #0]
 8004346:	e152      	b.n	80045ee <USB_EPStartXfer+0x582>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	699a      	ldr	r2, [r3, #24]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	429a      	cmp	r2, r3
 8004352:	d909      	bls.n	8004368 <USB_EPStartXfer+0x2fc>
    {
      len = ep->maxpacket;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004360:	1ad2      	subs	r2, r2, r3
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	619a      	str	r2, [r3, #24]
 8004366:	e005      	b.n	8004374 <USB_EPStartXfer+0x308>
    }
    else
    {
      len = ep->xfer_len;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2200      	movs	r2, #0
 8004372:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	7b1b      	ldrb	r3, [r3, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d159      	bne.n	8004430 <USB_EPStartXfer+0x3c4>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800437c:	687c      	ldr	r4, [r7, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2250      	movs	r2, #80	; 0x50
 8004382:	5a9b      	ldrh	r3, [r3, r2]
 8004384:	b29b      	uxth	r3, r3
 8004386:	18e4      	adds	r4, r4, r3
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	18e3      	adds	r3, r4, r3
 8004390:	4a1f      	ldr	r2, [pc, #124]	; (8004410 <USB_EPStartXfer+0x3a4>)
 8004392:	4694      	mov	ip, r2
 8004394:	4463      	add	r3, ip
 8004396:	623b      	str	r3, [r7, #32]
 8004398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10e      	bne.n	80043bc <USB_EPStartXfer+0x350>
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <USB_EPStartXfer+0x3a8>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	801a      	strh	r2, [r3, #0]
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	4a19      	ldr	r2, [pc, #100]	; (8004418 <USB_EPStartXfer+0x3ac>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	801a      	strh	r2, [r3, #0]
 80043ba:	e0fd      	b.n	80045b8 <USB_EPStartXfer+0x54c>
 80043bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043be:	2b3e      	cmp	r3, #62	; 0x3e
 80043c0:	d810      	bhi.n	80043e4 <USB_EPStartXfer+0x378>
 80043c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c4:	085b      	lsrs	r3, r3, #1
 80043c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ca:	2201      	movs	r2, #1
 80043cc:	4013      	ands	r3, r2
 80043ce:	d002      	beq.n	80043d6 <USB_EPStartXfer+0x36a>
 80043d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d2:	3301      	adds	r3, #1
 80043d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d8:	b29b      	uxth	r3, r3
 80043da:	029b      	lsls	r3, r3, #10
 80043dc:	b29a      	uxth	r2, r3
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	801a      	strh	r2, [r3, #0]
 80043e2:	e0e9      	b.n	80045b8 <USB_EPStartXfer+0x54c>
 80043e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ec:	221f      	movs	r2, #31
 80043ee:	4013      	ands	r3, r2
 80043f0:	d102      	bne.n	80043f8 <USB_EPStartXfer+0x38c>
 80043f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f4:	3b01      	subs	r3, #1
 80043f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	029b      	lsls	r3, r3, #10
 80043fe:	b29b      	uxth	r3, r3
 8004400:	4a05      	ldr	r2, [pc, #20]	; (8004418 <USB_EPStartXfer+0x3ac>)
 8004402:	4313      	orrs	r3, r2
 8004404:	b29a      	uxth	r2, r3
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	801a      	strh	r2, [r3, #0]
 800440a:	e0d5      	b.n	80045b8 <USB_EPStartXfer+0x54c>
 800440c:	00000402 	.word	0x00000402
 8004410:	00000406 	.word	0x00000406
 8004414:	ffff83ff 	.word	0xffff83ff
 8004418:	ffff8000 	.word	0xffff8000
 800441c:	ffff8f8f 	.word	0xffff8f8f
 8004420:	ffff80c0 	.word	0xffff80c0
 8004424:	ffffc080 	.word	0xffffc080
 8004428:	ffff8fbf 	.word	0xffff8fbf
 800442c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	785b      	ldrb	r3, [r3, #1]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d147      	bne.n	80044c8 <USB_EPStartXfer+0x45c>
 8004438:	687c      	ldr	r4, [r7, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2250      	movs	r2, #80	; 0x50
 800443e:	5a9b      	ldrh	r3, [r3, r2]
 8004440:	b29b      	uxth	r3, r3
 8004442:	18e4      	adds	r4, r4, r3
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	18e3      	adds	r3, r4, r3
 800444c:	4a6a      	ldr	r2, [pc, #424]	; (80045f8 <USB_EPStartXfer+0x58c>)
 800444e:	4694      	mov	ip, r2
 8004450:	4463      	add	r3, ip
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10e      	bne.n	8004478 <USB_EPStartXfer+0x40c>
 800445a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	4a67      	ldr	r2, [pc, #412]	; (80045fc <USB_EPStartXfer+0x590>)
 8004460:	4013      	ands	r3, r2
 8004462:	b29a      	uxth	r2, r3
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004466:	801a      	strh	r2, [r3, #0]
 8004468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	4a64      	ldr	r2, [pc, #400]	; (8004600 <USB_EPStartXfer+0x594>)
 800446e:	4313      	orrs	r3, r2
 8004470:	b29a      	uxth	r2, r3
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	801a      	strh	r2, [r3, #0]
 8004476:	e03d      	b.n	80044f4 <USB_EPStartXfer+0x488>
 8004478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800447a:	2b3e      	cmp	r3, #62	; 0x3e
 800447c:	d810      	bhi.n	80044a0 <USB_EPStartXfer+0x434>
 800447e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004480:	085b      	lsrs	r3, r3, #1
 8004482:	63bb      	str	r3, [r7, #56]	; 0x38
 8004484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004486:	2201      	movs	r2, #1
 8004488:	4013      	ands	r3, r2
 800448a:	d002      	beq.n	8004492 <USB_EPStartXfer+0x426>
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	3301      	adds	r3, #1
 8004490:	63bb      	str	r3, [r7, #56]	; 0x38
 8004492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004494:	b29b      	uxth	r3, r3
 8004496:	029b      	lsls	r3, r3, #10
 8004498:	b29a      	uxth	r2, r3
 800449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449c:	801a      	strh	r2, [r3, #0]
 800449e:	e029      	b.n	80044f4 <USB_EPStartXfer+0x488>
 80044a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80044a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a8:	221f      	movs	r2, #31
 80044aa:	4013      	ands	r3, r2
 80044ac:	d102      	bne.n	80044b4 <USB_EPStartXfer+0x448>
 80044ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b0:	3b01      	subs	r3, #1
 80044b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80044b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	029b      	lsls	r3, r3, #10
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	4a50      	ldr	r2, [pc, #320]	; (8004600 <USB_EPStartXfer+0x594>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c4:	801a      	strh	r2, [r3, #0]
 80044c6:	e015      	b.n	80044f4 <USB_EPStartXfer+0x488>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	785b      	ldrb	r3, [r3, #1]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d111      	bne.n	80044f4 <USB_EPStartXfer+0x488>
 80044d0:	687c      	ldr	r4, [r7, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2250      	movs	r2, #80	; 0x50
 80044d6:	5a9b      	ldrh	r3, [r3, r2]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	18e4      	adds	r4, r4, r3
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	18e3      	adds	r3, r4, r3
 80044e4:	4a44      	ldr	r2, [pc, #272]	; (80045f8 <USB_EPStartXfer+0x58c>)
 80044e6:	4694      	mov	ip, r2
 80044e8:	4463      	add	r3, ip
 80044ea:	633b      	str	r3, [r7, #48]	; 0x30
 80044ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	801a      	strh	r2, [r3, #0]
 80044f4:	687c      	ldr	r4, [r7, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	785b      	ldrb	r3, [r3, #1]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d147      	bne.n	800458e <USB_EPStartXfer+0x522>
 80044fe:	687c      	ldr	r4, [r7, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2250      	movs	r2, #80	; 0x50
 8004504:	5a9b      	ldrh	r3, [r3, r2]
 8004506:	b29b      	uxth	r3, r3
 8004508:	18e4      	adds	r4, r4, r3
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	18e3      	adds	r3, r4, r3
 8004512:	4a3c      	ldr	r2, [pc, #240]	; (8004604 <USB_EPStartXfer+0x598>)
 8004514:	4694      	mov	ip, r2
 8004516:	4463      	add	r3, ip
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
 800451a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10e      	bne.n	800453e <USB_EPStartXfer+0x4d2>
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	4a35      	ldr	r2, [pc, #212]	; (80045fc <USB_EPStartXfer+0x590>)
 8004526:	4013      	ands	r3, r2
 8004528:	b29a      	uxth	r2, r3
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	801a      	strh	r2, [r3, #0]
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	4a33      	ldr	r2, [pc, #204]	; (8004600 <USB_EPStartXfer+0x594>)
 8004534:	4313      	orrs	r3, r2
 8004536:	b29a      	uxth	r2, r3
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	801a      	strh	r2, [r3, #0]
 800453c:	e03c      	b.n	80045b8 <USB_EPStartXfer+0x54c>
 800453e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004540:	2b3e      	cmp	r3, #62	; 0x3e
 8004542:	d810      	bhi.n	8004566 <USB_EPStartXfer+0x4fa>
 8004544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004546:	085b      	lsrs	r3, r3, #1
 8004548:	637b      	str	r3, [r7, #52]	; 0x34
 800454a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800454c:	2201      	movs	r2, #1
 800454e:	4013      	ands	r3, r2
 8004550:	d002      	beq.n	8004558 <USB_EPStartXfer+0x4ec>
 8004552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004554:	3301      	adds	r3, #1
 8004556:	637b      	str	r3, [r7, #52]	; 0x34
 8004558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455a:	b29b      	uxth	r3, r3
 800455c:	029b      	lsls	r3, r3, #10
 800455e:	b29a      	uxth	r2, r3
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	801a      	strh	r2, [r3, #0]
 8004564:	e028      	b.n	80045b8 <USB_EPStartXfer+0x54c>
 8004566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	637b      	str	r3, [r7, #52]	; 0x34
 800456c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800456e:	221f      	movs	r2, #31
 8004570:	4013      	ands	r3, r2
 8004572:	d102      	bne.n	800457a <USB_EPStartXfer+0x50e>
 8004574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004576:	3b01      	subs	r3, #1
 8004578:	637b      	str	r3, [r7, #52]	; 0x34
 800457a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457c:	b29b      	uxth	r3, r3
 800457e:	029b      	lsls	r3, r3, #10
 8004580:	b29b      	uxth	r3, r3
 8004582:	4a1f      	ldr	r2, [pc, #124]	; (8004600 <USB_EPStartXfer+0x594>)
 8004584:	4313      	orrs	r3, r2
 8004586:	b29a      	uxth	r2, r3
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	801a      	strh	r2, [r3, #0]
 800458c:	e014      	b.n	80045b8 <USB_EPStartXfer+0x54c>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	785b      	ldrb	r3, [r3, #1]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d110      	bne.n	80045b8 <USB_EPStartXfer+0x54c>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2250      	movs	r2, #80	; 0x50
 800459a:	5a9b      	ldrh	r3, [r3, r2]
 800459c:	b29b      	uxth	r3, r3
 800459e:	18e4      	adds	r4, r4, r3
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	18e3      	adds	r3, r4, r3
 80045a8:	4a16      	ldr	r2, [pc, #88]	; (8004604 <USB_EPStartXfer+0x598>)
 80045aa:	4694      	mov	ip, r2
 80045ac:	4463      	add	r3, ip
 80045ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80045b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	18d3      	adds	r3, r2, r3
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	4a10      	ldr	r2, [pc, #64]	; (8004608 <USB_EPStartXfer+0x59c>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	b29c      	uxth	r4, r3
 80045cc:	2380      	movs	r3, #128	; 0x80
 80045ce:	015b      	lsls	r3, r3, #5
 80045d0:	4063      	eors	r3, r4
 80045d2:	b29c      	uxth	r4, r3
 80045d4:	2380      	movs	r3, #128	; 0x80
 80045d6:	019b      	lsls	r3, r3, #6
 80045d8:	4063      	eors	r3, r4
 80045da:	b29c      	uxth	r4, r3
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	18d3      	adds	r3, r2, r3
 80045e6:	4a09      	ldr	r2, [pc, #36]	; (800460c <USB_EPStartXfer+0x5a0>)
 80045e8:	4322      	orrs	r2, r4
 80045ea:	b292      	uxth	r2, r2
 80045ec:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	0018      	movs	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b015      	add	sp, #84	; 0x54
 80045f6:	bd90      	pop	{r4, r7, pc}
 80045f8:	00000402 	.word	0x00000402
 80045fc:	ffff83ff 	.word	0xffff83ff
 8004600:	ffff8000 	.word	0xffff8000
 8004604:	00000406 	.word	0x00000406
 8004608:	ffffbf8f 	.word	0xffffbf8f
 800460c:	ffff8080 	.word	0xffff8080

08004610 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004610:	b590      	push	{r4, r7, lr}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	785b      	ldrb	r3, [r3, #1]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d016      	beq.n	8004650 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	18d3      	adds	r3, r2, r3
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	b29b      	uxth	r3, r3
 8004630:	4a15      	ldr	r2, [pc, #84]	; (8004688 <USB_EPSetStall+0x78>)
 8004632:	4013      	ands	r3, r2
 8004634:	b29c      	uxth	r4, r3
 8004636:	2310      	movs	r3, #16
 8004638:	4063      	eors	r3, r4
 800463a:	b29c      	uxth	r4, r3
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	18d3      	adds	r3, r2, r3
 8004646:	4a11      	ldr	r2, [pc, #68]	; (800468c <USB_EPSetStall+0x7c>)
 8004648:	4322      	orrs	r2, r4
 800464a:	b292      	uxth	r2, r2
 800464c:	801a      	strh	r2, [r3, #0]
 800464e:	e016      	b.n	800467e <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	18d3      	adds	r3, r2, r3
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	b29b      	uxth	r3, r3
 800465e:	4a0c      	ldr	r2, [pc, #48]	; (8004690 <USB_EPSetStall+0x80>)
 8004660:	4013      	ands	r3, r2
 8004662:	b29c      	uxth	r4, r3
 8004664:	2380      	movs	r3, #128	; 0x80
 8004666:	015b      	lsls	r3, r3, #5
 8004668:	4063      	eors	r3, r4
 800466a:	b29c      	uxth	r4, r3
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	18d3      	adds	r3, r2, r3
 8004676:	4a05      	ldr	r2, [pc, #20]	; (800468c <USB_EPSetStall+0x7c>)
 8004678:	4322      	orrs	r2, r4
 800467a:	b292      	uxth	r2, r2
 800467c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	0018      	movs	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	b003      	add	sp, #12
 8004686:	bd90      	pop	{r4, r7, pc}
 8004688:	ffff8fbf 	.word	0xffff8fbf
 800468c:	ffff8080 	.word	0xffff8080
 8004690:	ffffbf8f 	.word	0xffffbf8f

08004694 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004694:	b590      	push	{r4, r7, lr}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	7b1b      	ldrb	r3, [r3, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d000      	beq.n	80046a8 <USB_EPClearStall+0x14>
 80046a6:	e076      	b.n	8004796 <USB_EPClearStall+0x102>
  {
    if (ep->is_in != 0U)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	785b      	ldrb	r3, [r3, #1]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d038      	beq.n	8004722 <USB_EPClearStall+0x8e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	18d3      	adds	r3, r2, r3
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	b29c      	uxth	r4, r3
 80046be:	0022      	movs	r2, r4
 80046c0:	2340      	movs	r3, #64	; 0x40
 80046c2:	4013      	ands	r3, r2
 80046c4:	d012      	beq.n	80046ec <USB_EPClearStall+0x58>
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	18d3      	adds	r3, r2, r3
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	4a32      	ldr	r2, [pc, #200]	; (80047a0 <USB_EPClearStall+0x10c>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	b29c      	uxth	r4, r3
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	18d3      	adds	r3, r2, r3
 80046e4:	4a2f      	ldr	r2, [pc, #188]	; (80047a4 <USB_EPClearStall+0x110>)
 80046e6:	4322      	orrs	r2, r4
 80046e8:	b292      	uxth	r2, r2
 80046ea:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	78db      	ldrb	r3, [r3, #3]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d050      	beq.n	8004796 <USB_EPClearStall+0x102>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	18d3      	adds	r3, r2, r3
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	b29b      	uxth	r3, r3
 8004702:	4a29      	ldr	r2, [pc, #164]	; (80047a8 <USB_EPClearStall+0x114>)
 8004704:	4013      	ands	r3, r2
 8004706:	b29c      	uxth	r4, r3
 8004708:	2320      	movs	r3, #32
 800470a:	4063      	eors	r3, r4
 800470c:	b29c      	uxth	r4, r3
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	18d3      	adds	r3, r2, r3
 8004718:	4a24      	ldr	r2, [pc, #144]	; (80047ac <USB_EPClearStall+0x118>)
 800471a:	4322      	orrs	r2, r4
 800471c:	b292      	uxth	r2, r2
 800471e:	801a      	strh	r2, [r3, #0]
 8004720:	e039      	b.n	8004796 <USB_EPClearStall+0x102>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	18d3      	adds	r3, r2, r3
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	b29c      	uxth	r4, r3
 8004730:	0022      	movs	r2, r4
 8004732:	2380      	movs	r3, #128	; 0x80
 8004734:	01db      	lsls	r3, r3, #7
 8004736:	4013      	ands	r3, r2
 8004738:	d012      	beq.n	8004760 <USB_EPClearStall+0xcc>
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	18d3      	adds	r3, r2, r3
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	b29b      	uxth	r3, r3
 8004748:	4a15      	ldr	r2, [pc, #84]	; (80047a0 <USB_EPClearStall+0x10c>)
 800474a:	4013      	ands	r3, r2
 800474c:	b29c      	uxth	r4, r3
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	18d3      	adds	r3, r2, r3
 8004758:	4a15      	ldr	r2, [pc, #84]	; (80047b0 <USB_EPClearStall+0x11c>)
 800475a:	4322      	orrs	r2, r4
 800475c:	b292      	uxth	r2, r2
 800475e:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	18d3      	adds	r3, r2, r3
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	b29b      	uxth	r3, r3
 800476e:	4a11      	ldr	r2, [pc, #68]	; (80047b4 <USB_EPClearStall+0x120>)
 8004770:	4013      	ands	r3, r2
 8004772:	b29c      	uxth	r4, r3
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	015b      	lsls	r3, r3, #5
 8004778:	4063      	eors	r3, r4
 800477a:	b29c      	uxth	r4, r3
 800477c:	2380      	movs	r3, #128	; 0x80
 800477e:	019b      	lsls	r3, r3, #6
 8004780:	4063      	eors	r3, r4
 8004782:	b29c      	uxth	r4, r3
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	18d3      	adds	r3, r2, r3
 800478e:	4a07      	ldr	r2, [pc, #28]	; (80047ac <USB_EPClearStall+0x118>)
 8004790:	4322      	orrs	r2, r4
 8004792:	b292      	uxth	r2, r2
 8004794:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	0018      	movs	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	b003      	add	sp, #12
 800479e:	bd90      	pop	{r4, r7, pc}
 80047a0:	ffff8f8f 	.word	0xffff8f8f
 80047a4:	ffff80c0 	.word	0xffff80c0
 80047a8:	ffff8fbf 	.word	0xffff8fbf
 80047ac:	ffff8080 	.word	0xffff8080
 80047b0:	ffffc080 	.word	0xffffc080
 80047b4:	ffffbf8f 	.word	0xffffbf8f

080047b8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	000a      	movs	r2, r1
 80047c2:	1cfb      	adds	r3, r7, #3
 80047c4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80047c6:	1cfb      	adds	r3, r7, #3
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d103      	bne.n	80047d6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	224c      	movs	r2, #76	; 0x4c
 80047d2:	2180      	movs	r1, #128	; 0x80
 80047d4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	0018      	movs	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	b002      	add	sp, #8
 80047de:	bd80      	pop	{r7, pc}

080047e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2258      	movs	r2, #88	; 0x58
 80047ec:	5a9b      	ldrh	r3, [r3, r2]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	4a05      	ldr	r2, [pc, #20]	; (8004808 <USB_DevConnect+0x28>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	b299      	uxth	r1, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2258      	movs	r2, #88	; 0x58
 80047fa:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	0018      	movs	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	b002      	add	sp, #8
 8004804:	bd80      	pop	{r7, pc}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	ffff8000 	.word	0xffff8000

0800480c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2244      	movs	r2, #68	; 0x44
 8004818:	5a9b      	ldrh	r3, [r3, r2]
 800481a:	b29b      	uxth	r3, r3
 800481c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800481e:	68fb      	ldr	r3, [r7, #12]
}
 8004820:	0018      	movs	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	b004      	add	sp, #16
 8004826:	bd80      	pop	{r7, pc}

08004828 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	0018      	movs	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	b002      	add	sp, #8
 800483a:	bd80      	pop	{r7, pc}

0800483c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08c      	sub	sp, #48	; 0x30
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	0019      	movs	r1, r3
 8004848:	1dbb      	adds	r3, r7, #6
 800484a:	801a      	strh	r2, [r3, #0]
 800484c:	1d3b      	adds	r3, r7, #4
 800484e:	1c0a      	adds	r2, r1, #0
 8004850:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004852:	1d3b      	adds	r3, r7, #4
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	3301      	adds	r3, #1
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004864:	1dbb      	adds	r3, r7, #6
 8004866:	881a      	ldrh	r2, [r3, #0]
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	18d3      	adds	r3, r2, r3
 800486c:	2280      	movs	r2, #128	; 0x80
 800486e:	00d2      	lsls	r2, r2, #3
 8004870:	4694      	mov	ip, r2
 8004872:	4463      	add	r3, ip
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800487a:	e01b      	b.n	80048b4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	3301      	adds	r3, #1
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	b29b      	uxth	r3, r3
 8004892:	001a      	movs	r2, r3
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	b29a      	uxth	r2, r3
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80048a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a4:	3302      	adds	r3, #2
 80048a6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	3301      	adds	r3, #1
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80048ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b0:	3b01      	subs	r3, #1
 80048b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1e0      	bne.n	800487c <USB_WritePMA+0x40>
  }
}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	46bd      	mov	sp, r7
 80048be:	b00c      	add	sp, #48	; 0x30
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b08a      	sub	sp, #40	; 0x28
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	0019      	movs	r1, r3
 80048ce:	1dbb      	adds	r3, r7, #6
 80048d0:	801a      	strh	r2, [r3, #0]
 80048d2:	1d3b      	adds	r3, r7, #4
 80048d4:	1c0a      	adds	r2, r1, #0
 80048d6:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80048d8:	1d3b      	adds	r3, r7, #4
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	085b      	lsrs	r3, r3, #1
 80048de:	b29b      	uxth	r3, r3
 80048e0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80048ea:	1dbb      	adds	r3, r7, #6
 80048ec:	881a      	ldrh	r2, [r3, #0]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	18d3      	adds	r3, r2, r3
 80048f2:	2280      	movs	r2, #128	; 0x80
 80048f4:	00d2      	lsls	r2, r2, #3
 80048f6:	4694      	mov	ip, r2
 80048f8:	4463      	add	r3, ip
 80048fa:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004900:	e018      	b.n	8004934 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	b29b      	uxth	r3, r3
 8004908:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	3302      	adds	r3, #2
 800490e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	b2da      	uxtb	r2, r3
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	3301      	adds	r3, #1
 800491c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	0a1b      	lsrs	r3, r3, #8
 8004922:	b2da      	uxtb	r2, r3
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	3301      	adds	r3, #1
 800492c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	3b01      	subs	r3, #1
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e3      	bne.n	8004902 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800493a:	1d3b      	adds	r3, r7, #4
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	2201      	movs	r2, #1
 8004940:	4013      	ands	r3, r2
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d007      	beq.n	8004958 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	b29b      	uxth	r3, r3
 800494e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	b2da      	uxtb	r2, r3
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	701a      	strb	r2, [r3, #0]
  }
}
 8004958:	46c0      	nop			; (mov r8, r8)
 800495a:	46bd      	mov	sp, r7
 800495c:	b00a      	add	sp, #40	; 0x28
 800495e:	bd80      	pop	{r7, pc}

08004960 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	000a      	movs	r2, r1
 800496a:	1cfb      	adds	r3, r7, #3
 800496c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800496e:	230f      	movs	r3, #15
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	2200      	movs	r2, #0
 8004974:	701a      	strb	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	2302      	movs	r3, #2
 800497a:	2203      	movs	r2, #3
 800497c:	2181      	movs	r1, #129	; 0x81
 800497e:	f001 ff4f 	bl	8006820 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	2302      	movs	r3, #2
 800498c:	2203      	movs	r2, #3
 800498e:	2101      	movs	r1, #1
 8004990:	f001 ff46 	bl	8006820 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	23b6      	movs	r3, #182	; 0xb6
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	2101      	movs	r1, #1
 800499c:	50d1      	str	r1, [r2, r3]

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800499e:	2054      	movs	r0, #84	; 0x54
 80049a0:	f002 f8c0 	bl	8006b24 <USBD_static_malloc>
 80049a4:	0001      	movs	r1, r0
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	23ae      	movs	r3, #174	; 0xae
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	23ae      	movs	r3, #174	; 0xae
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	58d3      	ldr	r3, [r2, r3]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d104      	bne.n	80049c4 <USBD_CUSTOM_HID_Init+0x64>
  {
    ret = 1U;
 80049ba:	230f      	movs	r3, #15
 80049bc:	18fb      	adds	r3, r7, r3
 80049be:	2201      	movs	r2, #1
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	e014      	b.n	80049ee <USBD_CUSTOM_HID_Init+0x8e>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	23ae      	movs	r3, #174	; 0xae
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	58d3      	ldr	r3, [r2, r3]
 80049cc:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2250      	movs	r2, #80	; 0x50
 80049d2:	2100      	movs	r1, #0
 80049d4:	5499      	strb	r1, [r3, r2]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	23af      	movs	r3, #175	; 0xaf
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	58d3      	ldr	r3, [r2, r3]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	2340      	movs	r3, #64	; 0x40
 80049e8:	2101      	movs	r1, #1
 80049ea:	f002 f863 	bl	8006ab4 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80049ee:	230f      	movs	r3, #15
 80049f0:	18fb      	adds	r3, r7, r3
 80049f2:	781b      	ldrb	r3, [r3, #0]
}
 80049f4:	0018      	movs	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	b004      	add	sp, #16
 80049fa:	bd80      	pop	{r7, pc}

080049fc <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	000a      	movs	r2, r1
 8004a06:	1cfb      	adds	r3, r7, #3
 8004a08:	701a      	strb	r2, [r3, #0]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2181      	movs	r1, #129	; 0x81
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f001 ff3d 	bl	800688e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f001 ff35 	bl	800688e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	23b6      	movs	r3, #182	; 0xb6
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	50d1      	str	r1, [r2, r3]

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	23ae      	movs	r3, #174	; 0xae
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	58d3      	ldr	r3, [r2, r3]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d011      	beq.n	8004a5e <USBD_CUSTOM_HID_DeInit+0x62>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	23af      	movs	r3, #175	; 0xaf
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	58d3      	ldr	r3, [r2, r3]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	23ae      	movs	r3, #174	; 0xae
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	58d3      	ldr	r3, [r2, r3]
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f002 f874 	bl	8006b3c <USBD_static_free>
    pdev->pClassData = NULL;
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	23ae      	movs	r3, #174	; 0xae
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	50d1      	str	r1, [r2, r3]
  }
  return USBD_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	0018      	movs	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b002      	add	sp, #8
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	23ae      	movs	r3, #174	; 0xae
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	58d3      	ldr	r3, [r2, r3]
 8004a7a:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004a7c:	231e      	movs	r3, #30
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	2200      	movs	r2, #0
 8004a82:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf = NULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004a88:	230e      	movs	r3, #14
 8004a8a:	18fb      	adds	r3, r7, r3
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8004a90:	2317      	movs	r3, #23
 8004a92:	18fb      	adds	r3, r7, r3
 8004a94:	2200      	movs	r2, #0
 8004a96:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	001a      	movs	r2, r3
 8004a9e:	2360      	movs	r3, #96	; 0x60
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	d044      	beq.n	8004b2e <USBD_CUSTOM_HID_Setup+0xc6>
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d000      	beq.n	8004aaa <USBD_CUSTOM_HID_Setup+0x42>
 8004aa8:	e0d5      	b.n	8004c56 <USBD_CUSTOM_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	785b      	ldrb	r3, [r3, #1]
 8004aae:	2b0b      	cmp	r3, #11
 8004ab0:	d831      	bhi.n	8004b16 <USBD_CUSTOM_HID_Setup+0xae>
 8004ab2:	009a      	lsls	r2, r3, #2
 8004ab4:	4b71      	ldr	r3, [pc, #452]	; (8004c7c <USBD_CUSTOM_HID_Setup+0x214>)
 8004ab6:	18d3      	adds	r3, r2, r3
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	469f      	mov	pc, r3
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	885b      	ldrh	r3, [r3, #2]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	001a      	movs	r2, r3
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8004ac8:	e030      	b.n	8004b2c <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	3340      	adds	r3, #64	; 0x40
 8004ace:	0019      	movs	r1, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f001 fb2f 	bl	8006138 <USBD_CtlSendData>
          break;
 8004ada:	e027      	b.n	8004b2c <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	885b      	ldrh	r3, [r3, #2]
 8004ae0:	0a1b      	lsrs	r3, r3, #8
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	001a      	movs	r2, r3
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8004aec:	e01e      	b.n	8004b2c <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	3344      	adds	r3, #68	; 0x44
 8004af2:	0019      	movs	r1, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	0018      	movs	r0, r3
 8004afa:	f001 fb1d 	bl	8006138 <USBD_CtlSendData>
          break;
 8004afe:	e015      	b.n	8004b2c <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	2201      	movs	r2, #1
 8004b04:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8004b06:	6939      	ldr	r1, [r7, #16]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	88da      	ldrh	r2, [r3, #6]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f001 fb45 	bl	800619e <USBD_CtlPrepareRx>
          break;
 8004b14:	e00a      	b.n	8004b2c <USBD_CUSTOM_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	0011      	movs	r1, r2
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f001 fa8c 	bl	800603a <USBD_CtlError>
          ret = USBD_FAIL;
 8004b22:	2317      	movs	r3, #23
 8004b24:	18fb      	adds	r3, r7, r3
 8004b26:	2202      	movs	r2, #2
 8004b28:	701a      	strb	r2, [r3, #0]
          break;
 8004b2a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8004b2c:	e09e      	b.n	8004c6c <USBD_CUSTOM_HID_Setup+0x204>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	785b      	ldrb	r3, [r3, #1]
 8004b32:	2b06      	cmp	r3, #6
 8004b34:	d021      	beq.n	8004b7a <USBD_CUSTOM_HID_Setup+0x112>
 8004b36:	dc02      	bgt.n	8004b3e <USBD_CUSTOM_HID_Setup+0xd6>
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <USBD_CUSTOM_HID_Setup+0xe0>
 8004b3c:	e07f      	b.n	8004c3e <USBD_CUSTOM_HID_Setup+0x1d6>
 8004b3e:	2b0a      	cmp	r3, #10
 8004b40:	d04b      	beq.n	8004bda <USBD_CUSTOM_HID_Setup+0x172>
 8004b42:	2b0b      	cmp	r3, #11
 8004b44:	d063      	beq.n	8004c0e <USBD_CUSTOM_HID_Setup+0x1a6>
 8004b46:	e07a      	b.n	8004c3e <USBD_CUSTOM_HID_Setup+0x1d6>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	23a7      	movs	r3, #167	; 0xa7
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	5cd3      	ldrb	r3, [r2, r3]
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d107      	bne.n	8004b64 <USBD_CUSTOM_HID_Setup+0xfc>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004b54:	230e      	movs	r3, #14
 8004b56:	18f9      	adds	r1, r7, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f001 faeb 	bl	8006138 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004b62:	e077      	b.n	8004c54 <USBD_CUSTOM_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	0011      	movs	r1, r2
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f001 fa65 	bl	800603a <USBD_CtlError>
            ret = USBD_FAIL;
 8004b70:	2317      	movs	r3, #23
 8004b72:	18fb      	adds	r3, r7, r3
 8004b74:	2202      	movs	r2, #2
 8004b76:	701a      	strb	r2, [r3, #0]
          break;
 8004b78:	e06c      	b.n	8004c54 <USBD_CUSTOM_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	885b      	ldrh	r3, [r3, #2]
 8004b7e:	0a1b      	lsrs	r3, r3, #8
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b22      	cmp	r3, #34	; 0x22
 8004b84:	d10f      	bne.n	8004ba6 <USBD_CUSTOM_HID_Setup+0x13e>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	88db      	ldrh	r3, [r3, #6]
 8004b8a:	221e      	movs	r2, #30
 8004b8c:	18ba      	adds	r2, r7, r2
 8004b8e:	b299      	uxth	r1, r3
 8004b90:	2921      	cmp	r1, #33	; 0x21
 8004b92:	d900      	bls.n	8004b96 <USBD_CUSTOM_HID_Setup+0x12e>
 8004b94:	2321      	movs	r3, #33	; 0x21
 8004b96:	8013      	strh	r3, [r2, #0]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	23af      	movs	r3, #175	; 0xaf
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	58d3      	ldr	r3, [r2, r3]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	61bb      	str	r3, [r7, #24]
 8004ba4:	e010      	b.n	8004bc8 <USBD_CUSTOM_HID_Setup+0x160>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	885b      	ldrh	r3, [r3, #2]
 8004baa:	0a1b      	lsrs	r3, r3, #8
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b21      	cmp	r3, #33	; 0x21
 8004bb0:	d10a      	bne.n	8004bc8 <USBD_CUSTOM_HID_Setup+0x160>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8004bb2:	4b33      	ldr	r3, [pc, #204]	; (8004c80 <USBD_CUSTOM_HID_Setup+0x218>)
 8004bb4:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	88db      	ldrh	r3, [r3, #6]
 8004bba:	221e      	movs	r2, #30
 8004bbc:	18ba      	adds	r2, r7, r2
 8004bbe:	b299      	uxth	r1, r3
 8004bc0:	2909      	cmp	r1, #9
 8004bc2:	d900      	bls.n	8004bc6 <USBD_CUSTOM_HID_Setup+0x15e>
 8004bc4:	2309      	movs	r3, #9
 8004bc6:	8013      	strh	r3, [r2, #0]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8004bc8:	231e      	movs	r3, #30
 8004bca:	18fb      	adds	r3, r7, r3
 8004bcc:	881a      	ldrh	r2, [r3, #0]
 8004bce:	69b9      	ldr	r1, [r7, #24]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f001 fab0 	bl	8006138 <USBD_CtlSendData>
          break;
 8004bd8:	e03c      	b.n	8004c54 <USBD_CUSTOM_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	23a7      	movs	r3, #167	; 0xa7
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	5cd3      	ldrb	r3, [r2, r3]
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d108      	bne.n	8004bf8 <USBD_CUSTOM_HID_Setup+0x190>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	3348      	adds	r3, #72	; 0x48
 8004bea:	0019      	movs	r1, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f001 faa1 	bl	8006138 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004bf6:	e02d      	b.n	8004c54 <USBD_CUSTOM_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	0011      	movs	r1, r2
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f001 fa1b 	bl	800603a <USBD_CtlError>
            ret = USBD_FAIL;
 8004c04:	2317      	movs	r3, #23
 8004c06:	18fb      	adds	r3, r7, r3
 8004c08:	2202      	movs	r2, #2
 8004c0a:	701a      	strb	r2, [r3, #0]
          break;
 8004c0c:	e022      	b.n	8004c54 <USBD_CUSTOM_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	23a7      	movs	r3, #167	; 0xa7
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	5cd3      	ldrb	r3, [r2, r3]
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d106      	bne.n	8004c28 <USBD_CUSTOM_HID_Setup+0x1c0>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	885b      	ldrh	r3, [r3, #2]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	001a      	movs	r2, r3
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c26:	e015      	b.n	8004c54 <USBD_CUSTOM_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	0011      	movs	r1, r2
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f001 fa03 	bl	800603a <USBD_CtlError>
            ret = USBD_FAIL;
 8004c34:	2317      	movs	r3, #23
 8004c36:	18fb      	adds	r3, r7, r3
 8004c38:	2202      	movs	r2, #2
 8004c3a:	701a      	strb	r2, [r3, #0]
          break;
 8004c3c:	e00a      	b.n	8004c54 <USBD_CUSTOM_HID_Setup+0x1ec>

        default:
          USBD_CtlError(pdev, req);
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	0011      	movs	r1, r2
 8004c44:	0018      	movs	r0, r3
 8004c46:	f001 f9f8 	bl	800603a <USBD_CtlError>
          ret = USBD_FAIL;
 8004c4a:	2317      	movs	r3, #23
 8004c4c:	18fb      	adds	r3, r7, r3
 8004c4e:	2202      	movs	r2, #2
 8004c50:	701a      	strb	r2, [r3, #0]
          break;
 8004c52:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8004c54:	e00a      	b.n	8004c6c <USBD_CUSTOM_HID_Setup+0x204>

    default:
      USBD_CtlError(pdev, req);
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	0011      	movs	r1, r2
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f001 f9ec 	bl	800603a <USBD_CtlError>
      ret = USBD_FAIL;
 8004c62:	2317      	movs	r3, #23
 8004c64:	18fb      	adds	r3, r7, r3
 8004c66:	2202      	movs	r2, #2
 8004c68:	701a      	strb	r2, [r3, #0]
      break;
 8004c6a:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 8004c6c:	2317      	movs	r3, #23
 8004c6e:	18fb      	adds	r3, r7, r3
 8004c70:	781b      	ldrb	r3, [r3, #0]
}
 8004c72:	0018      	movs	r0, r3
 8004c74:	46bd      	mov	sp, r7
 8004c76:	b008      	add	sp, #32
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	08006cdc 	.word	0x08006cdc
 8004c80:	200000c8 	.word	0x200000c8

08004c84 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	1dbb      	adds	r3, r7, #6
 8004c90:	801a      	strh	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	23ae      	movs	r3, #174	; 0xae
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	58d3      	ldr	r3, [r2, r3]
 8004c9a:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	23a7      	movs	r3, #167	; 0xa7
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	5cd3      	ldrb	r3, [r2, r3]
 8004ca4:	2b03      	cmp	r3, #3
 8004ca6:	d112      	bne.n	8004cce <USBD_CUSTOM_HID_SendReport+0x4a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2250      	movs	r2, #80	; 0x50
 8004cac:	5c9b      	ldrb	r3, [r3, r2]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10b      	bne.n	8004cca <USBD_CUSTOM_HID_SendReport+0x46>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2250      	movs	r2, #80	; 0x50
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	5499      	strb	r1, [r3, r2]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8004cba:	1dbb      	adds	r3, r7, #6
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	2181      	movs	r1, #129	; 0x81
 8004cc4:	f001 febe 	bl	8006a44 <USBD_LL_Transmit>
 8004cc8:	e001      	b.n	8004cce <USBD_CUSTOM_HID_SendReport+0x4a>
    }
    else
    {
      return USBD_BUSY;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <USBD_CUSTOM_HID_SendReport+0x4c>
    }
  }
  return USBD_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b006      	add	sp, #24
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2229      	movs	r2, #41	; 0x29
 8004ce4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8004ce6:	4b02      	ldr	r3, [pc, #8]	; (8004cf0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x18>)
}
 8004ce8:	0018      	movs	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b002      	add	sp, #8
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000044 	.word	0x20000044

08004cf4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2229      	movs	r2, #41	; 0x29
 8004d00:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8004d02:	4b02      	ldr	r3, [pc, #8]	; (8004d0c <USBD_CUSTOM_HID_GetHSCfgDesc+0x18>)
}
 8004d04:	0018      	movs	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b002      	add	sp, #8
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20000070 	.word	0x20000070

08004d10 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2229      	movs	r2, #41	; 0x29
 8004d1c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8004d1e:	4b02      	ldr	r3, [pc, #8]	; (8004d28 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8004d20:	0018      	movs	r0, r3
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b002      	add	sp, #8
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	2000009c 	.word	0x2000009c

08004d2c <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	000a      	movs	r2, r1
 8004d36:	1cfb      	adds	r3, r7, #3
 8004d38:	701a      	strb	r2, [r3, #0]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	23ae      	movs	r3, #174	; 0xae
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	58d3      	ldr	r3, [r2, r3]
 8004d42:	2250      	movs	r2, #80	; 0x50
 8004d44:	2100      	movs	r1, #0
 8004d46:	5499      	strb	r1, [r3, r2]

  return USBD_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	b002      	add	sp, #8
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	000a      	movs	r2, r1
 8004d5c:	1cfb      	adds	r3, r7, #3
 8004d5e:	701a      	strb	r2, [r3, #0]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	23ae      	movs	r3, #174	; 0xae
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	58d3      	ldr	r3, [r2, r3]
 8004d68:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	23af      	movs	r3, #175	; 0xaf
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	58d3      	ldr	r3, [r2, r3]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	7810      	ldrb	r0, [r2, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	7852      	ldrb	r2, [r2, #1]
 8004d7c:	0011      	movs	r1, r2
 8004d7e:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	2340      	movs	r3, #64	; 0x40
 8004d86:	2101      	movs	r1, #1
 8004d88:	f001 fe94 	bl	8006ab4 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	0018      	movs	r0, r3
 8004d90:	46bd      	mov	sp, r7
 8004d92:	b004      	add	sp, #16
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	23ae      	movs	r3, #174	; 0xae
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	58d3      	ldr	r3, [r2, r3]
 8004da6:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d10d      	bne.n	8004dcc <USBD_CUSTOM_HID_EP0_RxReady+0x36>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	23af      	movs	r3, #175	; 0xaf
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	58d3      	ldr	r3, [r2, r3]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	7810      	ldrb	r0, [r2, #0]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	7852      	ldrb	r2, [r2, #1]
 8004dc2:	0011      	movs	r1, r2
 8004dc4:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	0018      	movs	r0, r3
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	b004      	add	sp, #16
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	220a      	movs	r2, #10
 8004de4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8004de6:	4b02      	ldr	r3, [pc, #8]	; (8004df0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x18>)
}
 8004de8:	0018      	movs	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b002      	add	sp, #8
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	200000d4 	.word	0x200000d4

08004df4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004dfe:	230f      	movs	r3, #15
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	2202      	movs	r2, #2
 8004e04:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <USBD_CUSTOM_HID_RegisterInterface+0x2a>
  {
    pdev->pUserData = fops;
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	23af      	movs	r3, #175	; 0xaf
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	6839      	ldr	r1, [r7, #0]
 8004e14:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8004e16:	230f      	movs	r3, #15
 8004e18:	18fb      	adds	r3, r7, r3
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004e1e:	230f      	movs	r3, #15
 8004e20:	18fb      	adds	r3, r7, r3
 8004e22:	781b      	ldrb	r3, [r3, #0]
}
 8004e24:	0018      	movs	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b004      	add	sp, #16
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	1dfb      	adds	r3, r7, #7
 8004e38:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004e40:	2302      	movs	r3, #2
 8004e42:	e020      	b.n	8004e86 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	23ad      	movs	r3, #173	; 0xad
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	58d3      	ldr	r3, [r2, r3]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d004      	beq.n	8004e5a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	23ad      	movs	r3, #173	; 0xad
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	2100      	movs	r1, #0
 8004e58:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d004      	beq.n	8004e6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	23ac      	movs	r3, #172	; 0xac
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	23a7      	movs	r3, #167	; 0xa7
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	2101      	movs	r1, #1
 8004e72:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	1dfa      	adds	r2, r7, #7
 8004e78:	7812      	ldrb	r2, [r2, #0]
 8004e7a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	0018      	movs	r0, r3
 8004e80:	f001 fc50 	bl	8006724 <USBD_LL_Init>

  return USBD_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	0018      	movs	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	b004      	add	sp, #16
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004e98:	230f      	movs	r3, #15
 8004e9a:	18fb      	adds	r3, r7, r3
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	23ad      	movs	r3, #173	; 0xad
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	6839      	ldr	r1, [r7, #0]
 8004eae:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8004eb0:	230f      	movs	r3, #15
 8004eb2:	18fb      	adds	r3, r7, r3
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	e003      	b.n	8004ec2 <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004eba:	230f      	movs	r3, #15
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004ec2:	230f      	movs	r3, #15
 8004ec4:	18fb      	adds	r3, r7, r3
 8004ec6:	781b      	ldrb	r3, [r3, #0]
}
 8004ec8:	0018      	movs	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	b004      	add	sp, #16
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	0018      	movs	r0, r3
 8004edc:	f001 fc7a 	bl	80067d4 <USBD_LL_Start>

  return USBD_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	b002      	add	sp, #8
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	b002      	add	sp, #8
 8004efa:	bd80      	pop	{r7, pc}

08004efc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	000a      	movs	r2, r1
 8004f06:	1cfb      	adds	r3, r7, #3
 8004f08:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004f0a:	230f      	movs	r3, #15
 8004f0c:	18fb      	adds	r3, r7, r3
 8004f0e:	2202      	movs	r2, #2
 8004f10:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	23ad      	movs	r3, #173	; 0xad
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	58d3      	ldr	r3, [r2, r3]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00f      	beq.n	8004f3e <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	23ad      	movs	r3, #173	; 0xad
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	58d3      	ldr	r3, [r2, r3]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	1cfa      	adds	r2, r7, #3
 8004f2a:	7811      	ldrb	r1, [r2, #0]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	0010      	movs	r0, r2
 8004f30:	4798      	blx	r3
 8004f32:	1e03      	subs	r3, r0, #0
 8004f34:	d103      	bne.n	8004f3e <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 8004f36:	230f      	movs	r3, #15
 8004f38:	18fb      	adds	r3, r7, r3
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8004f3e:	230f      	movs	r3, #15
 8004f40:	18fb      	adds	r3, r7, r3
 8004f42:	781b      	ldrb	r3, [r3, #0]
}
 8004f44:	0018      	movs	r0, r3
 8004f46:	46bd      	mov	sp, r7
 8004f48:	b004      	add	sp, #16
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	000a      	movs	r2, r1
 8004f56:	1cfb      	adds	r3, r7, #3
 8004f58:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	23ad      	movs	r3, #173	; 0xad
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	58d3      	ldr	r3, [r2, r3]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	1cfa      	adds	r2, r7, #3
 8004f66:	7811      	ldrb	r1, [r2, #0]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	0010      	movs	r0, r2
 8004f6c:	4798      	blx	r3

  return USBD_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	0018      	movs	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	b002      	add	sp, #8
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	22aa      	movs	r2, #170	; 0xaa
 8004f86:	0092      	lsls	r2, r2, #2
 8004f88:	4694      	mov	ip, r2
 8004f8a:	4463      	add	r3, ip
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	0011      	movs	r1, r2
 8004f90:	0018      	movs	r0, r3
 8004f92:	f001 f817 	bl	8005fc4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	23a5      	movs	r3, #165	; 0xa5
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a22      	ldr	r2, [pc, #136]	; (800502c <USBD_LL_SetupStage+0xb4>)
 8004fa4:	5a9b      	ldrh	r3, [r3, r2]
 8004fa6:	0019      	movs	r1, r3
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	23a6      	movs	r3, #166	; 0xa6
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	23aa      	movs	r3, #170	; 0xaa
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	5cd3      	ldrb	r3, [r2, r3]
 8004fb8:	001a      	movs	r2, r3
 8004fba:	231f      	movs	r3, #31
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d00d      	beq.n	8004fde <USBD_LL_SetupStage+0x66>
 8004fc2:	d302      	bcc.n	8004fca <USBD_LL_SetupStage+0x52>
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d014      	beq.n	8004ff2 <USBD_LL_SetupStage+0x7a>
 8004fc8:	e01d      	b.n	8005006 <USBD_LL_SetupStage+0x8e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	22aa      	movs	r2, #170	; 0xaa
 8004fce:	0092      	lsls	r2, r2, #2
 8004fd0:	189a      	adds	r2, r3, r2
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	0011      	movs	r1, r2
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	f000 fa10 	bl	80053fc <USBD_StdDevReq>
      break;
 8004fdc:	e020      	b.n	8005020 <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	22aa      	movs	r2, #170	; 0xaa
 8004fe2:	0092      	lsls	r2, r2, #2
 8004fe4:	189a      	adds	r2, r3, r2
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	0011      	movs	r1, r2
 8004fea:	0018      	movs	r0, r3
 8004fec:	f000 fa78 	bl	80054e0 <USBD_StdItfReq>
      break;
 8004ff0:	e016      	b.n	8005020 <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	22aa      	movs	r2, #170	; 0xaa
 8004ff6:	0092      	lsls	r2, r2, #2
 8004ff8:	189a      	adds	r2, r3, r2
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	0011      	movs	r1, r2
 8004ffe:	0018      	movs	r0, r3
 8005000:	f000 fac5 	bl	800558e <USBD_StdEPReq>
      break;
 8005004:	e00c      	b.n	8005020 <USBD_LL_SetupStage+0xa8>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	23aa      	movs	r3, #170	; 0xaa
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	5cd3      	ldrb	r3, [r2, r3]
 800500e:	227f      	movs	r2, #127	; 0x7f
 8005010:	4393      	bics	r3, r2
 8005012:	b2da      	uxtb	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	0011      	movs	r1, r2
 8005018:	0018      	movs	r0, r3
 800501a:	f001 fc64 	bl	80068e6 <USBD_LL_StallEP>
      break;
 800501e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	0018      	movs	r0, r3
 8005024:	46bd      	mov	sp, r7
 8005026:	b002      	add	sp, #8
 8005028:	bd80      	pop	{r7, pc}
 800502a:	46c0      	nop			; (mov r8, r8)
 800502c:	000002ae 	.word	0x000002ae

08005030 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	607a      	str	r2, [r7, #4]
 800503a:	200b      	movs	r0, #11
 800503c:	183b      	adds	r3, r7, r0
 800503e:	1c0a      	adds	r2, r1, #0
 8005040:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005042:	183b      	adds	r3, r7, r0
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d154      	bne.n	80050f4 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3355      	adds	r3, #85	; 0x55
 800504e:	33ff      	adds	r3, #255	; 0xff
 8005050:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	23a5      	movs	r3, #165	; 0xa5
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	58d3      	ldr	r3, [r2, r3]
 800505a:	2b03      	cmp	r3, #3
 800505c:	d139      	bne.n	80050d2 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	429a      	cmp	r2, r3
 8005068:	d919      	bls.n	800509e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	1ad2      	subs	r2, r2, r3
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005080:	429a      	cmp	r2, r3
 8005082:	d203      	bcs.n	800508c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005088:	b29b      	uxth	r3, r3
 800508a:	e002      	b.n	8005092 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005090:	b29b      	uxth	r3, r3
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	001a      	movs	r2, r3
 8005098:	f001 f8a5 	bl	80061e6 <USBD_CtlContinueRx>
 800509c:	e045      	b.n	800512a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	23ad      	movs	r3, #173	; 0xad
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	58d3      	ldr	r3, [r2, r3]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00d      	beq.n	80050c8 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	23a7      	movs	r3, #167	; 0xa7
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d107      	bne.n	80050c8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	23ad      	movs	r3, #173	; 0xad
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	58d3      	ldr	r3, [r2, r3]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	0010      	movs	r0, r2
 80050c6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	0018      	movs	r0, r3
 80050cc:	f001 f89e 	bl	800620c <USBD_CtlSendStatus>
 80050d0:	e02b      	b.n	800512a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	23a5      	movs	r3, #165	; 0xa5
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	58d3      	ldr	r3, [r2, r3]
 80050da:	2b05      	cmp	r3, #5
 80050dc:	d125      	bne.n	800512a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	23a5      	movs	r3, #165	; 0xa5
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	2100      	movs	r1, #0
 80050e6:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2100      	movs	r1, #0
 80050ec:	0018      	movs	r0, r3
 80050ee:	f001 fbfa 	bl	80068e6 <USBD_LL_StallEP>
 80050f2:	e01a      	b.n	800512a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	23ad      	movs	r3, #173	; 0xad
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	58d3      	ldr	r3, [r2, r3]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d011      	beq.n	8005126 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	23a7      	movs	r3, #167	; 0xa7
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800510a:	2b03      	cmp	r3, #3
 800510c:	d10b      	bne.n	8005126 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	23ad      	movs	r3, #173	; 0xad
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	58d3      	ldr	r3, [r2, r3]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	220b      	movs	r2, #11
 800511a:	18ba      	adds	r2, r7, r2
 800511c:	7811      	ldrb	r1, [r2, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	0010      	movs	r0, r2
 8005122:	4798      	blx	r3
 8005124:	e001      	b.n	800512a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005126:	2302      	movs	r3, #2
 8005128:	e000      	b.n	800512c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	0018      	movs	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	b006      	add	sp, #24
 8005132:	bd80      	pop	{r7, pc}

08005134 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	607a      	str	r2, [r7, #4]
 800513e:	200b      	movs	r0, #11
 8005140:	183b      	adds	r3, r7, r0
 8005142:	1c0a      	adds	r2, r1, #0
 8005144:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005146:	183b      	adds	r3, r7, r0
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d000      	beq.n	8005150 <USBD_LL_DataInStage+0x1c>
 800514e:	e08e      	b.n	800526e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	3314      	adds	r3, #20
 8005154:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	23a5      	movs	r3, #165	; 0xa5
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	58d3      	ldr	r3, [r2, r3]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d164      	bne.n	800522c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	429a      	cmp	r2, r3
 800516c:	d915      	bls.n	800519a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	1ad2      	subs	r2, r2, r3
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	b29a      	uxth	r2, r3
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	0018      	movs	r0, r3
 8005188:	f000 fff6 	bl	8006178 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	2300      	movs	r3, #0
 8005190:	2200      	movs	r2, #0
 8005192:	2100      	movs	r1, #0
 8005194:	f001 fc8e 	bl	8006ab4 <USBD_LL_PrepareReceive>
 8005198:	e059      	b.n	800524e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	0019      	movs	r1, r3
 80051a4:	0010      	movs	r0, r2
 80051a6:	f7fb f835 	bl	8000214 <__aeabi_uidivmod>
 80051aa:	1e0b      	subs	r3, r1, #0
 80051ac:	d11f      	bne.n	80051ee <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d319      	bcc.n	80051ee <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	68f9      	ldr	r1, [r7, #12]
 80051c0:	23a6      	movs	r3, #166	; 0xa6
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d211      	bcs.n	80051ee <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	2100      	movs	r1, #0
 80051d0:	0018      	movs	r0, r3
 80051d2:	f000 ffd1 	bl	8006178 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	23a6      	movs	r3, #166	; 0xa6
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	2100      	movs	r1, #0
 80051de:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	2300      	movs	r3, #0
 80051e4:	2200      	movs	r2, #0
 80051e6:	2100      	movs	r1, #0
 80051e8:	f001 fc64 	bl	8006ab4 <USBD_LL_PrepareReceive>
 80051ec:	e02f      	b.n	800524e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	23ad      	movs	r3, #173	; 0xad
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	58d3      	ldr	r3, [r2, r3]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00d      	beq.n	8005218 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	23a7      	movs	r3, #167	; 0xa7
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005204:	2b03      	cmp	r3, #3
 8005206:	d107      	bne.n	8005218 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	23ad      	movs	r3, #173	; 0xad
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	58d3      	ldr	r3, [r2, r3]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	0010      	movs	r0, r2
 8005216:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2180      	movs	r1, #128	; 0x80
 800521c:	0018      	movs	r0, r3
 800521e:	f001 fb62 	bl	80068e6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	0018      	movs	r0, r3
 8005226:	f001 f805 	bl	8006234 <USBD_CtlReceiveStatus>
 800522a:	e010      	b.n	800524e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	23a5      	movs	r3, #165	; 0xa5
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	58d3      	ldr	r3, [r2, r3]
 8005234:	2b04      	cmp	r3, #4
 8005236:	d005      	beq.n	8005244 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	23a5      	movs	r3, #165	; 0xa5
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2180      	movs	r1, #128	; 0x80
 8005248:	0018      	movs	r0, r3
 800524a:	f001 fb4c 	bl	80068e6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	23a8      	movs	r3, #168	; 0xa8
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	5cd3      	ldrb	r3, [r2, r3]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d124      	bne.n	80052a4 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	0018      	movs	r0, r3
 800525e:	f7ff fe44 	bl	8004eea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	23a8      	movs	r3, #168	; 0xa8
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	2100      	movs	r1, #0
 800526a:	54d1      	strb	r1, [r2, r3]
 800526c:	e01a      	b.n	80052a4 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	23ad      	movs	r3, #173	; 0xad
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	58d3      	ldr	r3, [r2, r3]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d011      	beq.n	80052a0 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	23a7      	movs	r3, #167	; 0xa7
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8005284:	2b03      	cmp	r3, #3
 8005286:	d10b      	bne.n	80052a0 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	23ad      	movs	r3, #173	; 0xad
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	58d3      	ldr	r3, [r2, r3]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	220b      	movs	r2, #11
 8005294:	18ba      	adds	r2, r7, r2
 8005296:	7811      	ldrb	r1, [r2, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	0010      	movs	r0, r2
 800529c:	4798      	blx	r3
 800529e:	e001      	b.n	80052a4 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80052a0:	2302      	movs	r3, #2
 80052a2:	e000      	b.n	80052a6 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	0018      	movs	r0, r3
 80052a8:	46bd      	mov	sp, r7
 80052aa:	b006      	add	sp, #24
 80052ac:	bd80      	pop	{r7, pc}

080052ae <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b082      	sub	sp, #8
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	2340      	movs	r3, #64	; 0x40
 80052ba:	2200      	movs	r2, #0
 80052bc:	2100      	movs	r1, #0
 80052be:	f001 faaf 	bl	8006820 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	23ac      	movs	r3, #172	; 0xac
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	2101      	movs	r1, #1
 80052ca:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	23b2      	movs	r3, #178	; 0xb2
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	2140      	movs	r1, #64	; 0x40
 80052d4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	2340      	movs	r3, #64	; 0x40
 80052da:	2200      	movs	r2, #0
 80052dc:	2180      	movs	r1, #128	; 0x80
 80052de:	f001 fa9f 	bl	8006820 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2240      	movs	r2, #64	; 0x40
 80052ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	23a7      	movs	r3, #167	; 0xa7
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	2101      	movs	r1, #1
 80052f6:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	23a5      	movs	r3, #165	; 0xa5
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	2100      	movs	r1, #0
 8005300:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	23a9      	movs	r3, #169	; 0xa9
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	2100      	movs	r1, #0
 8005310:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	23ae      	movs	r3, #174	; 0xae
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	58d3      	ldr	r3, [r2, r3]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	23ad      	movs	r3, #173	; 0xad
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	58d3      	ldr	r3, [r2, r3]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	b2d9      	uxtb	r1, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	0018      	movs	r0, r3
 8005332:	4790      	blx	r2
  }

  return USBD_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	0018      	movs	r0, r3
 8005338:	46bd      	mov	sp, r7
 800533a:	b002      	add	sp, #8
 800533c:	bd80      	pop	{r7, pc}

0800533e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b082      	sub	sp, #8
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	000a      	movs	r2, r1
 8005348:	1cfb      	adds	r3, r7, #3
 800534a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	1cfa      	adds	r2, r7, #3
 8005350:	7812      	ldrb	r2, [r2, #0]
 8005352:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	0018      	movs	r0, r3
 8005358:	46bd      	mov	sp, r7
 800535a:	b002      	add	sp, #8
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	23a7      	movs	r3, #167	; 0xa7
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	5cd1      	ldrb	r1, [r2, r3]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a06      	ldr	r2, [pc, #24]	; (800538c <USBD_LL_Suspend+0x2c>)
 8005374:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	23a7      	movs	r3, #167	; 0xa7
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	2104      	movs	r1, #4
 800537e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	0018      	movs	r0, r3
 8005384:	46bd      	mov	sp, r7
 8005386:	b002      	add	sp, #8
 8005388:	bd80      	pop	{r7, pc}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	0000029d 	.word	0x0000029d

08005390 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	23a7      	movs	r3, #167	; 0xa7
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	5cd3      	ldrb	r3, [r2, r3]
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d106      	bne.n	80053b2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a05      	ldr	r2, [pc, #20]	; (80053bc <USBD_LL_Resume+0x2c>)
 80053a8:	5c99      	ldrb	r1, [r3, r2]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	23a7      	movs	r3, #167	; 0xa7
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	0018      	movs	r0, r3
 80053b6:	46bd      	mov	sp, r7
 80053b8:	b002      	add	sp, #8
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	0000029d 	.word	0x0000029d

080053c0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	23a7      	movs	r3, #167	; 0xa7
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	5cd3      	ldrb	r3, [r2, r3]
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d10e      	bne.n	80053f2 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	23ad      	movs	r3, #173	; 0xad
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	58d3      	ldr	r3, [r2, r3]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	23ad      	movs	r3, #173	; 0xad
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	58d3      	ldr	r3, [r2, r3]
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	0010      	movs	r0, r2
 80053f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	0018      	movs	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	b002      	add	sp, #8
 80053fa:	bd80      	pop	{r7, pc}

080053fc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005406:	230f      	movs	r3, #15
 8005408:	18fb      	adds	r3, r7, r3
 800540a:	2200      	movs	r2, #0
 800540c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	001a      	movs	r2, r3
 8005414:	2360      	movs	r3, #96	; 0x60
 8005416:	4013      	ands	r3, r2
 8005418:	2b20      	cmp	r3, #32
 800541a:	d004      	beq.n	8005426 <USBD_StdDevReq+0x2a>
 800541c:	2b40      	cmp	r3, #64	; 0x40
 800541e:	d002      	beq.n	8005426 <USBD_StdDevReq+0x2a>
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <USBD_StdDevReq+0x3e>
 8005424:	e04b      	b.n	80054be <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	23ad      	movs	r3, #173	; 0xad
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	58d3      	ldr	r3, [r2, r3]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	6839      	ldr	r1, [r7, #0]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	0010      	movs	r0, r2
 8005436:	4798      	blx	r3
      break;
 8005438:	e048      	b.n	80054cc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	785b      	ldrb	r3, [r3, #1]
 800543e:	2b09      	cmp	r3, #9
 8005440:	d835      	bhi.n	80054ae <USBD_StdDevReq+0xb2>
 8005442:	009a      	lsls	r2, r3, #2
 8005444:	4b25      	ldr	r3, [pc, #148]	; (80054dc <USBD_StdDevReq+0xe0>)
 8005446:	18d3      	adds	r3, r2, r3
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	0011      	movs	r1, r2
 8005452:	0018      	movs	r0, r3
 8005454:	f000 fa5a 	bl	800590c <USBD_GetDescriptor>
          break;
 8005458:	e030      	b.n	80054bc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	0011      	movs	r1, r2
 8005460:	0018      	movs	r0, r3
 8005462:	f000 fc07 	bl	8005c74 <USBD_SetAddress>
          break;
 8005466:	e029      	b.n	80054bc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	0011      	movs	r1, r2
 800546e:	0018      	movs	r0, r3
 8005470:	f000 fc54 	bl	8005d1c <USBD_SetConfig>
          break;
 8005474:	e022      	b.n	80054bc <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	0011      	movs	r1, r2
 800547c:	0018      	movs	r0, r3
 800547e:	f000 fcf1 	bl	8005e64 <USBD_GetConfig>
          break;
 8005482:	e01b      	b.n	80054bc <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	0011      	movs	r1, r2
 800548a:	0018      	movs	r0, r3
 800548c:	f000 fd24 	bl	8005ed8 <USBD_GetStatus>
          break;
 8005490:	e014      	b.n	80054bc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	0011      	movs	r1, r2
 8005498:	0018      	movs	r0, r3
 800549a:	f000 fd57 	bl	8005f4c <USBD_SetFeature>
          break;
 800549e:	e00d      	b.n	80054bc <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	0011      	movs	r1, r2
 80054a6:	0018      	movs	r0, r3
 80054a8:	f000 fd66 	bl	8005f78 <USBD_ClrFeature>
          break;
 80054ac:	e006      	b.n	80054bc <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	0011      	movs	r1, r2
 80054b4:	0018      	movs	r0, r3
 80054b6:	f000 fdc0 	bl	800603a <USBD_CtlError>
          break;
 80054ba:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80054bc:	e006      	b.n	80054cc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	0011      	movs	r1, r2
 80054c4:	0018      	movs	r0, r3
 80054c6:	f000 fdb8 	bl	800603a <USBD_CtlError>
      break;
 80054ca:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80054cc:	230f      	movs	r3, #15
 80054ce:	18fb      	adds	r3, r7, r3
 80054d0:	781b      	ldrb	r3, [r3, #0]
}
 80054d2:	0018      	movs	r0, r3
 80054d4:	46bd      	mov	sp, r7
 80054d6:	b004      	add	sp, #16
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	08006d0c 	.word	0x08006d0c

080054e0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80054e0:	b590      	push	{r4, r7, lr}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054ea:	230f      	movs	r3, #15
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	001a      	movs	r2, r3
 80054f8:	2360      	movs	r3, #96	; 0x60
 80054fa:	4013      	ands	r3, r2
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d003      	beq.n	8005508 <USBD_StdItfReq+0x28>
 8005500:	2b40      	cmp	r3, #64	; 0x40
 8005502:	d001      	beq.n	8005508 <USBD_StdItfReq+0x28>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d136      	bne.n	8005576 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	23a7      	movs	r3, #167	; 0xa7
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	5cd3      	ldrb	r3, [r2, r3]
 8005510:	3b01      	subs	r3, #1
 8005512:	2b02      	cmp	r3, #2
 8005514:	d826      	bhi.n	8005564 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	889b      	ldrh	r3, [r3, #4]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	d81a      	bhi.n	8005556 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	23ad      	movs	r3, #173	; 0xad
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	58d3      	ldr	r3, [r2, r3]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	220f      	movs	r2, #15
 800552c:	18bc      	adds	r4, r7, r2
 800552e:	6839      	ldr	r1, [r7, #0]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	0010      	movs	r0, r2
 8005534:	4798      	blx	r3
 8005536:	0003      	movs	r3, r0
 8005538:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	88db      	ldrh	r3, [r3, #6]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d117      	bne.n	8005572 <USBD_StdItfReq+0x92>
 8005542:	230f      	movs	r3, #15
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d112      	bne.n	8005572 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	0018      	movs	r0, r3
 8005550:	f000 fe5c 	bl	800620c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005554:	e00d      	b.n	8005572 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	0011      	movs	r1, r2
 800555c:	0018      	movs	r0, r3
 800555e:	f000 fd6c 	bl	800603a <USBD_CtlError>
          break;
 8005562:	e006      	b.n	8005572 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	0011      	movs	r1, r2
 800556a:	0018      	movs	r0, r3
 800556c:	f000 fd65 	bl	800603a <USBD_CtlError>
          break;
 8005570:	e000      	b.n	8005574 <USBD_StdItfReq+0x94>
          break;
 8005572:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005574:	e006      	b.n	8005584 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	0011      	movs	r1, r2
 800557c:	0018      	movs	r0, r3
 800557e:	f000 fd5c 	bl	800603a <USBD_CtlError>
      break;
 8005582:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	0018      	movs	r0, r3
 8005588:	46bd      	mov	sp, r7
 800558a:	b005      	add	sp, #20
 800558c:	bd90      	pop	{r4, r7, pc}

0800558e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800558e:	b5b0      	push	{r4, r5, r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005598:	230f      	movs	r3, #15
 800559a:	18fb      	adds	r3, r7, r3
 800559c:	2200      	movs	r2, #0
 800559e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	889a      	ldrh	r2, [r3, #4]
 80055a4:	230e      	movs	r3, #14
 80055a6:	18fb      	adds	r3, r7, r3
 80055a8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	001a      	movs	r2, r3
 80055b0:	2360      	movs	r3, #96	; 0x60
 80055b2:	4013      	ands	r3, r2
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d004      	beq.n	80055c2 <USBD_StdEPReq+0x34>
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d002      	beq.n	80055c2 <USBD_StdEPReq+0x34>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <USBD_StdEPReq+0x48>
 80055c0:	e195      	b.n	80058ee <USBD_StdEPReq+0x360>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	23ad      	movs	r3, #173	; 0xad
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	58d3      	ldr	r3, [r2, r3]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	6839      	ldr	r1, [r7, #0]
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	0010      	movs	r0, r2
 80055d2:	4798      	blx	r3
      break;
 80055d4:	e192      	b.n	80058fc <USBD_StdEPReq+0x36e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	001a      	movs	r2, r3
 80055dc:	2360      	movs	r3, #96	; 0x60
 80055de:	4013      	ands	r3, r2
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d10f      	bne.n	8005604 <USBD_StdEPReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	23ad      	movs	r3, #173	; 0xad
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	58d3      	ldr	r3, [r2, r3]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	250f      	movs	r5, #15
 80055f0:	197c      	adds	r4, r7, r5
 80055f2:	6839      	ldr	r1, [r7, #0]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	0010      	movs	r0, r2
 80055f8:	4798      	blx	r3
 80055fa:	0003      	movs	r3, r0
 80055fc:	7023      	strb	r3, [r4, #0]

        return ret;
 80055fe:	197b      	adds	r3, r7, r5
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	e17e      	b.n	8005902 <USBD_StdEPReq+0x374>
      }

      switch (req->bRequest)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	785b      	ldrb	r3, [r3, #1]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d054      	beq.n	80056b6 <USBD_StdEPReq+0x128>
 800560c:	2b03      	cmp	r3, #3
 800560e:	d003      	beq.n	8005618 <USBD_StdEPReq+0x8a>
 8005610:	2b00      	cmp	r3, #0
 8005612:	d100      	bne.n	8005616 <USBD_StdEPReq+0x88>
 8005614:	e097      	b.n	8005746 <USBD_StdEPReq+0x1b8>
 8005616:	e162      	b.n	80058de <USBD_StdEPReq+0x350>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	23a7      	movs	r3, #167	; 0xa7
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	5cd3      	ldrb	r3, [r2, r3]
 8005620:	2b02      	cmp	r3, #2
 8005622:	d002      	beq.n	800562a <USBD_StdEPReq+0x9c>
 8005624:	2b03      	cmp	r3, #3
 8005626:	d01f      	beq.n	8005668 <USBD_StdEPReq+0xda>
 8005628:	e03d      	b.n	80056a6 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800562a:	230e      	movs	r3, #14
 800562c:	18fb      	adds	r3, r7, r3
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d012      	beq.n	800565a <USBD_StdEPReq+0xcc>
 8005634:	230e      	movs	r3, #14
 8005636:	18fb      	adds	r3, r7, r3
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b80      	cmp	r3, #128	; 0x80
 800563c:	d00d      	beq.n	800565a <USBD_StdEPReq+0xcc>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800563e:	230e      	movs	r3, #14
 8005640:	18fb      	adds	r3, r7, r3
 8005642:	781a      	ldrb	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	0011      	movs	r1, r2
 8005648:	0018      	movs	r0, r3
 800564a:	f001 f94c 	bl	80068e6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2180      	movs	r1, #128	; 0x80
 8005652:	0018      	movs	r0, r3
 8005654:	f001 f947 	bl	80068e6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005658:	e02c      	b.n	80056b4 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	0011      	movs	r1, r2
 8005660:	0018      	movs	r0, r3
 8005662:	f000 fcea 	bl	800603a <USBD_CtlError>
              break;
 8005666:	e025      	b.n	80056b4 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	885b      	ldrh	r3, [r3, #2]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d115      	bne.n	800569c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8005670:	230e      	movs	r3, #14
 8005672:	18fb      	adds	r3, r7, r3
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d010      	beq.n	800569c <USBD_StdEPReq+0x10e>
 800567a:	230e      	movs	r3, #14
 800567c:	18fb      	adds	r3, r7, r3
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	2b80      	cmp	r3, #128	; 0x80
 8005682:	d00b      	beq.n	800569c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	88db      	ldrh	r3, [r3, #6]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d107      	bne.n	800569c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800568c:	230e      	movs	r3, #14
 800568e:	18fb      	adds	r3, r7, r3
 8005690:	781a      	ldrb	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	0011      	movs	r1, r2
 8005696:	0018      	movs	r0, r3
 8005698:	f001 f925 	bl	80068e6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	0018      	movs	r0, r3
 80056a0:	f000 fdb4 	bl	800620c <USBD_CtlSendStatus>

              break;
 80056a4:	e006      	b.n	80056b4 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	0011      	movs	r1, r2
 80056ac:	0018      	movs	r0, r3
 80056ae:	f000 fcc4 	bl	800603a <USBD_CtlError>
              break;
 80056b2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80056b4:	e11a      	b.n	80058ec <USBD_StdEPReq+0x35e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	23a7      	movs	r3, #167	; 0xa7
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	5cd3      	ldrb	r3, [r2, r3]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d002      	beq.n	80056c8 <USBD_StdEPReq+0x13a>
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d01f      	beq.n	8005706 <USBD_StdEPReq+0x178>
 80056c6:	e035      	b.n	8005734 <USBD_StdEPReq+0x1a6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80056c8:	230e      	movs	r3, #14
 80056ca:	18fb      	adds	r3, r7, r3
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d012      	beq.n	80056f8 <USBD_StdEPReq+0x16a>
 80056d2:	230e      	movs	r3, #14
 80056d4:	18fb      	adds	r3, r7, r3
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b80      	cmp	r3, #128	; 0x80
 80056da:	d00d      	beq.n	80056f8 <USBD_StdEPReq+0x16a>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80056dc:	230e      	movs	r3, #14
 80056de:	18fb      	adds	r3, r7, r3
 80056e0:	781a      	ldrb	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	0011      	movs	r1, r2
 80056e6:	0018      	movs	r0, r3
 80056e8:	f001 f8fd 	bl	80068e6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2180      	movs	r1, #128	; 0x80
 80056f0:	0018      	movs	r0, r3
 80056f2:	f001 f8f8 	bl	80068e6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80056f6:	e025      	b.n	8005744 <USBD_StdEPReq+0x1b6>
                USBD_CtlError(pdev, req);
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	0011      	movs	r1, r2
 80056fe:	0018      	movs	r0, r3
 8005700:	f000 fc9b 	bl	800603a <USBD_CtlError>
              break;
 8005704:	e01e      	b.n	8005744 <USBD_StdEPReq+0x1b6>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	885b      	ldrh	r3, [r3, #2]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d119      	bne.n	8005742 <USBD_StdEPReq+0x1b4>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800570e:	230e      	movs	r3, #14
 8005710:	18fb      	adds	r3, r7, r3
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	227f      	movs	r2, #127	; 0x7f
 8005716:	4013      	ands	r3, r2
 8005718:	d007      	beq.n	800572a <USBD_StdEPReq+0x19c>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800571a:	230e      	movs	r3, #14
 800571c:	18fb      	adds	r3, r7, r3
 800571e:	781a      	ldrb	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	0011      	movs	r1, r2
 8005724:	0018      	movs	r0, r3
 8005726:	f001 f90a 	bl	800693e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	0018      	movs	r0, r3
 800572e:	f000 fd6d 	bl	800620c <USBD_CtlSendStatus>
              }
              break;
 8005732:	e006      	b.n	8005742 <USBD_StdEPReq+0x1b4>

            default:
              USBD_CtlError(pdev, req);
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	0011      	movs	r1, r2
 800573a:	0018      	movs	r0, r3
 800573c:	f000 fc7d 	bl	800603a <USBD_CtlError>
              break;
 8005740:	e000      	b.n	8005744 <USBD_StdEPReq+0x1b6>
              break;
 8005742:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8005744:	e0d2      	b.n	80058ec <USBD_StdEPReq+0x35e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	23a7      	movs	r3, #167	; 0xa7
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	5cd3      	ldrb	r3, [r2, r3]
 800574e:	2b02      	cmp	r3, #2
 8005750:	d002      	beq.n	8005758 <USBD_StdEPReq+0x1ca>
 8005752:	2b03      	cmp	r3, #3
 8005754:	d03e      	beq.n	80057d4 <USBD_StdEPReq+0x246>
 8005756:	e0ba      	b.n	80058ce <USBD_StdEPReq+0x340>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005758:	230e      	movs	r3, #14
 800575a:	18fb      	adds	r3, r7, r3
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00b      	beq.n	800577a <USBD_StdEPReq+0x1ec>
 8005762:	230e      	movs	r3, #14
 8005764:	18fb      	adds	r3, r7, r3
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b80      	cmp	r3, #128	; 0x80
 800576a:	d006      	beq.n	800577a <USBD_StdEPReq+0x1ec>
              {
                USBD_CtlError(pdev, req);
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	0011      	movs	r1, r2
 8005772:	0018      	movs	r0, r3
 8005774:	f000 fc61 	bl	800603a <USBD_CtlError>
                break;
 8005778:	e0b0      	b.n	80058dc <USBD_StdEPReq+0x34e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800577a:	230e      	movs	r3, #14
 800577c:	18fb      	adds	r3, r7, r3
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	b25b      	sxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	da0d      	bge.n	80057a2 <USBD_StdEPReq+0x214>
 8005786:	230e      	movs	r3, #14
 8005788:	18fb      	adds	r3, r7, r3
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	227f      	movs	r2, #127	; 0x7f
 800578e:	401a      	ands	r2, r3
 8005790:	0013      	movs	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	189b      	adds	r3, r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	3310      	adds	r3, #16
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	18d3      	adds	r3, r2, r3
 800579e:	3304      	adds	r3, #4
 80057a0:	e00d      	b.n	80057be <USBD_StdEPReq+0x230>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80057a2:	230e      	movs	r3, #14
 80057a4:	18fb      	adds	r3, r7, r3
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	227f      	movs	r2, #127	; 0x7f
 80057aa:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057ac:	0013      	movs	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	189b      	adds	r3, r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	3351      	adds	r3, #81	; 0x51
 80057b6:	33ff      	adds	r3, #255	; 0xff
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	18d3      	adds	r3, r2, r3
 80057bc:	3304      	adds	r3, #4
 80057be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80057c6:	68b9      	ldr	r1, [r7, #8]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	0018      	movs	r0, r3
 80057ce:	f000 fcb3 	bl	8006138 <USBD_CtlSendData>
              break;
 80057d2:	e083      	b.n	80058dc <USBD_StdEPReq+0x34e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80057d4:	230e      	movs	r3, #14
 80057d6:	18fb      	adds	r3, r7, r3
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	b25b      	sxtb	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	da15      	bge.n	800580c <USBD_StdEPReq+0x27e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80057e0:	230e      	movs	r3, #14
 80057e2:	18fb      	adds	r3, r7, r3
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	220f      	movs	r2, #15
 80057e8:	401a      	ands	r2, r3
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	0013      	movs	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	189b      	adds	r3, r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	18cb      	adds	r3, r1, r3
 80057f6:	3318      	adds	r3, #24
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d11e      	bne.n	800583c <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	0011      	movs	r1, r2
 8005804:	0018      	movs	r0, r3
 8005806:	f000 fc18 	bl	800603a <USBD_CtlError>
                  break;
 800580a:	e067      	b.n	80058dc <USBD_StdEPReq+0x34e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800580c:	230e      	movs	r3, #14
 800580e:	18fb      	adds	r3, r7, r3
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	220f      	movs	r2, #15
 8005814:	401a      	ands	r2, r3
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	23ac      	movs	r3, #172	; 0xac
 800581a:	0059      	lsls	r1, r3, #1
 800581c:	0013      	movs	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	189b      	adds	r3, r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	18c3      	adds	r3, r0, r3
 8005826:	185b      	adds	r3, r3, r1
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	0011      	movs	r1, r2
 8005834:	0018      	movs	r0, r3
 8005836:	f000 fc00 	bl	800603a <USBD_CtlError>
                  break;
 800583a:	e04f      	b.n	80058dc <USBD_StdEPReq+0x34e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800583c:	230e      	movs	r3, #14
 800583e:	18fb      	adds	r3, r7, r3
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	b25b      	sxtb	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	da0d      	bge.n	8005864 <USBD_StdEPReq+0x2d6>
 8005848:	230e      	movs	r3, #14
 800584a:	18fb      	adds	r3, r7, r3
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	227f      	movs	r2, #127	; 0x7f
 8005850:	401a      	ands	r2, r3
 8005852:	0013      	movs	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	189b      	adds	r3, r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	3310      	adds	r3, #16
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	18d3      	adds	r3, r2, r3
 8005860:	3304      	adds	r3, #4
 8005862:	e00d      	b.n	8005880 <USBD_StdEPReq+0x2f2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005864:	230e      	movs	r3, #14
 8005866:	18fb      	adds	r3, r7, r3
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	227f      	movs	r2, #127	; 0x7f
 800586c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800586e:	0013      	movs	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	189b      	adds	r3, r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	3351      	adds	r3, #81	; 0x51
 8005878:	33ff      	adds	r3, #255	; 0xff
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	18d3      	adds	r3, r2, r3
 800587e:	3304      	adds	r3, #4
 8005880:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005882:	230e      	movs	r3, #14
 8005884:	18fb      	adds	r3, r7, r3
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d004      	beq.n	8005896 <USBD_StdEPReq+0x308>
 800588c:	230e      	movs	r3, #14
 800588e:	18fb      	adds	r3, r7, r3
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b80      	cmp	r3, #128	; 0x80
 8005894:	d103      	bne.n	800589e <USBD_StdEPReq+0x310>
              {
                pep->status = 0x0000U;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	e010      	b.n	80058c0 <USBD_StdEPReq+0x332>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800589e:	230e      	movs	r3, #14
 80058a0:	18fb      	adds	r3, r7, r3
 80058a2:	781a      	ldrb	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	0011      	movs	r1, r2
 80058a8:	0018      	movs	r0, r3
 80058aa:	f001 f874 	bl	8006996 <USBD_LL_IsStallEP>
 80058ae:	1e03      	subs	r3, r0, #0
 80058b0:	d003      	beq.n	80058ba <USBD_StdEPReq+0x32c>
              {
                pep->status = 0x0001U;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2201      	movs	r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	e002      	b.n	80058c0 <USBD_StdEPReq+0x332>
              }
              else
              {
                pep->status = 0x0000U;
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2202      	movs	r2, #2
 80058c6:	0018      	movs	r0, r3
 80058c8:	f000 fc36 	bl	8006138 <USBD_CtlSendData>
              break;
 80058cc:	e006      	b.n	80058dc <USBD_StdEPReq+0x34e>

            default:
              USBD_CtlError(pdev, req);
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	0011      	movs	r1, r2
 80058d4:	0018      	movs	r0, r3
 80058d6:	f000 fbb0 	bl	800603a <USBD_CtlError>
              break;
 80058da:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80058dc:	e006      	b.n	80058ec <USBD_StdEPReq+0x35e>

        default:
          USBD_CtlError(pdev, req);
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	0011      	movs	r1, r2
 80058e4:	0018      	movs	r0, r3
 80058e6:	f000 fba8 	bl	800603a <USBD_CtlError>
          break;
 80058ea:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80058ec:	e006      	b.n	80058fc <USBD_StdEPReq+0x36e>

    default:
      USBD_CtlError(pdev, req);
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	0011      	movs	r1, r2
 80058f4:	0018      	movs	r0, r3
 80058f6:	f000 fba0 	bl	800603a <USBD_CtlError>
      break;
 80058fa:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80058fc:	230f      	movs	r3, #15
 80058fe:	18fb      	adds	r3, r7, r3
 8005900:	781b      	ldrb	r3, [r3, #0]
}
 8005902:	0018      	movs	r0, r3
 8005904:	46bd      	mov	sp, r7
 8005906:	b004      	add	sp, #16
 8005908:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800590c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005916:	2308      	movs	r3, #8
 8005918:	18fb      	adds	r3, r7, r3
 800591a:	2200      	movs	r2, #0
 800591c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005922:	230b      	movs	r3, #11
 8005924:	18fb      	adds	r3, r7, r3
 8005926:	2200      	movs	r2, #0
 8005928:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	885b      	ldrh	r3, [r3, #2]
 800592e:	0a1b      	lsrs	r3, r3, #8
 8005930:	b29b      	uxth	r3, r3
 8005932:	2b07      	cmp	r3, #7
 8005934:	d900      	bls.n	8005938 <USBD_GetDescriptor+0x2c>
 8005936:	e159      	b.n	8005bec <USBD_GetDescriptor+0x2e0>
 8005938:	009a      	lsls	r2, r3, #2
 800593a:	4bcc      	ldr	r3, [pc, #816]	; (8005c6c <USBD_GetDescriptor+0x360>)
 800593c:	18d3      	adds	r3, r2, r3
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	23ac      	movs	r3, #172	; 0xac
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	58d3      	ldr	r3, [r2, r3]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	7c12      	ldrb	r2, [r2, #16]
 8005950:	2108      	movs	r1, #8
 8005952:	1879      	adds	r1, r7, r1
 8005954:	0010      	movs	r0, r2
 8005956:	4798      	blx	r3
 8005958:	0003      	movs	r3, r0
 800595a:	60fb      	str	r3, [r7, #12]
      break;
 800595c:	e153      	b.n	8005c06 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	7c1b      	ldrb	r3, [r3, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10f      	bne.n	8005986 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	23ad      	movs	r3, #173	; 0xad
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	58d3      	ldr	r3, [r2, r3]
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	2208      	movs	r2, #8
 8005972:	18ba      	adds	r2, r7, r2
 8005974:	0010      	movs	r0, r2
 8005976:	4798      	blx	r3
 8005978:	0003      	movs	r3, r0
 800597a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3301      	adds	r3, #1
 8005980:	2202      	movs	r2, #2
 8005982:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005984:	e13f      	b.n	8005c06 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	23ad      	movs	r3, #173	; 0xad
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	58d3      	ldr	r3, [r2, r3]
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	2208      	movs	r2, #8
 8005992:	18ba      	adds	r2, r7, r2
 8005994:	0010      	movs	r0, r2
 8005996:	4798      	blx	r3
 8005998:	0003      	movs	r3, r0
 800599a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3301      	adds	r3, #1
 80059a0:	2202      	movs	r2, #2
 80059a2:	701a      	strb	r2, [r3, #0]
      break;
 80059a4:	e12f      	b.n	8005c06 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	885b      	ldrh	r3, [r3, #2]
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b05      	cmp	r3, #5
 80059ae:	d900      	bls.n	80059b2 <USBD_GetDescriptor+0xa6>
 80059b0:	e0d0      	b.n	8005b54 <USBD_GetDescriptor+0x248>
 80059b2:	009a      	lsls	r2, r3, #2
 80059b4:	4bae      	ldr	r3, [pc, #696]	; (8005c70 <USBD_GetDescriptor+0x364>)
 80059b6:	18d3      	adds	r3, r2, r3
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	23ac      	movs	r3, #172	; 0xac
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	58d3      	ldr	r3, [r2, r3]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00d      	beq.n	80059e6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	23ac      	movs	r3, #172	; 0xac
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	58d3      	ldr	r3, [r2, r3]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	7c12      	ldrb	r2, [r2, #16]
 80059d8:	2108      	movs	r1, #8
 80059da:	1879      	adds	r1, r7, r1
 80059dc:	0010      	movs	r0, r2
 80059de:	4798      	blx	r3
 80059e0:	0003      	movs	r3, r0
 80059e2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059e4:	e0c3      	b.n	8005b6e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	0011      	movs	r1, r2
 80059ec:	0018      	movs	r0, r3
 80059ee:	f000 fb24 	bl	800603a <USBD_CtlError>
            err++;
 80059f2:	210b      	movs	r1, #11
 80059f4:	187b      	adds	r3, r7, r1
 80059f6:	781a      	ldrb	r2, [r3, #0]
 80059f8:	187b      	adds	r3, r7, r1
 80059fa:	3201      	adds	r2, #1
 80059fc:	701a      	strb	r2, [r3, #0]
          break;
 80059fe:	e0b6      	b.n	8005b6e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	23ac      	movs	r3, #172	; 0xac
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	58d3      	ldr	r3, [r2, r3]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00d      	beq.n	8005a2a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	23ac      	movs	r3, #172	; 0xac
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	58d3      	ldr	r3, [r2, r3]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	7c12      	ldrb	r2, [r2, #16]
 8005a1c:	2108      	movs	r1, #8
 8005a1e:	1879      	adds	r1, r7, r1
 8005a20:	0010      	movs	r0, r2
 8005a22:	4798      	blx	r3
 8005a24:	0003      	movs	r3, r0
 8005a26:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a28:	e0a1      	b.n	8005b6e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	0011      	movs	r1, r2
 8005a30:	0018      	movs	r0, r3
 8005a32:	f000 fb02 	bl	800603a <USBD_CtlError>
            err++;
 8005a36:	210b      	movs	r1, #11
 8005a38:	187b      	adds	r3, r7, r1
 8005a3a:	781a      	ldrb	r2, [r3, #0]
 8005a3c:	187b      	adds	r3, r7, r1
 8005a3e:	3201      	adds	r2, #1
 8005a40:	701a      	strb	r2, [r3, #0]
          break;
 8005a42:	e094      	b.n	8005b6e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	23ac      	movs	r3, #172	; 0xac
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	58d3      	ldr	r3, [r2, r3]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00d      	beq.n	8005a6e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	23ac      	movs	r3, #172	; 0xac
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	58d3      	ldr	r3, [r2, r3]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	7c12      	ldrb	r2, [r2, #16]
 8005a60:	2108      	movs	r1, #8
 8005a62:	1879      	adds	r1, r7, r1
 8005a64:	0010      	movs	r0, r2
 8005a66:	4798      	blx	r3
 8005a68:	0003      	movs	r3, r0
 8005a6a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a6c:	e07f      	b.n	8005b6e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	0011      	movs	r1, r2
 8005a74:	0018      	movs	r0, r3
 8005a76:	f000 fae0 	bl	800603a <USBD_CtlError>
            err++;
 8005a7a:	210b      	movs	r1, #11
 8005a7c:	187b      	adds	r3, r7, r1
 8005a7e:	781a      	ldrb	r2, [r3, #0]
 8005a80:	187b      	adds	r3, r7, r1
 8005a82:	3201      	adds	r2, #1
 8005a84:	701a      	strb	r2, [r3, #0]
          break;
 8005a86:	e072      	b.n	8005b6e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	23ac      	movs	r3, #172	; 0xac
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	58d3      	ldr	r3, [r2, r3]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00d      	beq.n	8005ab2 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	23ac      	movs	r3, #172	; 0xac
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	58d3      	ldr	r3, [r2, r3]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	7c12      	ldrb	r2, [r2, #16]
 8005aa4:	2108      	movs	r1, #8
 8005aa6:	1879      	adds	r1, r7, r1
 8005aa8:	0010      	movs	r0, r2
 8005aaa:	4798      	blx	r3
 8005aac:	0003      	movs	r3, r0
 8005aae:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ab0:	e05d      	b.n	8005b6e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	0011      	movs	r1, r2
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f000 fabe 	bl	800603a <USBD_CtlError>
            err++;
 8005abe:	210b      	movs	r1, #11
 8005ac0:	187b      	adds	r3, r7, r1
 8005ac2:	781a      	ldrb	r2, [r3, #0]
 8005ac4:	187b      	adds	r3, r7, r1
 8005ac6:	3201      	adds	r2, #1
 8005ac8:	701a      	strb	r2, [r3, #0]
          break;
 8005aca:	e050      	b.n	8005b6e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	23ac      	movs	r3, #172	; 0xac
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	58d3      	ldr	r3, [r2, r3]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00d      	beq.n	8005af6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	23ac      	movs	r3, #172	; 0xac
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	58d3      	ldr	r3, [r2, r3]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	7c12      	ldrb	r2, [r2, #16]
 8005ae8:	2108      	movs	r1, #8
 8005aea:	1879      	adds	r1, r7, r1
 8005aec:	0010      	movs	r0, r2
 8005aee:	4798      	blx	r3
 8005af0:	0003      	movs	r3, r0
 8005af2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005af4:	e03b      	b.n	8005b6e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	0011      	movs	r1, r2
 8005afc:	0018      	movs	r0, r3
 8005afe:	f000 fa9c 	bl	800603a <USBD_CtlError>
            err++;
 8005b02:	210b      	movs	r1, #11
 8005b04:	187b      	adds	r3, r7, r1
 8005b06:	781a      	ldrb	r2, [r3, #0]
 8005b08:	187b      	adds	r3, r7, r1
 8005b0a:	3201      	adds	r2, #1
 8005b0c:	701a      	strb	r2, [r3, #0]
          break;
 8005b0e:	e02e      	b.n	8005b6e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	23ac      	movs	r3, #172	; 0xac
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	58d3      	ldr	r3, [r2, r3]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00d      	beq.n	8005b3a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	23ac      	movs	r3, #172	; 0xac
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	58d3      	ldr	r3, [r2, r3]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	7c12      	ldrb	r2, [r2, #16]
 8005b2c:	2108      	movs	r1, #8
 8005b2e:	1879      	adds	r1, r7, r1
 8005b30:	0010      	movs	r0, r2
 8005b32:	4798      	blx	r3
 8005b34:	0003      	movs	r3, r0
 8005b36:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b38:	e019      	b.n	8005b6e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	0011      	movs	r1, r2
 8005b40:	0018      	movs	r0, r3
 8005b42:	f000 fa7a 	bl	800603a <USBD_CtlError>
            err++;
 8005b46:	210b      	movs	r1, #11
 8005b48:	187b      	adds	r3, r7, r1
 8005b4a:	781a      	ldrb	r2, [r3, #0]
 8005b4c:	187b      	adds	r3, r7, r1
 8005b4e:	3201      	adds	r2, #1
 8005b50:	701a      	strb	r2, [r3, #0]
          break;
 8005b52:	e00c      	b.n	8005b6e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	0011      	movs	r1, r2
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f000 fa6d 	bl	800603a <USBD_CtlError>
          err++;
 8005b60:	210b      	movs	r1, #11
 8005b62:	187b      	adds	r3, r7, r1
 8005b64:	781a      	ldrb	r2, [r3, #0]
 8005b66:	187b      	adds	r3, r7, r1
 8005b68:	3201      	adds	r2, #1
 8005b6a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8005b6c:	e04b      	b.n	8005c06 <USBD_GetDescriptor+0x2fa>
 8005b6e:	e04a      	b.n	8005c06 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	7c1b      	ldrb	r3, [r3, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10b      	bne.n	8005b90 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	23ad      	movs	r3, #173	; 0xad
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	58d3      	ldr	r3, [r2, r3]
 8005b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b82:	2208      	movs	r2, #8
 8005b84:	18ba      	adds	r2, r7, r2
 8005b86:	0010      	movs	r0, r2
 8005b88:	4798      	blx	r3
 8005b8a:	0003      	movs	r3, r0
 8005b8c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b8e:	e03a      	b.n	8005c06 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	0011      	movs	r1, r2
 8005b96:	0018      	movs	r0, r3
 8005b98:	f000 fa4f 	bl	800603a <USBD_CtlError>
        err++;
 8005b9c:	210b      	movs	r1, #11
 8005b9e:	187b      	adds	r3, r7, r1
 8005ba0:	781a      	ldrb	r2, [r3, #0]
 8005ba2:	187b      	adds	r3, r7, r1
 8005ba4:	3201      	adds	r2, #1
 8005ba6:	701a      	strb	r2, [r3, #0]
      break;
 8005ba8:	e02d      	b.n	8005c06 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	7c1b      	ldrb	r3, [r3, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10f      	bne.n	8005bd2 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	23ad      	movs	r3, #173	; 0xad
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	58d3      	ldr	r3, [r2, r3]
 8005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbc:	2208      	movs	r2, #8
 8005bbe:	18ba      	adds	r2, r7, r2
 8005bc0:	0010      	movs	r0, r2
 8005bc2:	4798      	blx	r3
 8005bc4:	0003      	movs	r3, r0
 8005bc6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	2207      	movs	r2, #7
 8005bce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005bd0:	e019      	b.n	8005c06 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	0011      	movs	r1, r2
 8005bd8:	0018      	movs	r0, r3
 8005bda:	f000 fa2e 	bl	800603a <USBD_CtlError>
        err++;
 8005bde:	210b      	movs	r1, #11
 8005be0:	187b      	adds	r3, r7, r1
 8005be2:	781a      	ldrb	r2, [r3, #0]
 8005be4:	187b      	adds	r3, r7, r1
 8005be6:	3201      	adds	r2, #1
 8005be8:	701a      	strb	r2, [r3, #0]
      break;
 8005bea:	e00c      	b.n	8005c06 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	0011      	movs	r1, r2
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	f000 fa21 	bl	800603a <USBD_CtlError>
      err++;
 8005bf8:	210b      	movs	r1, #11
 8005bfa:	187b      	adds	r3, r7, r1
 8005bfc:	781a      	ldrb	r2, [r3, #0]
 8005bfe:	187b      	adds	r3, r7, r1
 8005c00:	3201      	adds	r2, #1
 8005c02:	701a      	strb	r2, [r3, #0]
      break;
 8005c04:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8005c06:	230b      	movs	r3, #11
 8005c08:	18fb      	adds	r3, r7, r3
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d128      	bne.n	8005c62 <USBD_GetDescriptor+0x356>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005c10:	2308      	movs	r3, #8
 8005c12:	18fb      	adds	r3, r7, r3
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d01a      	beq.n	8005c50 <USBD_GetDescriptor+0x344>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	88db      	ldrh	r3, [r3, #6]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d016      	beq.n	8005c50 <USBD_GetDescriptor+0x344>
    {
      len = MIN(len, req->wLength);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	88da      	ldrh	r2, [r3, #6]
 8005c26:	2308      	movs	r3, #8
 8005c28:	18fb      	adds	r3, r7, r3
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	1c18      	adds	r0, r3, #0
 8005c2e:	1c11      	adds	r1, r2, #0
 8005c30:	b28a      	uxth	r2, r1
 8005c32:	b283      	uxth	r3, r0
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d900      	bls.n	8005c3a <USBD_GetDescriptor+0x32e>
 8005c38:	1c01      	adds	r1, r0, #0
 8005c3a:	b28a      	uxth	r2, r1
 8005c3c:	2108      	movs	r1, #8
 8005c3e:	187b      	adds	r3, r7, r1
 8005c40:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c42:	187b      	adds	r3, r7, r1
 8005c44:	881a      	ldrh	r2, [r3, #0]
 8005c46:	68f9      	ldr	r1, [r7, #12]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	f000 fa74 	bl	8006138 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	88db      	ldrh	r3, [r3, #6]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d105      	bne.n	8005c64 <USBD_GetDescriptor+0x358>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	f000 fad6 	bl	800620c <USBD_CtlSendStatus>
 8005c60:	e000      	b.n	8005c64 <USBD_GetDescriptor+0x358>
    return;
 8005c62:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8005c64:	46bd      	mov	sp, r7
 8005c66:	b004      	add	sp, #16
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	08006d34 	.word	0x08006d34
 8005c70:	08006d54 	.word	0x08006d54

08005c74 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005c74:	b590      	push	{r4, r7, lr}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	889b      	ldrh	r3, [r3, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d13d      	bne.n	8005d02 <USBD_SetAddress+0x8e>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	88db      	ldrh	r3, [r3, #6]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d139      	bne.n	8005d02 <USBD_SetAddress+0x8e>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	885b      	ldrh	r3, [r3, #2]
 8005c92:	2b7f      	cmp	r3, #127	; 0x7f
 8005c94:	d835      	bhi.n	8005d02 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	885b      	ldrh	r3, [r3, #2]
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	230f      	movs	r3, #15
 8005c9e:	18fb      	adds	r3, r7, r3
 8005ca0:	217f      	movs	r1, #127	; 0x7f
 8005ca2:	400a      	ands	r2, r1
 8005ca4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	23a7      	movs	r3, #167	; 0xa7
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	5cd3      	ldrb	r3, [r2, r3]
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d106      	bne.n	8005cc0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	0011      	movs	r1, r2
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f000 f9be 	bl	800603a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cbe:	e026      	b.n	8005d0e <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	240f      	movs	r4, #15
 8005cc4:	193a      	adds	r2, r7, r4
 8005cc6:	4914      	ldr	r1, [pc, #80]	; (8005d18 <USBD_SetAddress+0xa4>)
 8005cc8:	7812      	ldrb	r2, [r2, #0]
 8005cca:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005ccc:	193b      	adds	r3, r7, r4
 8005cce:	781a      	ldrb	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	0011      	movs	r1, r2
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f000 fe89 	bl	80069ec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f000 fa95 	bl	800620c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005ce2:	193b      	adds	r3, r7, r4
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	23a7      	movs	r3, #167	; 0xa7
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	2102      	movs	r1, #2
 8005cf2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cf4:	e00b      	b.n	8005d0e <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	23a7      	movs	r3, #167	; 0xa7
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d00:	e005      	b.n	8005d0e <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	0011      	movs	r1, r2
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f000 f996 	bl	800603a <USBD_CtlError>
  }
}
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	46bd      	mov	sp, r7
 8005d12:	b005      	add	sp, #20
 8005d14:	bd90      	pop	{r4, r7, pc}
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	0000029e 	.word	0x0000029e

08005d1c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	885b      	ldrh	r3, [r3, #2]
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	4b4c      	ldr	r3, [pc, #304]	; (8005e60 <USBD_SetConfig+0x144>)
 8005d2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d30:	4b4b      	ldr	r3, [pc, #300]	; (8005e60 <USBD_SetConfig+0x144>)
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d906      	bls.n	8005d46 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	0011      	movs	r1, r2
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f000 f97b 	bl	800603a <USBD_CtlError>
 8005d44:	e088      	b.n	8005e58 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	23a7      	movs	r3, #167	; 0xa7
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	5cd3      	ldrb	r3, [r2, r3]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d002      	beq.n	8005d58 <USBD_SetConfig+0x3c>
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d029      	beq.n	8005daa <USBD_SetConfig+0x8e>
 8005d56:	e071      	b.n	8005e3c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005d58:	4b41      	ldr	r3, [pc, #260]	; (8005e60 <USBD_SetConfig+0x144>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01f      	beq.n	8005da0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8005d60:	4b3f      	ldr	r3, [pc, #252]	; (8005e60 <USBD_SetConfig+0x144>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	001a      	movs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	23a7      	movs	r3, #167	; 0xa7
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	2103      	movs	r1, #3
 8005d72:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005d74:	4b3a      	ldr	r3, [pc, #232]	; (8005e60 <USBD_SetConfig+0x144>)
 8005d76:	781a      	ldrb	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	0011      	movs	r1, r2
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	f7ff f8bd 	bl	8004efc <USBD_SetClassConfig>
 8005d82:	0003      	movs	r3, r0
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d106      	bne.n	8005d96 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	0011      	movs	r1, r2
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f000 f953 	bl	800603a <USBD_CtlError>
            return;
 8005d94:	e060      	b.n	8005e58 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	0018      	movs	r0, r3
 8005d9a:	f000 fa37 	bl	800620c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005d9e:	e05b      	b.n	8005e58 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	0018      	movs	r0, r3
 8005da4:	f000 fa32 	bl	800620c <USBD_CtlSendStatus>
        break;
 8005da8:	e056      	b.n	8005e58 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005daa:	4b2d      	ldr	r3, [pc, #180]	; (8005e60 <USBD_SetConfig+0x144>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d115      	bne.n	8005dde <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	23a7      	movs	r3, #167	; 0xa7
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	2102      	movs	r1, #2
 8005dba:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8005dbc:	4b28      	ldr	r3, [pc, #160]	; (8005e60 <USBD_SetConfig+0x144>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	001a      	movs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005dc6:	4b26      	ldr	r3, [pc, #152]	; (8005e60 <USBD_SetConfig+0x144>)
 8005dc8:	781a      	ldrb	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	0011      	movs	r1, r2
 8005dce:	0018      	movs	r0, r3
 8005dd0:	f7ff f8bc 	bl	8004f4c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f000 fa18 	bl	800620c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005ddc:	e03c      	b.n	8005e58 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8005dde:	4b20      	ldr	r3, [pc, #128]	; (8005e60 <USBD_SetConfig+0x144>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	001a      	movs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d022      	beq.n	8005e32 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	0011      	movs	r1, r2
 8005df6:	0018      	movs	r0, r3
 8005df8:	f7ff f8a8 	bl	8004f4c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005dfc:	4b18      	ldr	r3, [pc, #96]	; (8005e60 <USBD_SetConfig+0x144>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	001a      	movs	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005e06:	4b16      	ldr	r3, [pc, #88]	; (8005e60 <USBD_SetConfig+0x144>)
 8005e08:	781a      	ldrb	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	0011      	movs	r1, r2
 8005e0e:	0018      	movs	r0, r3
 8005e10:	f7ff f874 	bl	8004efc <USBD_SetClassConfig>
 8005e14:	0003      	movs	r3, r0
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d106      	bne.n	8005e28 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	0011      	movs	r1, r2
 8005e20:	0018      	movs	r0, r3
 8005e22:	f000 f90a 	bl	800603a <USBD_CtlError>
            return;
 8005e26:	e017      	b.n	8005e58 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	f000 f9ee 	bl	800620c <USBD_CtlSendStatus>
        break;
 8005e30:	e012      	b.n	8005e58 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	0018      	movs	r0, r3
 8005e36:	f000 f9e9 	bl	800620c <USBD_CtlSendStatus>
        break;
 8005e3a:	e00d      	b.n	8005e58 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	0011      	movs	r1, r2
 8005e42:	0018      	movs	r0, r3
 8005e44:	f000 f8f9 	bl	800603a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005e48:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <USBD_SetConfig+0x144>)
 8005e4a:	781a      	ldrb	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	0011      	movs	r1, r2
 8005e50:	0018      	movs	r0, r3
 8005e52:	f7ff f87b 	bl	8004f4c <USBD_ClrClassConfig>
        break;
 8005e56:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	b002      	add	sp, #8
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	46c0      	nop			; (mov r8, r8)
 8005e60:	20000254 	.word	0x20000254

08005e64 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	88db      	ldrh	r3, [r3, #6]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d006      	beq.n	8005e84 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	0011      	movs	r1, r2
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f000 f8dc 	bl	800603a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005e82:	e025      	b.n	8005ed0 <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	23a7      	movs	r3, #167	; 0xa7
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	5cd3      	ldrb	r3, [r2, r3]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	db18      	blt.n	8005ec2 <USBD_GetConfig+0x5e>
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	dd02      	ble.n	8005e9a <USBD_GetConfig+0x36>
 8005e94:	2b03      	cmp	r3, #3
 8005e96:	d00c      	beq.n	8005eb2 <USBD_GetConfig+0x4e>
 8005e98:	e013      	b.n	8005ec2 <USBD_GetConfig+0x5e>
        pdev->dev_default_config = 0U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3308      	adds	r3, #8
 8005ea4:	0019      	movs	r1, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	0018      	movs	r0, r3
 8005eac:	f000 f944 	bl	8006138 <USBD_CtlSendData>
        break;
 8005eb0:	e00e      	b.n	8005ed0 <USBD_GetConfig+0x6c>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	1d19      	adds	r1, r3, #4
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f000 f93c 	bl	8006138 <USBD_CtlSendData>
        break;
 8005ec0:	e006      	b.n	8005ed0 <USBD_GetConfig+0x6c>
        USBD_CtlError(pdev, req);
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	0011      	movs	r1, r2
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f000 f8b6 	bl	800603a <USBD_CtlError>
        break;
 8005ece:	46c0      	nop			; (mov r8, r8)
}
 8005ed0:	46c0      	nop			; (mov r8, r8)
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	b002      	add	sp, #8
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	23a7      	movs	r3, #167	; 0xa7
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	5cd3      	ldrb	r3, [r2, r3]
 8005eea:	3b01      	subs	r3, #1
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d822      	bhi.n	8005f36 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	88db      	ldrh	r3, [r3, #6]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d006      	beq.n	8005f06 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	0011      	movs	r1, r2
 8005efe:	0018      	movs	r0, r3
 8005f00:	f000 f89b 	bl	800603a <USBD_CtlError>
        break;
 8005f04:	e01e      	b.n	8005f44 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	23a9      	movs	r3, #169	; 0xa9
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	58d3      	ldr	r3, [r2, r3]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d005      	beq.n	8005f24 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	330c      	adds	r3, #12
 8005f28:	0019      	movs	r1, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f000 f902 	bl	8006138 <USBD_CtlSendData>
      break;
 8005f34:	e006      	b.n	8005f44 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	0011      	movs	r1, r2
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	f000 f87c 	bl	800603a <USBD_CtlError>
      break;
 8005f42:	46c0      	nop			; (mov r8, r8)
  }
}
 8005f44:	46c0      	nop			; (mov r8, r8)
 8005f46:	46bd      	mov	sp, r7
 8005f48:	b002      	add	sp, #8
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	885b      	ldrh	r3, [r3, #2]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d108      	bne.n	8005f70 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	23a9      	movs	r3, #169	; 0xa9
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	2101      	movs	r1, #1
 8005f66:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	f000 f94e 	bl	800620c <USBD_CtlSendStatus>
  }
}
 8005f70:	46c0      	nop			; (mov r8, r8)
 8005f72:	46bd      	mov	sp, r7
 8005f74:	b002      	add	sp, #8
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	23a7      	movs	r3, #167	; 0xa7
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	5cd3      	ldrb	r3, [r2, r3]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d80d      	bhi.n	8005fac <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	885b      	ldrh	r3, [r3, #2]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d110      	bne.n	8005fba <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	23a9      	movs	r3, #169	; 0xa9
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f000 f931 	bl	800620c <USBD_CtlSendStatus>
      }
      break;
 8005faa:	e006      	b.n	8005fba <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	0011      	movs	r1, r2
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f000 f841 	bl	800603a <USBD_CtlError>
      break;
 8005fb8:	e000      	b.n	8005fbc <USBD_ClrFeature+0x44>
      break;
 8005fba:	46c0      	nop			; (mov r8, r8)
  }
}
 8005fbc:	46c0      	nop			; (mov r8, r8)
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	b002      	add	sp, #8
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	781a      	ldrb	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	785a      	ldrb	r2, [r3, #1]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	3303      	adds	r3, #3
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	021b      	lsls	r3, r3, #8
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	18d3      	adds	r3, r2, r3
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	b29a      	uxth	r2, r3
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	3305      	adds	r3, #5
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	b29b      	uxth	r3, r3
 800600a:	021b      	lsls	r3, r3, #8
 800600c:	b29b      	uxth	r3, r3
 800600e:	18d3      	adds	r3, r2, r3
 8006010:	b29a      	uxth	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	3306      	adds	r3, #6
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	b29a      	uxth	r2, r3
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	3307      	adds	r3, #7
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	b29b      	uxth	r3, r3
 8006026:	021b      	lsls	r3, r3, #8
 8006028:	b29b      	uxth	r3, r3
 800602a:	18d3      	adds	r3, r2, r3
 800602c:	b29a      	uxth	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	80da      	strh	r2, [r3, #6]

}
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	46bd      	mov	sp, r7
 8006036:	b002      	add	sp, #8
 8006038:	bd80      	pop	{r7, pc}

0800603a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b082      	sub	sp, #8
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2180      	movs	r1, #128	; 0x80
 8006048:	0018      	movs	r0, r3
 800604a:	f000 fc4c 	bl	80068e6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2100      	movs	r1, #0
 8006052:	0018      	movs	r0, r3
 8006054:	f000 fc47 	bl	80068e6 <USBD_LL_StallEP>
}
 8006058:	46c0      	nop			; (mov r8, r8)
 800605a:	46bd      	mov	sp, r7
 800605c:	b002      	add	sp, #8
 800605e:	bd80      	pop	{r7, pc}

08006060 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006060:	b590      	push	{r4, r7, lr}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800606c:	2317      	movs	r3, #23
 800606e:	18fb      	adds	r3, r7, r3
 8006070:	2200      	movs	r2, #0
 8006072:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d03d      	beq.n	80060f6 <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	0018      	movs	r0, r3
 800607e:	f000 f83e 	bl	80060fe <USBD_GetLen>
 8006082:	0003      	movs	r3, r0
 8006084:	3301      	adds	r3, #1
 8006086:	b29b      	uxth	r3, r3
 8006088:	18db      	adds	r3, r3, r3
 800608a:	b29a      	uxth	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006090:	2017      	movs	r0, #23
 8006092:	183b      	adds	r3, r7, r0
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	183a      	adds	r2, r7, r0
 8006098:	1c59      	adds	r1, r3, #1
 800609a:	7011      	strb	r1, [r2, #0]
 800609c:	001a      	movs	r2, r3
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	189b      	adds	r3, r3, r2
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	7812      	ldrb	r2, [r2, #0]
 80060a6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80060a8:	183b      	adds	r3, r7, r0
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	183a      	adds	r2, r7, r0
 80060ae:	1c59      	adds	r1, r3, #1
 80060b0:	7011      	strb	r1, [r2, #0]
 80060b2:	001a      	movs	r2, r3
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	189b      	adds	r3, r3, r2
 80060b8:	2203      	movs	r2, #3
 80060ba:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80060bc:	e017      	b.n	80060ee <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	60fa      	str	r2, [r7, #12]
 80060c4:	2417      	movs	r4, #23
 80060c6:	193a      	adds	r2, r7, r4
 80060c8:	7812      	ldrb	r2, [r2, #0]
 80060ca:	1939      	adds	r1, r7, r4
 80060cc:	1c50      	adds	r0, r2, #1
 80060ce:	7008      	strb	r0, [r1, #0]
 80060d0:	0011      	movs	r1, r2
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	1852      	adds	r2, r2, r1
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80060da:	193b      	adds	r3, r7, r4
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	193a      	adds	r2, r7, r4
 80060e0:	1c59      	adds	r1, r3, #1
 80060e2:	7011      	strb	r1, [r2, #0]
 80060e4:	001a      	movs	r2, r3
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	189b      	adds	r3, r3, r2
 80060ea:	2200      	movs	r2, #0
 80060ec:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e3      	bne.n	80060be <USBD_GetString+0x5e>
    }
  }
}
 80060f6:	46c0      	nop			; (mov r8, r8)
 80060f8:	46bd      	mov	sp, r7
 80060fa:	b007      	add	sp, #28
 80060fc:	bd90      	pop	{r4, r7, pc}

080060fe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b084      	sub	sp, #16
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006106:	230f      	movs	r3, #15
 8006108:	18fb      	adds	r3, r7, r3
 800610a:	2200      	movs	r2, #0
 800610c:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800610e:	e008      	b.n	8006122 <USBD_GetLen+0x24>
  {
    len++;
 8006110:	210f      	movs	r1, #15
 8006112:	187b      	adds	r3, r7, r1
 8006114:	781a      	ldrb	r2, [r3, #0]
 8006116:	187b      	adds	r3, r7, r1
 8006118:	3201      	adds	r2, #1
 800611a:	701a      	strb	r2, [r3, #0]
    buf++;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3301      	adds	r3, #1
 8006120:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1f2      	bne.n	8006110 <USBD_GetLen+0x12>
  }

  return len;
 800612a:	230f      	movs	r3, #15
 800612c:	18fb      	adds	r3, r7, r3
 800612e:	781b      	ldrb	r3, [r3, #0]
}
 8006130:	0018      	movs	r0, r3
 8006132:	46bd      	mov	sp, r7
 8006134:	b004      	add	sp, #16
 8006136:	bd80      	pop	{r7, pc}

08006138 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	1dbb      	adds	r3, r7, #6
 8006144:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	23a5      	movs	r3, #165	; 0xa5
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	2102      	movs	r1, #2
 800614e:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8006150:	1dbb      	adds	r3, r7, #6
 8006152:	881a      	ldrh	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006158:	1dbb      	adds	r3, r7, #6
 800615a:	881a      	ldrh	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006160:	1dbb      	adds	r3, r7, #6
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	2100      	movs	r1, #0
 800616a:	f000 fc6b 	bl	8006a44 <USBD_LL_Transmit>

  return USBD_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	0018      	movs	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	b004      	add	sp, #16
 8006176:	bd80      	pop	{r7, pc}

08006178 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	1dbb      	adds	r3, r7, #6
 8006184:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006186:	1dbb      	adds	r3, r7, #6
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	2100      	movs	r1, #0
 8006190:	f000 fc58 	bl	8006a44 <USBD_LL_Transmit>

  return USBD_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	0018      	movs	r0, r3
 8006198:	46bd      	mov	sp, r7
 800619a:	b004      	add	sp, #16
 800619c:	bd80      	pop	{r7, pc}

0800619e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b084      	sub	sp, #16
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	60f8      	str	r0, [r7, #12]
 80061a6:	60b9      	str	r1, [r7, #8]
 80061a8:	1dbb      	adds	r3, r7, #6
 80061aa:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	23a5      	movs	r3, #165	; 0xa5
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	2103      	movs	r1, #3
 80061b4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80061b6:	1dbb      	adds	r3, r7, #6
 80061b8:	8819      	ldrh	r1, [r3, #0]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	23ae      	movs	r3, #174	; 0xae
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80061c2:	1dbb      	adds	r3, r7, #6
 80061c4:	8819      	ldrh	r1, [r3, #0]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	23b0      	movs	r3, #176	; 0xb0
 80061ca:	005b      	lsls	r3, r3, #1
 80061cc:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80061ce:	1dbb      	adds	r3, r7, #6
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	2100      	movs	r1, #0
 80061d8:	f000 fc6c 	bl	8006ab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	0018      	movs	r0, r3
 80061e0:	46bd      	mov	sp, r7
 80061e2:	b004      	add	sp, #16
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	1dbb      	adds	r3, r7, #6
 80061f2:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80061f4:	1dbb      	adds	r3, r7, #6
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	2100      	movs	r1, #0
 80061fe:	f000 fc59 	bl	8006ab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	0018      	movs	r0, r3
 8006206:	46bd      	mov	sp, r7
 8006208:	b004      	add	sp, #16
 800620a:	bd80      	pop	{r7, pc}

0800620c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	23a5      	movs	r3, #165	; 0xa5
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	2104      	movs	r1, #4
 800621c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	2300      	movs	r3, #0
 8006222:	2200      	movs	r2, #0
 8006224:	2100      	movs	r1, #0
 8006226:	f000 fc0d 	bl	8006a44 <USBD_LL_Transmit>

  return USBD_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	0018      	movs	r0, r3
 800622e:	46bd      	mov	sp, r7
 8006230:	b002      	add	sp, #8
 8006232:	bd80      	pop	{r7, pc}

08006234 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	23a5      	movs	r3, #165	; 0xa5
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	2105      	movs	r1, #5
 8006244:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	2300      	movs	r3, #0
 800624a:	2200      	movs	r2, #0
 800624c:	2100      	movs	r1, #0
 800624e:	f000 fc31 	bl	8006ab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	0018      	movs	r0, r3
 8006256:	46bd      	mov	sp, r7
 8006258:	b002      	add	sp, #8
 800625a:	bd80      	pop	{r7, pc}

0800625c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006260:	4914      	ldr	r1, [pc, #80]	; (80062b4 <MX_USB_DEVICE_Init+0x58>)
 8006262:	4b15      	ldr	r3, [pc, #84]	; (80062b8 <MX_USB_DEVICE_Init+0x5c>)
 8006264:	2200      	movs	r2, #0
 8006266:	0018      	movs	r0, r3
 8006268:	f7fe fde0 	bl	8004e2c <USBD_Init>
 800626c:	1e03      	subs	r3, r0, #0
 800626e:	d001      	beq.n	8006274 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006270:	f7fa fa0a 	bl	8000688 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006274:	4a11      	ldr	r2, [pc, #68]	; (80062bc <MX_USB_DEVICE_Init+0x60>)
 8006276:	4b10      	ldr	r3, [pc, #64]	; (80062b8 <MX_USB_DEVICE_Init+0x5c>)
 8006278:	0011      	movs	r1, r2
 800627a:	0018      	movs	r0, r3
 800627c:	f7fe fe07 	bl	8004e8e <USBD_RegisterClass>
 8006280:	1e03      	subs	r3, r0, #0
 8006282:	d001      	beq.n	8006288 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8006284:	f7fa fa00 	bl	8000688 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006288:	4a0d      	ldr	r2, [pc, #52]	; (80062c0 <MX_USB_DEVICE_Init+0x64>)
 800628a:	4b0b      	ldr	r3, [pc, #44]	; (80062b8 <MX_USB_DEVICE_Init+0x5c>)
 800628c:	0011      	movs	r1, r2
 800628e:	0018      	movs	r0, r3
 8006290:	f7fe fdb0 	bl	8004df4 <USBD_CUSTOM_HID_RegisterInterface>
 8006294:	1e03      	subs	r3, r0, #0
 8006296:	d001      	beq.n	800629c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8006298:	f7fa f9f6 	bl	8000688 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800629c:	4b06      	ldr	r3, [pc, #24]	; (80062b8 <MX_USB_DEVICE_Init+0x5c>)
 800629e:	0018      	movs	r0, r3
 80062a0:	f7fe fe16 	bl	8004ed0 <USBD_Start>
 80062a4:	1e03      	subs	r3, r0, #0
 80062a6:	d001      	beq.n	80062ac <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80062a8:	f7fa f9ee 	bl	8000688 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80062ac:	46c0      	nop			; (mov r8, r8)
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	46c0      	nop			; (mov r8, r8)
 80062b4:	20000114 	.word	0x20000114
 80062b8:	20000384 	.word	0x20000384
 80062bc:	2000000c 	.word	0x2000000c
 80062c0:	20000104 	.word	0x20000104

080062c4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80062c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80062ca:	0018      	movs	r0, r3
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80062d4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80062d6:	0018      	movs	r0, r3
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	0002      	movs	r2, r0
 80062e4:	1dfb      	adds	r3, r7, #7
 80062e6:	701a      	strb	r2, [r3, #0]
 80062e8:	1dbb      	adds	r3, r7, #6
 80062ea:	1c0a      	adds	r2, r1, #0
 80062ec:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 6 */

	USB_Receive_Callback(event_idx, state);
 80062ee:	1dbb      	adds	r3, r7, #6
 80062f0:	781a      	ldrb	r2, [r3, #0]
 80062f2:	1dfb      	adds	r3, r7, #7
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	0011      	movs	r1, r2
 80062f8:	0018      	movs	r0, r3
 80062fa:	f7fa f8dd 	bl	80004b8 <USB_Receive_Callback>

	return (USBD_OK);
 80062fe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006300:	0018      	movs	r0, r3
 8006302:	46bd      	mov	sp, r7
 8006304:	b002      	add	sp, #8
 8006306:	bd80      	pop	{r7, pc}

08006308 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	0002      	movs	r2, r0
 8006310:	6039      	str	r1, [r7, #0]
 8006312:	1dfb      	adds	r3, r7, #7
 8006314:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2212      	movs	r2, #18
 800631a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800631c:	4b02      	ldr	r3, [pc, #8]	; (8006328 <USBD_FS_DeviceDescriptor+0x20>)
}
 800631e:	0018      	movs	r0, r3
 8006320:	46bd      	mov	sp, r7
 8006322:	b002      	add	sp, #8
 8006324:	bd80      	pop	{r7, pc}
 8006326:	46c0      	nop			; (mov r8, r8)
 8006328:	20000130 	.word	0x20000130

0800632c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	0002      	movs	r2, r0
 8006334:	6039      	str	r1, [r7, #0]
 8006336:	1dfb      	adds	r3, r7, #7
 8006338:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2204      	movs	r2, #4
 800633e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006340:	4b02      	ldr	r3, [pc, #8]	; (800634c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006342:	0018      	movs	r0, r3
 8006344:	46bd      	mov	sp, r7
 8006346:	b002      	add	sp, #8
 8006348:	bd80      	pop	{r7, pc}
 800634a:	46c0      	nop			; (mov r8, r8)
 800634c:	20000144 	.word	0x20000144

08006350 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	0002      	movs	r2, r0
 8006358:	6039      	str	r1, [r7, #0]
 800635a:	1dfb      	adds	r3, r7, #7
 800635c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800635e:	1dfb      	adds	r3, r7, #7
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	4908      	ldr	r1, [pc, #32]	; (800638c <USBD_FS_ProductStrDescriptor+0x3c>)
 800636a:	4b09      	ldr	r3, [pc, #36]	; (8006390 <USBD_FS_ProductStrDescriptor+0x40>)
 800636c:	0018      	movs	r0, r3
 800636e:	f7ff fe77 	bl	8006060 <USBD_GetString>
 8006372:	e005      	b.n	8006380 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	4905      	ldr	r1, [pc, #20]	; (800638c <USBD_FS_ProductStrDescriptor+0x3c>)
 8006378:	4b05      	ldr	r3, [pc, #20]	; (8006390 <USBD_FS_ProductStrDescriptor+0x40>)
 800637a:	0018      	movs	r0, r3
 800637c:	f7ff fe70 	bl	8006060 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006380:	4b02      	ldr	r3, [pc, #8]	; (800638c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8006382:	0018      	movs	r0, r3
 8006384:	46bd      	mov	sp, r7
 8006386:	b002      	add	sp, #8
 8006388:	bd80      	pop	{r7, pc}
 800638a:	46c0      	nop			; (mov r8, r8)
 800638c:	20000648 	.word	0x20000648
 8006390:	08006c6c 	.word	0x08006c6c

08006394 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	0002      	movs	r2, r0
 800639c:	6039      	str	r1, [r7, #0]
 800639e:	1dfb      	adds	r3, r7, #7
 80063a0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	4904      	ldr	r1, [pc, #16]	; (80063b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80063a6:	4b05      	ldr	r3, [pc, #20]	; (80063bc <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80063a8:	0018      	movs	r0, r3
 80063aa:	f7ff fe59 	bl	8006060 <USBD_GetString>
  return USBD_StrDesc;
 80063ae:	4b02      	ldr	r3, [pc, #8]	; (80063b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80063b0:	0018      	movs	r0, r3
 80063b2:	46bd      	mov	sp, r7
 80063b4:	b002      	add	sp, #8
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	20000648 	.word	0x20000648
 80063bc:	08006c8c 	.word	0x08006c8c

080063c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	0002      	movs	r2, r0
 80063c8:	6039      	str	r1, [r7, #0]
 80063ca:	1dfb      	adds	r3, r7, #7
 80063cc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	221a      	movs	r2, #26
 80063d2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80063d4:	f000 f84c 	bl	8006470 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80063d8:	4b02      	ldr	r3, [pc, #8]	; (80063e4 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80063da:	0018      	movs	r0, r3
 80063dc:	46bd      	mov	sp, r7
 80063de:	b002      	add	sp, #8
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	46c0      	nop			; (mov r8, r8)
 80063e4:	20000148 	.word	0x20000148

080063e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	0002      	movs	r2, r0
 80063f0:	6039      	str	r1, [r7, #0]
 80063f2:	1dfb      	adds	r3, r7, #7
 80063f4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80063f6:	1dfb      	adds	r3, r7, #7
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	4908      	ldr	r1, [pc, #32]	; (8006424 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8006402:	4b09      	ldr	r3, [pc, #36]	; (8006428 <USBD_FS_ConfigStrDescriptor+0x40>)
 8006404:	0018      	movs	r0, r3
 8006406:	f7ff fe2b 	bl	8006060 <USBD_GetString>
 800640a:	e005      	b.n	8006418 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	4905      	ldr	r1, [pc, #20]	; (8006424 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8006410:	4b05      	ldr	r3, [pc, #20]	; (8006428 <USBD_FS_ConfigStrDescriptor+0x40>)
 8006412:	0018      	movs	r0, r3
 8006414:	f7ff fe24 	bl	8006060 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006418:	4b02      	ldr	r3, [pc, #8]	; (8006424 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800641a:	0018      	movs	r0, r3
 800641c:	46bd      	mov	sp, r7
 800641e:	b002      	add	sp, #8
 8006420:	bd80      	pop	{r7, pc}
 8006422:	46c0      	nop			; (mov r8, r8)
 8006424:	20000648 	.word	0x20000648
 8006428:	08006ca0 	.word	0x08006ca0

0800642c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	0002      	movs	r2, r0
 8006434:	6039      	str	r1, [r7, #0]
 8006436:	1dfb      	adds	r3, r7, #7
 8006438:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800643a:	1dfb      	adds	r3, r7, #7
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d106      	bne.n	8006450 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	4908      	ldr	r1, [pc, #32]	; (8006468 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8006446:	4b09      	ldr	r3, [pc, #36]	; (800646c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8006448:	0018      	movs	r0, r3
 800644a:	f7ff fe09 	bl	8006060 <USBD_GetString>
 800644e:	e005      	b.n	800645c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	4905      	ldr	r1, [pc, #20]	; (8006468 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8006454:	4b05      	ldr	r3, [pc, #20]	; (800646c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8006456:	0018      	movs	r0, r3
 8006458:	f7ff fe02 	bl	8006060 <USBD_GetString>
  }
  return USBD_StrDesc;
 800645c:	4b02      	ldr	r3, [pc, #8]	; (8006468 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800645e:	0018      	movs	r0, r3
 8006460:	46bd      	mov	sp, r7
 8006462:	b002      	add	sp, #8
 8006464:	bd80      	pop	{r7, pc}
 8006466:	46c0      	nop			; (mov r8, r8)
 8006468:	20000648 	.word	0x20000648
 800646c:	08006cb4 	.word	0x08006cb4

08006470 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006476:	4b10      	ldr	r3, [pc, #64]	; (80064b8 <Get_SerialNum+0x48>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800647c:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <Get_SerialNum+0x4c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006482:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <Get_SerialNum+0x50>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	18d3      	adds	r3, r2, r3
 800648e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00b      	beq.n	80064ae <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006496:	490b      	ldr	r1, [pc, #44]	; (80064c4 <Get_SerialNum+0x54>)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2208      	movs	r2, #8
 800649c:	0018      	movs	r0, r3
 800649e:	f000 f815 	bl	80064cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80064a2:	4909      	ldr	r1, [pc, #36]	; (80064c8 <Get_SerialNum+0x58>)
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2204      	movs	r2, #4
 80064a8:	0018      	movs	r0, r3
 80064aa:	f000 f80f 	bl	80064cc <IntToUnicode>
  }
}
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	46bd      	mov	sp, r7
 80064b2:	b004      	add	sp, #16
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	1ffff7ac 	.word	0x1ffff7ac
 80064bc:	1ffff7b0 	.word	0x1ffff7b0
 80064c0:	1ffff7b4 	.word	0x1ffff7b4
 80064c4:	2000014a 	.word	0x2000014a
 80064c8:	2000015a 	.word	0x2000015a

080064cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	1dfb      	adds	r3, r7, #7
 80064d8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80064da:	2117      	movs	r1, #23
 80064dc:	187b      	adds	r3, r7, r1
 80064de:	2200      	movs	r2, #0
 80064e0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80064e2:	187b      	adds	r3, r7, r1
 80064e4:	2200      	movs	r2, #0
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	e02f      	b.n	800654a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	0f1b      	lsrs	r3, r3, #28
 80064ee:	2b09      	cmp	r3, #9
 80064f0:	d80d      	bhi.n	800650e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	0f1b      	lsrs	r3, r3, #28
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	2317      	movs	r3, #23
 80064fa:	18fb      	adds	r3, r7, r3
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	0019      	movs	r1, r3
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	185b      	adds	r3, r3, r1
 8006506:	3230      	adds	r2, #48	; 0x30
 8006508:	b2d2      	uxtb	r2, r2
 800650a:	701a      	strb	r2, [r3, #0]
 800650c:	e00c      	b.n	8006528 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	0f1b      	lsrs	r3, r3, #28
 8006512:	b2da      	uxtb	r2, r3
 8006514:	2317      	movs	r3, #23
 8006516:	18fb      	adds	r3, r7, r3
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	0019      	movs	r1, r3
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	185b      	adds	r3, r3, r1
 8006522:	3237      	adds	r2, #55	; 0x37
 8006524:	b2d2      	uxtb	r2, r2
 8006526:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800652e:	2117      	movs	r1, #23
 8006530:	187b      	adds	r3, r7, r1
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	3301      	adds	r3, #1
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	18d3      	adds	r3, r2, r3
 800653c:	2200      	movs	r2, #0
 800653e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006540:	187b      	adds	r3, r7, r1
 8006542:	781a      	ldrb	r2, [r3, #0]
 8006544:	187b      	adds	r3, r7, r1
 8006546:	3201      	adds	r2, #1
 8006548:	701a      	strb	r2, [r3, #0]
 800654a:	2317      	movs	r3, #23
 800654c:	18fa      	adds	r2, r7, r3
 800654e:	1dfb      	adds	r3, r7, #7
 8006550:	7812      	ldrb	r2, [r2, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	429a      	cmp	r2, r3
 8006556:	d3c8      	bcc.n	80064ea <IntToUnicode+0x1e>
  }
}
 8006558:	46c0      	nop			; (mov r8, r8)
 800655a:	46bd      	mov	sp, r7
 800655c:	b006      	add	sp, #24
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a0e      	ldr	r2, [pc, #56]	; (80065a8 <HAL_PCD_MspInit+0x48>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d115      	bne.n	800659e <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006572:	4b0e      	ldr	r3, [pc, #56]	; (80065ac <HAL_PCD_MspInit+0x4c>)
 8006574:	69da      	ldr	r2, [r3, #28]
 8006576:	4b0d      	ldr	r3, [pc, #52]	; (80065ac <HAL_PCD_MspInit+0x4c>)
 8006578:	2180      	movs	r1, #128	; 0x80
 800657a:	0409      	lsls	r1, r1, #16
 800657c:	430a      	orrs	r2, r1
 800657e:	61da      	str	r2, [r3, #28]
 8006580:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <HAL_PCD_MspInit+0x4c>)
 8006582:	69da      	ldr	r2, [r3, #28]
 8006584:	2380      	movs	r3, #128	; 0x80
 8006586:	041b      	lsls	r3, r3, #16
 8006588:	4013      	ands	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800658e:	2200      	movs	r2, #0
 8006590:	2100      	movs	r1, #0
 8006592:	201f      	movs	r0, #31
 8006594:	f7fb f8fe 	bl	8001794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8006598:	201f      	movs	r0, #31
 800659a:	f7fb f910 	bl	80017be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800659e:	46c0      	nop			; (mov r8, r8)
 80065a0:	46bd      	mov	sp, r7
 80065a2:	b004      	add	sp, #16
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	46c0      	nop			; (mov r8, r8)
 80065a8:	40005c00 	.word	0x40005c00
 80065ac:	40021000 	.word	0x40021000

080065b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	239c      	movs	r3, #156	; 0x9c
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	58d2      	ldr	r2, [r2, r3]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	218c      	movs	r1, #140	; 0x8c
 80065c4:	0089      	lsls	r1, r1, #2
 80065c6:	468c      	mov	ip, r1
 80065c8:	4463      	add	r3, ip
 80065ca:	0019      	movs	r1, r3
 80065cc:	0010      	movs	r0, r2
 80065ce:	f7fe fcd3 	bl	8004f78 <USBD_LL_SetupStage>
}
 80065d2:	46c0      	nop			; (mov r8, r8)
 80065d4:	46bd      	mov	sp, r7
 80065d6:	b002      	add	sp, #8
 80065d8:	bd80      	pop	{r7, pc}

080065da <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b082      	sub	sp, #8
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	000a      	movs	r2, r1
 80065e4:	1cfb      	adds	r3, r7, #3
 80065e6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	239c      	movs	r3, #156	; 0x9c
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	58d0      	ldr	r0, [r2, r3]
 80065f0:	1cfb      	adds	r3, r7, #3
 80065f2:	781a      	ldrb	r2, [r3, #0]
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	239e      	movs	r3, #158	; 0x9e
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	0152      	lsls	r2, r2, #5
 80065fc:	188a      	adds	r2, r1, r2
 80065fe:	18d3      	adds	r3, r2, r3
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	1cfb      	adds	r3, r7, #3
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	0019      	movs	r1, r3
 8006608:	f7fe fd12 	bl	8005030 <USBD_LL_DataOutStage>
}
 800660c:	46c0      	nop			; (mov r8, r8)
 800660e:	46bd      	mov	sp, r7
 8006610:	b002      	add	sp, #8
 8006612:	bd80      	pop	{r7, pc}

08006614 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	000a      	movs	r2, r1
 800661e:	1cfb      	adds	r3, r7, #3
 8006620:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	239c      	movs	r3, #156	; 0x9c
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	58d0      	ldr	r0, [r2, r3]
 800662a:	1cfb      	adds	r3, r7, #3
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	015b      	lsls	r3, r3, #5
 8006632:	18d3      	adds	r3, r2, r3
 8006634:	333c      	adds	r3, #60	; 0x3c
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	1cfb      	adds	r3, r7, #3
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	0019      	movs	r1, r3
 800663e:	f7fe fd79 	bl	8005134 <USBD_LL_DataInStage>
}
 8006642:	46c0      	nop			; (mov r8, r8)
 8006644:	46bd      	mov	sp, r7
 8006646:	b002      	add	sp, #8
 8006648:	bd80      	pop	{r7, pc}

0800664a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	239c      	movs	r3, #156	; 0x9c
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	58d3      	ldr	r3, [r2, r3]
 800665a:	0018      	movs	r0, r3
 800665c:	f7fe feb0 	bl	80053c0 <USBD_LL_SOF>
}
 8006660:	46c0      	nop			; (mov r8, r8)
 8006662:	46bd      	mov	sp, r7
 8006664:	b002      	add	sp, #8
 8006666:	bd80      	pop	{r7, pc}

08006668 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006670:	230f      	movs	r3, #15
 8006672:	18fb      	adds	r3, r7, r3
 8006674:	2201      	movs	r2, #1
 8006676:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	2b02      	cmp	r3, #2
 800667e:	d001      	beq.n	8006684 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8006680:	f7fa f802 	bl	8000688 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	239c      	movs	r3, #156	; 0x9c
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	58d2      	ldr	r2, [r2, r3]
 800668c:	230f      	movs	r3, #15
 800668e:	18fb      	adds	r3, r7, r3
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	0019      	movs	r1, r3
 8006694:	0010      	movs	r0, r2
 8006696:	f7fe fe52 	bl	800533e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	239c      	movs	r3, #156	; 0x9c
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	58d3      	ldr	r3, [r2, r3]
 80066a2:	0018      	movs	r0, r3
 80066a4:	f7fe fe03 	bl	80052ae <USBD_LL_Reset>
}
 80066a8:	46c0      	nop			; (mov r8, r8)
 80066aa:	46bd      	mov	sp, r7
 80066ac:	b004      	add	sp, #16
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	239c      	movs	r3, #156	; 0x9c
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	58d3      	ldr	r3, [r2, r3]
 80066c0:	0018      	movs	r0, r3
 80066c2:	f7fe fe4d 	bl	8005360 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d005      	beq.n	80066da <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80066ce:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <HAL_PCD_SuspendCallback+0x34>)
 80066d0:	691a      	ldr	r2, [r3, #16]
 80066d2:	4b04      	ldr	r3, [pc, #16]	; (80066e4 <HAL_PCD_SuspendCallback+0x34>)
 80066d4:	2106      	movs	r1, #6
 80066d6:	430a      	orrs	r2, r1
 80066d8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80066da:	46c0      	nop			; (mov r8, r8)
 80066dc:	46bd      	mov	sp, r7
 80066de:	b002      	add	sp, #8
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	e000ed00 	.word	0xe000ed00

080066e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80066f8:	4b09      	ldr	r3, [pc, #36]	; (8006720 <HAL_PCD_ResumeCallback+0x38>)
 80066fa:	691a      	ldr	r2, [r3, #16]
 80066fc:	4b08      	ldr	r3, [pc, #32]	; (8006720 <HAL_PCD_ResumeCallback+0x38>)
 80066fe:	2106      	movs	r1, #6
 8006700:	438a      	bics	r2, r1
 8006702:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8006704:	f000 fa22 	bl	8006b4c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	239c      	movs	r3, #156	; 0x9c
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	58d3      	ldr	r3, [r2, r3]
 8006710:	0018      	movs	r0, r3
 8006712:	f7fe fe3d 	bl	8005390 <USBD_LL_Resume>
}
 8006716:	46c0      	nop			; (mov r8, r8)
 8006718:	46bd      	mov	sp, r7
 800671a:	b002      	add	sp, #8
 800671c:	bd80      	pop	{r7, pc}
 800671e:	46c0      	nop			; (mov r8, r8)
 8006720:	e000ed00 	.word	0xe000ed00

08006724 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800672c:	4a27      	ldr	r2, [pc, #156]	; (80067cc <USBD_LL_Init+0xa8>)
 800672e:	239c      	movs	r3, #156	; 0x9c
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	23b0      	movs	r3, #176	; 0xb0
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4923      	ldr	r1, [pc, #140]	; (80067cc <USBD_LL_Init+0xa8>)
 800673e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8006740:	4b22      	ldr	r3, [pc, #136]	; (80067cc <USBD_LL_Init+0xa8>)
 8006742:	4a23      	ldr	r2, [pc, #140]	; (80067d0 <USBD_LL_Init+0xac>)
 8006744:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006746:	4b21      	ldr	r3, [pc, #132]	; (80067cc <USBD_LL_Init+0xa8>)
 8006748:	2208      	movs	r2, #8
 800674a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800674c:	4b1f      	ldr	r3, [pc, #124]	; (80067cc <USBD_LL_Init+0xa8>)
 800674e:	2202      	movs	r2, #2
 8006750:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006752:	4b1e      	ldr	r3, [pc, #120]	; (80067cc <USBD_LL_Init+0xa8>)
 8006754:	2202      	movs	r2, #2
 8006756:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006758:	4b1c      	ldr	r3, [pc, #112]	; (80067cc <USBD_LL_Init+0xa8>)
 800675a:	2200      	movs	r2, #0
 800675c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800675e:	4b1b      	ldr	r3, [pc, #108]	; (80067cc <USBD_LL_Init+0xa8>)
 8006760:	2200      	movs	r2, #0
 8006762:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006764:	4b19      	ldr	r3, [pc, #100]	; (80067cc <USBD_LL_Init+0xa8>)
 8006766:	2200      	movs	r2, #0
 8006768:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800676a:	4b18      	ldr	r3, [pc, #96]	; (80067cc <USBD_LL_Init+0xa8>)
 800676c:	0018      	movs	r0, r3
 800676e:	f7fb f9bb 	bl	8001ae8 <HAL_PCD_Init>
 8006772:	1e03      	subs	r3, r0, #0
 8006774:	d001      	beq.n	800677a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8006776:	f7f9 ff87 	bl	8000688 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	23b0      	movs	r3, #176	; 0xb0
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	58d0      	ldr	r0, [r2, r3]
 8006782:	2318      	movs	r3, #24
 8006784:	2200      	movs	r2, #0
 8006786:	2100      	movs	r1, #0
 8006788:	f7fc f93c 	bl	8002a04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	23b0      	movs	r3, #176	; 0xb0
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	58d0      	ldr	r0, [r2, r3]
 8006794:	2358      	movs	r3, #88	; 0x58
 8006796:	2200      	movs	r2, #0
 8006798:	2180      	movs	r1, #128	; 0x80
 800679a:	f7fc f933 	bl	8002a04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	23b0      	movs	r3, #176	; 0xb0
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	58d0      	ldr	r0, [r2, r3]
 80067a6:	2398      	movs	r3, #152	; 0x98
 80067a8:	2200      	movs	r2, #0
 80067aa:	2181      	movs	r1, #129	; 0x81
 80067ac:	f7fc f92a 	bl	8002a04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	23b0      	movs	r3, #176	; 0xb0
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	58d0      	ldr	r0, [r2, r3]
 80067b8:	23d8      	movs	r3, #216	; 0xd8
 80067ba:	2200      	movs	r2, #0
 80067bc:	2101      	movs	r1, #1
 80067be:	f7fc f921 	bl	8002a04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	0018      	movs	r0, r3
 80067c6:	46bd      	mov	sp, r7
 80067c8:	b002      	add	sp, #8
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20000848 	.word	0x20000848
 80067d0:	40005c00 	.word	0x40005c00

080067d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80067d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067dc:	210f      	movs	r1, #15
 80067de:	187b      	adds	r3, r7, r1
 80067e0:	2200      	movs	r2, #0
 80067e2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067e4:	260e      	movs	r6, #14
 80067e6:	19bb      	adds	r3, r7, r6
 80067e8:	2200      	movs	r2, #0
 80067ea:	701a      	strb	r2, [r3, #0]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	23b0      	movs	r3, #176	; 0xb0
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	58d3      	ldr	r3, [r2, r3]
 80067f4:	000d      	movs	r5, r1
 80067f6:	187c      	adds	r4, r7, r1
 80067f8:	0018      	movs	r0, r3
 80067fa:	f7fb fa59 	bl	8001cb0 <HAL_PCD_Start>
 80067fe:	0003      	movs	r3, r0
 8006800:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006802:	19bc      	adds	r4, r7, r6
 8006804:	0029      	movs	r1, r5
 8006806:	187b      	adds	r3, r7, r1
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	0018      	movs	r0, r3
 800680c:	f000 f9a5 	bl	8006b5a <USBD_Get_USB_Status>
 8006810:	0003      	movs	r3, r0
 8006812:	7023      	strb	r3, [r4, #0]
  
  return usb_status;
 8006814:	19bb      	adds	r3, r7, r6
 8006816:	781b      	ldrb	r3, [r3, #0]
}
 8006818:	0018      	movs	r0, r3
 800681a:	46bd      	mov	sp, r7
 800681c:	b005      	add	sp, #20
 800681e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006820 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	000c      	movs	r4, r1
 800682a:	0010      	movs	r0, r2
 800682c:	0019      	movs	r1, r3
 800682e:	1cfb      	adds	r3, r7, #3
 8006830:	1c22      	adds	r2, r4, #0
 8006832:	701a      	strb	r2, [r3, #0]
 8006834:	1cbb      	adds	r3, r7, #2
 8006836:	1c02      	adds	r2, r0, #0
 8006838:	701a      	strb	r2, [r3, #0]
 800683a:	003b      	movs	r3, r7
 800683c:	1c0a      	adds	r2, r1, #0
 800683e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006840:	260f      	movs	r6, #15
 8006842:	19bb      	adds	r3, r7, r6
 8006844:	2200      	movs	r2, #0
 8006846:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006848:	250e      	movs	r5, #14
 800684a:	197b      	adds	r3, r7, r5
 800684c:	2200      	movs	r2, #0
 800684e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	23b0      	movs	r3, #176	; 0xb0
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	58d0      	ldr	r0, [r2, r3]
 8006858:	19bc      	adds	r4, r7, r6
 800685a:	1cbb      	adds	r3, r7, #2
 800685c:	781d      	ldrb	r5, [r3, #0]
 800685e:	003b      	movs	r3, r7
 8006860:	881a      	ldrh	r2, [r3, #0]
 8006862:	1cfb      	adds	r3, r7, #3
 8006864:	7819      	ldrb	r1, [r3, #0]
 8006866:	002b      	movs	r3, r5
 8006868:	f7fb fbfb 	bl	8002062 <HAL_PCD_EP_Open>
 800686c:	0003      	movs	r3, r0
 800686e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006870:	250e      	movs	r5, #14
 8006872:	197c      	adds	r4, r7, r5
 8006874:	19bb      	adds	r3, r7, r6
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	0018      	movs	r0, r3
 800687a:	f000 f96e 	bl	8006b5a <USBD_Get_USB_Status>
 800687e:	0003      	movs	r3, r0
 8006880:	7023      	strb	r3, [r4, #0]
 
  return usb_status;
 8006882:	197b      	adds	r3, r7, r5
 8006884:	781b      	ldrb	r3, [r3, #0]
}
 8006886:	0018      	movs	r0, r3
 8006888:	46bd      	mov	sp, r7
 800688a:	b005      	add	sp, #20
 800688c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800688e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800688e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006890:	b085      	sub	sp, #20
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	000a      	movs	r2, r1
 8006898:	1cfb      	adds	r3, r7, #3
 800689a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800689c:	210f      	movs	r1, #15
 800689e:	187b      	adds	r3, r7, r1
 80068a0:	2200      	movs	r2, #0
 80068a2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068a4:	260e      	movs	r6, #14
 80068a6:	19bb      	adds	r3, r7, r6
 80068a8:	2200      	movs	r2, #0
 80068aa:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	23b0      	movs	r3, #176	; 0xb0
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	58d2      	ldr	r2, [r2, r3]
 80068b4:	000d      	movs	r5, r1
 80068b6:	187c      	adds	r4, r7, r1
 80068b8:	1cfb      	adds	r3, r7, #3
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	0019      	movs	r1, r3
 80068be:	0010      	movs	r0, r2
 80068c0:	f7fb fc41 	bl	8002146 <HAL_PCD_EP_Close>
 80068c4:	0003      	movs	r3, r0
 80068c6:	7023      	strb	r3, [r4, #0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80068c8:	19bc      	adds	r4, r7, r6
 80068ca:	0029      	movs	r1, r5
 80068cc:	187b      	adds	r3, r7, r1
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	0018      	movs	r0, r3
 80068d2:	f000 f942 	bl	8006b5a <USBD_Get_USB_Status>
 80068d6:	0003      	movs	r3, r0
 80068d8:	7023      	strb	r3, [r4, #0]

  return usb_status;  
 80068da:	19bb      	adds	r3, r7, r6
 80068dc:	781b      	ldrb	r3, [r3, #0]
}
 80068de:	0018      	movs	r0, r3
 80068e0:	46bd      	mov	sp, r7
 80068e2:	b005      	add	sp, #20
 80068e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068e6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068e8:	b085      	sub	sp, #20
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	000a      	movs	r2, r1
 80068f0:	1cfb      	adds	r3, r7, #3
 80068f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068f4:	210f      	movs	r1, #15
 80068f6:	187b      	adds	r3, r7, r1
 80068f8:	2200      	movs	r2, #0
 80068fa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068fc:	260e      	movs	r6, #14
 80068fe:	19bb      	adds	r3, r7, r6
 8006900:	2200      	movs	r2, #0
 8006902:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	23b0      	movs	r3, #176	; 0xb0
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	58d2      	ldr	r2, [r2, r3]
 800690c:	000d      	movs	r5, r1
 800690e:	187c      	adds	r4, r7, r1
 8006910:	1cfb      	adds	r3, r7, #3
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	0019      	movs	r1, r3
 8006916:	0010      	movs	r0, r2
 8006918:	f7fb fce1 	bl	80022de <HAL_PCD_EP_SetStall>
 800691c:	0003      	movs	r3, r0
 800691e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006920:	19bc      	adds	r4, r7, r6
 8006922:	0029      	movs	r1, r5
 8006924:	187b      	adds	r3, r7, r1
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	0018      	movs	r0, r3
 800692a:	f000 f916 	bl	8006b5a <USBD_Get_USB_Status>
 800692e:	0003      	movs	r3, r0
 8006930:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8006932:	19bb      	adds	r3, r7, r6
 8006934:	781b      	ldrb	r3, [r3, #0]
}
 8006936:	0018      	movs	r0, r3
 8006938:	46bd      	mov	sp, r7
 800693a:	b005      	add	sp, #20
 800693c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800693e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800693e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006940:	b085      	sub	sp, #20
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	000a      	movs	r2, r1
 8006948:	1cfb      	adds	r3, r7, #3
 800694a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800694c:	210f      	movs	r1, #15
 800694e:	187b      	adds	r3, r7, r1
 8006950:	2200      	movs	r2, #0
 8006952:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006954:	260e      	movs	r6, #14
 8006956:	19bb      	adds	r3, r7, r6
 8006958:	2200      	movs	r2, #0
 800695a:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	23b0      	movs	r3, #176	; 0xb0
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	58d2      	ldr	r2, [r2, r3]
 8006964:	000d      	movs	r5, r1
 8006966:	187c      	adds	r4, r7, r1
 8006968:	1cfb      	adds	r3, r7, #3
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	0019      	movs	r1, r3
 800696e:	0010      	movs	r0, r2
 8006970:	f7fb fd1b 	bl	80023aa <HAL_PCD_EP_ClrStall>
 8006974:	0003      	movs	r3, r0
 8006976:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006978:	19bc      	adds	r4, r7, r6
 800697a:	0029      	movs	r1, r5
 800697c:	187b      	adds	r3, r7, r1
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	0018      	movs	r0, r3
 8006982:	f000 f8ea 	bl	8006b5a <USBD_Get_USB_Status>
 8006986:	0003      	movs	r3, r0
 8006988:	7023      	strb	r3, [r4, #0]

  return usb_status; 
 800698a:	19bb      	adds	r3, r7, r6
 800698c:	781b      	ldrb	r3, [r3, #0]
}
 800698e:	0018      	movs	r0, r3
 8006990:	46bd      	mov	sp, r7
 8006992:	b005      	add	sp, #20
 8006994:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006996 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	000a      	movs	r2, r1
 80069a0:	1cfb      	adds	r3, r7, #3
 80069a2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	23b0      	movs	r3, #176	; 0xb0
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	58d3      	ldr	r3, [r2, r3]
 80069ac:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80069ae:	1cfb      	adds	r3, r7, #3
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	b25b      	sxtb	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	da0a      	bge.n	80069ce <USBD_LL_IsStallEP+0x38>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80069b8:	1cfb      	adds	r3, r7, #3
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	227f      	movs	r2, #127	; 0x7f
 80069be:	4013      	ands	r3, r2
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	212a      	movs	r1, #42	; 0x2a
 80069c4:	015b      	lsls	r3, r3, #5
 80069c6:	18d3      	adds	r3, r2, r3
 80069c8:	185b      	adds	r3, r3, r1
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	e00a      	b.n	80069e4 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80069ce:	1cfb      	adds	r3, r7, #3
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	227f      	movs	r2, #127	; 0x7f
 80069d4:	401a      	ands	r2, r3
 80069d6:	68f9      	ldr	r1, [r7, #12]
 80069d8:	2395      	movs	r3, #149	; 0x95
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	0152      	lsls	r2, r2, #5
 80069de:	188a      	adds	r2, r1, r2
 80069e0:	18d3      	adds	r3, r2, r3
 80069e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80069e4:	0018      	movs	r0, r3
 80069e6:	46bd      	mov	sp, r7
 80069e8:	b004      	add	sp, #16
 80069ea:	bd80      	pop	{r7, pc}

080069ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80069ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	000a      	movs	r2, r1
 80069f6:	1cfb      	adds	r3, r7, #3
 80069f8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069fa:	210f      	movs	r1, #15
 80069fc:	187b      	adds	r3, r7, r1
 80069fe:	2200      	movs	r2, #0
 8006a00:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a02:	260e      	movs	r6, #14
 8006a04:	19bb      	adds	r3, r7, r6
 8006a06:	2200      	movs	r2, #0
 8006a08:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	23b0      	movs	r3, #176	; 0xb0
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	58d2      	ldr	r2, [r2, r3]
 8006a12:	000d      	movs	r5, r1
 8006a14:	187c      	adds	r4, r7, r1
 8006a16:	1cfb      	adds	r3, r7, #3
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	0019      	movs	r1, r3
 8006a1c:	0010      	movs	r0, r2
 8006a1e:	f7fb faf5 	bl	800200c <HAL_PCD_SetAddress>
 8006a22:	0003      	movs	r3, r0
 8006a24:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a26:	19bc      	adds	r4, r7, r6
 8006a28:	0029      	movs	r1, r5
 8006a2a:	187b      	adds	r3, r7, r1
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	0018      	movs	r0, r3
 8006a30:	f000 f893 	bl	8006b5a <USBD_Get_USB_Status>
 8006a34:	0003      	movs	r3, r0
 8006a36:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8006a38:	19bb      	adds	r3, r7, r6
 8006a3a:	781b      	ldrb	r3, [r3, #0]
}
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	b005      	add	sp, #20
 8006a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a44 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a46:	b087      	sub	sp, #28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	0008      	movs	r0, r1
 8006a4e:	607a      	str	r2, [r7, #4]
 8006a50:	0019      	movs	r1, r3
 8006a52:	230b      	movs	r3, #11
 8006a54:	18fb      	adds	r3, r7, r3
 8006a56:	1c02      	adds	r2, r0, #0
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	2408      	movs	r4, #8
 8006a5c:	193b      	adds	r3, r7, r4
 8006a5e:	1c0a      	adds	r2, r1, #0
 8006a60:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a62:	2117      	movs	r1, #23
 8006a64:	187b      	adds	r3, r7, r1
 8006a66:	2200      	movs	r2, #0
 8006a68:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a6a:	2516      	movs	r5, #22
 8006a6c:	197b      	adds	r3, r7, r5
 8006a6e:	2200      	movs	r2, #0
 8006a70:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	23b0      	movs	r3, #176	; 0xb0
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	58d0      	ldr	r0, [r2, r3]
 8006a7a:	193b      	adds	r3, r7, r4
 8006a7c:	881d      	ldrh	r5, [r3, #0]
 8006a7e:	000e      	movs	r6, r1
 8006a80:	187c      	adds	r4, r7, r1
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	230b      	movs	r3, #11
 8006a86:	18fb      	adds	r3, r7, r3
 8006a88:	7819      	ldrb	r1, [r3, #0]
 8006a8a:	002b      	movs	r3, r5
 8006a8c:	f7fb fbe7 	bl	800225e <HAL_PCD_EP_Transmit>
 8006a90:	0003      	movs	r3, r0
 8006a92:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a94:	2516      	movs	r5, #22
 8006a96:	197c      	adds	r4, r7, r5
 8006a98:	0031      	movs	r1, r6
 8006a9a:	187b      	adds	r3, r7, r1
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	f000 f85b 	bl	8006b5a <USBD_Get_USB_Status>
 8006aa4:	0003      	movs	r3, r0
 8006aa6:	7023      	strb	r3, [r4, #0]
  
  return usb_status;    
 8006aa8:	197b      	adds	r3, r7, r5
 8006aaa:	781b      	ldrb	r3, [r3, #0]
}
 8006aac:	0018      	movs	r0, r3
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	b007      	add	sp, #28
 8006ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ab4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	0008      	movs	r0, r1
 8006abe:	607a      	str	r2, [r7, #4]
 8006ac0:	0019      	movs	r1, r3
 8006ac2:	230b      	movs	r3, #11
 8006ac4:	18fb      	adds	r3, r7, r3
 8006ac6:	1c02      	adds	r2, r0, #0
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	2408      	movs	r4, #8
 8006acc:	193b      	adds	r3, r7, r4
 8006ace:	1c0a      	adds	r2, r1, #0
 8006ad0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ad2:	2117      	movs	r1, #23
 8006ad4:	187b      	adds	r3, r7, r1
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ada:	2516      	movs	r5, #22
 8006adc:	197b      	adds	r3, r7, r5
 8006ade:	2200      	movs	r2, #0
 8006ae0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	23b0      	movs	r3, #176	; 0xb0
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	58d0      	ldr	r0, [r2, r3]
 8006aea:	193b      	adds	r3, r7, r4
 8006aec:	881d      	ldrh	r5, [r3, #0]
 8006aee:	000e      	movs	r6, r1
 8006af0:	187c      	adds	r4, r7, r1
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	230b      	movs	r3, #11
 8006af6:	18fb      	adds	r3, r7, r3
 8006af8:	7819      	ldrb	r1, [r3, #0]
 8006afa:	002b      	movs	r3, r5
 8006afc:	f7fb fb6e 	bl	80021dc <HAL_PCD_EP_Receive>
 8006b00:	0003      	movs	r3, r0
 8006b02:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b04:	2516      	movs	r5, #22
 8006b06:	197c      	adds	r4, r7, r5
 8006b08:	0031      	movs	r1, r6
 8006b0a:	187b      	adds	r3, r7, r1
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	0018      	movs	r0, r3
 8006b10:	f000 f823 	bl	8006b5a <USBD_Get_USB_Status>
 8006b14:	0003      	movs	r3, r0
 8006b16:	7023      	strb	r3, [r4, #0]
  	
  return usb_status; 
 8006b18:	197b      	adds	r3, r7, r5
 8006b1a:	781b      	ldrb	r3, [r3, #0]
}
 8006b1c:	0018      	movs	r0, r3
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	b007      	add	sp, #28
 8006b22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8006b2c:	4b02      	ldr	r3, [pc, #8]	; (8006b38 <USBD_static_malloc+0x14>)
}
 8006b2e:	0018      	movs	r0, r3
 8006b30:	46bd      	mov	sp, r7
 8006b32:	b002      	add	sp, #8
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	46c0      	nop			; (mov r8, r8)
 8006b38:	20000258 	.word	0x20000258

08006b3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]

}
 8006b44:	46c0      	nop			; (mov r8, r8)
 8006b46:	46bd      	mov	sp, r7
 8006b48:	b002      	add	sp, #8
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8006b50:	f7f9 fce7 	bl	8000522 <SystemClock_Config>
}
 8006b54:	46c0      	nop			; (mov r8, r8)
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	0002      	movs	r2, r0
 8006b62:	1dfb      	adds	r3, r7, #7
 8006b64:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b66:	230f      	movs	r3, #15
 8006b68:	18fb      	adds	r3, r7, r3
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8006b6e:	1dfb      	adds	r3, r7, #7
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d00d      	beq.n	8006b92 <USBD_Get_USB_Status+0x38>
 8006b76:	dc02      	bgt.n	8006b7e <USBD_Get_USB_Status+0x24>
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <USBD_Get_USB_Status+0x2e>
 8006b7c:	e018      	b.n	8006bb0 <USBD_Get_USB_Status+0x56>
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d00c      	beq.n	8006b9c <USBD_Get_USB_Status+0x42>
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d00f      	beq.n	8006ba6 <USBD_Get_USB_Status+0x4c>
 8006b86:	e013      	b.n	8006bb0 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006b88:	230f      	movs	r3, #15
 8006b8a:	18fb      	adds	r3, r7, r3
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	701a      	strb	r2, [r3, #0]
    break;
 8006b90:	e013      	b.n	8006bba <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006b92:	230f      	movs	r3, #15
 8006b94:	18fb      	adds	r3, r7, r3
 8006b96:	2202      	movs	r2, #2
 8006b98:	701a      	strb	r2, [r3, #0]
    break;
 8006b9a:	e00e      	b.n	8006bba <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006b9c:	230f      	movs	r3, #15
 8006b9e:	18fb      	adds	r3, r7, r3
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	701a      	strb	r2, [r3, #0]
    break;
 8006ba4:	e009      	b.n	8006bba <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ba6:	230f      	movs	r3, #15
 8006ba8:	18fb      	adds	r3, r7, r3
 8006baa:	2202      	movs	r2, #2
 8006bac:	701a      	strb	r2, [r3, #0]
    break;
 8006bae:	e004      	b.n	8006bba <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8006bb0:	230f      	movs	r3, #15
 8006bb2:	18fb      	adds	r3, r7, r3
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	701a      	strb	r2, [r3, #0]
    break;
 8006bb8:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8006bba:	230f      	movs	r3, #15
 8006bbc:	18fb      	adds	r3, r7, r3
 8006bbe:	781b      	ldrb	r3, [r3, #0]
}
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	b004      	add	sp, #16
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <__libc_init_array>:
 8006bc8:	b570      	push	{r4, r5, r6, lr}
 8006bca:	2600      	movs	r6, #0
 8006bcc:	4d0c      	ldr	r5, [pc, #48]	; (8006c00 <__libc_init_array+0x38>)
 8006bce:	4c0d      	ldr	r4, [pc, #52]	; (8006c04 <__libc_init_array+0x3c>)
 8006bd0:	1b64      	subs	r4, r4, r5
 8006bd2:	10a4      	asrs	r4, r4, #2
 8006bd4:	42a6      	cmp	r6, r4
 8006bd6:	d109      	bne.n	8006bec <__libc_init_array+0x24>
 8006bd8:	2600      	movs	r6, #0
 8006bda:	f000 f82b 	bl	8006c34 <_init>
 8006bde:	4d0a      	ldr	r5, [pc, #40]	; (8006c08 <__libc_init_array+0x40>)
 8006be0:	4c0a      	ldr	r4, [pc, #40]	; (8006c0c <__libc_init_array+0x44>)
 8006be2:	1b64      	subs	r4, r4, r5
 8006be4:	10a4      	asrs	r4, r4, #2
 8006be6:	42a6      	cmp	r6, r4
 8006be8:	d105      	bne.n	8006bf6 <__libc_init_array+0x2e>
 8006bea:	bd70      	pop	{r4, r5, r6, pc}
 8006bec:	00b3      	lsls	r3, r6, #2
 8006bee:	58eb      	ldr	r3, [r5, r3]
 8006bf0:	4798      	blx	r3
 8006bf2:	3601      	adds	r6, #1
 8006bf4:	e7ee      	b.n	8006bd4 <__libc_init_array+0xc>
 8006bf6:	00b3      	lsls	r3, r6, #2
 8006bf8:	58eb      	ldr	r3, [r5, r3]
 8006bfa:	4798      	blx	r3
 8006bfc:	3601      	adds	r6, #1
 8006bfe:	e7f2      	b.n	8006be6 <__libc_init_array+0x1e>
 8006c00:	08006d6c 	.word	0x08006d6c
 8006c04:	08006d6c 	.word	0x08006d6c
 8006c08:	08006d6c 	.word	0x08006d6c
 8006c0c:	08006d70 	.word	0x08006d70

08006c10 <memcpy>:
 8006c10:	2300      	movs	r3, #0
 8006c12:	b510      	push	{r4, lr}
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d100      	bne.n	8006c1a <memcpy+0xa>
 8006c18:	bd10      	pop	{r4, pc}
 8006c1a:	5ccc      	ldrb	r4, [r1, r3]
 8006c1c:	54c4      	strb	r4, [r0, r3]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	e7f8      	b.n	8006c14 <memcpy+0x4>

08006c22 <memset>:
 8006c22:	0003      	movs	r3, r0
 8006c24:	1812      	adds	r2, r2, r0
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d100      	bne.n	8006c2c <memset+0xa>
 8006c2a:	4770      	bx	lr
 8006c2c:	7019      	strb	r1, [r3, #0]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	e7f9      	b.n	8006c26 <memset+0x4>
	...

08006c34 <_init>:
 8006c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c36:	46c0      	nop			; (mov r8, r8)
 8006c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3a:	bc08      	pop	{r3}
 8006c3c:	469e      	mov	lr, r3
 8006c3e:	4770      	bx	lr

08006c40 <_fini>:
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	46c0      	nop			; (mov r8, r8)
 8006c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c46:	bc08      	pop	{r3}
 8006c48:	469e      	mov	lr, r3
 8006c4a:	4770      	bx	lr
