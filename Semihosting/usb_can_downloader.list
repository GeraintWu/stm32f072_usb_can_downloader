
usb_can_downloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b880  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800b940  0800b940  0001b940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bde0  0800bde0  0002033c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bde0  0800bde0  0002033c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bde0  0800bde0  0002033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bde0  0800bde0  0001bde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bde4  0800bde4  0001bde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  0800bde8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009ac  2000033c  0800c124  0002033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ce8  0800c124  00020ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015931  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003304  00000000  00000000  00035c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c18  00000000  00000000  00038fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a90  00000000  00000000  00039bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019aaa  00000000  00000000  0003a648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ead0  00000000  00000000  000540f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b683  00000000  00000000  00062bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de245  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e4  00000000  00000000  000de2c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000033c 	.word	0x2000033c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b928 	.word	0x0800b928

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000340 	.word	0x20000340
 8000104:	0800b928 	.word	0x0800b928

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 fef1 	bl	8001210 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fe49 	bl	80010d0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fee3 	bl	8001210 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fed9 	bl	8001210 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fe6b 	bl	8001148 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe61 	bl	8001148 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dadd>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	464f      	mov	r7, r9
 8000498:	4646      	mov	r6, r8
 800049a:	46d6      	mov	lr, sl
 800049c:	000c      	movs	r4, r1
 800049e:	0309      	lsls	r1, r1, #12
 80004a0:	b5c0      	push	{r6, r7, lr}
 80004a2:	0a49      	lsrs	r1, r1, #9
 80004a4:	0f47      	lsrs	r7, r0, #29
 80004a6:	005e      	lsls	r6, r3, #1
 80004a8:	4339      	orrs	r1, r7
 80004aa:	031f      	lsls	r7, r3, #12
 80004ac:	0fdb      	lsrs	r3, r3, #31
 80004ae:	469c      	mov	ip, r3
 80004b0:	0065      	lsls	r5, r4, #1
 80004b2:	0a7b      	lsrs	r3, r7, #9
 80004b4:	0f57      	lsrs	r7, r2, #29
 80004b6:	431f      	orrs	r7, r3
 80004b8:	0d6d      	lsrs	r5, r5, #21
 80004ba:	0fe4      	lsrs	r4, r4, #31
 80004bc:	0d76      	lsrs	r6, r6, #21
 80004be:	46a1      	mov	r9, r4
 80004c0:	00c0      	lsls	r0, r0, #3
 80004c2:	46b8      	mov	r8, r7
 80004c4:	00d2      	lsls	r2, r2, #3
 80004c6:	1bab      	subs	r3, r5, r6
 80004c8:	4564      	cmp	r4, ip
 80004ca:	d07b      	beq.n	80005c4 <__aeabi_dadd+0x130>
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	dd5f      	ble.n	8000590 <__aeabi_dadd+0xfc>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d000      	beq.n	80004d6 <__aeabi_dadd+0x42>
 80004d4:	e0a4      	b.n	8000620 <__aeabi_dadd+0x18c>
 80004d6:	003e      	movs	r6, r7
 80004d8:	4316      	orrs	r6, r2
 80004da:	d100      	bne.n	80004de <__aeabi_dadd+0x4a>
 80004dc:	e112      	b.n	8000704 <__aeabi_dadd+0x270>
 80004de:	1e5e      	subs	r6, r3, #1
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d000      	beq.n	80004e6 <__aeabi_dadd+0x52>
 80004e4:	e19e      	b.n	8000824 <__aeabi_dadd+0x390>
 80004e6:	1a87      	subs	r7, r0, r2
 80004e8:	4643      	mov	r3, r8
 80004ea:	42b8      	cmp	r0, r7
 80004ec:	4180      	sbcs	r0, r0
 80004ee:	2501      	movs	r5, #1
 80004f0:	1ac9      	subs	r1, r1, r3
 80004f2:	4240      	negs	r0, r0
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	020b      	lsls	r3, r1, #8
 80004f8:	d400      	bmi.n	80004fc <__aeabi_dadd+0x68>
 80004fa:	e131      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80004fc:	0249      	lsls	r1, r1, #9
 80004fe:	0a4e      	lsrs	r6, r1, #9
 8000500:	2e00      	cmp	r6, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x72>
 8000504:	e16e      	b.n	80007e4 <__aeabi_dadd+0x350>
 8000506:	0030      	movs	r0, r6
 8000508:	f001 fd62 	bl	8001fd0 <__clzsi2>
 800050c:	0003      	movs	r3, r0
 800050e:	3b08      	subs	r3, #8
 8000510:	2b1f      	cmp	r3, #31
 8000512:	dd00      	ble.n	8000516 <__aeabi_dadd+0x82>
 8000514:	e161      	b.n	80007da <__aeabi_dadd+0x346>
 8000516:	2220      	movs	r2, #32
 8000518:	0039      	movs	r1, r7
 800051a:	1ad2      	subs	r2, r2, r3
 800051c:	409e      	lsls	r6, r3
 800051e:	40d1      	lsrs	r1, r2
 8000520:	409f      	lsls	r7, r3
 8000522:	430e      	orrs	r6, r1
 8000524:	429d      	cmp	r5, r3
 8000526:	dd00      	ble.n	800052a <__aeabi_dadd+0x96>
 8000528:	e151      	b.n	80007ce <__aeabi_dadd+0x33a>
 800052a:	1b5d      	subs	r5, r3, r5
 800052c:	1c6b      	adds	r3, r5, #1
 800052e:	2b1f      	cmp	r3, #31
 8000530:	dd00      	ble.n	8000534 <__aeabi_dadd+0xa0>
 8000532:	e17c      	b.n	800082e <__aeabi_dadd+0x39a>
 8000534:	2120      	movs	r1, #32
 8000536:	1ac9      	subs	r1, r1, r3
 8000538:	003d      	movs	r5, r7
 800053a:	0030      	movs	r0, r6
 800053c:	408f      	lsls	r7, r1
 800053e:	4088      	lsls	r0, r1
 8000540:	40dd      	lsrs	r5, r3
 8000542:	1e79      	subs	r1, r7, #1
 8000544:	418f      	sbcs	r7, r1
 8000546:	0031      	movs	r1, r6
 8000548:	2207      	movs	r2, #7
 800054a:	4328      	orrs	r0, r5
 800054c:	40d9      	lsrs	r1, r3
 800054e:	2500      	movs	r5, #0
 8000550:	4307      	orrs	r7, r0
 8000552:	403a      	ands	r2, r7
 8000554:	2a00      	cmp	r2, #0
 8000556:	d009      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000558:	230f      	movs	r3, #15
 800055a:	403b      	ands	r3, r7
 800055c:	2b04      	cmp	r3, #4
 800055e:	d005      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	42bb      	cmp	r3, r7
 8000564:	41bf      	sbcs	r7, r7
 8000566:	427f      	negs	r7, r7
 8000568:	19c9      	adds	r1, r1, r7
 800056a:	001f      	movs	r7, r3
 800056c:	020b      	lsls	r3, r1, #8
 800056e:	d400      	bmi.n	8000572 <__aeabi_dadd+0xde>
 8000570:	e226      	b.n	80009c0 <__aeabi_dadd+0x52c>
 8000572:	1c6a      	adds	r2, r5, #1
 8000574:	4bc6      	ldr	r3, [pc, #792]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000576:	0555      	lsls	r5, r2, #21
 8000578:	0d6d      	lsrs	r5, r5, #21
 800057a:	429a      	cmp	r2, r3
 800057c:	d100      	bne.n	8000580 <__aeabi_dadd+0xec>
 800057e:	e106      	b.n	800078e <__aeabi_dadd+0x2fa>
 8000580:	4ac4      	ldr	r2, [pc, #784]	; (8000894 <__aeabi_dadd+0x400>)
 8000582:	08ff      	lsrs	r7, r7, #3
 8000584:	400a      	ands	r2, r1
 8000586:	0753      	lsls	r3, r2, #29
 8000588:	0252      	lsls	r2, r2, #9
 800058a:	433b      	orrs	r3, r7
 800058c:	0b12      	lsrs	r2, r2, #12
 800058e:	e08e      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000590:	2b00      	cmp	r3, #0
 8000592:	d000      	beq.n	8000596 <__aeabi_dadd+0x102>
 8000594:	e0b8      	b.n	8000708 <__aeabi_dadd+0x274>
 8000596:	1c6b      	adds	r3, r5, #1
 8000598:	055b      	lsls	r3, r3, #21
 800059a:	0d5b      	lsrs	r3, r3, #21
 800059c:	2b01      	cmp	r3, #1
 800059e:	dc00      	bgt.n	80005a2 <__aeabi_dadd+0x10e>
 80005a0:	e130      	b.n	8000804 <__aeabi_dadd+0x370>
 80005a2:	1a87      	subs	r7, r0, r2
 80005a4:	4643      	mov	r3, r8
 80005a6:	42b8      	cmp	r0, r7
 80005a8:	41b6      	sbcs	r6, r6
 80005aa:	1acb      	subs	r3, r1, r3
 80005ac:	4276      	negs	r6, r6
 80005ae:	1b9e      	subs	r6, r3, r6
 80005b0:	0233      	lsls	r3, r6, #8
 80005b2:	d500      	bpl.n	80005b6 <__aeabi_dadd+0x122>
 80005b4:	e14c      	b.n	8000850 <__aeabi_dadd+0x3bc>
 80005b6:	003b      	movs	r3, r7
 80005b8:	4333      	orrs	r3, r6
 80005ba:	d1a1      	bne.n	8000500 <__aeabi_dadd+0x6c>
 80005bc:	2200      	movs	r2, #0
 80005be:	2400      	movs	r4, #0
 80005c0:	2500      	movs	r5, #0
 80005c2:	e070      	b.n	80006a6 <__aeabi_dadd+0x212>
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_dadd+0x136>
 80005c8:	e0e5      	b.n	8000796 <__aeabi_dadd+0x302>
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d100      	bne.n	80005d0 <__aeabi_dadd+0x13c>
 80005ce:	e083      	b.n	80006d8 <__aeabi_dadd+0x244>
 80005d0:	4eaf      	ldr	r6, [pc, #700]	; (8000890 <__aeabi_dadd+0x3fc>)
 80005d2:	42b5      	cmp	r5, r6
 80005d4:	d060      	beq.n	8000698 <__aeabi_dadd+0x204>
 80005d6:	2680      	movs	r6, #128	; 0x80
 80005d8:	0436      	lsls	r6, r6, #16
 80005da:	4337      	orrs	r7, r6
 80005dc:	46b8      	mov	r8, r7
 80005de:	2b38      	cmp	r3, #56	; 0x38
 80005e0:	dc00      	bgt.n	80005e4 <__aeabi_dadd+0x150>
 80005e2:	e13e      	b.n	8000862 <__aeabi_dadd+0x3ce>
 80005e4:	4643      	mov	r3, r8
 80005e6:	4313      	orrs	r3, r2
 80005e8:	001f      	movs	r7, r3
 80005ea:	1e7a      	subs	r2, r7, #1
 80005ec:	4197      	sbcs	r7, r2
 80005ee:	183f      	adds	r7, r7, r0
 80005f0:	4287      	cmp	r7, r0
 80005f2:	4180      	sbcs	r0, r0
 80005f4:	4240      	negs	r0, r0
 80005f6:	1809      	adds	r1, r1, r0
 80005f8:	020b      	lsls	r3, r1, #8
 80005fa:	d400      	bmi.n	80005fe <__aeabi_dadd+0x16a>
 80005fc:	e0b0      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80005fe:	4ba4      	ldr	r3, [pc, #656]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000600:	3501      	adds	r5, #1
 8000602:	429d      	cmp	r5, r3
 8000604:	d100      	bne.n	8000608 <__aeabi_dadd+0x174>
 8000606:	e0c3      	b.n	8000790 <__aeabi_dadd+0x2fc>
 8000608:	4aa2      	ldr	r2, [pc, #648]	; (8000894 <__aeabi_dadd+0x400>)
 800060a:	087b      	lsrs	r3, r7, #1
 800060c:	400a      	ands	r2, r1
 800060e:	2101      	movs	r1, #1
 8000610:	400f      	ands	r7, r1
 8000612:	431f      	orrs	r7, r3
 8000614:	0851      	lsrs	r1, r2, #1
 8000616:	07d3      	lsls	r3, r2, #31
 8000618:	2207      	movs	r2, #7
 800061a:	431f      	orrs	r7, r3
 800061c:	403a      	ands	r2, r7
 800061e:	e799      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000620:	4e9b      	ldr	r6, [pc, #620]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000622:	42b5      	cmp	r5, r6
 8000624:	d038      	beq.n	8000698 <__aeabi_dadd+0x204>
 8000626:	2680      	movs	r6, #128	; 0x80
 8000628:	0436      	lsls	r6, r6, #16
 800062a:	4337      	orrs	r7, r6
 800062c:	46b8      	mov	r8, r7
 800062e:	2b38      	cmp	r3, #56	; 0x38
 8000630:	dd00      	ble.n	8000634 <__aeabi_dadd+0x1a0>
 8000632:	e0dc      	b.n	80007ee <__aeabi_dadd+0x35a>
 8000634:	2b1f      	cmp	r3, #31
 8000636:	dc00      	bgt.n	800063a <__aeabi_dadd+0x1a6>
 8000638:	e130      	b.n	800089c <__aeabi_dadd+0x408>
 800063a:	001e      	movs	r6, r3
 800063c:	4647      	mov	r7, r8
 800063e:	3e20      	subs	r6, #32
 8000640:	40f7      	lsrs	r7, r6
 8000642:	46bc      	mov	ip, r7
 8000644:	2b20      	cmp	r3, #32
 8000646:	d004      	beq.n	8000652 <__aeabi_dadd+0x1be>
 8000648:	2640      	movs	r6, #64	; 0x40
 800064a:	1af3      	subs	r3, r6, r3
 800064c:	4646      	mov	r6, r8
 800064e:	409e      	lsls	r6, r3
 8000650:	4332      	orrs	r2, r6
 8000652:	0017      	movs	r7, r2
 8000654:	4663      	mov	r3, ip
 8000656:	1e7a      	subs	r2, r7, #1
 8000658:	4197      	sbcs	r7, r2
 800065a:	431f      	orrs	r7, r3
 800065c:	e0cc      	b.n	80007f8 <__aeabi_dadd+0x364>
 800065e:	2b00      	cmp	r3, #0
 8000660:	d100      	bne.n	8000664 <__aeabi_dadd+0x1d0>
 8000662:	e204      	b.n	8000a6e <__aeabi_dadd+0x5da>
 8000664:	4643      	mov	r3, r8
 8000666:	4313      	orrs	r3, r2
 8000668:	d100      	bne.n	800066c <__aeabi_dadd+0x1d8>
 800066a:	e159      	b.n	8000920 <__aeabi_dadd+0x48c>
 800066c:	074b      	lsls	r3, r1, #29
 800066e:	08c0      	lsrs	r0, r0, #3
 8000670:	4318      	orrs	r0, r3
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	08c9      	lsrs	r1, r1, #3
 8000676:	031b      	lsls	r3, r3, #12
 8000678:	4219      	tst	r1, r3
 800067a:	d008      	beq.n	800068e <__aeabi_dadd+0x1fa>
 800067c:	4645      	mov	r5, r8
 800067e:	08ed      	lsrs	r5, r5, #3
 8000680:	421d      	tst	r5, r3
 8000682:	d104      	bne.n	800068e <__aeabi_dadd+0x1fa>
 8000684:	4643      	mov	r3, r8
 8000686:	08d0      	lsrs	r0, r2, #3
 8000688:	0759      	lsls	r1, r3, #29
 800068a:	4308      	orrs	r0, r1
 800068c:	0029      	movs	r1, r5
 800068e:	0f42      	lsrs	r2, r0, #29
 8000690:	00c9      	lsls	r1, r1, #3
 8000692:	4d7f      	ldr	r5, [pc, #508]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000694:	4311      	orrs	r1, r2
 8000696:	00c0      	lsls	r0, r0, #3
 8000698:	074b      	lsls	r3, r1, #29
 800069a:	08ca      	lsrs	r2, r1, #3
 800069c:	497c      	ldr	r1, [pc, #496]	; (8000890 <__aeabi_dadd+0x3fc>)
 800069e:	08c0      	lsrs	r0, r0, #3
 80006a0:	4303      	orrs	r3, r0
 80006a2:	428d      	cmp	r5, r1
 80006a4:	d068      	beq.n	8000778 <__aeabi_dadd+0x2e4>
 80006a6:	0312      	lsls	r2, r2, #12
 80006a8:	056d      	lsls	r5, r5, #21
 80006aa:	0b12      	lsrs	r2, r2, #12
 80006ac:	0d6d      	lsrs	r5, r5, #21
 80006ae:	2100      	movs	r1, #0
 80006b0:	0312      	lsls	r2, r2, #12
 80006b2:	0018      	movs	r0, r3
 80006b4:	0b13      	lsrs	r3, r2, #12
 80006b6:	0d0a      	lsrs	r2, r1, #20
 80006b8:	0512      	lsls	r2, r2, #20
 80006ba:	431a      	orrs	r2, r3
 80006bc:	4b76      	ldr	r3, [pc, #472]	; (8000898 <__aeabi_dadd+0x404>)
 80006be:	052d      	lsls	r5, r5, #20
 80006c0:	4013      	ands	r3, r2
 80006c2:	432b      	orrs	r3, r5
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	07e4      	lsls	r4, r4, #31
 80006c8:	085b      	lsrs	r3, r3, #1
 80006ca:	4323      	orrs	r3, r4
 80006cc:	0019      	movs	r1, r3
 80006ce:	bc1c      	pop	{r2, r3, r4}
 80006d0:	4690      	mov	r8, r2
 80006d2:	4699      	mov	r9, r3
 80006d4:	46a2      	mov	sl, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	003e      	movs	r6, r7
 80006da:	4316      	orrs	r6, r2
 80006dc:	d012      	beq.n	8000704 <__aeabi_dadd+0x270>
 80006de:	1e5e      	subs	r6, r3, #1
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x252>
 80006e4:	e100      	b.n	80008e8 <__aeabi_dadd+0x454>
 80006e6:	1887      	adds	r7, r0, r2
 80006e8:	4287      	cmp	r7, r0
 80006ea:	4180      	sbcs	r0, r0
 80006ec:	4441      	add	r1, r8
 80006ee:	4240      	negs	r0, r0
 80006f0:	1809      	adds	r1, r1, r0
 80006f2:	2501      	movs	r5, #1
 80006f4:	020b      	lsls	r3, r1, #8
 80006f6:	d533      	bpl.n	8000760 <__aeabi_dadd+0x2cc>
 80006f8:	2502      	movs	r5, #2
 80006fa:	e785      	b.n	8000608 <__aeabi_dadd+0x174>
 80006fc:	4664      	mov	r4, ip
 80006fe:	0033      	movs	r3, r6
 8000700:	4641      	mov	r1, r8
 8000702:	0010      	movs	r0, r2
 8000704:	001d      	movs	r5, r3
 8000706:	e7c7      	b.n	8000698 <__aeabi_dadd+0x204>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d000      	beq.n	800070e <__aeabi_dadd+0x27a>
 800070c:	e0da      	b.n	80008c4 <__aeabi_dadd+0x430>
 800070e:	000c      	movs	r4, r1
 8000710:	4304      	orrs	r4, r0
 8000712:	d0f3      	beq.n	80006fc <__aeabi_dadd+0x268>
 8000714:	1c5c      	adds	r4, r3, #1
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x286>
 8000718:	e19f      	b.n	8000a5a <__aeabi_dadd+0x5c6>
 800071a:	4c5d      	ldr	r4, [pc, #372]	; (8000890 <__aeabi_dadd+0x3fc>)
 800071c:	42a6      	cmp	r6, r4
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x28e>
 8000720:	e12f      	b.n	8000982 <__aeabi_dadd+0x4ee>
 8000722:	43db      	mvns	r3, r3
 8000724:	2b38      	cmp	r3, #56	; 0x38
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0x296>
 8000728:	e166      	b.n	80009f8 <__aeabi_dadd+0x564>
 800072a:	2b1f      	cmp	r3, #31
 800072c:	dd00      	ble.n	8000730 <__aeabi_dadd+0x29c>
 800072e:	e183      	b.n	8000a38 <__aeabi_dadd+0x5a4>
 8000730:	2420      	movs	r4, #32
 8000732:	0005      	movs	r5, r0
 8000734:	1ae4      	subs	r4, r4, r3
 8000736:	000f      	movs	r7, r1
 8000738:	40dd      	lsrs	r5, r3
 800073a:	40d9      	lsrs	r1, r3
 800073c:	40a0      	lsls	r0, r4
 800073e:	4643      	mov	r3, r8
 8000740:	40a7      	lsls	r7, r4
 8000742:	1a5b      	subs	r3, r3, r1
 8000744:	1e44      	subs	r4, r0, #1
 8000746:	41a0      	sbcs	r0, r4
 8000748:	4698      	mov	r8, r3
 800074a:	432f      	orrs	r7, r5
 800074c:	4338      	orrs	r0, r7
 800074e:	1a17      	subs	r7, r2, r0
 8000750:	42ba      	cmp	r2, r7
 8000752:	4192      	sbcs	r2, r2
 8000754:	4643      	mov	r3, r8
 8000756:	4252      	negs	r2, r2
 8000758:	1a99      	subs	r1, r3, r2
 800075a:	4664      	mov	r4, ip
 800075c:	0035      	movs	r5, r6
 800075e:	e6ca      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000760:	2207      	movs	r2, #7
 8000762:	403a      	ands	r2, r7
 8000764:	2a00      	cmp	r2, #0
 8000766:	d000      	beq.n	800076a <__aeabi_dadd+0x2d6>
 8000768:	e6f6      	b.n	8000558 <__aeabi_dadd+0xc4>
 800076a:	074b      	lsls	r3, r1, #29
 800076c:	08ca      	lsrs	r2, r1, #3
 800076e:	4948      	ldr	r1, [pc, #288]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000770:	08ff      	lsrs	r7, r7, #3
 8000772:	433b      	orrs	r3, r7
 8000774:	428d      	cmp	r5, r1
 8000776:	d196      	bne.n	80006a6 <__aeabi_dadd+0x212>
 8000778:	0019      	movs	r1, r3
 800077a:	4311      	orrs	r1, r2
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x2ec>
 800077e:	e19e      	b.n	8000abe <__aeabi_dadd+0x62a>
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	0309      	lsls	r1, r1, #12
 8000784:	430a      	orrs	r2, r1
 8000786:	0312      	lsls	r2, r2, #12
 8000788:	0b12      	lsrs	r2, r2, #12
 800078a:	4d41      	ldr	r5, [pc, #260]	; (8000890 <__aeabi_dadd+0x3fc>)
 800078c:	e78f      	b.n	80006ae <__aeabi_dadd+0x21a>
 800078e:	0015      	movs	r5, r2
 8000790:	2200      	movs	r2, #0
 8000792:	2300      	movs	r3, #0
 8000794:	e78b      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000796:	2b00      	cmp	r3, #0
 8000798:	d000      	beq.n	800079c <__aeabi_dadd+0x308>
 800079a:	e0c7      	b.n	800092c <__aeabi_dadd+0x498>
 800079c:	1c6b      	adds	r3, r5, #1
 800079e:	055f      	lsls	r7, r3, #21
 80007a0:	0d7f      	lsrs	r7, r7, #21
 80007a2:	2f01      	cmp	r7, #1
 80007a4:	dc00      	bgt.n	80007a8 <__aeabi_dadd+0x314>
 80007a6:	e0f1      	b.n	800098c <__aeabi_dadd+0x4f8>
 80007a8:	4d39      	ldr	r5, [pc, #228]	; (8000890 <__aeabi_dadd+0x3fc>)
 80007aa:	42ab      	cmp	r3, r5
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x31c>
 80007ae:	e0b9      	b.n	8000924 <__aeabi_dadd+0x490>
 80007b0:	1885      	adds	r5, r0, r2
 80007b2:	000a      	movs	r2, r1
 80007b4:	4285      	cmp	r5, r0
 80007b6:	4189      	sbcs	r1, r1
 80007b8:	4442      	add	r2, r8
 80007ba:	4249      	negs	r1, r1
 80007bc:	1851      	adds	r1, r2, r1
 80007be:	2207      	movs	r2, #7
 80007c0:	07cf      	lsls	r7, r1, #31
 80007c2:	086d      	lsrs	r5, r5, #1
 80007c4:	432f      	orrs	r7, r5
 80007c6:	0849      	lsrs	r1, r1, #1
 80007c8:	403a      	ands	r2, r7
 80007ca:	001d      	movs	r5, r3
 80007cc:	e6c2      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007ce:	2207      	movs	r2, #7
 80007d0:	4930      	ldr	r1, [pc, #192]	; (8000894 <__aeabi_dadd+0x400>)
 80007d2:	1aed      	subs	r5, r5, r3
 80007d4:	4031      	ands	r1, r6
 80007d6:	403a      	ands	r2, r7
 80007d8:	e6bc      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007da:	003e      	movs	r6, r7
 80007dc:	3828      	subs	r0, #40	; 0x28
 80007de:	4086      	lsls	r6, r0
 80007e0:	2700      	movs	r7, #0
 80007e2:	e69f      	b.n	8000524 <__aeabi_dadd+0x90>
 80007e4:	0038      	movs	r0, r7
 80007e6:	f001 fbf3 	bl	8001fd0 <__clzsi2>
 80007ea:	3020      	adds	r0, #32
 80007ec:	e68e      	b.n	800050c <__aeabi_dadd+0x78>
 80007ee:	4643      	mov	r3, r8
 80007f0:	4313      	orrs	r3, r2
 80007f2:	001f      	movs	r7, r3
 80007f4:	1e7a      	subs	r2, r7, #1
 80007f6:	4197      	sbcs	r7, r2
 80007f8:	1bc7      	subs	r7, r0, r7
 80007fa:	42b8      	cmp	r0, r7
 80007fc:	4180      	sbcs	r0, r0
 80007fe:	4240      	negs	r0, r0
 8000800:	1a09      	subs	r1, r1, r0
 8000802:	e678      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000804:	000e      	movs	r6, r1
 8000806:	003b      	movs	r3, r7
 8000808:	4306      	orrs	r6, r0
 800080a:	4313      	orrs	r3, r2
 800080c:	2d00      	cmp	r5, #0
 800080e:	d161      	bne.n	80008d4 <__aeabi_dadd+0x440>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_dadd+0x382>
 8000814:	e0f4      	b.n	8000a00 <__aeabi_dadd+0x56c>
 8000816:	2b00      	cmp	r3, #0
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x388>
 800081a:	e11b      	b.n	8000a54 <__aeabi_dadd+0x5c0>
 800081c:	4664      	mov	r4, ip
 800081e:	0039      	movs	r1, r7
 8000820:	0010      	movs	r0, r2
 8000822:	e739      	b.n	8000698 <__aeabi_dadd+0x204>
 8000824:	4f1a      	ldr	r7, [pc, #104]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000826:	42bb      	cmp	r3, r7
 8000828:	d07a      	beq.n	8000920 <__aeabi_dadd+0x48c>
 800082a:	0033      	movs	r3, r6
 800082c:	e6ff      	b.n	800062e <__aeabi_dadd+0x19a>
 800082e:	0030      	movs	r0, r6
 8000830:	3d1f      	subs	r5, #31
 8000832:	40e8      	lsrs	r0, r5
 8000834:	2b20      	cmp	r3, #32
 8000836:	d003      	beq.n	8000840 <__aeabi_dadd+0x3ac>
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	1acb      	subs	r3, r1, r3
 800083c:	409e      	lsls	r6, r3
 800083e:	4337      	orrs	r7, r6
 8000840:	1e7b      	subs	r3, r7, #1
 8000842:	419f      	sbcs	r7, r3
 8000844:	2207      	movs	r2, #7
 8000846:	4307      	orrs	r7, r0
 8000848:	403a      	ands	r2, r7
 800084a:	2100      	movs	r1, #0
 800084c:	2500      	movs	r5, #0
 800084e:	e789      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000850:	1a17      	subs	r7, r2, r0
 8000852:	4643      	mov	r3, r8
 8000854:	42ba      	cmp	r2, r7
 8000856:	41b6      	sbcs	r6, r6
 8000858:	1a59      	subs	r1, r3, r1
 800085a:	4276      	negs	r6, r6
 800085c:	1b8e      	subs	r6, r1, r6
 800085e:	4664      	mov	r4, ip
 8000860:	e64e      	b.n	8000500 <__aeabi_dadd+0x6c>
 8000862:	2b1f      	cmp	r3, #31
 8000864:	dd00      	ble.n	8000868 <__aeabi_dadd+0x3d4>
 8000866:	e0ad      	b.n	80009c4 <__aeabi_dadd+0x530>
 8000868:	2620      	movs	r6, #32
 800086a:	4647      	mov	r7, r8
 800086c:	1af6      	subs	r6, r6, r3
 800086e:	40b7      	lsls	r7, r6
 8000870:	46b9      	mov	r9, r7
 8000872:	0017      	movs	r7, r2
 8000874:	46b2      	mov	sl, r6
 8000876:	40df      	lsrs	r7, r3
 8000878:	464e      	mov	r6, r9
 800087a:	433e      	orrs	r6, r7
 800087c:	0037      	movs	r7, r6
 800087e:	4656      	mov	r6, sl
 8000880:	40b2      	lsls	r2, r6
 8000882:	1e56      	subs	r6, r2, #1
 8000884:	41b2      	sbcs	r2, r6
 8000886:	4317      	orrs	r7, r2
 8000888:	4642      	mov	r2, r8
 800088a:	40da      	lsrs	r2, r3
 800088c:	1889      	adds	r1, r1, r2
 800088e:	e6ae      	b.n	80005ee <__aeabi_dadd+0x15a>
 8000890:	000007ff 	.word	0x000007ff
 8000894:	ff7fffff 	.word	0xff7fffff
 8000898:	800fffff 	.word	0x800fffff
 800089c:	2620      	movs	r6, #32
 800089e:	4647      	mov	r7, r8
 80008a0:	1af6      	subs	r6, r6, r3
 80008a2:	40b7      	lsls	r7, r6
 80008a4:	46b9      	mov	r9, r7
 80008a6:	0017      	movs	r7, r2
 80008a8:	46b2      	mov	sl, r6
 80008aa:	40df      	lsrs	r7, r3
 80008ac:	464e      	mov	r6, r9
 80008ae:	433e      	orrs	r6, r7
 80008b0:	0037      	movs	r7, r6
 80008b2:	4656      	mov	r6, sl
 80008b4:	40b2      	lsls	r2, r6
 80008b6:	1e56      	subs	r6, r2, #1
 80008b8:	41b2      	sbcs	r2, r6
 80008ba:	4317      	orrs	r7, r2
 80008bc:	4642      	mov	r2, r8
 80008be:	40da      	lsrs	r2, r3
 80008c0:	1a89      	subs	r1, r1, r2
 80008c2:	e799      	b.n	80007f8 <__aeabi_dadd+0x364>
 80008c4:	4c7f      	ldr	r4, [pc, #508]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008c6:	42a6      	cmp	r6, r4
 80008c8:	d05b      	beq.n	8000982 <__aeabi_dadd+0x4ee>
 80008ca:	2480      	movs	r4, #128	; 0x80
 80008cc:	0424      	lsls	r4, r4, #16
 80008ce:	425b      	negs	r3, r3
 80008d0:	4321      	orrs	r1, r4
 80008d2:	e727      	b.n	8000724 <__aeabi_dadd+0x290>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d10c      	bne.n	80008f2 <__aeabi_dadd+0x45e>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x44a>
 80008dc:	e0cb      	b.n	8000a76 <__aeabi_dadd+0x5e2>
 80008de:	4664      	mov	r4, ip
 80008e0:	0039      	movs	r1, r7
 80008e2:	0010      	movs	r0, r2
 80008e4:	4d77      	ldr	r5, [pc, #476]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008e6:	e6d7      	b.n	8000698 <__aeabi_dadd+0x204>
 80008e8:	4f76      	ldr	r7, [pc, #472]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008ea:	42bb      	cmp	r3, r7
 80008ec:	d018      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008ee:	0033      	movs	r3, r6
 80008f0:	e675      	b.n	80005de <__aeabi_dadd+0x14a>
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d014      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008f6:	074b      	lsls	r3, r1, #29
 80008f8:	08c0      	lsrs	r0, r0, #3
 80008fa:	4318      	orrs	r0, r3
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	08c9      	lsrs	r1, r1, #3
 8000900:	031b      	lsls	r3, r3, #12
 8000902:	4219      	tst	r1, r3
 8000904:	d007      	beq.n	8000916 <__aeabi_dadd+0x482>
 8000906:	08fc      	lsrs	r4, r7, #3
 8000908:	421c      	tst	r4, r3
 800090a:	d104      	bne.n	8000916 <__aeabi_dadd+0x482>
 800090c:	0779      	lsls	r1, r7, #29
 800090e:	08d0      	lsrs	r0, r2, #3
 8000910:	4308      	orrs	r0, r1
 8000912:	46e1      	mov	r9, ip
 8000914:	0021      	movs	r1, r4
 8000916:	464c      	mov	r4, r9
 8000918:	0f42      	lsrs	r2, r0, #29
 800091a:	00c9      	lsls	r1, r1, #3
 800091c:	4311      	orrs	r1, r2
 800091e:	00c0      	lsls	r0, r0, #3
 8000920:	4d68      	ldr	r5, [pc, #416]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000922:	e6b9      	b.n	8000698 <__aeabi_dadd+0x204>
 8000924:	001d      	movs	r5, r3
 8000926:	2200      	movs	r2, #0
 8000928:	2300      	movs	r3, #0
 800092a:	e6c0      	b.n	80006ae <__aeabi_dadd+0x21a>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d15b      	bne.n	80009e8 <__aeabi_dadd+0x554>
 8000930:	000d      	movs	r5, r1
 8000932:	4305      	orrs	r5, r0
 8000934:	d100      	bne.n	8000938 <__aeabi_dadd+0x4a4>
 8000936:	e6e2      	b.n	80006fe <__aeabi_dadd+0x26a>
 8000938:	1c5d      	adds	r5, r3, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x4aa>
 800093c:	e0b0      	b.n	8000aa0 <__aeabi_dadd+0x60c>
 800093e:	4d61      	ldr	r5, [pc, #388]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000940:	42ae      	cmp	r6, r5
 8000942:	d01f      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 8000944:	43db      	mvns	r3, r3
 8000946:	2b38      	cmp	r3, #56	; 0x38
 8000948:	dc71      	bgt.n	8000a2e <__aeabi_dadd+0x59a>
 800094a:	2b1f      	cmp	r3, #31
 800094c:	dd00      	ble.n	8000950 <__aeabi_dadd+0x4bc>
 800094e:	e096      	b.n	8000a7e <__aeabi_dadd+0x5ea>
 8000950:	2520      	movs	r5, #32
 8000952:	000f      	movs	r7, r1
 8000954:	1aed      	subs	r5, r5, r3
 8000956:	40af      	lsls	r7, r5
 8000958:	46b9      	mov	r9, r7
 800095a:	0007      	movs	r7, r0
 800095c:	46aa      	mov	sl, r5
 800095e:	40df      	lsrs	r7, r3
 8000960:	464d      	mov	r5, r9
 8000962:	433d      	orrs	r5, r7
 8000964:	002f      	movs	r7, r5
 8000966:	4655      	mov	r5, sl
 8000968:	40a8      	lsls	r0, r5
 800096a:	40d9      	lsrs	r1, r3
 800096c:	1e45      	subs	r5, r0, #1
 800096e:	41a8      	sbcs	r0, r5
 8000970:	4488      	add	r8, r1
 8000972:	4307      	orrs	r7, r0
 8000974:	18bf      	adds	r7, r7, r2
 8000976:	4297      	cmp	r7, r2
 8000978:	4192      	sbcs	r2, r2
 800097a:	4251      	negs	r1, r2
 800097c:	4441      	add	r1, r8
 800097e:	0035      	movs	r5, r6
 8000980:	e63a      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000982:	4664      	mov	r4, ip
 8000984:	0035      	movs	r5, r6
 8000986:	4641      	mov	r1, r8
 8000988:	0010      	movs	r0, r2
 800098a:	e685      	b.n	8000698 <__aeabi_dadd+0x204>
 800098c:	000b      	movs	r3, r1
 800098e:	4303      	orrs	r3, r0
 8000990:	2d00      	cmp	r5, #0
 8000992:	d000      	beq.n	8000996 <__aeabi_dadd+0x502>
 8000994:	e663      	b.n	800065e <__aeabi_dadd+0x1ca>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f5      	beq.n	8000986 <__aeabi_dadd+0x4f2>
 800099a:	4643      	mov	r3, r8
 800099c:	4313      	orrs	r3, r2
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0x50e>
 80009a0:	e67a      	b.n	8000698 <__aeabi_dadd+0x204>
 80009a2:	1887      	adds	r7, r0, r2
 80009a4:	4287      	cmp	r7, r0
 80009a6:	4180      	sbcs	r0, r0
 80009a8:	2207      	movs	r2, #7
 80009aa:	4441      	add	r1, r8
 80009ac:	4240      	negs	r0, r0
 80009ae:	1809      	adds	r1, r1, r0
 80009b0:	403a      	ands	r2, r7
 80009b2:	020b      	lsls	r3, r1, #8
 80009b4:	d400      	bmi.n	80009b8 <__aeabi_dadd+0x524>
 80009b6:	e6d5      	b.n	8000764 <__aeabi_dadd+0x2d0>
 80009b8:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <__aeabi_dadd+0x634>)
 80009ba:	3501      	adds	r5, #1
 80009bc:	4019      	ands	r1, r3
 80009be:	e5c9      	b.n	8000554 <__aeabi_dadd+0xc0>
 80009c0:	0038      	movs	r0, r7
 80009c2:	e669      	b.n	8000698 <__aeabi_dadd+0x204>
 80009c4:	001e      	movs	r6, r3
 80009c6:	4647      	mov	r7, r8
 80009c8:	3e20      	subs	r6, #32
 80009ca:	40f7      	lsrs	r7, r6
 80009cc:	46bc      	mov	ip, r7
 80009ce:	2b20      	cmp	r3, #32
 80009d0:	d004      	beq.n	80009dc <__aeabi_dadd+0x548>
 80009d2:	2640      	movs	r6, #64	; 0x40
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	4646      	mov	r6, r8
 80009d8:	409e      	lsls	r6, r3
 80009da:	4332      	orrs	r2, r6
 80009dc:	0017      	movs	r7, r2
 80009de:	4663      	mov	r3, ip
 80009e0:	1e7a      	subs	r2, r7, #1
 80009e2:	4197      	sbcs	r7, r2
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e602      	b.n	80005ee <__aeabi_dadd+0x15a>
 80009e8:	4d36      	ldr	r5, [pc, #216]	; (8000ac4 <__aeabi_dadd+0x630>)
 80009ea:	42ae      	cmp	r6, r5
 80009ec:	d0ca      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 80009ee:	2580      	movs	r5, #128	; 0x80
 80009f0:	042d      	lsls	r5, r5, #16
 80009f2:	425b      	negs	r3, r3
 80009f4:	4329      	orrs	r1, r5
 80009f6:	e7a6      	b.n	8000946 <__aeabi_dadd+0x4b2>
 80009f8:	4308      	orrs	r0, r1
 80009fa:	1e41      	subs	r1, r0, #1
 80009fc:	4188      	sbcs	r0, r1
 80009fe:	e6a6      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d100      	bne.n	8000a06 <__aeabi_dadd+0x572>
 8000a04:	e648      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a06:	1a87      	subs	r7, r0, r2
 8000a08:	4643      	mov	r3, r8
 8000a0a:	42b8      	cmp	r0, r7
 8000a0c:	41b6      	sbcs	r6, r6
 8000a0e:	1acb      	subs	r3, r1, r3
 8000a10:	4276      	negs	r6, r6
 8000a12:	1b9e      	subs	r6, r3, r6
 8000a14:	0233      	lsls	r3, r6, #8
 8000a16:	d54b      	bpl.n	8000ab0 <__aeabi_dadd+0x61c>
 8000a18:	1a17      	subs	r7, r2, r0
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	42ba      	cmp	r2, r7
 8000a1e:	4192      	sbcs	r2, r2
 8000a20:	1a59      	subs	r1, r3, r1
 8000a22:	4252      	negs	r2, r2
 8000a24:	1a89      	subs	r1, r1, r2
 8000a26:	2207      	movs	r2, #7
 8000a28:	4664      	mov	r4, ip
 8000a2a:	403a      	ands	r2, r7
 8000a2c:	e592      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000a2e:	4301      	orrs	r1, r0
 8000a30:	000f      	movs	r7, r1
 8000a32:	1e79      	subs	r1, r7, #1
 8000a34:	418f      	sbcs	r7, r1
 8000a36:	e79d      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000a38:	001c      	movs	r4, r3
 8000a3a:	000f      	movs	r7, r1
 8000a3c:	3c20      	subs	r4, #32
 8000a3e:	40e7      	lsrs	r7, r4
 8000a40:	2b20      	cmp	r3, #32
 8000a42:	d003      	beq.n	8000a4c <__aeabi_dadd+0x5b8>
 8000a44:	2440      	movs	r4, #64	; 0x40
 8000a46:	1ae3      	subs	r3, r4, r3
 8000a48:	4099      	lsls	r1, r3
 8000a4a:	4308      	orrs	r0, r1
 8000a4c:	1e41      	subs	r1, r0, #1
 8000a4e:	4188      	sbcs	r0, r1
 8000a50:	4338      	orrs	r0, r7
 8000a52:	e67c      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a54:	2200      	movs	r2, #0
 8000a56:	2400      	movs	r4, #0
 8000a58:	e625      	b.n	80006a6 <__aeabi_dadd+0x212>
 8000a5a:	1a17      	subs	r7, r2, r0
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	42ba      	cmp	r2, r7
 8000a60:	4192      	sbcs	r2, r2
 8000a62:	1a59      	subs	r1, r3, r1
 8000a64:	4252      	negs	r2, r2
 8000a66:	1a89      	subs	r1, r1, r2
 8000a68:	4664      	mov	r4, ip
 8000a6a:	0035      	movs	r5, r6
 8000a6c:	e543      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000a6e:	4641      	mov	r1, r8
 8000a70:	0010      	movs	r0, r2
 8000a72:	4d14      	ldr	r5, [pc, #80]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000a74:	e610      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	2400      	movs	r4, #0
 8000a7a:	0312      	lsls	r2, r2, #12
 8000a7c:	e680      	b.n	8000780 <__aeabi_dadd+0x2ec>
 8000a7e:	001d      	movs	r5, r3
 8000a80:	000f      	movs	r7, r1
 8000a82:	3d20      	subs	r5, #32
 8000a84:	40ef      	lsrs	r7, r5
 8000a86:	46bc      	mov	ip, r7
 8000a88:	2b20      	cmp	r3, #32
 8000a8a:	d003      	beq.n	8000a94 <__aeabi_dadd+0x600>
 8000a8c:	2540      	movs	r5, #64	; 0x40
 8000a8e:	1aeb      	subs	r3, r5, r3
 8000a90:	4099      	lsls	r1, r3
 8000a92:	4308      	orrs	r0, r1
 8000a94:	0007      	movs	r7, r0
 8000a96:	4663      	mov	r3, ip
 8000a98:	1e78      	subs	r0, r7, #1
 8000a9a:	4187      	sbcs	r7, r0
 8000a9c:	431f      	orrs	r7, r3
 8000a9e:	e769      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000aa0:	1887      	adds	r7, r0, r2
 8000aa2:	4297      	cmp	r7, r2
 8000aa4:	419b      	sbcs	r3, r3
 8000aa6:	4441      	add	r1, r8
 8000aa8:	425b      	negs	r3, r3
 8000aaa:	18c9      	adds	r1, r1, r3
 8000aac:	0035      	movs	r5, r6
 8000aae:	e5a3      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	4333      	orrs	r3, r6
 8000ab4:	d0ce      	beq.n	8000a54 <__aeabi_dadd+0x5c0>
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	0031      	movs	r1, r6
 8000aba:	403a      	ands	r2, r7
 8000abc:	e652      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	e5f4      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000ac4:	000007ff 	.word	0x000007ff
 8000ac8:	ff7fffff 	.word	0xff7fffff

08000acc <__aeabi_ddiv>:
 8000acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ace:	4657      	mov	r7, sl
 8000ad0:	46de      	mov	lr, fp
 8000ad2:	464e      	mov	r6, r9
 8000ad4:	4645      	mov	r5, r8
 8000ad6:	b5e0      	push	{r5, r6, r7, lr}
 8000ad8:	4683      	mov	fp, r0
 8000ada:	0007      	movs	r7, r0
 8000adc:	030e      	lsls	r6, r1, #12
 8000ade:	0048      	lsls	r0, r1, #1
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	4692      	mov	sl, r2
 8000ae4:	001c      	movs	r4, r3
 8000ae6:	0b36      	lsrs	r6, r6, #12
 8000ae8:	0d40      	lsrs	r0, r0, #21
 8000aea:	0fcd      	lsrs	r5, r1, #31
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d100      	bne.n	8000af2 <__aeabi_ddiv+0x26>
 8000af0:	e09d      	b.n	8000c2e <__aeabi_ddiv+0x162>
 8000af2:	4b95      	ldr	r3, [pc, #596]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000af4:	4298      	cmp	r0, r3
 8000af6:	d039      	beq.n	8000b6c <__aeabi_ddiv+0xa0>
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	00f6      	lsls	r6, r6, #3
 8000afc:	041b      	lsls	r3, r3, #16
 8000afe:	431e      	orrs	r6, r3
 8000b00:	4a92      	ldr	r2, [pc, #584]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b02:	0f7b      	lsrs	r3, r7, #29
 8000b04:	4333      	orrs	r3, r6
 8000b06:	4699      	mov	r9, r3
 8000b08:	4694      	mov	ip, r2
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	4463      	add	r3, ip
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	2600      	movs	r6, #0
 8000b14:	00ff      	lsls	r7, r7, #3
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	0323      	lsls	r3, r4, #12
 8000b1a:	0b1b      	lsrs	r3, r3, #12
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	0063      	lsls	r3, r4, #1
 8000b20:	0fe4      	lsrs	r4, r4, #31
 8000b22:	4652      	mov	r2, sl
 8000b24:	0d5b      	lsrs	r3, r3, #21
 8000b26:	9401      	str	r4, [sp, #4]
 8000b28:	d100      	bne.n	8000b2c <__aeabi_ddiv+0x60>
 8000b2a:	e0b3      	b.n	8000c94 <__aeabi_ddiv+0x1c8>
 8000b2c:	4986      	ldr	r1, [pc, #536]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_ddiv+0x68>
 8000b32:	e09e      	b.n	8000c72 <__aeabi_ddiv+0x1a6>
 8000b34:	4642      	mov	r2, r8
 8000b36:	00d1      	lsls	r1, r2, #3
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	0412      	lsls	r2, r2, #16
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	4651      	mov	r1, sl
 8000b40:	0f49      	lsrs	r1, r1, #29
 8000b42:	4311      	orrs	r1, r2
 8000b44:	468b      	mov	fp, r1
 8000b46:	4981      	ldr	r1, [pc, #516]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b48:	4652      	mov	r2, sl
 8000b4a:	468c      	mov	ip, r1
 8000b4c:	9900      	ldr	r1, [sp, #0]
 8000b4e:	4463      	add	r3, ip
 8000b50:	1acb      	subs	r3, r1, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	00d2      	lsls	r2, r2, #3
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	002b      	movs	r3, r5
 8000b5a:	4063      	eors	r3, r4
 8000b5c:	469a      	mov	sl, r3
 8000b5e:	2e0f      	cmp	r6, #15
 8000b60:	d900      	bls.n	8000b64 <__aeabi_ddiv+0x98>
 8000b62:	e105      	b.n	8000d70 <__aeabi_ddiv+0x2a4>
 8000b64:	4b7a      	ldr	r3, [pc, #488]	; (8000d50 <__aeabi_ddiv+0x284>)
 8000b66:	00b6      	lsls	r6, r6, #2
 8000b68:	599b      	ldr	r3, [r3, r6]
 8000b6a:	469f      	mov	pc, r3
 8000b6c:	465b      	mov	r3, fp
 8000b6e:	4333      	orrs	r3, r6
 8000b70:	4699      	mov	r9, r3
 8000b72:	d000      	beq.n	8000b76 <__aeabi_ddiv+0xaa>
 8000b74:	e0b8      	b.n	8000ce8 <__aeabi_ddiv+0x21c>
 8000b76:	2302      	movs	r3, #2
 8000b78:	2608      	movs	r6, #8
 8000b7a:	2700      	movs	r7, #0
 8000b7c:	9000      	str	r0, [sp, #0]
 8000b7e:	9302      	str	r3, [sp, #8]
 8000b80:	e7ca      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000b82:	46cb      	mov	fp, r9
 8000b84:	003a      	movs	r2, r7
 8000b86:	9902      	ldr	r1, [sp, #8]
 8000b88:	9501      	str	r5, [sp, #4]
 8000b8a:	9b01      	ldr	r3, [sp, #4]
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	2902      	cmp	r1, #2
 8000b90:	d027      	beq.n	8000be2 <__aeabi_ddiv+0x116>
 8000b92:	2903      	cmp	r1, #3
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0xcc>
 8000b96:	e280      	b.n	800109a <__aeabi_ddiv+0x5ce>
 8000b98:	2901      	cmp	r1, #1
 8000b9a:	d044      	beq.n	8000c26 <__aeabi_ddiv+0x15a>
 8000b9c:	496d      	ldr	r1, [pc, #436]	; (8000d54 <__aeabi_ddiv+0x288>)
 8000b9e:	9b00      	ldr	r3, [sp, #0]
 8000ba0:	468c      	mov	ip, r1
 8000ba2:	4463      	add	r3, ip
 8000ba4:	001c      	movs	r4, r3
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	dd38      	ble.n	8000c1c <__aeabi_ddiv+0x150>
 8000baa:	0753      	lsls	r3, r2, #29
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000bae:	e213      	b.n	8000fd8 <__aeabi_ddiv+0x50c>
 8000bb0:	08d2      	lsrs	r2, r2, #3
 8000bb2:	465b      	mov	r3, fp
 8000bb4:	01db      	lsls	r3, r3, #7
 8000bb6:	d509      	bpl.n	8000bcc <__aeabi_ddiv+0x100>
 8000bb8:	4659      	mov	r1, fp
 8000bba:	4b67      	ldr	r3, [pc, #412]	; (8000d58 <__aeabi_ddiv+0x28c>)
 8000bbc:	4019      	ands	r1, r3
 8000bbe:	468b      	mov	fp, r1
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	00c9      	lsls	r1, r1, #3
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	9b00      	ldr	r3, [sp, #0]
 8000bc8:	4463      	add	r3, ip
 8000bca:	001c      	movs	r4, r3
 8000bcc:	4b63      	ldr	r3, [pc, #396]	; (8000d5c <__aeabi_ddiv+0x290>)
 8000bce:	429c      	cmp	r4, r3
 8000bd0:	dc07      	bgt.n	8000be2 <__aeabi_ddiv+0x116>
 8000bd2:	465b      	mov	r3, fp
 8000bd4:	0564      	lsls	r4, r4, #21
 8000bd6:	075f      	lsls	r7, r3, #29
 8000bd8:	025b      	lsls	r3, r3, #9
 8000bda:	4317      	orrs	r7, r2
 8000bdc:	0b1b      	lsrs	r3, r3, #12
 8000bde:	0d62      	lsrs	r2, r4, #21
 8000be0:	e002      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000be2:	2300      	movs	r3, #0
 8000be4:	2700      	movs	r7, #0
 8000be6:	4a58      	ldr	r2, [pc, #352]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	031b      	lsls	r3, r3, #12
 8000bec:	0b1c      	lsrs	r4, r3, #12
 8000bee:	0d0b      	lsrs	r3, r1, #20
 8000bf0:	051b      	lsls	r3, r3, #20
 8000bf2:	4323      	orrs	r3, r4
 8000bf4:	0514      	lsls	r4, r2, #20
 8000bf6:	4a5a      	ldr	r2, [pc, #360]	; (8000d60 <__aeabi_ddiv+0x294>)
 8000bf8:	0038      	movs	r0, r7
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	431c      	orrs	r4, r3
 8000bfe:	4653      	mov	r3, sl
 8000c00:	0064      	lsls	r4, r4, #1
 8000c02:	07db      	lsls	r3, r3, #31
 8000c04:	0864      	lsrs	r4, r4, #1
 8000c06:	431c      	orrs	r4, r3
 8000c08:	0021      	movs	r1, r4
 8000c0a:	b005      	add	sp, #20
 8000c0c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c0e:	4690      	mov	r8, r2
 8000c10:	4699      	mov	r9, r3
 8000c12:	46a2      	mov	sl, r4
 8000c14:	46ab      	mov	fp, r5
 8000c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4252      	negs	r2, r2
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	1b1b      	subs	r3, r3, r4
 8000c20:	2b38      	cmp	r3, #56	; 0x38
 8000c22:	dc00      	bgt.n	8000c26 <__aeabi_ddiv+0x15a>
 8000c24:	e1ad      	b.n	8000f82 <__aeabi_ddiv+0x4b6>
 8000c26:	2200      	movs	r2, #0
 8000c28:	2300      	movs	r3, #0
 8000c2a:	2700      	movs	r7, #0
 8000c2c:	e7dc      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000c2e:	465b      	mov	r3, fp
 8000c30:	4333      	orrs	r3, r6
 8000c32:	4699      	mov	r9, r3
 8000c34:	d05e      	beq.n	8000cf4 <__aeabi_ddiv+0x228>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_ddiv+0x170>
 8000c3a:	e18a      	b.n	8000f52 <__aeabi_ddiv+0x486>
 8000c3c:	0030      	movs	r0, r6
 8000c3e:	f001 f9c7 	bl	8001fd0 <__clzsi2>
 8000c42:	0003      	movs	r3, r0
 8000c44:	3b0b      	subs	r3, #11
 8000c46:	2b1c      	cmp	r3, #28
 8000c48:	dd00      	ble.n	8000c4c <__aeabi_ddiv+0x180>
 8000c4a:	e17b      	b.n	8000f44 <__aeabi_ddiv+0x478>
 8000c4c:	221d      	movs	r2, #29
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	465a      	mov	r2, fp
 8000c52:	0001      	movs	r1, r0
 8000c54:	40da      	lsrs	r2, r3
 8000c56:	3908      	subs	r1, #8
 8000c58:	408e      	lsls	r6, r1
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	465f      	mov	r7, fp
 8000c5e:	4333      	orrs	r3, r6
 8000c60:	4699      	mov	r9, r3
 8000c62:	408f      	lsls	r7, r1
 8000c64:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <__aeabi_ddiv+0x298>)
 8000c66:	2600      	movs	r6, #0
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9302      	str	r3, [sp, #8]
 8000c70:	e752      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000c72:	4641      	mov	r1, r8
 8000c74:	4653      	mov	r3, sl
 8000c76:	430b      	orrs	r3, r1
 8000c78:	493b      	ldr	r1, [pc, #236]	; (8000d68 <__aeabi_ddiv+0x29c>)
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	9b00      	ldr	r3, [sp, #0]
 8000c80:	4463      	add	r3, ip
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	465b      	mov	r3, fp
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d13b      	bne.n	8000d02 <__aeabi_ddiv+0x236>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	431e      	orrs	r6, r3
 8000c90:	2102      	movs	r1, #2
 8000c92:	e761      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000c94:	4643      	mov	r3, r8
 8000c96:	4313      	orrs	r3, r2
 8000c98:	469b      	mov	fp, r3
 8000c9a:	d037      	beq.n	8000d0c <__aeabi_ddiv+0x240>
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_ddiv+0x1d8>
 8000ca2:	e162      	b.n	8000f6a <__aeabi_ddiv+0x49e>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	f001 f993 	bl	8001fd0 <__clzsi2>
 8000caa:	0003      	movs	r3, r0
 8000cac:	3b0b      	subs	r3, #11
 8000cae:	2b1c      	cmp	r3, #28
 8000cb0:	dd00      	ble.n	8000cb4 <__aeabi_ddiv+0x1e8>
 8000cb2:	e153      	b.n	8000f5c <__aeabi_ddiv+0x490>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	4641      	mov	r1, r8
 8000cb8:	3a08      	subs	r2, #8
 8000cba:	4091      	lsls	r1, r2
 8000cbc:	4688      	mov	r8, r1
 8000cbe:	211d      	movs	r1, #29
 8000cc0:	1acb      	subs	r3, r1, r3
 8000cc2:	4651      	mov	r1, sl
 8000cc4:	40d9      	lsrs	r1, r3
 8000cc6:	000b      	movs	r3, r1
 8000cc8:	4641      	mov	r1, r8
 8000cca:	430b      	orrs	r3, r1
 8000ccc:	469b      	mov	fp, r3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	9b00      	ldr	r3, [sp, #0]
 8000cd6:	4925      	ldr	r1, [pc, #148]	; (8000d6c <__aeabi_ddiv+0x2a0>)
 8000cd8:	469c      	mov	ip, r3
 8000cda:	4460      	add	r0, ip
 8000cdc:	0003      	movs	r3, r0
 8000cde:	468c      	mov	ip, r1
 8000ce0:	4463      	add	r3, ip
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	e737      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	46b1      	mov	r9, r6
 8000cec:	9000      	str	r0, [sp, #0]
 8000cee:	260c      	movs	r6, #12
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	e711      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	2604      	movs	r6, #4
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	e70a      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000d02:	2303      	movs	r3, #3
 8000d04:	46c3      	mov	fp, r8
 8000d06:	431e      	orrs	r6, r3
 8000d08:	2103      	movs	r1, #3
 8000d0a:	e725      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	431e      	orrs	r6, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	2101      	movs	r1, #1
 8000d14:	e720      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d16:	2300      	movs	r3, #0
 8000d18:	469a      	mov	sl, r3
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	031b      	lsls	r3, r3, #12
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d22:	e761      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	4649      	mov	r1, r9
 8000d28:	031b      	lsls	r3, r3, #12
 8000d2a:	4219      	tst	r1, r3
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x264>
 8000d2e:	e0e2      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d30:	4659      	mov	r1, fp
 8000d32:	4219      	tst	r1, r3
 8000d34:	d000      	beq.n	8000d38 <__aeabi_ddiv+0x26c>
 8000d36:	e0de      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d38:	430b      	orrs	r3, r1
 8000d3a:	031b      	lsls	r3, r3, #12
 8000d3c:	0017      	movs	r7, r2
 8000d3e:	0b1b      	lsrs	r3, r3, #12
 8000d40:	46a2      	mov	sl, r4
 8000d42:	4a01      	ldr	r2, [pc, #4]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d44:	e750      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	000007ff 	.word	0x000007ff
 8000d4c:	fffffc01 	.word	0xfffffc01
 8000d50:	0800b9e4 	.word	0x0800b9e4
 8000d54:	000003ff 	.word	0x000003ff
 8000d58:	feffffff 	.word	0xfeffffff
 8000d5c:	000007fe 	.word	0x000007fe
 8000d60:	800fffff 	.word	0x800fffff
 8000d64:	fffffc0d 	.word	0xfffffc0d
 8000d68:	fffff801 	.word	0xfffff801
 8000d6c:	000003f3 	.word	0x000003f3
 8000d70:	45d9      	cmp	r9, fp
 8000d72:	d900      	bls.n	8000d76 <__aeabi_ddiv+0x2aa>
 8000d74:	e0cb      	b.n	8000f0e <__aeabi_ddiv+0x442>
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000d78:	e0c6      	b.n	8000f08 <__aeabi_ddiv+0x43c>
 8000d7a:	003c      	movs	r4, r7
 8000d7c:	4648      	mov	r0, r9
 8000d7e:	2700      	movs	r7, #0
 8000d80:	9b00      	ldr	r3, [sp, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	465b      	mov	r3, fp
 8000d88:	0e16      	lsrs	r6, r2, #24
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	0213      	lsls	r3, r2, #8
 8000d90:	4698      	mov	r8, r3
 8000d92:	0433      	lsls	r3, r6, #16
 8000d94:	0c1b      	lsrs	r3, r3, #16
 8000d96:	4699      	mov	r9, r3
 8000d98:	0c31      	lsrs	r1, r6, #16
 8000d9a:	9101      	str	r1, [sp, #4]
 8000d9c:	f7ff fa4c 	bl	8000238 <__aeabi_uidivmod>
 8000da0:	464a      	mov	r2, r9
 8000da2:	4342      	muls	r2, r0
 8000da4:	040b      	lsls	r3, r1, #16
 8000da6:	0c21      	lsrs	r1, r4, #16
 8000da8:	0005      	movs	r5, r0
 8000daa:	4319      	orrs	r1, r3
 8000dac:	428a      	cmp	r2, r1
 8000dae:	d907      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db0:	1989      	adds	r1, r1, r6
 8000db2:	3d01      	subs	r5, #1
 8000db4:	428e      	cmp	r6, r1
 8000db6:	d803      	bhi.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db8:	428a      	cmp	r2, r1
 8000dba:	d901      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000dbc:	1e85      	subs	r5, r0, #2
 8000dbe:	1989      	adds	r1, r1, r6
 8000dc0:	1a88      	subs	r0, r1, r2
 8000dc2:	9901      	ldr	r1, [sp, #4]
 8000dc4:	f7ff fa38 	bl	8000238 <__aeabi_uidivmod>
 8000dc8:	0409      	lsls	r1, r1, #16
 8000dca:	468c      	mov	ip, r1
 8000dcc:	464a      	mov	r2, r9
 8000dce:	0421      	lsls	r1, r4, #16
 8000dd0:	4664      	mov	r4, ip
 8000dd2:	4342      	muls	r2, r0
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	4321      	orrs	r1, r4
 8000dda:	428a      	cmp	r2, r1
 8000ddc:	d904      	bls.n	8000de8 <__aeabi_ddiv+0x31c>
 8000dde:	1989      	adds	r1, r1, r6
 8000de0:	3b01      	subs	r3, #1
 8000de2:	428e      	cmp	r6, r1
 8000de4:	d800      	bhi.n	8000de8 <__aeabi_ddiv+0x31c>
 8000de6:	e0f1      	b.n	8000fcc <__aeabi_ddiv+0x500>
 8000de8:	042d      	lsls	r5, r5, #16
 8000dea:	431d      	orrs	r5, r3
 8000dec:	46ab      	mov	fp, r5
 8000dee:	4643      	mov	r3, r8
 8000df0:	1a89      	subs	r1, r1, r2
 8000df2:	4642      	mov	r2, r8
 8000df4:	0c28      	lsrs	r0, r5, #16
 8000df6:	0412      	lsls	r2, r2, #16
 8000df8:	0c1d      	lsrs	r5, r3, #16
 8000dfa:	465b      	mov	r3, fp
 8000dfc:	0c14      	lsrs	r4, r2, #16
 8000dfe:	0022      	movs	r2, r4
 8000e00:	041b      	lsls	r3, r3, #16
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	435a      	muls	r2, r3
 8000e06:	9403      	str	r4, [sp, #12]
 8000e08:	436b      	muls	r3, r5
 8000e0a:	4344      	muls	r4, r0
 8000e0c:	9502      	str	r5, [sp, #8]
 8000e0e:	4368      	muls	r0, r5
 8000e10:	191b      	adds	r3, r3, r4
 8000e12:	0c15      	lsrs	r5, r2, #16
 8000e14:	18eb      	adds	r3, r5, r3
 8000e16:	429c      	cmp	r4, r3
 8000e18:	d903      	bls.n	8000e22 <__aeabi_ddiv+0x356>
 8000e1a:	2480      	movs	r4, #128	; 0x80
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	46a4      	mov	ip, r4
 8000e20:	4460      	add	r0, ip
 8000e22:	0c1c      	lsrs	r4, r3, #16
 8000e24:	0415      	lsls	r5, r2, #16
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	0c2d      	lsrs	r5, r5, #16
 8000e2a:	1820      	adds	r0, r4, r0
 8000e2c:	195d      	adds	r5, r3, r5
 8000e2e:	4281      	cmp	r1, r0
 8000e30:	d377      	bcc.n	8000f22 <__aeabi_ddiv+0x456>
 8000e32:	d073      	beq.n	8000f1c <__aeabi_ddiv+0x450>
 8000e34:	1a0c      	subs	r4, r1, r0
 8000e36:	4aa2      	ldr	r2, [pc, #648]	; (80010c0 <__aeabi_ddiv+0x5f4>)
 8000e38:	1b7d      	subs	r5, r7, r5
 8000e3a:	42af      	cmp	r7, r5
 8000e3c:	41bf      	sbcs	r7, r7
 8000e3e:	4694      	mov	ip, r2
 8000e40:	9b00      	ldr	r3, [sp, #0]
 8000e42:	427f      	negs	r7, r7
 8000e44:	4463      	add	r3, ip
 8000e46:	1be0      	subs	r0, r4, r7
 8000e48:	001c      	movs	r4, r3
 8000e4a:	4286      	cmp	r6, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_ddiv+0x384>
 8000e4e:	e0db      	b.n	8001008 <__aeabi_ddiv+0x53c>
 8000e50:	9901      	ldr	r1, [sp, #4]
 8000e52:	f7ff f9f1 	bl	8000238 <__aeabi_uidivmod>
 8000e56:	464a      	mov	r2, r9
 8000e58:	4342      	muls	r2, r0
 8000e5a:	040b      	lsls	r3, r1, #16
 8000e5c:	0c29      	lsrs	r1, r5, #16
 8000e5e:	0007      	movs	r7, r0
 8000e60:	4319      	orrs	r1, r3
 8000e62:	428a      	cmp	r2, r1
 8000e64:	d907      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e66:	1989      	adds	r1, r1, r6
 8000e68:	3f01      	subs	r7, #1
 8000e6a:	428e      	cmp	r6, r1
 8000e6c:	d803      	bhi.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d901      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e72:	1e87      	subs	r7, r0, #2
 8000e74:	1989      	adds	r1, r1, r6
 8000e76:	1a88      	subs	r0, r1, r2
 8000e78:	9901      	ldr	r1, [sp, #4]
 8000e7a:	f7ff f9dd 	bl	8000238 <__aeabi_uidivmod>
 8000e7e:	0409      	lsls	r1, r1, #16
 8000e80:	464a      	mov	r2, r9
 8000e82:	4689      	mov	r9, r1
 8000e84:	0429      	lsls	r1, r5, #16
 8000e86:	464d      	mov	r5, r9
 8000e88:	4342      	muls	r2, r0
 8000e8a:	0c09      	lsrs	r1, r1, #16
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	4329      	orrs	r1, r5
 8000e90:	428a      	cmp	r2, r1
 8000e92:	d907      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e94:	1989      	adds	r1, r1, r6
 8000e96:	3b01      	subs	r3, #1
 8000e98:	428e      	cmp	r6, r1
 8000e9a:	d803      	bhi.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d901      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000ea0:	1e83      	subs	r3, r0, #2
 8000ea2:	1989      	adds	r1, r1, r6
 8000ea4:	043f      	lsls	r7, r7, #16
 8000ea6:	1a89      	subs	r1, r1, r2
 8000ea8:	003a      	movs	r2, r7
 8000eaa:	9f03      	ldr	r7, [sp, #12]
 8000eac:	431a      	orrs	r2, r3
 8000eae:	0038      	movs	r0, r7
 8000eb0:	0413      	lsls	r3, r2, #16
 8000eb2:	0c1b      	lsrs	r3, r3, #16
 8000eb4:	4358      	muls	r0, r3
 8000eb6:	4681      	mov	r9, r0
 8000eb8:	9802      	ldr	r0, [sp, #8]
 8000eba:	0c15      	lsrs	r5, r2, #16
 8000ebc:	436f      	muls	r7, r5
 8000ebe:	4343      	muls	r3, r0
 8000ec0:	4345      	muls	r5, r0
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	0c00      	lsrs	r0, r0, #16
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	19db      	adds	r3, r3, r7
 8000eca:	4463      	add	r3, ip
 8000ecc:	429f      	cmp	r7, r3
 8000ece:	d903      	bls.n	8000ed8 <__aeabi_ddiv+0x40c>
 8000ed0:	2080      	movs	r0, #128	; 0x80
 8000ed2:	0240      	lsls	r0, r0, #9
 8000ed4:	4684      	mov	ip, r0
 8000ed6:	4465      	add	r5, ip
 8000ed8:	4648      	mov	r0, r9
 8000eda:	0c1f      	lsrs	r7, r3, #16
 8000edc:	0400      	lsls	r0, r0, #16
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	0c00      	lsrs	r0, r0, #16
 8000ee2:	197d      	adds	r5, r7, r5
 8000ee4:	1818      	adds	r0, r3, r0
 8000ee6:	42a9      	cmp	r1, r5
 8000ee8:	d200      	bcs.n	8000eec <__aeabi_ddiv+0x420>
 8000eea:	e084      	b.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_ddiv+0x424>
 8000eee:	e07f      	b.n	8000ff0 <__aeabi_ddiv+0x524>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	e657      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	464a      	mov	r2, r9
 8000efa:	031b      	lsls	r3, r3, #12
 8000efc:	4313      	orrs	r3, r2
 8000efe:	031b      	lsls	r3, r3, #12
 8000f00:	0b1b      	lsrs	r3, r3, #12
 8000f02:	46aa      	mov	sl, r5
 8000f04:	4a6f      	ldr	r2, [pc, #444]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 8000f06:	e66f      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000f08:	42ba      	cmp	r2, r7
 8000f0a:	d900      	bls.n	8000f0e <__aeabi_ddiv+0x442>
 8000f0c:	e735      	b.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000f0e:	464b      	mov	r3, r9
 8000f10:	07dc      	lsls	r4, r3, #31
 8000f12:	0858      	lsrs	r0, r3, #1
 8000f14:	087b      	lsrs	r3, r7, #1
 8000f16:	431c      	orrs	r4, r3
 8000f18:	07ff      	lsls	r7, r7, #31
 8000f1a:	e734      	b.n	8000d86 <__aeabi_ddiv+0x2ba>
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	42af      	cmp	r7, r5
 8000f20:	d289      	bcs.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f22:	4447      	add	r7, r8
 8000f24:	4547      	cmp	r7, r8
 8000f26:	41a4      	sbcs	r4, r4
 8000f28:	465b      	mov	r3, fp
 8000f2a:	4264      	negs	r4, r4
 8000f2c:	19a4      	adds	r4, r4, r6
 8000f2e:	1864      	adds	r4, r4, r1
 8000f30:	3b01      	subs	r3, #1
 8000f32:	42a6      	cmp	r6, r4
 8000f34:	d21e      	bcs.n	8000f74 <__aeabi_ddiv+0x4a8>
 8000f36:	42a0      	cmp	r0, r4
 8000f38:	d86d      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f3c:	e0b6      	b.n	80010ac <__aeabi_ddiv+0x5e0>
 8000f3e:	1a24      	subs	r4, r4, r0
 8000f40:	469b      	mov	fp, r3
 8000f42:	e778      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f44:	0003      	movs	r3, r0
 8000f46:	465a      	mov	r2, fp
 8000f48:	3b28      	subs	r3, #40	; 0x28
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	2700      	movs	r7, #0
 8000f4e:	4691      	mov	r9, r2
 8000f50:	e688      	b.n	8000c64 <__aeabi_ddiv+0x198>
 8000f52:	4658      	mov	r0, fp
 8000f54:	f001 f83c 	bl	8001fd0 <__clzsi2>
 8000f58:	3020      	adds	r0, #32
 8000f5a:	e672      	b.n	8000c42 <__aeabi_ddiv+0x176>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	4652      	mov	r2, sl
 8000f60:	3b28      	subs	r3, #40	; 0x28
 8000f62:	409a      	lsls	r2, r3
 8000f64:	4693      	mov	fp, r2
 8000f66:	2200      	movs	r2, #0
 8000f68:	e6b4      	b.n	8000cd4 <__aeabi_ddiv+0x208>
 8000f6a:	4650      	mov	r0, sl
 8000f6c:	f001 f830 	bl	8001fd0 <__clzsi2>
 8000f70:	3020      	adds	r0, #32
 8000f72:	e69a      	b.n	8000caa <__aeabi_ddiv+0x1de>
 8000f74:	42a6      	cmp	r6, r4
 8000f76:	d1e2      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f78:	45b8      	cmp	r8, r7
 8000f7a:	d9dc      	bls.n	8000f36 <__aeabi_ddiv+0x46a>
 8000f7c:	1a34      	subs	r4, r6, r0
 8000f7e:	469b      	mov	fp, r3
 8000f80:	e759      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f82:	2b1f      	cmp	r3, #31
 8000f84:	dc65      	bgt.n	8001052 <__aeabi_ddiv+0x586>
 8000f86:	4c50      	ldr	r4, [pc, #320]	; (80010c8 <__aeabi_ddiv+0x5fc>)
 8000f88:	9900      	ldr	r1, [sp, #0]
 8000f8a:	46a4      	mov	ip, r4
 8000f8c:	465c      	mov	r4, fp
 8000f8e:	4461      	add	r1, ip
 8000f90:	0008      	movs	r0, r1
 8000f92:	408c      	lsls	r4, r1
 8000f94:	0011      	movs	r1, r2
 8000f96:	4082      	lsls	r2, r0
 8000f98:	40d9      	lsrs	r1, r3
 8000f9a:	1e50      	subs	r0, r2, #1
 8000f9c:	4182      	sbcs	r2, r0
 8000f9e:	430c      	orrs	r4, r1
 8000fa0:	4314      	orrs	r4, r2
 8000fa2:	465a      	mov	r2, fp
 8000fa4:	40da      	lsrs	r2, r3
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	0762      	lsls	r2, r4, #29
 8000faa:	d009      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fac:	220f      	movs	r2, #15
 8000fae:	4022      	ands	r2, r4
 8000fb0:	2a04      	cmp	r2, #4
 8000fb2:	d005      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fb4:	0022      	movs	r2, r4
 8000fb6:	1d14      	adds	r4, r2, #4
 8000fb8:	4294      	cmp	r4, r2
 8000fba:	4189      	sbcs	r1, r1
 8000fbc:	4249      	negs	r1, r1
 8000fbe:	185b      	adds	r3, r3, r1
 8000fc0:	021a      	lsls	r2, r3, #8
 8000fc2:	d562      	bpl.n	800108a <__aeabi_ddiv+0x5be>
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2700      	movs	r7, #0
 8000fca:	e60d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000fcc:	428a      	cmp	r2, r1
 8000fce:	d800      	bhi.n	8000fd2 <__aeabi_ddiv+0x506>
 8000fd0:	e70a      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd2:	1e83      	subs	r3, r0, #2
 8000fd4:	1989      	adds	r1, r1, r6
 8000fd6:	e707      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd8:	230f      	movs	r3, #15
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_ddiv+0x516>
 8000fe0:	e5e6      	b.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000fe2:	1d17      	adds	r7, r2, #4
 8000fe4:	4297      	cmp	r7, r2
 8000fe6:	4192      	sbcs	r2, r2
 8000fe8:	4253      	negs	r3, r2
 8000fea:	449b      	add	fp, r3
 8000fec:	08fa      	lsrs	r2, r7, #3
 8000fee:	e5e0      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000ff4:	e5d7      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ff6:	1871      	adds	r1, r6, r1
 8000ff8:	1e53      	subs	r3, r2, #1
 8000ffa:	42b1      	cmp	r1, r6
 8000ffc:	d327      	bcc.n	800104e <__aeabi_ddiv+0x582>
 8000ffe:	42a9      	cmp	r1, r5
 8001000:	d315      	bcc.n	800102e <__aeabi_ddiv+0x562>
 8001002:	d058      	beq.n	80010b6 <__aeabi_ddiv+0x5ea>
 8001004:	001a      	movs	r2, r3
 8001006:	e773      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001008:	2b00      	cmp	r3, #0
 800100a:	dc00      	bgt.n	800100e <__aeabi_ddiv+0x542>
 800100c:	e604      	b.n	8000c18 <__aeabi_ddiv+0x14c>
 800100e:	2301      	movs	r3, #1
 8001010:	2200      	movs	r2, #0
 8001012:	449b      	add	fp, r3
 8001014:	e5cd      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8001016:	2302      	movs	r3, #2
 8001018:	4447      	add	r7, r8
 800101a:	4547      	cmp	r7, r8
 800101c:	4189      	sbcs	r1, r1
 800101e:	425b      	negs	r3, r3
 8001020:	469c      	mov	ip, r3
 8001022:	4249      	negs	r1, r1
 8001024:	1989      	adds	r1, r1, r6
 8001026:	190c      	adds	r4, r1, r4
 8001028:	44e3      	add	fp, ip
 800102a:	1a24      	subs	r4, r4, r0
 800102c:	e703      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 800102e:	4643      	mov	r3, r8
 8001030:	005f      	lsls	r7, r3, #1
 8001032:	4547      	cmp	r7, r8
 8001034:	419b      	sbcs	r3, r3
 8001036:	46b8      	mov	r8, r7
 8001038:	425b      	negs	r3, r3
 800103a:	199e      	adds	r6, r3, r6
 800103c:	3a02      	subs	r2, #2
 800103e:	1989      	adds	r1, r1, r6
 8001040:	42a9      	cmp	r1, r5
 8001042:	d000      	beq.n	8001046 <__aeabi_ddiv+0x57a>
 8001044:	e754      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001046:	4540      	cmp	r0, r8
 8001048:	d000      	beq.n	800104c <__aeabi_ddiv+0x580>
 800104a:	e751      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 800104c:	e5ab      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 800104e:	001a      	movs	r2, r3
 8001050:	e7f6      	b.n	8001040 <__aeabi_ddiv+0x574>
 8001052:	211f      	movs	r1, #31
 8001054:	465f      	mov	r7, fp
 8001056:	4249      	negs	r1, r1
 8001058:	1b0c      	subs	r4, r1, r4
 800105a:	40e7      	lsrs	r7, r4
 800105c:	2b20      	cmp	r3, #32
 800105e:	d007      	beq.n	8001070 <__aeabi_ddiv+0x5a4>
 8001060:	491a      	ldr	r1, [pc, #104]	; (80010cc <__aeabi_ddiv+0x600>)
 8001062:	9b00      	ldr	r3, [sp, #0]
 8001064:	468c      	mov	ip, r1
 8001066:	4463      	add	r3, ip
 8001068:	0018      	movs	r0, r3
 800106a:	465b      	mov	r3, fp
 800106c:	4083      	lsls	r3, r0
 800106e:	431a      	orrs	r2, r3
 8001070:	1e50      	subs	r0, r2, #1
 8001072:	4182      	sbcs	r2, r0
 8001074:	433a      	orrs	r2, r7
 8001076:	2707      	movs	r7, #7
 8001078:	2300      	movs	r3, #0
 800107a:	4017      	ands	r7, r2
 800107c:	d009      	beq.n	8001092 <__aeabi_ddiv+0x5c6>
 800107e:	210f      	movs	r1, #15
 8001080:	2300      	movs	r3, #0
 8001082:	4011      	ands	r1, r2
 8001084:	0014      	movs	r4, r2
 8001086:	2904      	cmp	r1, #4
 8001088:	d195      	bne.n	8000fb6 <__aeabi_ddiv+0x4ea>
 800108a:	0022      	movs	r2, r4
 800108c:	075f      	lsls	r7, r3, #29
 800108e:	025b      	lsls	r3, r3, #9
 8001090:	0b1b      	lsrs	r3, r3, #12
 8001092:	08d2      	lsrs	r2, r2, #3
 8001094:	4317      	orrs	r7, r2
 8001096:	2200      	movs	r2, #0
 8001098:	e5a6      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	4659      	mov	r1, fp
 800109e:	031b      	lsls	r3, r3, #12
 80010a0:	430b      	orrs	r3, r1
 80010a2:	031b      	lsls	r3, r3, #12
 80010a4:	0017      	movs	r7, r2
 80010a6:	0b1b      	lsrs	r3, r3, #12
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 80010aa:	e59d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 80010ac:	42bd      	cmp	r5, r7
 80010ae:	d8b2      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 80010b0:	469b      	mov	fp, r3
 80010b2:	2400      	movs	r4, #0
 80010b4:	e6bf      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 80010b6:	4580      	cmp	r8, r0
 80010b8:	d3b9      	bcc.n	800102e <__aeabi_ddiv+0x562>
 80010ba:	001a      	movs	r2, r3
 80010bc:	e7c3      	b.n	8001046 <__aeabi_ddiv+0x57a>
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	000003ff 	.word	0x000003ff
 80010c4:	000007ff 	.word	0x000007ff
 80010c8:	0000041e 	.word	0x0000041e
 80010cc:	0000043e 	.word	0x0000043e

080010d0 <__eqdf2>:
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d2:	464f      	mov	r7, r9
 80010d4:	4646      	mov	r6, r8
 80010d6:	46d6      	mov	lr, sl
 80010d8:	4684      	mov	ip, r0
 80010da:	b5c0      	push	{r6, r7, lr}
 80010dc:	4680      	mov	r8, r0
 80010de:	4e19      	ldr	r6, [pc, #100]	; (8001144 <__eqdf2+0x74>)
 80010e0:	0318      	lsls	r0, r3, #12
 80010e2:	030f      	lsls	r7, r1, #12
 80010e4:	004d      	lsls	r5, r1, #1
 80010e6:	0b00      	lsrs	r0, r0, #12
 80010e8:	005c      	lsls	r4, r3, #1
 80010ea:	4682      	mov	sl, r0
 80010ec:	0b3f      	lsrs	r7, r7, #12
 80010ee:	0d6d      	lsrs	r5, r5, #21
 80010f0:	0fc9      	lsrs	r1, r1, #31
 80010f2:	4691      	mov	r9, r2
 80010f4:	0d64      	lsrs	r4, r4, #21
 80010f6:	0fdb      	lsrs	r3, r3, #31
 80010f8:	2001      	movs	r0, #1
 80010fa:	42b5      	cmp	r5, r6
 80010fc:	d00a      	beq.n	8001114 <__eqdf2+0x44>
 80010fe:	42b4      	cmp	r4, r6
 8001100:	d003      	beq.n	800110a <__eqdf2+0x3a>
 8001102:	42a5      	cmp	r5, r4
 8001104:	d101      	bne.n	800110a <__eqdf2+0x3a>
 8001106:	4557      	cmp	r7, sl
 8001108:	d00c      	beq.n	8001124 <__eqdf2+0x54>
 800110a:	bc1c      	pop	{r2, r3, r4}
 800110c:	4690      	mov	r8, r2
 800110e:	4699      	mov	r9, r3
 8001110:	46a2      	mov	sl, r4
 8001112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001114:	4666      	mov	r6, ip
 8001116:	433e      	orrs	r6, r7
 8001118:	d1f7      	bne.n	800110a <__eqdf2+0x3a>
 800111a:	42ac      	cmp	r4, r5
 800111c:	d1f5      	bne.n	800110a <__eqdf2+0x3a>
 800111e:	4654      	mov	r4, sl
 8001120:	4314      	orrs	r4, r2
 8001122:	d1f2      	bne.n	800110a <__eqdf2+0x3a>
 8001124:	2001      	movs	r0, #1
 8001126:	45c8      	cmp	r8, r9
 8001128:	d1ef      	bne.n	800110a <__eqdf2+0x3a>
 800112a:	4299      	cmp	r1, r3
 800112c:	d007      	beq.n	800113e <__eqdf2+0x6e>
 800112e:	2d00      	cmp	r5, #0
 8001130:	d1eb      	bne.n	800110a <__eqdf2+0x3a>
 8001132:	4663      	mov	r3, ip
 8001134:	431f      	orrs	r7, r3
 8001136:	0038      	movs	r0, r7
 8001138:	1e47      	subs	r7, r0, #1
 800113a:	41b8      	sbcs	r0, r7
 800113c:	e7e5      	b.n	800110a <__eqdf2+0x3a>
 800113e:	2000      	movs	r0, #0
 8001140:	e7e3      	b.n	800110a <__eqdf2+0x3a>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	000007ff 	.word	0x000007ff

08001148 <__gedf2>:
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	464f      	mov	r7, r9
 800114c:	4646      	mov	r6, r8
 800114e:	46d6      	mov	lr, sl
 8001150:	004d      	lsls	r5, r1, #1
 8001152:	b5c0      	push	{r6, r7, lr}
 8001154:	030e      	lsls	r6, r1, #12
 8001156:	0fc9      	lsrs	r1, r1, #31
 8001158:	468a      	mov	sl, r1
 800115a:	492c      	ldr	r1, [pc, #176]	; (800120c <__gedf2+0xc4>)
 800115c:	031f      	lsls	r7, r3, #12
 800115e:	005c      	lsls	r4, r3, #1
 8001160:	4680      	mov	r8, r0
 8001162:	0b36      	lsrs	r6, r6, #12
 8001164:	0d6d      	lsrs	r5, r5, #21
 8001166:	4691      	mov	r9, r2
 8001168:	0b3f      	lsrs	r7, r7, #12
 800116a:	0d64      	lsrs	r4, r4, #21
 800116c:	0fdb      	lsrs	r3, r3, #31
 800116e:	428d      	cmp	r5, r1
 8001170:	d01e      	beq.n	80011b0 <__gedf2+0x68>
 8001172:	428c      	cmp	r4, r1
 8001174:	d016      	beq.n	80011a4 <__gedf2+0x5c>
 8001176:	2d00      	cmp	r5, #0
 8001178:	d11e      	bne.n	80011b8 <__gedf2+0x70>
 800117a:	4330      	orrs	r0, r6
 800117c:	4684      	mov	ip, r0
 800117e:	2c00      	cmp	r4, #0
 8001180:	d101      	bne.n	8001186 <__gedf2+0x3e>
 8001182:	433a      	orrs	r2, r7
 8001184:	d023      	beq.n	80011ce <__gedf2+0x86>
 8001186:	4662      	mov	r2, ip
 8001188:	2a00      	cmp	r2, #0
 800118a:	d01a      	beq.n	80011c2 <__gedf2+0x7a>
 800118c:	459a      	cmp	sl, r3
 800118e:	d029      	beq.n	80011e4 <__gedf2+0x9c>
 8001190:	4651      	mov	r1, sl
 8001192:	2002      	movs	r0, #2
 8001194:	3901      	subs	r1, #1
 8001196:	4008      	ands	r0, r1
 8001198:	3801      	subs	r0, #1
 800119a:	bc1c      	pop	{r2, r3, r4}
 800119c:	4690      	mov	r8, r2
 800119e:	4699      	mov	r9, r3
 80011a0:	46a2      	mov	sl, r4
 80011a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a4:	0039      	movs	r1, r7
 80011a6:	4311      	orrs	r1, r2
 80011a8:	d0e5      	beq.n	8001176 <__gedf2+0x2e>
 80011aa:	2002      	movs	r0, #2
 80011ac:	4240      	negs	r0, r0
 80011ae:	e7f4      	b.n	800119a <__gedf2+0x52>
 80011b0:	4330      	orrs	r0, r6
 80011b2:	d1fa      	bne.n	80011aa <__gedf2+0x62>
 80011b4:	42ac      	cmp	r4, r5
 80011b6:	d00f      	beq.n	80011d8 <__gedf2+0x90>
 80011b8:	2c00      	cmp	r4, #0
 80011ba:	d10f      	bne.n	80011dc <__gedf2+0x94>
 80011bc:	433a      	orrs	r2, r7
 80011be:	d0e7      	beq.n	8001190 <__gedf2+0x48>
 80011c0:	e00c      	b.n	80011dc <__gedf2+0x94>
 80011c2:	2201      	movs	r2, #1
 80011c4:	3b01      	subs	r3, #1
 80011c6:	4393      	bics	r3, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	3001      	adds	r0, #1
 80011cc:	e7e5      	b.n	800119a <__gedf2+0x52>
 80011ce:	4663      	mov	r3, ip
 80011d0:	2000      	movs	r0, #0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0e1      	beq.n	800119a <__gedf2+0x52>
 80011d6:	e7db      	b.n	8001190 <__gedf2+0x48>
 80011d8:	433a      	orrs	r2, r7
 80011da:	d1e6      	bne.n	80011aa <__gedf2+0x62>
 80011dc:	459a      	cmp	sl, r3
 80011de:	d1d7      	bne.n	8001190 <__gedf2+0x48>
 80011e0:	42a5      	cmp	r5, r4
 80011e2:	dcd5      	bgt.n	8001190 <__gedf2+0x48>
 80011e4:	42a5      	cmp	r5, r4
 80011e6:	db05      	blt.n	80011f4 <__gedf2+0xac>
 80011e8:	42be      	cmp	r6, r7
 80011ea:	d8d1      	bhi.n	8001190 <__gedf2+0x48>
 80011ec:	d008      	beq.n	8001200 <__gedf2+0xb8>
 80011ee:	2000      	movs	r0, #0
 80011f0:	42be      	cmp	r6, r7
 80011f2:	d2d2      	bcs.n	800119a <__gedf2+0x52>
 80011f4:	4650      	mov	r0, sl
 80011f6:	2301      	movs	r3, #1
 80011f8:	3801      	subs	r0, #1
 80011fa:	4398      	bics	r0, r3
 80011fc:	3001      	adds	r0, #1
 80011fe:	e7cc      	b.n	800119a <__gedf2+0x52>
 8001200:	45c8      	cmp	r8, r9
 8001202:	d8c5      	bhi.n	8001190 <__gedf2+0x48>
 8001204:	2000      	movs	r0, #0
 8001206:	45c8      	cmp	r8, r9
 8001208:	d3f4      	bcc.n	80011f4 <__gedf2+0xac>
 800120a:	e7c6      	b.n	800119a <__gedf2+0x52>
 800120c:	000007ff 	.word	0x000007ff

08001210 <__ledf2>:
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	464f      	mov	r7, r9
 8001214:	4646      	mov	r6, r8
 8001216:	46d6      	mov	lr, sl
 8001218:	004d      	lsls	r5, r1, #1
 800121a:	b5c0      	push	{r6, r7, lr}
 800121c:	030e      	lsls	r6, r1, #12
 800121e:	0fc9      	lsrs	r1, r1, #31
 8001220:	468a      	mov	sl, r1
 8001222:	492e      	ldr	r1, [pc, #184]	; (80012dc <__ledf2+0xcc>)
 8001224:	031f      	lsls	r7, r3, #12
 8001226:	005c      	lsls	r4, r3, #1
 8001228:	4680      	mov	r8, r0
 800122a:	0b36      	lsrs	r6, r6, #12
 800122c:	0d6d      	lsrs	r5, r5, #21
 800122e:	4691      	mov	r9, r2
 8001230:	0b3f      	lsrs	r7, r7, #12
 8001232:	0d64      	lsrs	r4, r4, #21
 8001234:	0fdb      	lsrs	r3, r3, #31
 8001236:	428d      	cmp	r5, r1
 8001238:	d018      	beq.n	800126c <__ledf2+0x5c>
 800123a:	428c      	cmp	r4, r1
 800123c:	d011      	beq.n	8001262 <__ledf2+0x52>
 800123e:	2d00      	cmp	r5, #0
 8001240:	d118      	bne.n	8001274 <__ledf2+0x64>
 8001242:	4330      	orrs	r0, r6
 8001244:	4684      	mov	ip, r0
 8001246:	2c00      	cmp	r4, #0
 8001248:	d11e      	bne.n	8001288 <__ledf2+0x78>
 800124a:	433a      	orrs	r2, r7
 800124c:	d11c      	bne.n	8001288 <__ledf2+0x78>
 800124e:	4663      	mov	r3, ip
 8001250:	2000      	movs	r0, #0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d030      	beq.n	80012b8 <__ledf2+0xa8>
 8001256:	4651      	mov	r1, sl
 8001258:	2002      	movs	r0, #2
 800125a:	3901      	subs	r1, #1
 800125c:	4008      	ands	r0, r1
 800125e:	3801      	subs	r0, #1
 8001260:	e02a      	b.n	80012b8 <__ledf2+0xa8>
 8001262:	0039      	movs	r1, r7
 8001264:	4311      	orrs	r1, r2
 8001266:	d0ea      	beq.n	800123e <__ledf2+0x2e>
 8001268:	2002      	movs	r0, #2
 800126a:	e025      	b.n	80012b8 <__ledf2+0xa8>
 800126c:	4330      	orrs	r0, r6
 800126e:	d1fb      	bne.n	8001268 <__ledf2+0x58>
 8001270:	42ac      	cmp	r4, r5
 8001272:	d026      	beq.n	80012c2 <__ledf2+0xb2>
 8001274:	2c00      	cmp	r4, #0
 8001276:	d126      	bne.n	80012c6 <__ledf2+0xb6>
 8001278:	433a      	orrs	r2, r7
 800127a:	d124      	bne.n	80012c6 <__ledf2+0xb6>
 800127c:	4651      	mov	r1, sl
 800127e:	2002      	movs	r0, #2
 8001280:	3901      	subs	r1, #1
 8001282:	4008      	ands	r0, r1
 8001284:	3801      	subs	r0, #1
 8001286:	e017      	b.n	80012b8 <__ledf2+0xa8>
 8001288:	4662      	mov	r2, ip
 800128a:	2a00      	cmp	r2, #0
 800128c:	d00f      	beq.n	80012ae <__ledf2+0x9e>
 800128e:	459a      	cmp	sl, r3
 8001290:	d1e1      	bne.n	8001256 <__ledf2+0x46>
 8001292:	42a5      	cmp	r5, r4
 8001294:	db05      	blt.n	80012a2 <__ledf2+0x92>
 8001296:	42be      	cmp	r6, r7
 8001298:	d8dd      	bhi.n	8001256 <__ledf2+0x46>
 800129a:	d019      	beq.n	80012d0 <__ledf2+0xc0>
 800129c:	2000      	movs	r0, #0
 800129e:	42be      	cmp	r6, r7
 80012a0:	d20a      	bcs.n	80012b8 <__ledf2+0xa8>
 80012a2:	4650      	mov	r0, sl
 80012a4:	2301      	movs	r3, #1
 80012a6:	3801      	subs	r0, #1
 80012a8:	4398      	bics	r0, r3
 80012aa:	3001      	adds	r0, #1
 80012ac:	e004      	b.n	80012b8 <__ledf2+0xa8>
 80012ae:	2201      	movs	r2, #1
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4393      	bics	r3, r2
 80012b4:	0018      	movs	r0, r3
 80012b6:	3001      	adds	r0, #1
 80012b8:	bc1c      	pop	{r2, r3, r4}
 80012ba:	4690      	mov	r8, r2
 80012bc:	4699      	mov	r9, r3
 80012be:	46a2      	mov	sl, r4
 80012c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c2:	433a      	orrs	r2, r7
 80012c4:	d1d0      	bne.n	8001268 <__ledf2+0x58>
 80012c6:	459a      	cmp	sl, r3
 80012c8:	d1c5      	bne.n	8001256 <__ledf2+0x46>
 80012ca:	42a5      	cmp	r5, r4
 80012cc:	dcc3      	bgt.n	8001256 <__ledf2+0x46>
 80012ce:	e7e0      	b.n	8001292 <__ledf2+0x82>
 80012d0:	45c8      	cmp	r8, r9
 80012d2:	d8c0      	bhi.n	8001256 <__ledf2+0x46>
 80012d4:	2000      	movs	r0, #0
 80012d6:	45c8      	cmp	r8, r9
 80012d8:	d3e3      	bcc.n	80012a2 <__ledf2+0x92>
 80012da:	e7ed      	b.n	80012b8 <__ledf2+0xa8>
 80012dc:	000007ff 	.word	0x000007ff

080012e0 <__aeabi_dmul>:
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	4657      	mov	r7, sl
 80012e4:	46de      	mov	lr, fp
 80012e6:	464e      	mov	r6, r9
 80012e8:	4645      	mov	r5, r8
 80012ea:	b5e0      	push	{r5, r6, r7, lr}
 80012ec:	4683      	mov	fp, r0
 80012ee:	0006      	movs	r6, r0
 80012f0:	030f      	lsls	r7, r1, #12
 80012f2:	0048      	lsls	r0, r1, #1
 80012f4:	b087      	sub	sp, #28
 80012f6:	4692      	mov	sl, r2
 80012f8:	001d      	movs	r5, r3
 80012fa:	0b3f      	lsrs	r7, r7, #12
 80012fc:	0d40      	lsrs	r0, r0, #21
 80012fe:	0fcc      	lsrs	r4, r1, #31
 8001300:	2800      	cmp	r0, #0
 8001302:	d100      	bne.n	8001306 <__aeabi_dmul+0x26>
 8001304:	e06f      	b.n	80013e6 <__aeabi_dmul+0x106>
 8001306:	4bde      	ldr	r3, [pc, #888]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001308:	4298      	cmp	r0, r3
 800130a:	d038      	beq.n	800137e <__aeabi_dmul+0x9e>
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	00ff      	lsls	r7, r7, #3
 8001310:	041b      	lsls	r3, r3, #16
 8001312:	431f      	orrs	r7, r3
 8001314:	0f73      	lsrs	r3, r6, #29
 8001316:	433b      	orrs	r3, r7
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	4bda      	ldr	r3, [pc, #872]	; (8001684 <__aeabi_dmul+0x3a4>)
 800131c:	2700      	movs	r7, #0
 800131e:	4699      	mov	r9, r3
 8001320:	2300      	movs	r3, #0
 8001322:	469b      	mov	fp, r3
 8001324:	00f6      	lsls	r6, r6, #3
 8001326:	4481      	add	r9, r0
 8001328:	032b      	lsls	r3, r5, #12
 800132a:	0069      	lsls	r1, r5, #1
 800132c:	0b1b      	lsrs	r3, r3, #12
 800132e:	4652      	mov	r2, sl
 8001330:	4698      	mov	r8, r3
 8001332:	0d49      	lsrs	r1, r1, #21
 8001334:	0fed      	lsrs	r5, r5, #31
 8001336:	2900      	cmp	r1, #0
 8001338:	d100      	bne.n	800133c <__aeabi_dmul+0x5c>
 800133a:	e085      	b.n	8001448 <__aeabi_dmul+0x168>
 800133c:	4bd0      	ldr	r3, [pc, #832]	; (8001680 <__aeabi_dmul+0x3a0>)
 800133e:	4299      	cmp	r1, r3
 8001340:	d100      	bne.n	8001344 <__aeabi_dmul+0x64>
 8001342:	e073      	b.n	800142c <__aeabi_dmul+0x14c>
 8001344:	4643      	mov	r3, r8
 8001346:	00da      	lsls	r2, r3, #3
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	4313      	orrs	r3, r2
 800134e:	4652      	mov	r2, sl
 8001350:	48cc      	ldr	r0, [pc, #816]	; (8001684 <__aeabi_dmul+0x3a4>)
 8001352:	0f52      	lsrs	r2, r2, #29
 8001354:	4684      	mov	ip, r0
 8001356:	4313      	orrs	r3, r2
 8001358:	4652      	mov	r2, sl
 800135a:	2000      	movs	r0, #0
 800135c:	4461      	add	r1, ip
 800135e:	00d2      	lsls	r2, r2, #3
 8001360:	4489      	add	r9, r1
 8001362:	0021      	movs	r1, r4
 8001364:	4069      	eors	r1, r5
 8001366:	9100      	str	r1, [sp, #0]
 8001368:	468c      	mov	ip, r1
 800136a:	2101      	movs	r1, #1
 800136c:	4449      	add	r1, r9
 800136e:	468a      	mov	sl, r1
 8001370:	2f0f      	cmp	r7, #15
 8001372:	d900      	bls.n	8001376 <__aeabi_dmul+0x96>
 8001374:	e090      	b.n	8001498 <__aeabi_dmul+0x1b8>
 8001376:	49c4      	ldr	r1, [pc, #784]	; (8001688 <__aeabi_dmul+0x3a8>)
 8001378:	00bf      	lsls	r7, r7, #2
 800137a:	59cf      	ldr	r7, [r1, r7]
 800137c:	46bf      	mov	pc, r7
 800137e:	465b      	mov	r3, fp
 8001380:	433b      	orrs	r3, r7
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	d000      	beq.n	8001388 <__aeabi_dmul+0xa8>
 8001386:	e16a      	b.n	800165e <__aeabi_dmul+0x37e>
 8001388:	2302      	movs	r3, #2
 800138a:	2708      	movs	r7, #8
 800138c:	2600      	movs	r6, #0
 800138e:	4681      	mov	r9, r0
 8001390:	469b      	mov	fp, r3
 8001392:	e7c9      	b.n	8001328 <__aeabi_dmul+0x48>
 8001394:	0032      	movs	r2, r6
 8001396:	4658      	mov	r0, fp
 8001398:	9b01      	ldr	r3, [sp, #4]
 800139a:	4661      	mov	r1, ip
 800139c:	9100      	str	r1, [sp, #0]
 800139e:	2802      	cmp	r0, #2
 80013a0:	d100      	bne.n	80013a4 <__aeabi_dmul+0xc4>
 80013a2:	e075      	b.n	8001490 <__aeabi_dmul+0x1b0>
 80013a4:	2803      	cmp	r0, #3
 80013a6:	d100      	bne.n	80013aa <__aeabi_dmul+0xca>
 80013a8:	e1fe      	b.n	80017a8 <__aeabi_dmul+0x4c8>
 80013aa:	2801      	cmp	r0, #1
 80013ac:	d000      	beq.n	80013b0 <__aeabi_dmul+0xd0>
 80013ae:	e12c      	b.n	800160a <__aeabi_dmul+0x32a>
 80013b0:	2300      	movs	r3, #0
 80013b2:	2700      	movs	r7, #0
 80013b4:	2600      	movs	r6, #0
 80013b6:	2500      	movs	r5, #0
 80013b8:	033f      	lsls	r7, r7, #12
 80013ba:	0d2a      	lsrs	r2, r5, #20
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	48b3      	ldr	r0, [pc, #716]	; (800168c <__aeabi_dmul+0x3ac>)
 80013c0:	0512      	lsls	r2, r2, #20
 80013c2:	433a      	orrs	r2, r7
 80013c4:	4002      	ands	r2, r0
 80013c6:	051b      	lsls	r3, r3, #20
 80013c8:	4313      	orrs	r3, r2
 80013ca:	9a00      	ldr	r2, [sp, #0]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	07d1      	lsls	r1, r2, #31
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	430b      	orrs	r3, r1
 80013d4:	0030      	movs	r0, r6
 80013d6:	0019      	movs	r1, r3
 80013d8:	b007      	add	sp, #28
 80013da:	bc3c      	pop	{r2, r3, r4, r5}
 80013dc:	4690      	mov	r8, r2
 80013de:	4699      	mov	r9, r3
 80013e0:	46a2      	mov	sl, r4
 80013e2:	46ab      	mov	fp, r5
 80013e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e6:	465b      	mov	r3, fp
 80013e8:	433b      	orrs	r3, r7
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dmul+0x110>
 80013ee:	e12f      	b.n	8001650 <__aeabi_dmul+0x370>
 80013f0:	2f00      	cmp	r7, #0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dmul+0x116>
 80013f4:	e1a5      	b.n	8001742 <__aeabi_dmul+0x462>
 80013f6:	0038      	movs	r0, r7
 80013f8:	f000 fdea 	bl	8001fd0 <__clzsi2>
 80013fc:	0003      	movs	r3, r0
 80013fe:	3b0b      	subs	r3, #11
 8001400:	2b1c      	cmp	r3, #28
 8001402:	dd00      	ble.n	8001406 <__aeabi_dmul+0x126>
 8001404:	e196      	b.n	8001734 <__aeabi_dmul+0x454>
 8001406:	221d      	movs	r2, #29
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	465a      	mov	r2, fp
 800140c:	0001      	movs	r1, r0
 800140e:	40da      	lsrs	r2, r3
 8001410:	465e      	mov	r6, fp
 8001412:	3908      	subs	r1, #8
 8001414:	408f      	lsls	r7, r1
 8001416:	0013      	movs	r3, r2
 8001418:	408e      	lsls	r6, r1
 800141a:	433b      	orrs	r3, r7
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	4b9c      	ldr	r3, [pc, #624]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001420:	2700      	movs	r7, #0
 8001422:	1a1b      	subs	r3, r3, r0
 8001424:	4699      	mov	r9, r3
 8001426:	2300      	movs	r3, #0
 8001428:	469b      	mov	fp, r3
 800142a:	e77d      	b.n	8001328 <__aeabi_dmul+0x48>
 800142c:	4641      	mov	r1, r8
 800142e:	4653      	mov	r3, sl
 8001430:	430b      	orrs	r3, r1
 8001432:	4993      	ldr	r1, [pc, #588]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001434:	468c      	mov	ip, r1
 8001436:	44e1      	add	r9, ip
 8001438:	2b00      	cmp	r3, #0
 800143a:	d000      	beq.n	800143e <__aeabi_dmul+0x15e>
 800143c:	e11a      	b.n	8001674 <__aeabi_dmul+0x394>
 800143e:	2202      	movs	r2, #2
 8001440:	2002      	movs	r0, #2
 8001442:	4317      	orrs	r7, r2
 8001444:	2200      	movs	r2, #0
 8001446:	e78c      	b.n	8001362 <__aeabi_dmul+0x82>
 8001448:	4313      	orrs	r3, r2
 800144a:	d100      	bne.n	800144e <__aeabi_dmul+0x16e>
 800144c:	e10d      	b.n	800166a <__aeabi_dmul+0x38a>
 800144e:	4643      	mov	r3, r8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x176>
 8001454:	e181      	b.n	800175a <__aeabi_dmul+0x47a>
 8001456:	4640      	mov	r0, r8
 8001458:	f000 fdba 	bl	8001fd0 <__clzsi2>
 800145c:	0002      	movs	r2, r0
 800145e:	3a0b      	subs	r2, #11
 8001460:	2a1c      	cmp	r2, #28
 8001462:	dd00      	ble.n	8001466 <__aeabi_dmul+0x186>
 8001464:	e172      	b.n	800174c <__aeabi_dmul+0x46c>
 8001466:	0001      	movs	r1, r0
 8001468:	4643      	mov	r3, r8
 800146a:	3908      	subs	r1, #8
 800146c:	408b      	lsls	r3, r1
 800146e:	4698      	mov	r8, r3
 8001470:	231d      	movs	r3, #29
 8001472:	1a9a      	subs	r2, r3, r2
 8001474:	4653      	mov	r3, sl
 8001476:	40d3      	lsrs	r3, r2
 8001478:	001a      	movs	r2, r3
 800147a:	4643      	mov	r3, r8
 800147c:	4313      	orrs	r3, r2
 800147e:	4652      	mov	r2, sl
 8001480:	408a      	lsls	r2, r1
 8001482:	4649      	mov	r1, r9
 8001484:	1a08      	subs	r0, r1, r0
 8001486:	4982      	ldr	r1, [pc, #520]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001488:	4689      	mov	r9, r1
 800148a:	4481      	add	r9, r0
 800148c:	2000      	movs	r0, #0
 800148e:	e768      	b.n	8001362 <__aeabi_dmul+0x82>
 8001490:	4b7b      	ldr	r3, [pc, #492]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001492:	2700      	movs	r7, #0
 8001494:	2600      	movs	r6, #0
 8001496:	e78e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001498:	0c14      	lsrs	r4, r2, #16
 800149a:	0412      	lsls	r2, r2, #16
 800149c:	0c12      	lsrs	r2, r2, #16
 800149e:	0011      	movs	r1, r2
 80014a0:	0c37      	lsrs	r7, r6, #16
 80014a2:	0436      	lsls	r6, r6, #16
 80014a4:	0c35      	lsrs	r5, r6, #16
 80014a6:	4379      	muls	r1, r7
 80014a8:	0028      	movs	r0, r5
 80014aa:	468c      	mov	ip, r1
 80014ac:	002e      	movs	r6, r5
 80014ae:	4360      	muls	r0, r4
 80014b0:	4460      	add	r0, ip
 80014b2:	4683      	mov	fp, r0
 80014b4:	4356      	muls	r6, r2
 80014b6:	0021      	movs	r1, r4
 80014b8:	0c30      	lsrs	r0, r6, #16
 80014ba:	4680      	mov	r8, r0
 80014bc:	4658      	mov	r0, fp
 80014be:	4379      	muls	r1, r7
 80014c0:	4440      	add	r0, r8
 80014c2:	9102      	str	r1, [sp, #8]
 80014c4:	4584      	cmp	ip, r0
 80014c6:	d906      	bls.n	80014d6 <__aeabi_dmul+0x1f6>
 80014c8:	4688      	mov	r8, r1
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	0249      	lsls	r1, r1, #9
 80014ce:	468c      	mov	ip, r1
 80014d0:	44e0      	add	r8, ip
 80014d2:	4641      	mov	r1, r8
 80014d4:	9102      	str	r1, [sp, #8]
 80014d6:	0436      	lsls	r6, r6, #16
 80014d8:	0c01      	lsrs	r1, r0, #16
 80014da:	0c36      	lsrs	r6, r6, #16
 80014dc:	0400      	lsls	r0, r0, #16
 80014de:	468b      	mov	fp, r1
 80014e0:	1981      	adds	r1, r0, r6
 80014e2:	0c1e      	lsrs	r6, r3, #16
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	9103      	str	r1, [sp, #12]
 80014ea:	0019      	movs	r1, r3
 80014ec:	4379      	muls	r1, r7
 80014ee:	468c      	mov	ip, r1
 80014f0:	0028      	movs	r0, r5
 80014f2:	4375      	muls	r5, r6
 80014f4:	4465      	add	r5, ip
 80014f6:	46a8      	mov	r8, r5
 80014f8:	4358      	muls	r0, r3
 80014fa:	0c05      	lsrs	r5, r0, #16
 80014fc:	4445      	add	r5, r8
 80014fe:	4377      	muls	r7, r6
 8001500:	42a9      	cmp	r1, r5
 8001502:	d903      	bls.n	800150c <__aeabi_dmul+0x22c>
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0249      	lsls	r1, r1, #9
 8001508:	468c      	mov	ip, r1
 800150a:	4467      	add	r7, ip
 800150c:	0c29      	lsrs	r1, r5, #16
 800150e:	468c      	mov	ip, r1
 8001510:	0039      	movs	r1, r7
 8001512:	0400      	lsls	r0, r0, #16
 8001514:	0c00      	lsrs	r0, r0, #16
 8001516:	042d      	lsls	r5, r5, #16
 8001518:	182d      	adds	r5, r5, r0
 800151a:	4461      	add	r1, ip
 800151c:	44ab      	add	fp, r5
 800151e:	9105      	str	r1, [sp, #20]
 8001520:	4659      	mov	r1, fp
 8001522:	9104      	str	r1, [sp, #16]
 8001524:	9901      	ldr	r1, [sp, #4]
 8001526:	040f      	lsls	r7, r1, #16
 8001528:	0c3f      	lsrs	r7, r7, #16
 800152a:	0c08      	lsrs	r0, r1, #16
 800152c:	0039      	movs	r1, r7
 800152e:	4351      	muls	r1, r2
 8001530:	4342      	muls	r2, r0
 8001532:	4690      	mov	r8, r2
 8001534:	0002      	movs	r2, r0
 8001536:	468c      	mov	ip, r1
 8001538:	0c09      	lsrs	r1, r1, #16
 800153a:	468b      	mov	fp, r1
 800153c:	4362      	muls	r2, r4
 800153e:	437c      	muls	r4, r7
 8001540:	4444      	add	r4, r8
 8001542:	445c      	add	r4, fp
 8001544:	45a0      	cmp	r8, r4
 8001546:	d903      	bls.n	8001550 <__aeabi_dmul+0x270>
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	0249      	lsls	r1, r1, #9
 800154c:	4688      	mov	r8, r1
 800154e:	4442      	add	r2, r8
 8001550:	0c21      	lsrs	r1, r4, #16
 8001552:	4688      	mov	r8, r1
 8001554:	4661      	mov	r1, ip
 8001556:	0409      	lsls	r1, r1, #16
 8001558:	0c09      	lsrs	r1, r1, #16
 800155a:	468c      	mov	ip, r1
 800155c:	0039      	movs	r1, r7
 800155e:	4359      	muls	r1, r3
 8001560:	4343      	muls	r3, r0
 8001562:	4370      	muls	r0, r6
 8001564:	437e      	muls	r6, r7
 8001566:	0c0f      	lsrs	r7, r1, #16
 8001568:	18f6      	adds	r6, r6, r3
 800156a:	0424      	lsls	r4, r4, #16
 800156c:	19be      	adds	r6, r7, r6
 800156e:	4464      	add	r4, ip
 8001570:	4442      	add	r2, r8
 8001572:	468c      	mov	ip, r1
 8001574:	42b3      	cmp	r3, r6
 8001576:	d903      	bls.n	8001580 <__aeabi_dmul+0x2a0>
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	4698      	mov	r8, r3
 800157e:	4440      	add	r0, r8
 8001580:	9b02      	ldr	r3, [sp, #8]
 8001582:	4661      	mov	r1, ip
 8001584:	4698      	mov	r8, r3
 8001586:	9b04      	ldr	r3, [sp, #16]
 8001588:	0437      	lsls	r7, r6, #16
 800158a:	4443      	add	r3, r8
 800158c:	469b      	mov	fp, r3
 800158e:	45ab      	cmp	fp, r5
 8001590:	41ad      	sbcs	r5, r5
 8001592:	426b      	negs	r3, r5
 8001594:	040d      	lsls	r5, r1, #16
 8001596:	9905      	ldr	r1, [sp, #20]
 8001598:	0c2d      	lsrs	r5, r5, #16
 800159a:	468c      	mov	ip, r1
 800159c:	197f      	adds	r7, r7, r5
 800159e:	4467      	add	r7, ip
 80015a0:	18fd      	adds	r5, r7, r3
 80015a2:	46a8      	mov	r8, r5
 80015a4:	465d      	mov	r5, fp
 80015a6:	192d      	adds	r5, r5, r4
 80015a8:	42a5      	cmp	r5, r4
 80015aa:	41a4      	sbcs	r4, r4
 80015ac:	4693      	mov	fp, r2
 80015ae:	4264      	negs	r4, r4
 80015b0:	46a4      	mov	ip, r4
 80015b2:	44c3      	add	fp, r8
 80015b4:	44dc      	add	ip, fp
 80015b6:	428f      	cmp	r7, r1
 80015b8:	41bf      	sbcs	r7, r7
 80015ba:	4598      	cmp	r8, r3
 80015bc:	419b      	sbcs	r3, r3
 80015be:	4593      	cmp	fp, r2
 80015c0:	4192      	sbcs	r2, r2
 80015c2:	45a4      	cmp	ip, r4
 80015c4:	41a4      	sbcs	r4, r4
 80015c6:	425b      	negs	r3, r3
 80015c8:	427f      	negs	r7, r7
 80015ca:	431f      	orrs	r7, r3
 80015cc:	0c36      	lsrs	r6, r6, #16
 80015ce:	4252      	negs	r2, r2
 80015d0:	4264      	negs	r4, r4
 80015d2:	19bf      	adds	r7, r7, r6
 80015d4:	4322      	orrs	r2, r4
 80015d6:	18bf      	adds	r7, r7, r2
 80015d8:	4662      	mov	r2, ip
 80015da:	1838      	adds	r0, r7, r0
 80015dc:	0243      	lsls	r3, r0, #9
 80015de:	0dd2      	lsrs	r2, r2, #23
 80015e0:	9903      	ldr	r1, [sp, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	026a      	lsls	r2, r5, #9
 80015e6:	430a      	orrs	r2, r1
 80015e8:	1e50      	subs	r0, r2, #1
 80015ea:	4182      	sbcs	r2, r0
 80015ec:	4661      	mov	r1, ip
 80015ee:	0ded      	lsrs	r5, r5, #23
 80015f0:	432a      	orrs	r2, r5
 80015f2:	024e      	lsls	r6, r1, #9
 80015f4:	4332      	orrs	r2, r6
 80015f6:	01d9      	lsls	r1, r3, #7
 80015f8:	d400      	bmi.n	80015fc <__aeabi_dmul+0x31c>
 80015fa:	e0b3      	b.n	8001764 <__aeabi_dmul+0x484>
 80015fc:	2601      	movs	r6, #1
 80015fe:	0850      	lsrs	r0, r2, #1
 8001600:	4032      	ands	r2, r6
 8001602:	4302      	orrs	r2, r0
 8001604:	07de      	lsls	r6, r3, #31
 8001606:	4332      	orrs	r2, r6
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	4c22      	ldr	r4, [pc, #136]	; (8001694 <__aeabi_dmul+0x3b4>)
 800160c:	4454      	add	r4, sl
 800160e:	2c00      	cmp	r4, #0
 8001610:	dd62      	ble.n	80016d8 <__aeabi_dmul+0x3f8>
 8001612:	0751      	lsls	r1, r2, #29
 8001614:	d009      	beq.n	800162a <__aeabi_dmul+0x34a>
 8001616:	200f      	movs	r0, #15
 8001618:	4010      	ands	r0, r2
 800161a:	2804      	cmp	r0, #4
 800161c:	d005      	beq.n	800162a <__aeabi_dmul+0x34a>
 800161e:	1d10      	adds	r0, r2, #4
 8001620:	4290      	cmp	r0, r2
 8001622:	4192      	sbcs	r2, r2
 8001624:	4252      	negs	r2, r2
 8001626:	189b      	adds	r3, r3, r2
 8001628:	0002      	movs	r2, r0
 800162a:	01d9      	lsls	r1, r3, #7
 800162c:	d504      	bpl.n	8001638 <__aeabi_dmul+0x358>
 800162e:	2480      	movs	r4, #128	; 0x80
 8001630:	4819      	ldr	r0, [pc, #100]	; (8001698 <__aeabi_dmul+0x3b8>)
 8001632:	00e4      	lsls	r4, r4, #3
 8001634:	4003      	ands	r3, r0
 8001636:	4454      	add	r4, sl
 8001638:	4818      	ldr	r0, [pc, #96]	; (800169c <__aeabi_dmul+0x3bc>)
 800163a:	4284      	cmp	r4, r0
 800163c:	dd00      	ble.n	8001640 <__aeabi_dmul+0x360>
 800163e:	e727      	b.n	8001490 <__aeabi_dmul+0x1b0>
 8001640:	075e      	lsls	r6, r3, #29
 8001642:	025b      	lsls	r3, r3, #9
 8001644:	08d2      	lsrs	r2, r2, #3
 8001646:	0b1f      	lsrs	r7, r3, #12
 8001648:	0563      	lsls	r3, r4, #21
 800164a:	4316      	orrs	r6, r2
 800164c:	0d5b      	lsrs	r3, r3, #21
 800164e:	e6b2      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001650:	2300      	movs	r3, #0
 8001652:	4699      	mov	r9, r3
 8001654:	3301      	adds	r3, #1
 8001656:	2704      	movs	r7, #4
 8001658:	2600      	movs	r6, #0
 800165a:	469b      	mov	fp, r3
 800165c:	e664      	b.n	8001328 <__aeabi_dmul+0x48>
 800165e:	2303      	movs	r3, #3
 8001660:	9701      	str	r7, [sp, #4]
 8001662:	4681      	mov	r9, r0
 8001664:	270c      	movs	r7, #12
 8001666:	469b      	mov	fp, r3
 8001668:	e65e      	b.n	8001328 <__aeabi_dmul+0x48>
 800166a:	2201      	movs	r2, #1
 800166c:	2001      	movs	r0, #1
 800166e:	4317      	orrs	r7, r2
 8001670:	2200      	movs	r2, #0
 8001672:	e676      	b.n	8001362 <__aeabi_dmul+0x82>
 8001674:	2303      	movs	r3, #3
 8001676:	2003      	movs	r0, #3
 8001678:	431f      	orrs	r7, r3
 800167a:	4643      	mov	r3, r8
 800167c:	e671      	b.n	8001362 <__aeabi_dmul+0x82>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	000007ff 	.word	0x000007ff
 8001684:	fffffc01 	.word	0xfffffc01
 8001688:	0800ba24 	.word	0x0800ba24
 800168c:	800fffff 	.word	0x800fffff
 8001690:	fffffc0d 	.word	0xfffffc0d
 8001694:	000003ff 	.word	0x000003ff
 8001698:	feffffff 	.word	0xfeffffff
 800169c:	000007fe 	.word	0x000007fe
 80016a0:	2300      	movs	r3, #0
 80016a2:	2780      	movs	r7, #128	; 0x80
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	033f      	lsls	r7, r7, #12
 80016a8:	2600      	movs	r6, #0
 80016aa:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016ac:	e683      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016ae:	9b01      	ldr	r3, [sp, #4]
 80016b0:	0032      	movs	r2, r6
 80016b2:	46a4      	mov	ip, r4
 80016b4:	4658      	mov	r0, fp
 80016b6:	e670      	b.n	800139a <__aeabi_dmul+0xba>
 80016b8:	46ac      	mov	ip, r5
 80016ba:	e66e      	b.n	800139a <__aeabi_dmul+0xba>
 80016bc:	2780      	movs	r7, #128	; 0x80
 80016be:	9901      	ldr	r1, [sp, #4]
 80016c0:	033f      	lsls	r7, r7, #12
 80016c2:	4239      	tst	r1, r7
 80016c4:	d02d      	beq.n	8001722 <__aeabi_dmul+0x442>
 80016c6:	423b      	tst	r3, r7
 80016c8:	d12b      	bne.n	8001722 <__aeabi_dmul+0x442>
 80016ca:	431f      	orrs	r7, r3
 80016cc:	033f      	lsls	r7, r7, #12
 80016ce:	0b3f      	lsrs	r7, r7, #12
 80016d0:	9500      	str	r5, [sp, #0]
 80016d2:	0016      	movs	r6, r2
 80016d4:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016d6:	e66e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016d8:	2501      	movs	r5, #1
 80016da:	1b2d      	subs	r5, r5, r4
 80016dc:	2d38      	cmp	r5, #56	; 0x38
 80016de:	dd00      	ble.n	80016e2 <__aeabi_dmul+0x402>
 80016e0:	e666      	b.n	80013b0 <__aeabi_dmul+0xd0>
 80016e2:	2d1f      	cmp	r5, #31
 80016e4:	dc40      	bgt.n	8001768 <__aeabi_dmul+0x488>
 80016e6:	4835      	ldr	r0, [pc, #212]	; (80017bc <__aeabi_dmul+0x4dc>)
 80016e8:	001c      	movs	r4, r3
 80016ea:	4450      	add	r0, sl
 80016ec:	0016      	movs	r6, r2
 80016ee:	4082      	lsls	r2, r0
 80016f0:	4084      	lsls	r4, r0
 80016f2:	40ee      	lsrs	r6, r5
 80016f4:	1e50      	subs	r0, r2, #1
 80016f6:	4182      	sbcs	r2, r0
 80016f8:	4334      	orrs	r4, r6
 80016fa:	4314      	orrs	r4, r2
 80016fc:	40eb      	lsrs	r3, r5
 80016fe:	0762      	lsls	r2, r4, #29
 8001700:	d009      	beq.n	8001716 <__aeabi_dmul+0x436>
 8001702:	220f      	movs	r2, #15
 8001704:	4022      	ands	r2, r4
 8001706:	2a04      	cmp	r2, #4
 8001708:	d005      	beq.n	8001716 <__aeabi_dmul+0x436>
 800170a:	0022      	movs	r2, r4
 800170c:	1d14      	adds	r4, r2, #4
 800170e:	4294      	cmp	r4, r2
 8001710:	4180      	sbcs	r0, r0
 8001712:	4240      	negs	r0, r0
 8001714:	181b      	adds	r3, r3, r0
 8001716:	021a      	lsls	r2, r3, #8
 8001718:	d53e      	bpl.n	8001798 <__aeabi_dmul+0x4b8>
 800171a:	2301      	movs	r3, #1
 800171c:	2700      	movs	r7, #0
 800171e:	2600      	movs	r6, #0
 8001720:	e649      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001722:	2780      	movs	r7, #128	; 0x80
 8001724:	9b01      	ldr	r3, [sp, #4]
 8001726:	033f      	lsls	r7, r7, #12
 8001728:	431f      	orrs	r7, r3
 800172a:	033f      	lsls	r7, r7, #12
 800172c:	0b3f      	lsrs	r7, r7, #12
 800172e:	9400      	str	r4, [sp, #0]
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <__aeabi_dmul+0x4d8>)
 8001732:	e640      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001734:	0003      	movs	r3, r0
 8001736:	465a      	mov	r2, fp
 8001738:	3b28      	subs	r3, #40	; 0x28
 800173a:	409a      	lsls	r2, r3
 800173c:	2600      	movs	r6, #0
 800173e:	9201      	str	r2, [sp, #4]
 8001740:	e66d      	b.n	800141e <__aeabi_dmul+0x13e>
 8001742:	4658      	mov	r0, fp
 8001744:	f000 fc44 	bl	8001fd0 <__clzsi2>
 8001748:	3020      	adds	r0, #32
 800174a:	e657      	b.n	80013fc <__aeabi_dmul+0x11c>
 800174c:	0003      	movs	r3, r0
 800174e:	4652      	mov	r2, sl
 8001750:	3b28      	subs	r3, #40	; 0x28
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	2200      	movs	r2, #0
 8001758:	e693      	b.n	8001482 <__aeabi_dmul+0x1a2>
 800175a:	4650      	mov	r0, sl
 800175c:	f000 fc38 	bl	8001fd0 <__clzsi2>
 8001760:	3020      	adds	r0, #32
 8001762:	e67b      	b.n	800145c <__aeabi_dmul+0x17c>
 8001764:	46ca      	mov	sl, r9
 8001766:	e750      	b.n	800160a <__aeabi_dmul+0x32a>
 8001768:	201f      	movs	r0, #31
 800176a:	001e      	movs	r6, r3
 800176c:	4240      	negs	r0, r0
 800176e:	1b04      	subs	r4, r0, r4
 8001770:	40e6      	lsrs	r6, r4
 8001772:	2d20      	cmp	r5, #32
 8001774:	d003      	beq.n	800177e <__aeabi_dmul+0x49e>
 8001776:	4c12      	ldr	r4, [pc, #72]	; (80017c0 <__aeabi_dmul+0x4e0>)
 8001778:	4454      	add	r4, sl
 800177a:	40a3      	lsls	r3, r4
 800177c:	431a      	orrs	r2, r3
 800177e:	1e50      	subs	r0, r2, #1
 8001780:	4182      	sbcs	r2, r0
 8001782:	4332      	orrs	r2, r6
 8001784:	2607      	movs	r6, #7
 8001786:	2700      	movs	r7, #0
 8001788:	4016      	ands	r6, r2
 800178a:	d009      	beq.n	80017a0 <__aeabi_dmul+0x4c0>
 800178c:	200f      	movs	r0, #15
 800178e:	2300      	movs	r3, #0
 8001790:	4010      	ands	r0, r2
 8001792:	0014      	movs	r4, r2
 8001794:	2804      	cmp	r0, #4
 8001796:	d1b9      	bne.n	800170c <__aeabi_dmul+0x42c>
 8001798:	0022      	movs	r2, r4
 800179a:	075e      	lsls	r6, r3, #29
 800179c:	025b      	lsls	r3, r3, #9
 800179e:	0b1f      	lsrs	r7, r3, #12
 80017a0:	08d2      	lsrs	r2, r2, #3
 80017a2:	4316      	orrs	r6, r2
 80017a4:	2300      	movs	r3, #0
 80017a6:	e606      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017a8:	2780      	movs	r7, #128	; 0x80
 80017aa:	033f      	lsls	r7, r7, #12
 80017ac:	431f      	orrs	r7, r3
 80017ae:	033f      	lsls	r7, r7, #12
 80017b0:	0b3f      	lsrs	r7, r7, #12
 80017b2:	0016      	movs	r6, r2
 80017b4:	4b00      	ldr	r3, [pc, #0]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80017b6:	e5fe      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017b8:	000007ff 	.word	0x000007ff
 80017bc:	0000041e 	.word	0x0000041e
 80017c0:	0000043e 	.word	0x0000043e

080017c4 <__aeabi_dsub>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	4657      	mov	r7, sl
 80017c8:	464e      	mov	r6, r9
 80017ca:	4645      	mov	r5, r8
 80017cc:	46de      	mov	lr, fp
 80017ce:	000c      	movs	r4, r1
 80017d0:	0309      	lsls	r1, r1, #12
 80017d2:	b5e0      	push	{r5, r6, r7, lr}
 80017d4:	0a49      	lsrs	r1, r1, #9
 80017d6:	0f46      	lsrs	r6, r0, #29
 80017d8:	005f      	lsls	r7, r3, #1
 80017da:	4331      	orrs	r1, r6
 80017dc:	031e      	lsls	r6, r3, #12
 80017de:	0fdb      	lsrs	r3, r3, #31
 80017e0:	0a76      	lsrs	r6, r6, #9
 80017e2:	469b      	mov	fp, r3
 80017e4:	0f53      	lsrs	r3, r2, #29
 80017e6:	4333      	orrs	r3, r6
 80017e8:	4ec8      	ldr	r6, [pc, #800]	; (8001b0c <__aeabi_dsub+0x348>)
 80017ea:	0065      	lsls	r5, r4, #1
 80017ec:	00c0      	lsls	r0, r0, #3
 80017ee:	0fe4      	lsrs	r4, r4, #31
 80017f0:	00d2      	lsls	r2, r2, #3
 80017f2:	0d6d      	lsrs	r5, r5, #21
 80017f4:	46a2      	mov	sl, r4
 80017f6:	4681      	mov	r9, r0
 80017f8:	0d7f      	lsrs	r7, r7, #21
 80017fa:	469c      	mov	ip, r3
 80017fc:	4690      	mov	r8, r2
 80017fe:	42b7      	cmp	r7, r6
 8001800:	d100      	bne.n	8001804 <__aeabi_dsub+0x40>
 8001802:	e0b9      	b.n	8001978 <__aeabi_dsub+0x1b4>
 8001804:	465b      	mov	r3, fp
 8001806:	2601      	movs	r6, #1
 8001808:	4073      	eors	r3, r6
 800180a:	469b      	mov	fp, r3
 800180c:	1bee      	subs	r6, r5, r7
 800180e:	45a3      	cmp	fp, r4
 8001810:	d100      	bne.n	8001814 <__aeabi_dsub+0x50>
 8001812:	e083      	b.n	800191c <__aeabi_dsub+0x158>
 8001814:	2e00      	cmp	r6, #0
 8001816:	dd63      	ble.n	80018e0 <__aeabi_dsub+0x11c>
 8001818:	2f00      	cmp	r7, #0
 800181a:	d000      	beq.n	800181e <__aeabi_dsub+0x5a>
 800181c:	e0b1      	b.n	8001982 <__aeabi_dsub+0x1be>
 800181e:	4663      	mov	r3, ip
 8001820:	4313      	orrs	r3, r2
 8001822:	d100      	bne.n	8001826 <__aeabi_dsub+0x62>
 8001824:	e123      	b.n	8001a6e <__aeabi_dsub+0x2aa>
 8001826:	1e73      	subs	r3, r6, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d000      	beq.n	800182e <__aeabi_dsub+0x6a>
 800182c:	e1ba      	b.n	8001ba4 <__aeabi_dsub+0x3e0>
 800182e:	1a86      	subs	r6, r0, r2
 8001830:	4663      	mov	r3, ip
 8001832:	42b0      	cmp	r0, r6
 8001834:	4180      	sbcs	r0, r0
 8001836:	2501      	movs	r5, #1
 8001838:	1ac9      	subs	r1, r1, r3
 800183a:	4240      	negs	r0, r0
 800183c:	1a09      	subs	r1, r1, r0
 800183e:	020b      	lsls	r3, r1, #8
 8001840:	d400      	bmi.n	8001844 <__aeabi_dsub+0x80>
 8001842:	e147      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001844:	0249      	lsls	r1, r1, #9
 8001846:	0a4b      	lsrs	r3, r1, #9
 8001848:	4698      	mov	r8, r3
 800184a:	4643      	mov	r3, r8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d100      	bne.n	8001852 <__aeabi_dsub+0x8e>
 8001850:	e189      	b.n	8001b66 <__aeabi_dsub+0x3a2>
 8001852:	4640      	mov	r0, r8
 8001854:	f000 fbbc 	bl	8001fd0 <__clzsi2>
 8001858:	0003      	movs	r3, r0
 800185a:	3b08      	subs	r3, #8
 800185c:	2b1f      	cmp	r3, #31
 800185e:	dd00      	ble.n	8001862 <__aeabi_dsub+0x9e>
 8001860:	e17c      	b.n	8001b5c <__aeabi_dsub+0x398>
 8001862:	2220      	movs	r2, #32
 8001864:	0030      	movs	r0, r6
 8001866:	1ad2      	subs	r2, r2, r3
 8001868:	4641      	mov	r1, r8
 800186a:	40d0      	lsrs	r0, r2
 800186c:	4099      	lsls	r1, r3
 800186e:	0002      	movs	r2, r0
 8001870:	409e      	lsls	r6, r3
 8001872:	430a      	orrs	r2, r1
 8001874:	429d      	cmp	r5, r3
 8001876:	dd00      	ble.n	800187a <__aeabi_dsub+0xb6>
 8001878:	e16a      	b.n	8001b50 <__aeabi_dsub+0x38c>
 800187a:	1b5d      	subs	r5, r3, r5
 800187c:	1c6b      	adds	r3, r5, #1
 800187e:	2b1f      	cmp	r3, #31
 8001880:	dd00      	ble.n	8001884 <__aeabi_dsub+0xc0>
 8001882:	e194      	b.n	8001bae <__aeabi_dsub+0x3ea>
 8001884:	2120      	movs	r1, #32
 8001886:	0010      	movs	r0, r2
 8001888:	0035      	movs	r5, r6
 800188a:	1ac9      	subs	r1, r1, r3
 800188c:	408e      	lsls	r6, r1
 800188e:	40da      	lsrs	r2, r3
 8001890:	4088      	lsls	r0, r1
 8001892:	40dd      	lsrs	r5, r3
 8001894:	1e71      	subs	r1, r6, #1
 8001896:	418e      	sbcs	r6, r1
 8001898:	0011      	movs	r1, r2
 800189a:	2207      	movs	r2, #7
 800189c:	4328      	orrs	r0, r5
 800189e:	2500      	movs	r5, #0
 80018a0:	4306      	orrs	r6, r0
 80018a2:	4032      	ands	r2, r6
 80018a4:	2a00      	cmp	r2, #0
 80018a6:	d009      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018a8:	230f      	movs	r3, #15
 80018aa:	4033      	ands	r3, r6
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d005      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018b0:	1d33      	adds	r3, r6, #4
 80018b2:	42b3      	cmp	r3, r6
 80018b4:	41b6      	sbcs	r6, r6
 80018b6:	4276      	negs	r6, r6
 80018b8:	1989      	adds	r1, r1, r6
 80018ba:	001e      	movs	r6, r3
 80018bc:	020b      	lsls	r3, r1, #8
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dsub+0xfe>
 80018c0:	e23d      	b.n	8001d3e <__aeabi_dsub+0x57a>
 80018c2:	1c6a      	adds	r2, r5, #1
 80018c4:	4b91      	ldr	r3, [pc, #580]	; (8001b0c <__aeabi_dsub+0x348>)
 80018c6:	0555      	lsls	r5, r2, #21
 80018c8:	0d6d      	lsrs	r5, r5, #21
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dsub+0x10c>
 80018ce:	e119      	b.n	8001b04 <__aeabi_dsub+0x340>
 80018d0:	4a8f      	ldr	r2, [pc, #572]	; (8001b10 <__aeabi_dsub+0x34c>)
 80018d2:	08f6      	lsrs	r6, r6, #3
 80018d4:	400a      	ands	r2, r1
 80018d6:	0757      	lsls	r7, r2, #29
 80018d8:	0252      	lsls	r2, r2, #9
 80018da:	4337      	orrs	r7, r6
 80018dc:	0b12      	lsrs	r2, r2, #12
 80018de:	e09b      	b.n	8001a18 <__aeabi_dsub+0x254>
 80018e0:	2e00      	cmp	r6, #0
 80018e2:	d000      	beq.n	80018e6 <__aeabi_dsub+0x122>
 80018e4:	e0c5      	b.n	8001a72 <__aeabi_dsub+0x2ae>
 80018e6:	1c6e      	adds	r6, r5, #1
 80018e8:	0576      	lsls	r6, r6, #21
 80018ea:	0d76      	lsrs	r6, r6, #21
 80018ec:	2e01      	cmp	r6, #1
 80018ee:	dc00      	bgt.n	80018f2 <__aeabi_dsub+0x12e>
 80018f0:	e148      	b.n	8001b84 <__aeabi_dsub+0x3c0>
 80018f2:	4667      	mov	r7, ip
 80018f4:	1a86      	subs	r6, r0, r2
 80018f6:	1bcb      	subs	r3, r1, r7
 80018f8:	42b0      	cmp	r0, r6
 80018fa:	41bf      	sbcs	r7, r7
 80018fc:	427f      	negs	r7, r7
 80018fe:	46b8      	mov	r8, r7
 8001900:	001f      	movs	r7, r3
 8001902:	4643      	mov	r3, r8
 8001904:	1aff      	subs	r7, r7, r3
 8001906:	003b      	movs	r3, r7
 8001908:	46b8      	mov	r8, r7
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	d500      	bpl.n	8001910 <__aeabi_dsub+0x14c>
 800190e:	e15f      	b.n	8001bd0 <__aeabi_dsub+0x40c>
 8001910:	4337      	orrs	r7, r6
 8001912:	d19a      	bne.n	800184a <__aeabi_dsub+0x86>
 8001914:	2200      	movs	r2, #0
 8001916:	2400      	movs	r4, #0
 8001918:	2500      	movs	r5, #0
 800191a:	e079      	b.n	8001a10 <__aeabi_dsub+0x24c>
 800191c:	2e00      	cmp	r6, #0
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dsub+0x15e>
 8001920:	e0fa      	b.n	8001b18 <__aeabi_dsub+0x354>
 8001922:	2f00      	cmp	r7, #0
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x164>
 8001926:	e08d      	b.n	8001a44 <__aeabi_dsub+0x280>
 8001928:	4b78      	ldr	r3, [pc, #480]	; (8001b0c <__aeabi_dsub+0x348>)
 800192a:	429d      	cmp	r5, r3
 800192c:	d067      	beq.n	80019fe <__aeabi_dsub+0x23a>
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	4667      	mov	r7, ip
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	431f      	orrs	r7, r3
 8001936:	46bc      	mov	ip, r7
 8001938:	2e38      	cmp	r6, #56	; 0x38
 800193a:	dc00      	bgt.n	800193e <__aeabi_dsub+0x17a>
 800193c:	e152      	b.n	8001be4 <__aeabi_dsub+0x420>
 800193e:	4663      	mov	r3, ip
 8001940:	4313      	orrs	r3, r2
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	4193      	sbcs	r3, r2
 8001946:	181e      	adds	r6, r3, r0
 8001948:	4286      	cmp	r6, r0
 800194a:	4180      	sbcs	r0, r0
 800194c:	4240      	negs	r0, r0
 800194e:	1809      	adds	r1, r1, r0
 8001950:	020b      	lsls	r3, r1, #8
 8001952:	d400      	bmi.n	8001956 <__aeabi_dsub+0x192>
 8001954:	e0be      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001956:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <__aeabi_dsub+0x348>)
 8001958:	3501      	adds	r5, #1
 800195a:	429d      	cmp	r5, r3
 800195c:	d100      	bne.n	8001960 <__aeabi_dsub+0x19c>
 800195e:	e0d2      	b.n	8001b06 <__aeabi_dsub+0x342>
 8001960:	4a6b      	ldr	r2, [pc, #428]	; (8001b10 <__aeabi_dsub+0x34c>)
 8001962:	0873      	lsrs	r3, r6, #1
 8001964:	400a      	ands	r2, r1
 8001966:	2101      	movs	r1, #1
 8001968:	400e      	ands	r6, r1
 800196a:	431e      	orrs	r6, r3
 800196c:	0851      	lsrs	r1, r2, #1
 800196e:	07d3      	lsls	r3, r2, #31
 8001970:	2207      	movs	r2, #7
 8001972:	431e      	orrs	r6, r3
 8001974:	4032      	ands	r2, r6
 8001976:	e795      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001978:	001e      	movs	r6, r3
 800197a:	4316      	orrs	r6, r2
 800197c:	d000      	beq.n	8001980 <__aeabi_dsub+0x1bc>
 800197e:	e745      	b.n	800180c <__aeabi_dsub+0x48>
 8001980:	e740      	b.n	8001804 <__aeabi_dsub+0x40>
 8001982:	4b62      	ldr	r3, [pc, #392]	; (8001b0c <__aeabi_dsub+0x348>)
 8001984:	429d      	cmp	r5, r3
 8001986:	d03a      	beq.n	80019fe <__aeabi_dsub+0x23a>
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	4667      	mov	r7, ip
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	431f      	orrs	r7, r3
 8001990:	46bc      	mov	ip, r7
 8001992:	2e38      	cmp	r6, #56	; 0x38
 8001994:	dd00      	ble.n	8001998 <__aeabi_dsub+0x1d4>
 8001996:	e0eb      	b.n	8001b70 <__aeabi_dsub+0x3ac>
 8001998:	2e1f      	cmp	r6, #31
 800199a:	dc00      	bgt.n	800199e <__aeabi_dsub+0x1da>
 800199c:	e13a      	b.n	8001c14 <__aeabi_dsub+0x450>
 800199e:	0033      	movs	r3, r6
 80019a0:	4667      	mov	r7, ip
 80019a2:	3b20      	subs	r3, #32
 80019a4:	40df      	lsrs	r7, r3
 80019a6:	003b      	movs	r3, r7
 80019a8:	2e20      	cmp	r6, #32
 80019aa:	d005      	beq.n	80019b8 <__aeabi_dsub+0x1f4>
 80019ac:	2740      	movs	r7, #64	; 0x40
 80019ae:	1bbf      	subs	r7, r7, r6
 80019b0:	4666      	mov	r6, ip
 80019b2:	40be      	lsls	r6, r7
 80019b4:	4332      	orrs	r2, r6
 80019b6:	4690      	mov	r8, r2
 80019b8:	4646      	mov	r6, r8
 80019ba:	1e72      	subs	r2, r6, #1
 80019bc:	4196      	sbcs	r6, r2
 80019be:	4333      	orrs	r3, r6
 80019c0:	e0da      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x204>
 80019c6:	e214      	b.n	8001df2 <__aeabi_dsub+0x62e>
 80019c8:	4663      	mov	r3, ip
 80019ca:	4313      	orrs	r3, r2
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x20c>
 80019ce:	e168      	b.n	8001ca2 <__aeabi_dsub+0x4de>
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	074e      	lsls	r6, r1, #29
 80019d4:	08c0      	lsrs	r0, r0, #3
 80019d6:	08c9      	lsrs	r1, r1, #3
 80019d8:	031b      	lsls	r3, r3, #12
 80019da:	4306      	orrs	r6, r0
 80019dc:	4219      	tst	r1, r3
 80019de:	d008      	beq.n	80019f2 <__aeabi_dsub+0x22e>
 80019e0:	4660      	mov	r0, ip
 80019e2:	08c0      	lsrs	r0, r0, #3
 80019e4:	4218      	tst	r0, r3
 80019e6:	d104      	bne.n	80019f2 <__aeabi_dsub+0x22e>
 80019e8:	4663      	mov	r3, ip
 80019ea:	0001      	movs	r1, r0
 80019ec:	08d2      	lsrs	r2, r2, #3
 80019ee:	075e      	lsls	r6, r3, #29
 80019f0:	4316      	orrs	r6, r2
 80019f2:	00f3      	lsls	r3, r6, #3
 80019f4:	4699      	mov	r9, r3
 80019f6:	00c9      	lsls	r1, r1, #3
 80019f8:	0f72      	lsrs	r2, r6, #29
 80019fa:	4d44      	ldr	r5, [pc, #272]	; (8001b0c <__aeabi_dsub+0x348>)
 80019fc:	4311      	orrs	r1, r2
 80019fe:	464b      	mov	r3, r9
 8001a00:	08de      	lsrs	r6, r3, #3
 8001a02:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a04:	074f      	lsls	r7, r1, #29
 8001a06:	4337      	orrs	r7, r6
 8001a08:	08ca      	lsrs	r2, r1, #3
 8001a0a:	429d      	cmp	r5, r3
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x24c>
 8001a0e:	e06e      	b.n	8001aee <__aeabi_dsub+0x32a>
 8001a10:	0312      	lsls	r2, r2, #12
 8001a12:	056d      	lsls	r5, r5, #21
 8001a14:	0b12      	lsrs	r2, r2, #12
 8001a16:	0d6d      	lsrs	r5, r5, #21
 8001a18:	2100      	movs	r1, #0
 8001a1a:	0312      	lsls	r2, r2, #12
 8001a1c:	0b13      	lsrs	r3, r2, #12
 8001a1e:	0d0a      	lsrs	r2, r1, #20
 8001a20:	0512      	lsls	r2, r2, #20
 8001a22:	431a      	orrs	r2, r3
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <__aeabi_dsub+0x350>)
 8001a26:	052d      	lsls	r5, r5, #20
 8001a28:	4013      	ands	r3, r2
 8001a2a:	432b      	orrs	r3, r5
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	07e4      	lsls	r4, r4, #31
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	4323      	orrs	r3, r4
 8001a34:	0038      	movs	r0, r7
 8001a36:	0019      	movs	r1, r3
 8001a38:	bc3c      	pop	{r2, r3, r4, r5}
 8001a3a:	4690      	mov	r8, r2
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	46a2      	mov	sl, r4
 8001a40:	46ab      	mov	fp, r5
 8001a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a44:	4663      	mov	r3, ip
 8001a46:	4313      	orrs	r3, r2
 8001a48:	d011      	beq.n	8001a6e <__aeabi_dsub+0x2aa>
 8001a4a:	1e73      	subs	r3, r6, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d000      	beq.n	8001a52 <__aeabi_dsub+0x28e>
 8001a50:	e107      	b.n	8001c62 <__aeabi_dsub+0x49e>
 8001a52:	1886      	adds	r6, r0, r2
 8001a54:	4286      	cmp	r6, r0
 8001a56:	4180      	sbcs	r0, r0
 8001a58:	4461      	add	r1, ip
 8001a5a:	4240      	negs	r0, r0
 8001a5c:	1809      	adds	r1, r1, r0
 8001a5e:	2501      	movs	r5, #1
 8001a60:	020b      	lsls	r3, r1, #8
 8001a62:	d537      	bpl.n	8001ad4 <__aeabi_dsub+0x310>
 8001a64:	2502      	movs	r5, #2
 8001a66:	e77b      	b.n	8001960 <__aeabi_dsub+0x19c>
 8001a68:	003e      	movs	r6, r7
 8001a6a:	4661      	mov	r1, ip
 8001a6c:	4691      	mov	r9, r2
 8001a6e:	0035      	movs	r5, r6
 8001a70:	e7c5      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001a72:	465c      	mov	r4, fp
 8001a74:	2d00      	cmp	r5, #0
 8001a76:	d000      	beq.n	8001a7a <__aeabi_dsub+0x2b6>
 8001a78:	e0e1      	b.n	8001c3e <__aeabi_dsub+0x47a>
 8001a7a:	000b      	movs	r3, r1
 8001a7c:	4303      	orrs	r3, r0
 8001a7e:	d0f3      	beq.n	8001a68 <__aeabi_dsub+0x2a4>
 8001a80:	1c73      	adds	r3, r6, #1
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x2c2>
 8001a84:	e1ac      	b.n	8001de0 <__aeabi_dsub+0x61c>
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a88:	429f      	cmp	r7, r3
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dsub+0x2ca>
 8001a8c:	e13a      	b.n	8001d04 <__aeabi_dsub+0x540>
 8001a8e:	43f3      	mvns	r3, r6
 8001a90:	2b38      	cmp	r3, #56	; 0x38
 8001a92:	dd00      	ble.n	8001a96 <__aeabi_dsub+0x2d2>
 8001a94:	e16f      	b.n	8001d76 <__aeabi_dsub+0x5b2>
 8001a96:	2b1f      	cmp	r3, #31
 8001a98:	dd00      	ble.n	8001a9c <__aeabi_dsub+0x2d8>
 8001a9a:	e18c      	b.n	8001db6 <__aeabi_dsub+0x5f2>
 8001a9c:	2520      	movs	r5, #32
 8001a9e:	000e      	movs	r6, r1
 8001aa0:	1aed      	subs	r5, r5, r3
 8001aa2:	40ae      	lsls	r6, r5
 8001aa4:	46b0      	mov	r8, r6
 8001aa6:	0006      	movs	r6, r0
 8001aa8:	46aa      	mov	sl, r5
 8001aaa:	40de      	lsrs	r6, r3
 8001aac:	4645      	mov	r5, r8
 8001aae:	4335      	orrs	r5, r6
 8001ab0:	002e      	movs	r6, r5
 8001ab2:	4655      	mov	r5, sl
 8001ab4:	40d9      	lsrs	r1, r3
 8001ab6:	40a8      	lsls	r0, r5
 8001ab8:	4663      	mov	r3, ip
 8001aba:	1e45      	subs	r5, r0, #1
 8001abc:	41a8      	sbcs	r0, r5
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	469c      	mov	ip, r3
 8001ac2:	4330      	orrs	r0, r6
 8001ac4:	1a16      	subs	r6, r2, r0
 8001ac6:	42b2      	cmp	r2, r6
 8001ac8:	4192      	sbcs	r2, r2
 8001aca:	4663      	mov	r3, ip
 8001acc:	4252      	negs	r2, r2
 8001ace:	1a99      	subs	r1, r3, r2
 8001ad0:	003d      	movs	r5, r7
 8001ad2:	e6b4      	b.n	800183e <__aeabi_dsub+0x7a>
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	4032      	ands	r2, r6
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x31a>
 8001adc:	e6e4      	b.n	80018a8 <__aeabi_dsub+0xe4>
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <__aeabi_dsub+0x348>)
 8001ae0:	08f6      	lsrs	r6, r6, #3
 8001ae2:	074f      	lsls	r7, r1, #29
 8001ae4:	4337      	orrs	r7, r6
 8001ae6:	08ca      	lsrs	r2, r1, #3
 8001ae8:	429d      	cmp	r5, r3
 8001aea:	d000      	beq.n	8001aee <__aeabi_dsub+0x32a>
 8001aec:	e790      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001aee:	003b      	movs	r3, r7
 8001af0:	4313      	orrs	r3, r2
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x332>
 8001af4:	e1a6      	b.n	8001e44 <__aeabi_dsub+0x680>
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	031b      	lsls	r3, r3, #12
 8001afa:	431a      	orrs	r2, r3
 8001afc:	0312      	lsls	r2, r2, #12
 8001afe:	0b12      	lsrs	r2, r2, #12
 8001b00:	4d02      	ldr	r5, [pc, #8]	; (8001b0c <__aeabi_dsub+0x348>)
 8001b02:	e789      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b04:	0015      	movs	r5, r2
 8001b06:	2200      	movs	r2, #0
 8001b08:	2700      	movs	r7, #0
 8001b0a:	e785      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b0c:	000007ff 	.word	0x000007ff
 8001b10:	ff7fffff 	.word	0xff7fffff
 8001b14:	800fffff 	.word	0x800fffff
 8001b18:	2e00      	cmp	r6, #0
 8001b1a:	d000      	beq.n	8001b1e <__aeabi_dsub+0x35a>
 8001b1c:	e0c7      	b.n	8001cae <__aeabi_dsub+0x4ea>
 8001b1e:	1c6b      	adds	r3, r5, #1
 8001b20:	055e      	lsls	r6, r3, #21
 8001b22:	0d76      	lsrs	r6, r6, #21
 8001b24:	2e01      	cmp	r6, #1
 8001b26:	dc00      	bgt.n	8001b2a <__aeabi_dsub+0x366>
 8001b28:	e0f0      	b.n	8001d0c <__aeabi_dsub+0x548>
 8001b2a:	4dc8      	ldr	r5, [pc, #800]	; (8001e4c <__aeabi_dsub+0x688>)
 8001b2c:	42ab      	cmp	r3, r5
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_dsub+0x36e>
 8001b30:	e0b9      	b.n	8001ca6 <__aeabi_dsub+0x4e2>
 8001b32:	1885      	adds	r5, r0, r2
 8001b34:	000a      	movs	r2, r1
 8001b36:	4285      	cmp	r5, r0
 8001b38:	4189      	sbcs	r1, r1
 8001b3a:	4462      	add	r2, ip
 8001b3c:	4249      	negs	r1, r1
 8001b3e:	1851      	adds	r1, r2, r1
 8001b40:	2207      	movs	r2, #7
 8001b42:	07ce      	lsls	r6, r1, #31
 8001b44:	086d      	lsrs	r5, r5, #1
 8001b46:	432e      	orrs	r6, r5
 8001b48:	0849      	lsrs	r1, r1, #1
 8001b4a:	4032      	ands	r2, r6
 8001b4c:	001d      	movs	r5, r3
 8001b4e:	e6a9      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b50:	49bf      	ldr	r1, [pc, #764]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001b52:	1aed      	subs	r5, r5, r3
 8001b54:	4011      	ands	r1, r2
 8001b56:	2207      	movs	r2, #7
 8001b58:	4032      	ands	r2, r6
 8001b5a:	e6a3      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b5c:	0032      	movs	r2, r6
 8001b5e:	3828      	subs	r0, #40	; 0x28
 8001b60:	4082      	lsls	r2, r0
 8001b62:	2600      	movs	r6, #0
 8001b64:	e686      	b.n	8001874 <__aeabi_dsub+0xb0>
 8001b66:	0030      	movs	r0, r6
 8001b68:	f000 fa32 	bl	8001fd0 <__clzsi2>
 8001b6c:	3020      	adds	r0, #32
 8001b6e:	e673      	b.n	8001858 <__aeabi_dsub+0x94>
 8001b70:	4663      	mov	r3, ip
 8001b72:	4313      	orrs	r3, r2
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	4193      	sbcs	r3, r2
 8001b78:	1ac6      	subs	r6, r0, r3
 8001b7a:	42b0      	cmp	r0, r6
 8001b7c:	4180      	sbcs	r0, r0
 8001b7e:	4240      	negs	r0, r0
 8001b80:	1a09      	subs	r1, r1, r0
 8001b82:	e65c      	b.n	800183e <__aeabi_dsub+0x7a>
 8001b84:	000e      	movs	r6, r1
 8001b86:	4667      	mov	r7, ip
 8001b88:	4306      	orrs	r6, r0
 8001b8a:	4317      	orrs	r7, r2
 8001b8c:	2d00      	cmp	r5, #0
 8001b8e:	d15e      	bne.n	8001c4e <__aeabi_dsub+0x48a>
 8001b90:	2e00      	cmp	r6, #0
 8001b92:	d000      	beq.n	8001b96 <__aeabi_dsub+0x3d2>
 8001b94:	e0f3      	b.n	8001d7e <__aeabi_dsub+0x5ba>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x3d8>
 8001b9a:	e11e      	b.n	8001dda <__aeabi_dsub+0x616>
 8001b9c:	465c      	mov	r4, fp
 8001b9e:	4661      	mov	r1, ip
 8001ba0:	4691      	mov	r9, r2
 8001ba2:	e72c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ba4:	4fa9      	ldr	r7, [pc, #676]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ba6:	42be      	cmp	r6, r7
 8001ba8:	d07b      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001baa:	001e      	movs	r6, r3
 8001bac:	e6f1      	b.n	8001992 <__aeabi_dsub+0x1ce>
 8001bae:	0010      	movs	r0, r2
 8001bb0:	3d1f      	subs	r5, #31
 8001bb2:	40e8      	lsrs	r0, r5
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d003      	beq.n	8001bc0 <__aeabi_dsub+0x3fc>
 8001bb8:	2140      	movs	r1, #64	; 0x40
 8001bba:	1acb      	subs	r3, r1, r3
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	4316      	orrs	r6, r2
 8001bc0:	1e73      	subs	r3, r6, #1
 8001bc2:	419e      	sbcs	r6, r3
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	4306      	orrs	r6, r0
 8001bc8:	4032      	ands	r2, r6
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2500      	movs	r5, #0
 8001bce:	e783      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001bd0:	1a16      	subs	r6, r2, r0
 8001bd2:	4663      	mov	r3, ip
 8001bd4:	42b2      	cmp	r2, r6
 8001bd6:	4180      	sbcs	r0, r0
 8001bd8:	1a59      	subs	r1, r3, r1
 8001bda:	4240      	negs	r0, r0
 8001bdc:	1a0b      	subs	r3, r1, r0
 8001bde:	4698      	mov	r8, r3
 8001be0:	465c      	mov	r4, fp
 8001be2:	e632      	b.n	800184a <__aeabi_dsub+0x86>
 8001be4:	2e1f      	cmp	r6, #31
 8001be6:	dd00      	ble.n	8001bea <__aeabi_dsub+0x426>
 8001be8:	e0ab      	b.n	8001d42 <__aeabi_dsub+0x57e>
 8001bea:	2720      	movs	r7, #32
 8001bec:	1bbb      	subs	r3, r7, r6
 8001bee:	469a      	mov	sl, r3
 8001bf0:	4663      	mov	r3, ip
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	40bb      	lsls	r3, r7
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	464f      	mov	r7, r9
 8001bfc:	40f3      	lsrs	r3, r6
 8001bfe:	431f      	orrs	r7, r3
 8001c00:	003b      	movs	r3, r7
 8001c02:	4657      	mov	r7, sl
 8001c04:	40ba      	lsls	r2, r7
 8001c06:	1e57      	subs	r7, r2, #1
 8001c08:	41ba      	sbcs	r2, r7
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	4662      	mov	r2, ip
 8001c0e:	40f2      	lsrs	r2, r6
 8001c10:	1889      	adds	r1, r1, r2
 8001c12:	e698      	b.n	8001946 <__aeabi_dsub+0x182>
 8001c14:	2720      	movs	r7, #32
 8001c16:	1bbb      	subs	r3, r7, r6
 8001c18:	469a      	mov	sl, r3
 8001c1a:	4663      	mov	r3, ip
 8001c1c:	4657      	mov	r7, sl
 8001c1e:	40bb      	lsls	r3, r7
 8001c20:	4699      	mov	r9, r3
 8001c22:	0013      	movs	r3, r2
 8001c24:	464f      	mov	r7, r9
 8001c26:	40f3      	lsrs	r3, r6
 8001c28:	431f      	orrs	r7, r3
 8001c2a:	003b      	movs	r3, r7
 8001c2c:	4657      	mov	r7, sl
 8001c2e:	40ba      	lsls	r2, r7
 8001c30:	1e57      	subs	r7, r2, #1
 8001c32:	41ba      	sbcs	r2, r7
 8001c34:	4313      	orrs	r3, r2
 8001c36:	4662      	mov	r2, ip
 8001c38:	40f2      	lsrs	r2, r6
 8001c3a:	1a89      	subs	r1, r1, r2
 8001c3c:	e79c      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 8001c3e:	4b83      	ldr	r3, [pc, #524]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c40:	429f      	cmp	r7, r3
 8001c42:	d05f      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001c44:	2580      	movs	r5, #128	; 0x80
 8001c46:	042d      	lsls	r5, r5, #16
 8001c48:	4273      	negs	r3, r6
 8001c4a:	4329      	orrs	r1, r5
 8001c4c:	e720      	b.n	8001a90 <__aeabi_dsub+0x2cc>
 8001c4e:	2e00      	cmp	r6, #0
 8001c50:	d10c      	bne.n	8001c6c <__aeabi_dsub+0x4a8>
 8001c52:	2f00      	cmp	r7, #0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x494>
 8001c56:	e0d0      	b.n	8001dfa <__aeabi_dsub+0x636>
 8001c58:	465c      	mov	r4, fp
 8001c5a:	4661      	mov	r1, ip
 8001c5c:	4691      	mov	r9, r2
 8001c5e:	4d7b      	ldr	r5, [pc, #492]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c60:	e6cd      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001c62:	4f7a      	ldr	r7, [pc, #488]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c64:	42be      	cmp	r6, r7
 8001c66:	d01c      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c68:	001e      	movs	r6, r3
 8001c6a:	e665      	b.n	8001938 <__aeabi_dsub+0x174>
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d018      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c70:	08c0      	lsrs	r0, r0, #3
 8001c72:	074e      	lsls	r6, r1, #29
 8001c74:	4306      	orrs	r6, r0
 8001c76:	2080      	movs	r0, #128	; 0x80
 8001c78:	08c9      	lsrs	r1, r1, #3
 8001c7a:	0300      	lsls	r0, r0, #12
 8001c7c:	4201      	tst	r1, r0
 8001c7e:	d008      	beq.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c80:	4663      	mov	r3, ip
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	4204      	tst	r4, r0
 8001c86:	d104      	bne.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c88:	0021      	movs	r1, r4
 8001c8a:	46da      	mov	sl, fp
 8001c8c:	08d2      	lsrs	r2, r2, #3
 8001c8e:	075e      	lsls	r6, r3, #29
 8001c90:	4316      	orrs	r6, r2
 8001c92:	00f3      	lsls	r3, r6, #3
 8001c94:	4699      	mov	r9, r3
 8001c96:	2401      	movs	r4, #1
 8001c98:	4653      	mov	r3, sl
 8001c9a:	00c9      	lsls	r1, r1, #3
 8001c9c:	0f72      	lsrs	r2, r6, #29
 8001c9e:	4311      	orrs	r1, r2
 8001ca0:	401c      	ands	r4, r3
 8001ca2:	4d6a      	ldr	r5, [pc, #424]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ca4:	e6ab      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ca6:	001d      	movs	r5, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2700      	movs	r7, #0
 8001cac:	e6b4      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001cae:	2d00      	cmp	r5, #0
 8001cb0:	d159      	bne.n	8001d66 <__aeabi_dsub+0x5a2>
 8001cb2:	000b      	movs	r3, r1
 8001cb4:	4303      	orrs	r3, r0
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x4f6>
 8001cb8:	e6d6      	b.n	8001a68 <__aeabi_dsub+0x2a4>
 8001cba:	1c73      	adds	r3, r6, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x4fc>
 8001cbe:	e0b2      	b.n	8001e26 <__aeabi_dsub+0x662>
 8001cc0:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <__aeabi_dsub+0x688>)
 8001cc2:	429f      	cmp	r7, r3
 8001cc4:	d01e      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001cc6:	43f3      	mvns	r3, r6
 8001cc8:	2b38      	cmp	r3, #56	; 0x38
 8001cca:	dc6f      	bgt.n	8001dac <__aeabi_dsub+0x5e8>
 8001ccc:	2b1f      	cmp	r3, #31
 8001cce:	dd00      	ble.n	8001cd2 <__aeabi_dsub+0x50e>
 8001cd0:	e097      	b.n	8001e02 <__aeabi_dsub+0x63e>
 8001cd2:	2520      	movs	r5, #32
 8001cd4:	000e      	movs	r6, r1
 8001cd6:	1aed      	subs	r5, r5, r3
 8001cd8:	40ae      	lsls	r6, r5
 8001cda:	46b0      	mov	r8, r6
 8001cdc:	0006      	movs	r6, r0
 8001cde:	46aa      	mov	sl, r5
 8001ce0:	40de      	lsrs	r6, r3
 8001ce2:	4645      	mov	r5, r8
 8001ce4:	4335      	orrs	r5, r6
 8001ce6:	002e      	movs	r6, r5
 8001ce8:	4655      	mov	r5, sl
 8001cea:	40a8      	lsls	r0, r5
 8001cec:	40d9      	lsrs	r1, r3
 8001cee:	1e45      	subs	r5, r0, #1
 8001cf0:	41a8      	sbcs	r0, r5
 8001cf2:	448c      	add	ip, r1
 8001cf4:	4306      	orrs	r6, r0
 8001cf6:	18b6      	adds	r6, r6, r2
 8001cf8:	4296      	cmp	r6, r2
 8001cfa:	4192      	sbcs	r2, r2
 8001cfc:	4251      	negs	r1, r2
 8001cfe:	4461      	add	r1, ip
 8001d00:	003d      	movs	r5, r7
 8001d02:	e625      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001d04:	003d      	movs	r5, r7
 8001d06:	4661      	mov	r1, ip
 8001d08:	4691      	mov	r9, r2
 8001d0a:	e678      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	4303      	orrs	r3, r0
 8001d10:	2d00      	cmp	r5, #0
 8001d12:	d000      	beq.n	8001d16 <__aeabi_dsub+0x552>
 8001d14:	e655      	b.n	80019c2 <__aeabi_dsub+0x1fe>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f5      	beq.n	8001d06 <__aeabi_dsub+0x542>
 8001d1a:	4663      	mov	r3, ip
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x55e>
 8001d20:	e66d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d22:	1886      	adds	r6, r0, r2
 8001d24:	4286      	cmp	r6, r0
 8001d26:	4180      	sbcs	r0, r0
 8001d28:	4461      	add	r1, ip
 8001d2a:	4240      	negs	r0, r0
 8001d2c:	1809      	adds	r1, r1, r0
 8001d2e:	2200      	movs	r2, #0
 8001d30:	020b      	lsls	r3, r1, #8
 8001d32:	d400      	bmi.n	8001d36 <__aeabi_dsub+0x572>
 8001d34:	e6d0      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001d38:	3501      	adds	r5, #1
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	e5b2      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001d3e:	46b1      	mov	r9, r6
 8001d40:	e65d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d42:	0033      	movs	r3, r6
 8001d44:	4667      	mov	r7, ip
 8001d46:	3b20      	subs	r3, #32
 8001d48:	40df      	lsrs	r7, r3
 8001d4a:	003b      	movs	r3, r7
 8001d4c:	2e20      	cmp	r6, #32
 8001d4e:	d005      	beq.n	8001d5c <__aeabi_dsub+0x598>
 8001d50:	2740      	movs	r7, #64	; 0x40
 8001d52:	1bbf      	subs	r7, r7, r6
 8001d54:	4666      	mov	r6, ip
 8001d56:	40be      	lsls	r6, r7
 8001d58:	4332      	orrs	r2, r6
 8001d5a:	4690      	mov	r8, r2
 8001d5c:	4646      	mov	r6, r8
 8001d5e:	1e72      	subs	r2, r6, #1
 8001d60:	4196      	sbcs	r6, r2
 8001d62:	4333      	orrs	r3, r6
 8001d64:	e5ef      	b.n	8001946 <__aeabi_dsub+0x182>
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <__aeabi_dsub+0x688>)
 8001d68:	429f      	cmp	r7, r3
 8001d6a:	d0cb      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001d6c:	2580      	movs	r5, #128	; 0x80
 8001d6e:	042d      	lsls	r5, r5, #16
 8001d70:	4273      	negs	r3, r6
 8001d72:	4329      	orrs	r1, r5
 8001d74:	e7a8      	b.n	8001cc8 <__aeabi_dsub+0x504>
 8001d76:	4308      	orrs	r0, r1
 8001d78:	1e41      	subs	r1, r0, #1
 8001d7a:	4188      	sbcs	r0, r1
 8001d7c:	e6a2      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001d7e:	2f00      	cmp	r7, #0
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x5c0>
 8001d82:	e63c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d84:	4663      	mov	r3, ip
 8001d86:	1a86      	subs	r6, r0, r2
 8001d88:	1acf      	subs	r7, r1, r3
 8001d8a:	42b0      	cmp	r0, r6
 8001d8c:	419b      	sbcs	r3, r3
 8001d8e:	425b      	negs	r3, r3
 8001d90:	1afb      	subs	r3, r7, r3
 8001d92:	4698      	mov	r8, r3
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	d54e      	bpl.n	8001e36 <__aeabi_dsub+0x672>
 8001d98:	1a16      	subs	r6, r2, r0
 8001d9a:	4663      	mov	r3, ip
 8001d9c:	42b2      	cmp	r2, r6
 8001d9e:	4192      	sbcs	r2, r2
 8001da0:	1a59      	subs	r1, r3, r1
 8001da2:	4252      	negs	r2, r2
 8001da4:	1a89      	subs	r1, r1, r2
 8001da6:	465c      	mov	r4, fp
 8001da8:	2200      	movs	r2, #0
 8001daa:	e57b      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001dac:	4301      	orrs	r1, r0
 8001dae:	000e      	movs	r6, r1
 8001db0:	1e71      	subs	r1, r6, #1
 8001db2:	418e      	sbcs	r6, r1
 8001db4:	e79f      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001db6:	001d      	movs	r5, r3
 8001db8:	000e      	movs	r6, r1
 8001dba:	3d20      	subs	r5, #32
 8001dbc:	40ee      	lsrs	r6, r5
 8001dbe:	46b0      	mov	r8, r6
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d004      	beq.n	8001dce <__aeabi_dsub+0x60a>
 8001dc4:	2540      	movs	r5, #64	; 0x40
 8001dc6:	1aeb      	subs	r3, r5, r3
 8001dc8:	4099      	lsls	r1, r3
 8001dca:	4308      	orrs	r0, r1
 8001dcc:	4681      	mov	r9, r0
 8001dce:	4648      	mov	r0, r9
 8001dd0:	4643      	mov	r3, r8
 8001dd2:	1e41      	subs	r1, r0, #1
 8001dd4:	4188      	sbcs	r0, r1
 8001dd6:	4318      	orrs	r0, r3
 8001dd8:	e674      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2400      	movs	r4, #0
 8001dde:	e617      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001de0:	1a16      	subs	r6, r2, r0
 8001de2:	4663      	mov	r3, ip
 8001de4:	42b2      	cmp	r2, r6
 8001de6:	4192      	sbcs	r2, r2
 8001de8:	1a59      	subs	r1, r3, r1
 8001dea:	4252      	negs	r2, r2
 8001dec:	1a89      	subs	r1, r1, r2
 8001dee:	003d      	movs	r5, r7
 8001df0:	e525      	b.n	800183e <__aeabi_dsub+0x7a>
 8001df2:	4661      	mov	r1, ip
 8001df4:	4691      	mov	r9, r2
 8001df6:	4d15      	ldr	r5, [pc, #84]	; (8001e4c <__aeabi_dsub+0x688>)
 8001df8:	e601      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	0312      	lsls	r2, r2, #12
 8001e00:	e679      	b.n	8001af6 <__aeabi_dsub+0x332>
 8001e02:	001d      	movs	r5, r3
 8001e04:	000e      	movs	r6, r1
 8001e06:	3d20      	subs	r5, #32
 8001e08:	40ee      	lsrs	r6, r5
 8001e0a:	46b0      	mov	r8, r6
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d004      	beq.n	8001e1a <__aeabi_dsub+0x656>
 8001e10:	2540      	movs	r5, #64	; 0x40
 8001e12:	1aeb      	subs	r3, r5, r3
 8001e14:	4099      	lsls	r1, r3
 8001e16:	4308      	orrs	r0, r1
 8001e18:	4681      	mov	r9, r0
 8001e1a:	464e      	mov	r6, r9
 8001e1c:	4643      	mov	r3, r8
 8001e1e:	1e71      	subs	r1, r6, #1
 8001e20:	418e      	sbcs	r6, r1
 8001e22:	431e      	orrs	r6, r3
 8001e24:	e767      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001e26:	1886      	adds	r6, r0, r2
 8001e28:	4296      	cmp	r6, r2
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	4461      	add	r1, ip
 8001e2e:	425b      	negs	r3, r3
 8001e30:	18c9      	adds	r1, r1, r3
 8001e32:	003d      	movs	r5, r7
 8001e34:	e58c      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001e36:	4647      	mov	r7, r8
 8001e38:	4337      	orrs	r7, r6
 8001e3a:	d0ce      	beq.n	8001dda <__aeabi_dsub+0x616>
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	4641      	mov	r1, r8
 8001e40:	4032      	ands	r2, r6
 8001e42:	e649      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001e44:	2700      	movs	r7, #0
 8001e46:	003a      	movs	r2, r7
 8001e48:	e5e6      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	000007ff 	.word	0x000007ff
 8001e50:	ff7fffff 	.word	0xff7fffff

08001e54 <__aeabi_dcmpun>:
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	4e0c      	ldr	r6, [pc, #48]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e58:	030d      	lsls	r5, r1, #12
 8001e5a:	031c      	lsls	r4, r3, #12
 8001e5c:	0049      	lsls	r1, r1, #1
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	0b2d      	lsrs	r5, r5, #12
 8001e62:	0d49      	lsrs	r1, r1, #21
 8001e64:	0b24      	lsrs	r4, r4, #12
 8001e66:	0d5b      	lsrs	r3, r3, #21
 8001e68:	42b1      	cmp	r1, r6
 8001e6a:	d008      	beq.n	8001e7e <__aeabi_dcmpun+0x2a>
 8001e6c:	4906      	ldr	r1, [pc, #24]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e6e:	2000      	movs	r0, #0
 8001e70:	428b      	cmp	r3, r1
 8001e72:	d103      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e74:	4314      	orrs	r4, r2
 8001e76:	0020      	movs	r0, r4
 8001e78:	1e44      	subs	r4, r0, #1
 8001e7a:	41a0      	sbcs	r0, r4
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
 8001e7e:	4305      	orrs	r5, r0
 8001e80:	2001      	movs	r0, #1
 8001e82:	2d00      	cmp	r5, #0
 8001e84:	d1fa      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e86:	e7f1      	b.n	8001e6c <__aeabi_dcmpun+0x18>
 8001e88:	000007ff 	.word	0x000007ff

08001e8c <__aeabi_d2iz>:
 8001e8c:	b530      	push	{r4, r5, lr}
 8001e8e:	4d14      	ldr	r5, [pc, #80]	; (8001ee0 <__aeabi_d2iz+0x54>)
 8001e90:	030a      	lsls	r2, r1, #12
 8001e92:	004b      	lsls	r3, r1, #1
 8001e94:	0b12      	lsrs	r2, r2, #12
 8001e96:	0d5b      	lsrs	r3, r3, #21
 8001e98:	0fc9      	lsrs	r1, r1, #31
 8001e9a:	2400      	movs	r4, #0
 8001e9c:	42ab      	cmp	r3, r5
 8001e9e:	dd11      	ble.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ea0:	4c10      	ldr	r4, [pc, #64]	; (8001ee4 <__aeabi_d2iz+0x58>)
 8001ea2:	42a3      	cmp	r3, r4
 8001ea4:	dc10      	bgt.n	8001ec8 <__aeabi_d2iz+0x3c>
 8001ea6:	2480      	movs	r4, #128	; 0x80
 8001ea8:	0364      	lsls	r4, r4, #13
 8001eaa:	4322      	orrs	r2, r4
 8001eac:	4c0e      	ldr	r4, [pc, #56]	; (8001ee8 <__aeabi_d2iz+0x5c>)
 8001eae:	1ae4      	subs	r4, r4, r3
 8001eb0:	2c1f      	cmp	r4, #31
 8001eb2:	dd0c      	ble.n	8001ece <__aeabi_d2iz+0x42>
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <__aeabi_d2iz+0x60>)
 8001eb6:	1ac3      	subs	r3, r0, r3
 8001eb8:	40da      	lsrs	r2, r3
 8001eba:	0013      	movs	r3, r2
 8001ebc:	425c      	negs	r4, r3
 8001ebe:	2900      	cmp	r1, #0
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ec2:	001c      	movs	r4, r3
 8001ec4:	0020      	movs	r0, r4
 8001ec6:	bd30      	pop	{r4, r5, pc}
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <__aeabi_d2iz+0x64>)
 8001eca:	18cc      	adds	r4, r1, r3
 8001ecc:	e7fa      	b.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ece:	4d09      	ldr	r5, [pc, #36]	; (8001ef4 <__aeabi_d2iz+0x68>)
 8001ed0:	40e0      	lsrs	r0, r4
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	4463      	add	r3, ip
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	4303      	orrs	r3, r0
 8001edc:	e7ee      	b.n	8001ebc <__aeabi_d2iz+0x30>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	000003fe 	.word	0x000003fe
 8001ee4:	0000041d 	.word	0x0000041d
 8001ee8:	00000433 	.word	0x00000433
 8001eec:	00000413 	.word	0x00000413
 8001ef0:	7fffffff 	.word	0x7fffffff
 8001ef4:	fffffbed 	.word	0xfffffbed

08001ef8 <__aeabi_i2d>:
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d02d      	beq.n	8001f5a <__aeabi_i2d+0x62>
 8001efe:	17c3      	asrs	r3, r0, #31
 8001f00:	18c5      	adds	r5, r0, r3
 8001f02:	405d      	eors	r5, r3
 8001f04:	0fc4      	lsrs	r4, r0, #31
 8001f06:	0028      	movs	r0, r5
 8001f08:	f000 f862 	bl	8001fd0 <__clzsi2>
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <__aeabi_i2d+0x6c>)
 8001f0e:	1a1b      	subs	r3, r3, r0
 8001f10:	055b      	lsls	r3, r3, #21
 8001f12:	0d5b      	lsrs	r3, r3, #21
 8001f14:	280a      	cmp	r0, #10
 8001f16:	dd15      	ble.n	8001f44 <__aeabi_i2d+0x4c>
 8001f18:	380b      	subs	r0, #11
 8001f1a:	4085      	lsls	r5, r0
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	032d      	lsls	r5, r5, #12
 8001f20:	0b2d      	lsrs	r5, r5, #12
 8001f22:	2100      	movs	r1, #0
 8001f24:	0010      	movs	r0, r2
 8001f26:	032d      	lsls	r5, r5, #12
 8001f28:	0d0a      	lsrs	r2, r1, #20
 8001f2a:	0b2d      	lsrs	r5, r5, #12
 8001f2c:	0512      	lsls	r2, r2, #20
 8001f2e:	432a      	orrs	r2, r5
 8001f30:	4d0d      	ldr	r5, [pc, #52]	; (8001f68 <__aeabi_i2d+0x70>)
 8001f32:	051b      	lsls	r3, r3, #20
 8001f34:	402a      	ands	r2, r5
 8001f36:	4313      	orrs	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	07e4      	lsls	r4, r4, #31
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	4323      	orrs	r3, r4
 8001f40:	0019      	movs	r1, r3
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	0002      	movs	r2, r0
 8001f46:	0029      	movs	r1, r5
 8001f48:	3215      	adds	r2, #21
 8001f4a:	4091      	lsls	r1, r2
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	210b      	movs	r1, #11
 8001f50:	1a08      	subs	r0, r1, r0
 8001f52:	40c5      	lsrs	r5, r0
 8001f54:	032d      	lsls	r5, r5, #12
 8001f56:	0b2d      	lsrs	r5, r5, #12
 8001f58:	e7e3      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f5a:	2400      	movs	r4, #0
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2500      	movs	r5, #0
 8001f60:	2200      	movs	r2, #0
 8001f62:	e7de      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f64:	0000041e 	.word	0x0000041e
 8001f68:	800fffff 	.word	0x800fffff

08001f6c <__aeabi_ui2d>:
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	1e04      	subs	r4, r0, #0
 8001f70:	d025      	beq.n	8001fbe <__aeabi_ui2d+0x52>
 8001f72:	f000 f82d 	bl	8001fd0 <__clzsi2>
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <__aeabi_ui2d+0x5c>)
 8001f78:	1a1b      	subs	r3, r3, r0
 8001f7a:	055b      	lsls	r3, r3, #21
 8001f7c:	0d5b      	lsrs	r3, r3, #21
 8001f7e:	280a      	cmp	r0, #10
 8001f80:	dd12      	ble.n	8001fa8 <__aeabi_ui2d+0x3c>
 8001f82:	380b      	subs	r0, #11
 8001f84:	4084      	lsls	r4, r0
 8001f86:	2200      	movs	r2, #0
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	0010      	movs	r0, r2
 8001f90:	0324      	lsls	r4, r4, #12
 8001f92:	0d0a      	lsrs	r2, r1, #20
 8001f94:	0b24      	lsrs	r4, r4, #12
 8001f96:	0512      	lsls	r2, r2, #20
 8001f98:	4322      	orrs	r2, r4
 8001f9a:	4c0c      	ldr	r4, [pc, #48]	; (8001fcc <__aeabi_ui2d+0x60>)
 8001f9c:	051b      	lsls	r3, r3, #20
 8001f9e:	4022      	ands	r2, r4
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	0859      	lsrs	r1, r3, #1
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	0002      	movs	r2, r0
 8001faa:	0021      	movs	r1, r4
 8001fac:	3215      	adds	r2, #21
 8001fae:	4091      	lsls	r1, r2
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	210b      	movs	r1, #11
 8001fb4:	1a08      	subs	r0, r1, r0
 8001fb6:	40c4      	lsrs	r4, r0
 8001fb8:	0324      	lsls	r4, r4, #12
 8001fba:	0b24      	lsrs	r4, r4, #12
 8001fbc:	e7e6      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	e7e2      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	0000041e 	.word	0x0000041e
 8001fcc:	800fffff 	.word	0x800fffff

08001fd0 <__clzsi2>:
 8001fd0:	211c      	movs	r1, #28
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	041b      	lsls	r3, r3, #16
 8001fd6:	4298      	cmp	r0, r3
 8001fd8:	d301      	bcc.n	8001fde <__clzsi2+0xe>
 8001fda:	0c00      	lsrs	r0, r0, #16
 8001fdc:	3910      	subs	r1, #16
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	4298      	cmp	r0, r3
 8001fe2:	d301      	bcc.n	8001fe8 <__clzsi2+0x18>
 8001fe4:	0a00      	lsrs	r0, r0, #8
 8001fe6:	3908      	subs	r1, #8
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	4298      	cmp	r0, r3
 8001fec:	d301      	bcc.n	8001ff2 <__clzsi2+0x22>
 8001fee:	0900      	lsrs	r0, r0, #4
 8001ff0:	3904      	subs	r1, #4
 8001ff2:	a202      	add	r2, pc, #8	; (adr r2, 8001ffc <__clzsi2+0x2c>)
 8001ff4:	5c10      	ldrb	r0, [r2, r0]
 8001ff6:	1840      	adds	r0, r0, r1
 8001ff8:	4770      	bx	lr
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	02020304 	.word	0x02020304
 8002000:	01010101 	.word	0x01010101
	...

0800200c <download_app>:
#include "main.h"

static uint8_t message_transport(void);

void download_app(void)
{
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
	uint8_t ret;

	while(1)
	{
		if(g_usb_rx_complete == true)
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <download_app+0x30>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0fa      	beq.n	8002012 <download_app+0x6>
		{
			g_usb_rx_complete = false;
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <download_app+0x30>)
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]

			ret = message_transport();
 8002022:	1dfc      	adds	r4, r7, #7
 8002024:	f000 f80e 	bl	8002044 <message_transport>
 8002028:	0003      	movs	r3, r0
 800202a:	7023      	strb	r3, [r4, #0]

#ifdef __DEBUG_PRINTF__
	       printf("ERROR CODE:%d\n", ret);
 800202c:	1dfb      	adds	r3, r7, #7
 800202e:	781a      	ldrb	r2, [r3, #0]
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <download_app+0x34>)
 8002032:	0011      	movs	r1, r2
 8002034:	0018      	movs	r0, r3
 8002036:	f007 fe11 	bl	8009c5c <iprintf>
		if(g_usb_rx_complete == true)
 800203a:	e7ea      	b.n	8002012 <download_app+0x6>
 800203c:	20000534 	.word	0x20000534
 8002040:	0800b940 	.word	0x0800b940

08002044 <message_transport>:

	} //end of while(1)
}

static uint8_t message_transport(void)
{
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
	comm_status status;

    uint32_t tickstart = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]

	can_tx_buf.id = usb_rx_buf.msg.cmd;
 800204e:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <message_transport+0xac>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <message_transport+0xb0>)
 8002054:	605a      	str	r2, [r3, #4]
	can_tx_buf.length = (uint8_t) usb_rx_buf.msg.length;
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <message_transport+0xac>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <message_transport+0xb0>)
 800205e:	731a      	strb	r2, [r3, #12]
	can_rx_buf.id = 0; //clear CAN rx_cmd
 8002060:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <message_transport+0xb4>)
 8002062:	2200      	movs	r2, #0
 8002064:	605a      	str	r2, [r3, #4]

	status = CAN_Send(&can_tx_buf);
 8002066:	1cfc      	adds	r4, r7, #3
 8002068:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <message_transport+0xb0>)
 800206a:	0018      	movs	r0, r3
 800206c:	f000 f8a6 	bl	80021bc <CAN_Send>
 8002070:	0003      	movs	r3, r0
 8002072:	7023      	strb	r3, [r4, #0]

	if(status != COMM_OK)
 8002074:	1cfb      	adds	r3, r7, #3
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <message_transport+0x3c>
		return COMM_FAIL;
 800207c:	2301      	movs	r3, #1
 800207e:	e032      	b.n	80020e6 <message_transport+0xa2>

    tickstart = HAL_GetTick();
 8002080:	f000 fbfa 	bl	8002878 <HAL_GetTick>
 8002084:	0003      	movs	r3, r0
 8002086:	607b      	str	r3, [r7, #4]

	while(can_rx_buf.id != (usb_rx_buf.msg.cmd+1)) // wait ACK from loader
 8002088:	e00a      	b.n	80020a0 <message_transport+0x5c>
	{
        if((HAL_GetTick()-tickstart) > COMM_TIMEOUT)
 800208a:	f000 fbf5 	bl	8002878 <HAL_GetTick>
 800208e:	0002      	movs	r2, r0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	1ad2      	subs	r2, r2, r3
 8002094:	23fa      	movs	r3, #250	; 0xfa
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	429a      	cmp	r2, r3
 800209a:	d901      	bls.n	80020a0 <message_transport+0x5c>
        {
            // fail to get mailbox
            return COMM_FAIL;
 800209c:	2301      	movs	r3, #1
 800209e:	e022      	b.n	80020e6 <message_transport+0xa2>
	while(can_rx_buf.id != (usb_rx_buf.msg.cmd+1)) // wait ACK from loader
 80020a0:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <message_transport+0xb4>)
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <message_transport+0xac>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3301      	adds	r3, #1
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d1ed      	bne.n	800208a <message_transport+0x46>
        }
    }


	usb_tx_buf.msg.cmd = can_rx_buf.id;
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <message_transport+0xb4>)
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <message_transport+0xb8>)
 80020b4:	601a      	str	r2, [r3, #0]
	usb_tx_buf.msg.length = (uint32_t) can_rx_buf.length;
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <message_transport+0xb4>)
 80020b8:	7b1b      	ldrb	r3, [r3, #12]
 80020ba:	001a      	movs	r2, r3
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <message_transport+0xb8>)
 80020be:	605a      	str	r2, [r3, #4]
	status = USB_Send(&usb_tx_buf);
 80020c0:	1cfc      	adds	r4, r7, #3
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <message_transport+0xb8>)
 80020c4:	0018      	movs	r0, r3
 80020c6:	f000 f8d3 	bl	8002270 <USB_Send>
 80020ca:	0003      	movs	r3, r0
 80020cc:	7023      	strb	r3, [r4, #0]

	if(status != COMM_OK)
 80020ce:	1cfb      	adds	r3, r7, #3
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <message_transport+0x96>
		return COMM_FAIL;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e005      	b.n	80020e6 <message_transport+0xa2>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <message_transport+0xbc>)
 80020dc:	2200      	movs	r2, #0
 80020de:	2108      	movs	r1, #8
 80020e0:	0018      	movs	r0, r3
 80020e2:	f001 fcbd 	bl	8003a60 <HAL_GPIO_WritePin>

}
 80020e6:	0018      	movs	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b003      	add	sp, #12
 80020ec:	bd90      	pop	{r4, r7, pc}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	20000538 	.word	0x20000538
 80020f4:	20000524 	.word	0x20000524
 80020f8:	200004d0 	.word	0x200004d0
 80020fc:	200004e0 	.word	0x200004e0
 8002100:	48000800 	.word	0x48000800

08002104 <message_buffer_init>:
static CAN_RxHeaderTypeDef can_rx_hd;
static uint32_t messagebox;


void message_buffer_init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
	usb_rx_buf.msg.pdata = usb_rx_buf.msg.payload;
 8002108:	4b07      	ldr	r3, [pc, #28]	; (8002128 <message_buffer_init+0x24>)
 800210a:	4a08      	ldr	r2, [pc, #32]	; (800212c <message_buffer_init+0x28>)
 800210c:	641a      	str	r2, [r3, #64]	; 0x40
	can_tx_buf.pdata = usb_rx_buf.msg.payload;
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <message_buffer_init+0x2c>)
 8002110:	4a06      	ldr	r2, [pc, #24]	; (800212c <message_buffer_init+0x28>)
 8002112:	609a      	str	r2, [r3, #8]
	usb_tx_buf.msg.pdata = usb_tx_buf.msg.payload;
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <message_buffer_init+0x30>)
 8002116:	4a08      	ldr	r2, [pc, #32]	; (8002138 <message_buffer_init+0x34>)
 8002118:	641a      	str	r2, [r3, #64]	; 0x40
	can_rx_buf.pdata = usb_tx_buf.msg.payload;
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <message_buffer_init+0x38>)
 800211c:	4a06      	ldr	r2, [pc, #24]	; (8002138 <message_buffer_init+0x34>)
 800211e:	609a      	str	r2, [r3, #8]
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	20000538 	.word	0x20000538
 800212c:	20000540 	.word	0x20000540
 8002130:	20000524 	.word	0x20000524
 8002134:	200004e0 	.word	0x200004e0
 8002138:	200004e8 	.word	0x200004e8
 800213c:	200004d0 	.word	0x200004d0

08002140 <CAN_Filter_Init>:
 * Description   : Filter Init and start
 * Implements    :
 *END**************************************************************************/

void CAN_Filter_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
    sFilterConfig.FilterBank = 0;
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <CAN_Filter_Init+0x74>)
 8002146:	2200      	movs	r2, #0
 8002148:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800214a:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <CAN_Filter_Init+0x74>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <CAN_Filter_Init+0x74>)
 8002152:	2201      	movs	r2, #1
 8002154:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <CAN_Filter_Init+0x74>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <CAN_Filter_Init+0x74>)
 800215e:	2200      	movs	r2, #0
 8002160:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <CAN_Filter_Init+0x74>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <CAN_Filter_Init+0x74>)
 800216a:	2200      	movs	r2, #0
 800216c:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <CAN_Filter_Init+0x74>)
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <CAN_Filter_Init+0x74>)
 8002176:	2201      	movs	r2, #1
 8002178:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <CAN_Filter_Init+0x74>)
 800217c:	220e      	movs	r2, #14
 800217e:	625a      	str	r2, [r3, #36]	; 0x24

    if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8002180:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <CAN_Filter_Init+0x74>)
 8002182:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <CAN_Filter_Init+0x78>)
 8002184:	0011      	movs	r1, r2
 8002186:	0018      	movs	r0, r3
 8002188:	f000 fc7e 	bl	8002a88 <HAL_CAN_ConfigFilter>
 800218c:	1e03      	subs	r3, r0, #0
 800218e:	d001      	beq.n	8002194 <CAN_Filter_Init+0x54>
    {
        Error_Handler();
 8002190:	f000 fa0a 	bl	80025a8 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <CAN_Filter_Init+0x78>)
 8002196:	2103      	movs	r1, #3
 8002198:	0018      	movs	r0, r3
 800219a:	f000 ffe0 	bl	800315e <HAL_CAN_ActivateNotification>
 800219e:	1e03      	subs	r3, r0, #0
 80021a0:	d001      	beq.n	80021a6 <CAN_Filter_Init+0x66>
    {
        /* Notification Error */
        Error_Handler();
 80021a2:	f000 fa01 	bl	80025a8 <Error_Handler>
    }

    HAL_CAN_Start(&hcan);
 80021a6:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <CAN_Filter_Init+0x78>)
 80021a8:	0018      	movs	r0, r3
 80021aa:	f000 fd5f 	bl	8002c6c <HAL_CAN_Start>

}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	2000035c 	.word	0x2000035c
 80021b8:	2000057c 	.word	0x2000057c

080021bc <CAN_Send>:
 * Function Name : CAN_Send
 * Description   : CAN message send
 * Implements    :
 *END**************************************************************************/
uint8_t CAN_Send(can_message_t *message)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

    uint32_t tickstart = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]

    //can_tx_hd.StdId = 0x321;
    can_tx_hd.ExtId = message->id;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	4b24      	ldr	r3, [pc, #144]	; (8002260 <CAN_Send+0xa4>)
 80021ce:	605a      	str	r2, [r3, #4]
    can_tx_hd.RTR = CAN_RTR_DATA;
 80021d0:	4b23      	ldr	r3, [pc, #140]	; (8002260 <CAN_Send+0xa4>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]
    can_tx_hd.IDE = CAN_ID_EXT;
 80021d6:	4b22      	ldr	r3, [pc, #136]	; (8002260 <CAN_Send+0xa4>)
 80021d8:	2204      	movs	r2, #4
 80021da:	609a      	str	r2, [r3, #8]
    can_tx_hd.DLC = message->length;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7b1b      	ldrb	r3, [r3, #12]
 80021e0:	001a      	movs	r2, r3
 80021e2:	4b1f      	ldr	r3, [pc, #124]	; (8002260 <CAN_Send+0xa4>)
 80021e4:	611a      	str	r2, [r3, #16]
    can_tx_hd.TransmitGlobalTime = DISABLE;
 80021e6:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <CAN_Send+0xa4>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	751a      	strb	r2, [r3, #20]

    tickstart = HAL_GetTick();
 80021ec:	f000 fb44 	bl	8002878 <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	60fb      	str	r3, [r7, #12]
    while( HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 80021f4:	e00a      	b.n	800220c <CAN_Send+0x50>
    {
        if((HAL_GetTick()-tickstart) > COMM_TIMEOUT)
 80021f6:	f000 fb3f 	bl	8002878 <HAL_GetTick>
 80021fa:	0002      	movs	r2, r0
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1ad2      	subs	r2, r2, r3
 8002200:	23fa      	movs	r3, #250	; 0xfa
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	429a      	cmp	r2, r3
 8002206:	d901      	bls.n	800220c <CAN_Send+0x50>
        {
            // fail to get mailbox
            return COMM_FAIL;
 8002208:	2301      	movs	r3, #1
 800220a:	e025      	b.n	8002258 <CAN_Send+0x9c>
    while( HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 800220c:	4b15      	ldr	r3, [pc, #84]	; (8002264 <CAN_Send+0xa8>)
 800220e:	0018      	movs	r0, r3
 8002210:	f000 fe51 	bl	8002eb6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002214:	1e03      	subs	r3, r0, #0
 8002216:	d0ee      	beq.n	80021f6 <CAN_Send+0x3a>
        }
    }

    can_tx_complete = 0;
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <CAN_Send+0xac>)
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800221e:	f000 fb2b 	bl	8002878 <HAL_GetTick>
 8002222:	0003      	movs	r3, r0
 8002224:	60fb      	str	r3, [r7, #12]

    HAL_CAN_AddTxMessage(&hcan, &can_tx_hd, message->pdata, &messagebox);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	4b10      	ldr	r3, [pc, #64]	; (800226c <CAN_Send+0xb0>)
 800222c:	490c      	ldr	r1, [pc, #48]	; (8002260 <CAN_Send+0xa4>)
 800222e:	480d      	ldr	r0, [pc, #52]	; (8002264 <CAN_Send+0xa8>)
 8002230:	f000 fd62 	bl	8002cf8 <HAL_CAN_AddTxMessage>

    while(can_tx_complete == 0)
 8002234:	e00a      	b.n	800224c <CAN_Send+0x90>
    {
        if((HAL_GetTick()-tickstart) > COMM_TIMEOUT)
 8002236:	f000 fb1f 	bl	8002878 <HAL_GetTick>
 800223a:	0002      	movs	r2, r0
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1ad2      	subs	r2, r2, r3
 8002240:	23fa      	movs	r3, #250	; 0xfa
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	429a      	cmp	r2, r3
 8002246:	d901      	bls.n	800224c <CAN_Send+0x90>
        {
            //fail to complete send
            return COMM_FAIL;
 8002248:	2301      	movs	r3, #1
 800224a:	e005      	b.n	8002258 <CAN_Send+0x9c>
    while(can_tx_complete == 0)
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <CAN_Send+0xac>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0ef      	beq.n	8002236 <CAN_Send+0x7a>
        }
    }
    return COMM_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	0018      	movs	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	b004      	add	sp, #16
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000384 	.word	0x20000384
 8002264:	2000057c 	.word	0x2000057c
 8002268:	20000358 	.word	0x20000358
 800226c:	200003b8 	.word	0x200003b8

08002270 <USB_Send>:
 * Function Name : USB_Send
 * Description   : USB message send
 * Implements    :
 *END**************************************************************************/
uint8_t USB_Send(usb_message_t *message)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

    uint32_t tickstart = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]

    tickstart = HAL_GetTick();
 800227c:	f000 fafc 	bl	8002878 <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	60fb      	str	r3, [r7, #12]

    while(USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*)message, 64) != USBD_OK)
 8002284:	e00a      	b.n	800229c <USB_Send+0x2c>
    {
        if((HAL_GetTick()-tickstart) > COMM_TIMEOUT)
 8002286:	f000 faf7 	bl	8002878 <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1ad2      	subs	r2, r2, r3
 8002290:	23fa      	movs	r3, #250	; 0xfa
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	429a      	cmp	r2, r3
 8002296:	d901      	bls.n	800229c <USB_Send+0x2c>
        {
            //fail to send
            return COMM_FAIL;
 8002298:	2301      	movs	r3, #1
 800229a:	e008      	b.n	80022ae <USB_Send+0x3e>
    while(USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*)message, 64) != USBD_OK)
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <USB_Send+0x48>)
 80022a0:	2240      	movs	r2, #64	; 0x40
 80022a2:	0018      	movs	r0, r3
 80022a4:	f004 fcc8 	bl	8006c38 <USBD_CUSTOM_HID_SendReport>
 80022a8:	1e03      	subs	r3, r0, #0
 80022aa:	d1ec      	bne.n	8002286 <USB_Send+0x16>
        }
    }
    return COMM_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	0018      	movs	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	b004      	add	sp, #16
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	200005ac 	.word	0x200005ac

080022bc <HAL_CAN_TxMailbox0CompleteCallback>:
 * Description   :
 * Implements    :
 *END**************************************************************************/

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
    can_tx_complete = 1;
 80022c4:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b002      	add	sp, #8
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	20000358 	.word	0x20000358

080022d8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_hd, can_rx_buf.pdata);
 80022e0:	4b07      	ldr	r3, [pc, #28]	; (8002300 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a07      	ldr	r2, [pc, #28]	; (8002304 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	2100      	movs	r1, #0
 80022ea:	f000 fe1c 	bl	8002f26 <HAL_CAN_GetRxMessage>
    can_rx_buf.id = can_rx_hd.ExtId;
 80022ee:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	4b03      	ldr	r3, [pc, #12]	; (8002300 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80022f4:	605a      	str	r2, [r3, #4]
}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b002      	add	sp, #8
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	200004d0 	.word	0x200004d0
 8002304:	2000039c 	.word	0x2000039c

08002308 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
    Error_Handler();
 8002310:	f000 f94a 	bl	80025a8 <Error_Handler>
}
 8002314:	46c0      	nop			; (mov r8, r8)
 8002316:	46bd      	mov	sp, r7
 8002318:	b002      	add	sp, #8
 800231a:	bd80      	pop	{r7, pc}

0800231c <USB_Receive_Callback>:

void USB_Receive_Callback(uint8_t event_idx, uint8_t state)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	0002      	movs	r2, r0
 8002324:	1dfb      	adds	r3, r7, #7
 8002326:	701a      	strb	r2, [r3, #0]
 8002328:	1dbb      	adds	r3, r7, #6
 800232a:	1c0a      	adds	r2, r1, #0
 800232c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800232e:	4b0f      	ldr	r3, [pc, #60]	; (800236c <USB_Receive_Callback+0x50>)
 8002330:	2201      	movs	r2, #1
 8002332:	2108      	movs	r1, #8
 8002334:	0018      	movs	r0, r3
 8002336:	f001 fb93 	bl	8003a60 <HAL_GPIO_WritePin>

	USBD_CUSTOM_HID_HandleTypeDef *hhid = hUsbDeviceFS.pClassData;
 800233a:	4a0d      	ldr	r2, [pc, #52]	; (8002370 <USB_Receive_Callback+0x54>)
 800233c:	23ae      	movs	r3, #174	; 0xae
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	58d3      	ldr	r3, [r2, r3]
 8002342:	60fb      	str	r3, [r7, #12]
	memcpy(usb_rx_buf.packet, hhid->Report_buf, 64);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4a0b      	ldr	r2, [pc, #44]	; (8002374 <USB_Receive_Callback+0x58>)
 8002348:	0010      	movs	r0, r2
 800234a:	0019      	movs	r1, r3
 800234c:	2340      	movs	r3, #64	; 0x40
 800234e:	001a      	movs	r2, r3
 8002350:	f006 ffb6 	bl	80092c0 <memcpy>
	g_usb_rx_complete = 1;
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <USB_Receive_Callback+0x5c>)
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
#ifdef __DEBUG_PRINTF__
	printf("usb data received!\n");
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <USB_Receive_Callback+0x60>)
 800235c:	0018      	movs	r0, r3
 800235e:	f007 fcf7 	bl	8009d50 <puts>
#endif
}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	46bd      	mov	sp, r7
 8002366:	b004      	add	sp, #16
 8002368:	bd80      	pop	{r7, pc}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	48000800 	.word	0x48000800
 8002370:	200005ac 	.word	0x200005ac
 8002374:	20000538 	.word	0x20000538
 8002378:	20000534 	.word	0x20000534
 800237c:	0800b950 	.word	0x0800b950

08002380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002384:	f000 fa1e 	bl	80027c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002388:	f000 f80f 	bl	80023aa <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
#ifdef __DEBUG_PRINTF__
  initialise_monitor_handles();
 800238c:	f006 fe20 	bl	8008fd0 <initialise_monitor_handles>
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002390:	f000 f898 	bl	80024c4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8002394:	f005 ff3c 	bl	8008210 <MX_USB_DEVICE_Init>
  MX_CAN_Init();
 8002398:	f000 f85c 	bl	8002454 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  CAN_Filter_Init();
 800239c:	f7ff fed0 	bl	8002140 <CAN_Filter_Init>
  message_buffer_init();
 80023a0:	f7ff feb0 	bl	8002104 <message_buffer_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  download_app();
 80023a4:	f7ff fe32 	bl	800200c <download_app>

  while (1)
 80023a8:	e7fe      	b.n	80023a8 <main+0x28>

080023aa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023aa:	b590      	push	{r4, r7, lr}
 80023ac:	b099      	sub	sp, #100	; 0x64
 80023ae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023b0:	242c      	movs	r4, #44	; 0x2c
 80023b2:	193b      	adds	r3, r7, r4
 80023b4:	0018      	movs	r0, r3
 80023b6:	2334      	movs	r3, #52	; 0x34
 80023b8:	001a      	movs	r2, r3
 80023ba:	2100      	movs	r1, #0
 80023bc:	f006 ff89 	bl	80092d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023c0:	231c      	movs	r3, #28
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	0018      	movs	r0, r3
 80023c6:	2310      	movs	r3, #16
 80023c8:	001a      	movs	r2, r3
 80023ca:	2100      	movs	r1, #0
 80023cc:	f006 ff81 	bl	80092d2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023d0:	003b      	movs	r3, r7
 80023d2:	0018      	movs	r0, r3
 80023d4:	231c      	movs	r3, #28
 80023d6:	001a      	movs	r2, r3
 80023d8:	2100      	movs	r1, #0
 80023da:	f006 ff7a 	bl	80092d2 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80023de:	193b      	adds	r3, r7, r4
 80023e0:	2220      	movs	r2, #32
 80023e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80023e4:	193b      	adds	r3, r7, r4
 80023e6:	2201      	movs	r2, #1
 80023e8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023ea:	193b      	adds	r3, r7, r4
 80023ec:	2200      	movs	r2, #0
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f0:	193b      	adds	r3, r7, r4
 80023f2:	0018      	movs	r0, r3
 80023f4:	f002 fb5e 	bl	8004ab4 <HAL_RCC_OscConfig>
 80023f8:	1e03      	subs	r3, r0, #0
 80023fa:	d001      	beq.n	8002400 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80023fc:	f000 f8d4 	bl	80025a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002400:	211c      	movs	r1, #28
 8002402:	187b      	adds	r3, r7, r1
 8002404:	2207      	movs	r2, #7
 8002406:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8002408:	187b      	adds	r3, r7, r1
 800240a:	2203      	movs	r2, #3
 800240c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800240e:	187b      	adds	r3, r7, r1
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002414:	187b      	adds	r3, r7, r1
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800241a:	187b      	adds	r3, r7, r1
 800241c:	2101      	movs	r1, #1
 800241e:	0018      	movs	r0, r3
 8002420:	f002 fece 	bl	80051c0 <HAL_RCC_ClockConfig>
 8002424:	1e03      	subs	r3, r0, #0
 8002426:	d001      	beq.n	800242c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002428:	f000 f8be 	bl	80025a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800242c:	003b      	movs	r3, r7
 800242e:	2280      	movs	r2, #128	; 0x80
 8002430:	0292      	lsls	r2, r2, #10
 8002432:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002434:	003b      	movs	r3, r7
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800243a:	003b      	movs	r3, r7
 800243c:	0018      	movs	r0, r3
 800243e:	f003 f817 	bl	8005470 <HAL_RCCEx_PeriphCLKConfig>
 8002442:	1e03      	subs	r3, r0, #0
 8002444:	d001      	beq.n	800244a <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002446:	f000 f8af 	bl	80025a8 <Error_Handler>
  }
}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	46bd      	mov	sp, r7
 800244e:	b019      	add	sp, #100	; 0x64
 8002450:	bd90      	pop	{r4, r7, pc}
	...

08002454 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <MX_CAN_Init+0x68>)
 800245a:	4a19      	ldr	r2, [pc, #100]	; (80024c0 <MX_CAN_Init+0x6c>)
 800245c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 800245e:	4b17      	ldr	r3, [pc, #92]	; (80024bc <MX_CAN_Init+0x68>)
 8002460:	220c      	movs	r2, #12
 8002462:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002464:	4b15      	ldr	r3, [pc, #84]	; (80024bc <MX_CAN_Init+0x68>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800246a:	4b14      	ldr	r3, [pc, #80]	; (80024bc <MX_CAN_Init+0x68>)
 800246c:	2200      	movs	r2, #0
 800246e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8002470:	4b12      	ldr	r3, [pc, #72]	; (80024bc <MX_CAN_Init+0x68>)
 8002472:	22c0      	movs	r2, #192	; 0xc0
 8002474:	0292      	lsls	r2, r2, #10
 8002476:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002478:	4b10      	ldr	r3, [pc, #64]	; (80024bc <MX_CAN_Init+0x68>)
 800247a:	2280      	movs	r2, #128	; 0x80
 800247c:	0392      	lsls	r2, r2, #14
 800247e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <MX_CAN_Init+0x68>)
 8002482:	2200      	movs	r2, #0
 8002484:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <MX_CAN_Init+0x68>)
 8002488:	2200      	movs	r2, #0
 800248a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <MX_CAN_Init+0x68>)
 800248e:	2200      	movs	r2, #0
 8002490:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <MX_CAN_Init+0x68>)
 8002494:	2200      	movs	r2, #0
 8002496:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <MX_CAN_Init+0x68>)
 800249a:	2200      	movs	r2, #0
 800249c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800249e:	4b07      	ldr	r3, [pc, #28]	; (80024bc <MX_CAN_Init+0x68>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <MX_CAN_Init+0x68>)
 80024a6:	0018      	movs	r0, r3
 80024a8:	f000 f9f0 	bl	800288c <HAL_CAN_Init>
 80024ac:	1e03      	subs	r3, r0, #0
 80024ae:	d001      	beq.n	80024b4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80024b0:	f000 f87a 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80024b4:	46c0      	nop			; (mov r8, r8)
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	2000057c 	.word	0x2000057c
 80024c0:	40006400 	.word	0x40006400

080024c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b089      	sub	sp, #36	; 0x24
 80024c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ca:	240c      	movs	r4, #12
 80024cc:	193b      	adds	r3, r7, r4
 80024ce:	0018      	movs	r0, r3
 80024d0:	2314      	movs	r3, #20
 80024d2:	001a      	movs	r2, r3
 80024d4:	2100      	movs	r1, #0
 80024d6:	f006 fefc 	bl	80092d2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024da:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <MX_GPIO_Init+0xdc>)
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	4b30      	ldr	r3, [pc, #192]	; (80025a0 <MX_GPIO_Init+0xdc>)
 80024e0:	2180      	movs	r1, #128	; 0x80
 80024e2:	0309      	lsls	r1, r1, #12
 80024e4:	430a      	orrs	r2, r1
 80024e6:	615a      	str	r2, [r3, #20]
 80024e8:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <MX_GPIO_Init+0xdc>)
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	031b      	lsls	r3, r3, #12
 80024f0:	4013      	ands	r3, r2
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f6:	4b2a      	ldr	r3, [pc, #168]	; (80025a0 <MX_GPIO_Init+0xdc>)
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <MX_GPIO_Init+0xdc>)
 80024fc:	2180      	movs	r1, #128	; 0x80
 80024fe:	0289      	lsls	r1, r1, #10
 8002500:	430a      	orrs	r2, r1
 8002502:	615a      	str	r2, [r3, #20]
 8002504:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <MX_GPIO_Init+0xdc>)
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	029b      	lsls	r3, r3, #10
 800250c:	4013      	ands	r3, r2
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002512:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <MX_GPIO_Init+0xdc>)
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <MX_GPIO_Init+0xdc>)
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	02c9      	lsls	r1, r1, #11
 800251c:	430a      	orrs	r2, r1
 800251e:	615a      	str	r2, [r3, #20]
 8002520:	4b1f      	ldr	r3, [pc, #124]	; (80025a0 <MX_GPIO_Init+0xdc>)
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	02db      	lsls	r3, r3, #11
 8002528:	4013      	ands	r3, r2
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800252e:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <MX_GPIO_Init+0xe0>)
 8002530:	2200      	movs	r2, #0
 8002532:	2108      	movs	r1, #8
 8002534:	0018      	movs	r0, r3
 8002536:	f001 fa93 	bl	8003a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800253a:	2390      	movs	r3, #144	; 0x90
 800253c:	05db      	lsls	r3, r3, #23
 800253e:	2200      	movs	r2, #0
 8002540:	2120      	movs	r1, #32
 8002542:	0018      	movs	r0, r3
 8002544:	f001 fa8c 	bl	8003a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002548:	0021      	movs	r1, r4
 800254a:	187b      	adds	r3, r7, r1
 800254c:	2208      	movs	r2, #8
 800254e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002550:	187b      	adds	r3, r7, r1
 8002552:	2201      	movs	r2, #1
 8002554:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	187b      	adds	r3, r7, r1
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255c:	187b      	adds	r3, r7, r1
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002562:	000c      	movs	r4, r1
 8002564:	187b      	adds	r3, r7, r1
 8002566:	4a0f      	ldr	r2, [pc, #60]	; (80025a4 <MX_GPIO_Init+0xe0>)
 8002568:	0019      	movs	r1, r3
 800256a:	0010      	movs	r0, r2
 800256c:	f001 f900 	bl	8003770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002570:	0021      	movs	r1, r4
 8002572:	187b      	adds	r3, r7, r1
 8002574:	2220      	movs	r2, #32
 8002576:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002578:	187b      	adds	r3, r7, r1
 800257a:	2201      	movs	r2, #1
 800257c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	187b      	adds	r3, r7, r1
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002584:	187b      	adds	r3, r7, r1
 8002586:	2200      	movs	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258a:	187a      	adds	r2, r7, r1
 800258c:	2390      	movs	r3, #144	; 0x90
 800258e:	05db      	lsls	r3, r3, #23
 8002590:	0011      	movs	r1, r2
 8002592:	0018      	movs	r0, r3
 8002594:	f001 f8ec 	bl	8003770 <HAL_GPIO_Init>

}
 8002598:	46c0      	nop			; (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	b009      	add	sp, #36	; 0x24
 800259e:	bd90      	pop	{r4, r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	48000800 	.word	0x48000800

080025a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025ac:	46c0      	nop			; (mov r8, r8)
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ba:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <HAL_MspInit+0x44>)
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_MspInit+0x44>)
 80025c0:	2101      	movs	r1, #1
 80025c2:	430a      	orrs	r2, r1
 80025c4:	619a      	str	r2, [r3, #24]
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <HAL_MspInit+0x44>)
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2201      	movs	r2, #1
 80025cc:	4013      	ands	r3, r2
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <HAL_MspInit+0x44>)
 80025d4:	69da      	ldr	r2, [r3, #28]
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_MspInit+0x44>)
 80025d8:	2180      	movs	r1, #128	; 0x80
 80025da:	0549      	lsls	r1, r1, #21
 80025dc:	430a      	orrs	r2, r1
 80025de:	61da      	str	r2, [r3, #28]
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_MspInit+0x44>)
 80025e2:	69da      	ldr	r2, [r3, #28]
 80025e4:	2380      	movs	r3, #128	; 0x80
 80025e6:	055b      	lsls	r3, r3, #21
 80025e8:	4013      	ands	r3, r2
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b002      	add	sp, #8
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	40021000 	.word	0x40021000

080025fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	; 0x28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	2314      	movs	r3, #20
 8002606:	18fb      	adds	r3, r7, r3
 8002608:	0018      	movs	r0, r3
 800260a:	2314      	movs	r3, #20
 800260c:	001a      	movs	r2, r3
 800260e:	2100      	movs	r1, #0
 8002610:	f006 fe5f 	bl	80092d2 <memset>
  if(hcan->Instance==CAN)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a20      	ldr	r2, [pc, #128]	; (800269c <HAL_CAN_MspInit+0xa0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d13a      	bne.n	8002694 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800261e:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <HAL_CAN_MspInit+0xa4>)
 8002620:	69da      	ldr	r2, [r3, #28]
 8002622:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <HAL_CAN_MspInit+0xa4>)
 8002624:	2180      	movs	r1, #128	; 0x80
 8002626:	0489      	lsls	r1, r1, #18
 8002628:	430a      	orrs	r2, r1
 800262a:	61da      	str	r2, [r3, #28]
 800262c:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <HAL_CAN_MspInit+0xa4>)
 800262e:	69da      	ldr	r2, [r3, #28]
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	049b      	lsls	r3, r3, #18
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263a:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <HAL_CAN_MspInit+0xa4>)
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <HAL_CAN_MspInit+0xa4>)
 8002640:	2180      	movs	r1, #128	; 0x80
 8002642:	02c9      	lsls	r1, r1, #11
 8002644:	430a      	orrs	r2, r1
 8002646:	615a      	str	r2, [r3, #20]
 8002648:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_CAN_MspInit+0xa4>)
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	02db      	lsls	r3, r3, #11
 8002650:	4013      	ands	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002656:	2114      	movs	r1, #20
 8002658:	187b      	adds	r3, r7, r1
 800265a:	22c0      	movs	r2, #192	; 0xc0
 800265c:	0092      	lsls	r2, r2, #2
 800265e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	187b      	adds	r3, r7, r1
 8002662:	2202      	movs	r2, #2
 8002664:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	187b      	adds	r3, r7, r1
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800266c:	187b      	adds	r3, r7, r1
 800266e:	2203      	movs	r2, #3
 8002670:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8002672:	187b      	adds	r3, r7, r1
 8002674:	2204      	movs	r2, #4
 8002676:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002678:	187b      	adds	r3, r7, r1
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <HAL_CAN_MspInit+0xa8>)
 800267c:	0019      	movs	r1, r3
 800267e:	0010      	movs	r0, r2
 8002680:	f001 f876 	bl	8003770 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8002684:	2200      	movs	r2, #0
 8002686:	2100      	movs	r1, #0
 8002688:	201e      	movs	r0, #30
 800268a:	f001 f83f 	bl	800370c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800268e:	201e      	movs	r0, #30
 8002690:	f001 f851 	bl	8003736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8002694:	46c0      	nop			; (mov r8, r8)
 8002696:	46bd      	mov	sp, r7
 8002698:	b00a      	add	sp, #40	; 0x28
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40006400 	.word	0x40006400
 80026a0:	40021000 	.word	0x40021000
 80026a4:	48000400 	.word	0x48000400

080026a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026b6:	e7fe      	b.n	80026b6 <HardFault_Handler+0x4>

080026b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80026bc:	46c0      	nop			; (mov r8, r8)
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026d0:	f000 f8c0 	bl	8002854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d4:	46c0      	nop			; (mov r8, r8)
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <CEC_CAN_IRQHandler+0x14>)
 80026e2:	0018      	movs	r0, r3
 80026e4:	f000 fd65 	bl	80031b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80026e8:	46c0      	nop			; (mov r8, r8)
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	2000057c 	.word	0x2000057c

080026f4 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <USB_IRQHandler+0x14>)
 80026fa:	0018      	movs	r0, r3
 80026fc:	f001 fad8 	bl	8003cb0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	20000a70 	.word	0x20000a70

0800270c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <_sbrk+0x50>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d102      	bne.n	8002722 <_sbrk+0x16>
		heap_end = &end;
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <_sbrk+0x50>)
 800271e:	4a10      	ldr	r2, [pc, #64]	; (8002760 <_sbrk+0x54>)
 8002720:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <_sbrk+0x50>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <_sbrk+0x50>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	18d3      	adds	r3, r2, r3
 8002730:	466a      	mov	r2, sp
 8002732:	4293      	cmp	r3, r2
 8002734:	d907      	bls.n	8002746 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002736:	f006 fcc3 	bl	80090c0 <__errno>
 800273a:	0003      	movs	r3, r0
 800273c:	220c      	movs	r2, #12
 800273e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002740:	2301      	movs	r3, #1
 8002742:	425b      	negs	r3, r3
 8002744:	e006      	b.n	8002754 <_sbrk+0x48>
	}

	heap_end += incr;
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <_sbrk+0x50>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	18d2      	adds	r2, r2, r3
 800274e:	4b03      	ldr	r3, [pc, #12]	; (800275c <_sbrk+0x50>)
 8002750:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8002752:	68fb      	ldr	r3, [r7, #12]
}
 8002754:	0018      	movs	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	b004      	add	sp, #16
 800275a:	bd80      	pop	{r7, pc}
 800275c:	200003bc 	.word	0x200003bc
 8002760:	20000ce8 	.word	0x20000ce8

08002764 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002770:	480d      	ldr	r0, [pc, #52]	; (80027a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002772:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002774:	480d      	ldr	r0, [pc, #52]	; (80027ac <LoopForever+0x6>)
  ldr r1, =_edata
 8002776:	490e      	ldr	r1, [pc, #56]	; (80027b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002778:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <LoopForever+0xe>)
  movs r3, #0
 800277a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800277c:	e002      	b.n	8002784 <LoopCopyDataInit>

0800277e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800277e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002782:	3304      	adds	r3, #4

08002784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002788:	d3f9      	bcc.n	800277e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800278a:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800278c:	4c0b      	ldr	r4, [pc, #44]	; (80027bc <LoopForever+0x16>)
  movs r3, #0
 800278e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002790:	e001      	b.n	8002796 <LoopFillZerobss>

08002792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002794:	3204      	adds	r2, #4

08002796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002798:	d3fb      	bcc.n	8002792 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800279a:	f7ff ffe3 	bl	8002764 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800279e:	f006 fd6b 	bl	8009278 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027a2:	f7ff fded 	bl	8002380 <main>

080027a6 <LoopForever>:

LoopForever:
    b LoopForever
 80027a6:	e7fe      	b.n	80027a6 <LoopForever>
  ldr   r0, =_estack
 80027a8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80027ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b0:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 80027b4:	0800bde8 	.word	0x0800bde8
  ldr r2, =_sbss
 80027b8:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 80027bc:	20000ce8 	.word	0x20000ce8

080027c0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027c0:	e7fe      	b.n	80027c0 <ADC1_COMP_IRQHandler>
	...

080027c4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c8:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <HAL_Init+0x24>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_Init+0x24>)
 80027ce:	2110      	movs	r1, #16
 80027d0:	430a      	orrs	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80027d4:	2000      	movs	r0, #0
 80027d6:	f000 f809 	bl	80027ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027da:	f7ff feeb 	bl	80025b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	0018      	movs	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	40022000 	.word	0x40022000

080027ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027ec:	b590      	push	{r4, r7, lr}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f4:	4b14      	ldr	r3, [pc, #80]	; (8002848 <HAL_InitTick+0x5c>)
 80027f6:	681c      	ldr	r4, [r3, #0]
 80027f8:	4b14      	ldr	r3, [pc, #80]	; (800284c <HAL_InitTick+0x60>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	0019      	movs	r1, r3
 80027fe:	23fa      	movs	r3, #250	; 0xfa
 8002800:	0098      	lsls	r0, r3, #2
 8002802:	f7fd fc93 	bl	800012c <__udivsi3>
 8002806:	0003      	movs	r3, r0
 8002808:	0019      	movs	r1, r3
 800280a:	0020      	movs	r0, r4
 800280c:	f7fd fc8e 	bl	800012c <__udivsi3>
 8002810:	0003      	movs	r3, r0
 8002812:	0018      	movs	r0, r3
 8002814:	f000 ff9f 	bl	8003756 <HAL_SYSTICK_Config>
 8002818:	1e03      	subs	r3, r0, #0
 800281a:	d001      	beq.n	8002820 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e00f      	b.n	8002840 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b03      	cmp	r3, #3
 8002824:	d80b      	bhi.n	800283e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	2301      	movs	r3, #1
 800282a:	425b      	negs	r3, r3
 800282c:	2200      	movs	r2, #0
 800282e:	0018      	movs	r0, r3
 8002830:	f000 ff6c 	bl	800370c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_InitTick+0x64>)
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	e000      	b.n	8002840 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b003      	add	sp, #12
 8002846:	bd90      	pop	{r4, r7, pc}
 8002848:	20000000 	.word	0x20000000
 800284c:	20000008 	.word	0x20000008
 8002850:	20000004 	.word	0x20000004

08002854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_IncTick+0x1c>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	001a      	movs	r2, r3
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_IncTick+0x20>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	18d2      	adds	r2, r2, r3
 8002864:	4b03      	ldr	r3, [pc, #12]	; (8002874 <HAL_IncTick+0x20>)
 8002866:	601a      	str	r2, [r3, #0]
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	20000008 	.word	0x20000008
 8002874:	200005a8 	.word	0x200005a8

08002878 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  return uwTick;
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <HAL_GetTick+0x10>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	0018      	movs	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	200005a8 	.word	0x200005a8

0800288c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0f0      	b.n	8002a80 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2220      	movs	r2, #32
 80028a2:	5c9b      	ldrb	r3, [r3, r2]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d103      	bne.n	80028b2 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	0018      	movs	r0, r3
 80028ae:	f7ff fea5 	bl	80025fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2102      	movs	r1, #2
 80028be:	438a      	bics	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028c2:	f7ff ffd9 	bl	8002878 <HAL_GetTick>
 80028c6:	0003      	movs	r3, r0
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028ca:	e013      	b.n	80028f4 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028cc:	f7ff ffd4 	bl	8002878 <HAL_GetTick>
 80028d0:	0002      	movs	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b0a      	cmp	r3, #10
 80028d8:	d90c      	bls.n	80028f4 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	2280      	movs	r2, #128	; 0x80
 80028e0:	0292      	lsls	r2, r2, #10
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2220      	movs	r2, #32
 80028ec:	2105      	movs	r1, #5
 80028ee:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0c5      	b.n	8002a80 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	4013      	ands	r3, r2
 80028fe:	d1e5      	bne.n	80028cc <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2101      	movs	r1, #1
 800290c:	430a      	orrs	r2, r1
 800290e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002910:	f7ff ffb2 	bl	8002878 <HAL_GetTick>
 8002914:	0003      	movs	r3, r0
 8002916:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002918:	e013      	b.n	8002942 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800291a:	f7ff ffad 	bl	8002878 <HAL_GetTick>
 800291e:	0002      	movs	r2, r0
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b0a      	cmp	r3, #10
 8002926:	d90c      	bls.n	8002942 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	2280      	movs	r2, #128	; 0x80
 800292e:	0292      	lsls	r2, r2, #10
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	2105      	movs	r1, #5
 800293c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e09e      	b.n	8002a80 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	4013      	ands	r3, r2
 800294c:	d0e5      	beq.n	800291a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7e1b      	ldrb	r3, [r3, #24]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d108      	bne.n	8002968 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	430a      	orrs	r2, r1
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	e007      	b.n	8002978 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2180      	movs	r1, #128	; 0x80
 8002974:	438a      	bics	r2, r1
 8002976:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7e5b      	ldrb	r3, [r3, #25]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d108      	bne.n	8002992 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2140      	movs	r1, #64	; 0x40
 800298c:	430a      	orrs	r2, r1
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	e007      	b.n	80029a2 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2140      	movs	r1, #64	; 0x40
 800299e:	438a      	bics	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	7e9b      	ldrb	r3, [r3, #26]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d108      	bne.n	80029bc <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2120      	movs	r1, #32
 80029b6:	430a      	orrs	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e007      	b.n	80029cc <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2120      	movs	r1, #32
 80029c8:	438a      	bics	r2, r1
 80029ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7edb      	ldrb	r3, [r3, #27]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d108      	bne.n	80029e6 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2110      	movs	r1, #16
 80029e0:	438a      	bics	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	e007      	b.n	80029f6 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2110      	movs	r1, #16
 80029f2:	430a      	orrs	r2, r1
 80029f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	7f1b      	ldrb	r3, [r3, #28]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d108      	bne.n	8002a10 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2108      	movs	r1, #8
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e007      	b.n	8002a20 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2108      	movs	r1, #8
 8002a1c:	438a      	bics	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	7f5b      	ldrb	r3, [r3, #29]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d108      	bne.n	8002a3a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2104      	movs	r1, #4
 8002a34:	430a      	orrs	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	e007      	b.n	8002a4a <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2104      	movs	r1, #4
 8002a46:	438a      	bics	r2, r1
 8002a48:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	0011      	movs	r1, r2
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	1e5a      	subs	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	0018      	movs	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b004      	add	sp, #16
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a98:	2013      	movs	r0, #19
 8002a9a:	183b      	adds	r3, r7, r0
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	2120      	movs	r1, #32
 8002aa0:	5c52      	ldrb	r2, [r2, r1]
 8002aa2:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002aa4:	183b      	adds	r3, r7, r0
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d005      	beq.n	8002ab8 <HAL_CAN_ConfigFilter+0x30>
 8002aac:	2313      	movs	r3, #19
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d000      	beq.n	8002ab8 <HAL_CAN_ConfigFilter+0x30>
 8002ab6:	e0cd      	b.n	8002c54 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	58d3      	ldr	r3, [r2, r3]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	0011      	movs	r1, r2
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	221f      	movs	r2, #31
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	0013      	movs	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	2387      	movs	r3, #135	; 0x87
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	58d3      	ldr	r3, [r2, r3]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	43d2      	mvns	r2, r2
 8002aea:	401a      	ands	r2, r3
 8002aec:	0011      	movs	r1, r2
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	2387      	movs	r3, #135	; 0x87
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d129      	bne.n	8002b52 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	2383      	movs	r3, #131	; 0x83
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	58d3      	ldr	r3, [r2, r3]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	43d2      	mvns	r2, r2
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	0011      	movs	r1, r2
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	2383      	movs	r3, #131	; 0x83
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	041b      	lsls	r3, r3, #16
 8002b22:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b28:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	3248      	adds	r2, #72	; 0x48
 8002b2e:	00d2      	lsls	r2, r2, #3
 8002b30:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	041b      	lsls	r3, r3, #16
 8002b3e:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b44:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b46:	6979      	ldr	r1, [r7, #20]
 8002b48:	3348      	adds	r3, #72	; 0x48
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	18cb      	adds	r3, r1, r3
 8002b4e:	3304      	adds	r3, #4
 8002b50:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d128      	bne.n	8002bac <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	2383      	movs	r3, #131	; 0x83
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	58d2      	ldr	r2, [r2, r3]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	0011      	movs	r1, r2
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	2383      	movs	r3, #131	; 0x83
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	041b      	lsls	r3, r3, #16
 8002b7c:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b82:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	3248      	adds	r2, #72	; 0x48
 8002b88:	00d2      	lsls	r2, r2, #3
 8002b8a:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	041b      	lsls	r3, r3, #16
 8002b98:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b9e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ba0:	6979      	ldr	r1, [r7, #20]
 8002ba2:	3348      	adds	r3, #72	; 0x48
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	18cb      	adds	r3, r1, r3
 8002ba8:	3304      	adds	r3, #4
 8002baa:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10c      	bne.n	8002bce <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	2381      	movs	r3, #129	; 0x81
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	58d3      	ldr	r3, [r2, r3]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	43d2      	mvns	r2, r2
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	0011      	movs	r1, r2
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	2381      	movs	r3, #129	; 0x81
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	50d1      	str	r1, [r2, r3]
 8002bcc:	e00a      	b.n	8002be4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	2381      	movs	r3, #129	; 0x81
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	58d2      	ldr	r2, [r2, r3]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	0011      	movs	r1, r2
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	2381      	movs	r3, #129	; 0x81
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10c      	bne.n	8002c06 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	2385      	movs	r3, #133	; 0x85
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	58d3      	ldr	r3, [r2, r3]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	43d2      	mvns	r2, r2
 8002bf8:	401a      	ands	r2, r3
 8002bfa:	0011      	movs	r1, r2
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	2385      	movs	r3, #133	; 0x85
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	50d1      	str	r1, [r2, r3]
 8002c04:	e00a      	b.n	8002c1c <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	2385      	movs	r3, #133	; 0x85
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	58d2      	ldr	r2, [r2, r3]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	431a      	orrs	r2, r3
 8002c12:	0011      	movs	r1, r2
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	2385      	movs	r3, #133	; 0x85
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d10a      	bne.n	8002c3a <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	2387      	movs	r3, #135	; 0x87
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	58d2      	ldr	r2, [r2, r3]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	0011      	movs	r1, r2
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	2387      	movs	r3, #135	; 0x87
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	58d3      	ldr	r3, [r2, r3]
 8002c42:	2201      	movs	r2, #1
 8002c44:	4393      	bics	r3, r2
 8002c46:	0019      	movs	r1, r3
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e007      	b.n	8002c64 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	2280      	movs	r2, #128	; 0x80
 8002c5a:	02d2      	lsls	r2, r2, #11
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
  }
}
 8002c64:	0018      	movs	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b006      	add	sp, #24
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	5c9b      	ldrb	r3, [r3, r2]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d12f      	bne.n	8002ce0 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2220      	movs	r2, #32
 8002c84:	2102      	movs	r1, #2
 8002c86:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2101      	movs	r1, #1
 8002c94:	438a      	bics	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c98:	f7ff fdee 	bl	8002878 <HAL_GetTick>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ca0:	e013      	b.n	8002cca <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ca2:	f7ff fde9 	bl	8002878 <HAL_GetTick>
 8002ca6:	0002      	movs	r2, r0
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b0a      	cmp	r3, #10
 8002cae:	d90c      	bls.n	8002cca <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	2280      	movs	r2, #128	; 0x80
 8002cb6:	0292      	lsls	r2, r2, #10
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	2105      	movs	r1, #5
 8002cc4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e012      	b.n	8002cf0 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d1e5      	bne.n	8002ca2 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e007      	b.n	8002cf0 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	2280      	movs	r2, #128	; 0x80
 8002ce6:	0312      	lsls	r2, r2, #12
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
  }
}
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b004      	add	sp, #16
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d06:	201f      	movs	r0, #31
 8002d08:	183b      	adds	r3, r7, r0
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	2120      	movs	r1, #32
 8002d0e:	5c52      	ldrb	r2, [r2, r1]
 8002d10:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d1a:	183b      	adds	r3, r7, r0
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d005      	beq.n	8002d2e <HAL_CAN_AddTxMessage+0x36>
 8002d22:	231f      	movs	r3, #31
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d000      	beq.n	8002d2e <HAL_CAN_AddTxMessage+0x36>
 8002d2c:	e0b7      	b.n	8002e9e <HAL_CAN_AddTxMessage+0x1a6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	04db      	lsls	r3, r3, #19
 8002d34:	4013      	ands	r3, r2
 8002d36:	d10a      	bne.n	8002d4e <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	051b      	lsls	r3, r3, #20
 8002d3e:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d40:	d105      	bne.n	8002d4e <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	055b      	lsls	r3, r3, #21
 8002d48:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d4a:	d100      	bne.n	8002d4e <HAL_CAN_AddTxMessage+0x56>
 8002d4c:	e09e      	b.n	8002e8c <HAL_CAN_AddTxMessage+0x194>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	0e1b      	lsrs	r3, r3, #24
 8002d52:	2203      	movs	r2, #3
 8002d54:	4013      	ands	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d908      	bls.n	8002d70 <HAL_CAN_AddTxMessage+0x78>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	2280      	movs	r2, #128	; 0x80
 8002d64:	0412      	lsls	r2, r2, #16
 8002d66:	431a      	orrs	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e09e      	b.n	8002eae <HAL_CAN_AddTxMessage+0x1b6>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002d70:	2201      	movs	r2, #1
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	409a      	lsls	r2, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10c      	bne.n	8002d9c <HAL_CAN_AddTxMessage+0xa4>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4311      	orrs	r1, r2
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	3218      	adds	r2, #24
 8002d96:	0112      	lsls	r2, r2, #4
 8002d98:	50d1      	str	r1, [r2, r3]
 8002d9a:	e00f      	b.n	8002dbc <HAL_CAN_AddTxMessage+0xc4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002da6:	431a      	orrs	r2, r3
 8002da8:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8002db2:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	3218      	adds	r2, #24
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6819      	ldr	r1, [r3, #0]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	3318      	adds	r3, #24
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	18cb      	adds	r3, r1, r3
 8002dcc:	3304      	adds	r3, #4
 8002dce:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	7d1b      	ldrb	r3, [r3, #20]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d112      	bne.n	8002dfe <HAL_CAN_AddTxMessage+0x106>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	3318      	adds	r3, #24
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	18d3      	adds	r3, r2, r3
 8002de4:	3304      	adds	r3, #4
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6819      	ldr	r1, [r3, #0]
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	431a      	orrs	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	3318      	adds	r3, #24
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	18cb      	adds	r3, r1, r3
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3307      	adds	r3, #7
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	061a      	lsls	r2, r3, #24
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3306      	adds	r3, #6
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	041b      	lsls	r3, r3, #16
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3305      	adds	r3, #5
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	0019      	movs	r1, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	6979      	ldr	r1, [r7, #20]
 8002e2a:	23c6      	movs	r3, #198	; 0xc6
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	0109      	lsls	r1, r1, #4
 8002e30:	1841      	adds	r1, r0, r1
 8002e32:	18cb      	adds	r3, r1, r3
 8002e34:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3303      	adds	r3, #3
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	061a      	lsls	r2, r3, #24
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3302      	adds	r3, #2
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	041b      	lsls	r3, r3, #16
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	0019      	movs	r1, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	6979      	ldr	r1, [r7, #20]
 8002e60:	23c4      	movs	r3, #196	; 0xc4
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	0109      	lsls	r1, r1, #4
 8002e66:	1841      	adds	r1, r0, r1
 8002e68:	18cb      	adds	r3, r1, r3
 8002e6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	3218      	adds	r2, #24
 8002e74:	0112      	lsls	r2, r2, #4
 8002e76:	58d2      	ldr	r2, [r2, r3]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4311      	orrs	r1, r2
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	3218      	adds	r2, #24
 8002e84:	0112      	lsls	r2, r2, #4
 8002e86:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e010      	b.n	8002eae <HAL_CAN_AddTxMessage+0x1b6>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	2280      	movs	r2, #128	; 0x80
 8002e92:	0392      	lsls	r2, r2, #14
 8002e94:	431a      	orrs	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e007      	b.n	8002eae <HAL_CAN_AddTxMessage+0x1b6>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	2280      	movs	r2, #128	; 0x80
 8002ea4:	02d2      	lsls	r2, r2, #11
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
  }
}
 8002eae:	0018      	movs	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b008      	add	sp, #32
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ec2:	200b      	movs	r0, #11
 8002ec4:	183b      	adds	r3, r7, r0
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	2120      	movs	r1, #32
 8002eca:	5c52      	ldrb	r2, [r2, r1]
 8002ecc:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ece:	183b      	adds	r3, r7, r0
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d004      	beq.n	8002ee0 <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 8002ed6:	230b      	movs	r3, #11
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d11d      	bne.n	8002f1c <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	04db      	lsls	r3, r3, #19
 8002eea:	4013      	ands	r3, r2
 8002eec:	d002      	beq.n	8002ef4 <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	051b      	lsls	r3, r3, #20
 8002efe:	4013      	ands	r3, r2
 8002f00:	d002      	beq.n	8002f08 <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3301      	adds	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	055b      	lsls	r3, r3, #21
 8002f12:	4013      	ands	r3, r2
 8002f14:	d002      	beq.n	8002f1c <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
}
 8002f1e:	0018      	movs	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b004      	add	sp, #16
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b086      	sub	sp, #24
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f34:	2017      	movs	r0, #23
 8002f36:	183b      	adds	r3, r7, r0
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	2120      	movs	r1, #32
 8002f3c:	5c52      	ldrb	r2, [r2, r1]
 8002f3e:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f40:	183b      	adds	r3, r7, r0
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d005      	beq.n	8002f54 <HAL_CAN_GetRxMessage+0x2e>
 8002f48:	2317      	movs	r3, #23
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d000      	beq.n	8002f54 <HAL_CAN_GetRxMessage+0x2e>
 8002f52:	e0f8      	b.n	8003146 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10e      	bne.n	8002f78 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2203      	movs	r2, #3
 8002f62:	4013      	ands	r3, r2
 8002f64:	d117      	bne.n	8002f96 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	2280      	movs	r2, #128	; 0x80
 8002f6c:	0392      	lsls	r2, r2, #14
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0ee      	b.n	8003156 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2203      	movs	r2, #3
 8002f80:	4013      	ands	r3, r2
 8002f82:	d108      	bne.n	8002f96 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	2280      	movs	r2, #128	; 0x80
 8002f8a:	0392      	lsls	r2, r2, #14
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0df      	b.n	8003156 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	321b      	adds	r2, #27
 8002f9e:	0112      	lsls	r2, r2, #4
 8002fa0:	58d3      	ldr	r3, [r2, r3]
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	401a      	ands	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10b      	bne.n	8002fca <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	321b      	adds	r2, #27
 8002fba:	0112      	lsls	r2, r2, #4
 8002fbc:	58d3      	ldr	r3, [r2, r3]
 8002fbe:	0d5b      	lsrs	r3, r3, #21
 8002fc0:	055b      	lsls	r3, r3, #21
 8002fc2:	0d5a      	lsrs	r2, r3, #21
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	e00a      	b.n	8002fe0 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	321b      	adds	r2, #27
 8002fd2:	0112      	lsls	r2, r2, #4
 8002fd4:	58d3      	ldr	r3, [r2, r3]
 8002fd6:	08db      	lsrs	r3, r3, #3
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	08da      	lsrs	r2, r3, #3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	321b      	adds	r2, #27
 8002fe8:	0112      	lsls	r2, r2, #4
 8002fea:	58d3      	ldr	r3, [r2, r3]
 8002fec:	2202      	movs	r2, #2
 8002fee:	401a      	ands	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	331b      	adds	r3, #27
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	18d3      	adds	r3, r2, r3
 8003000:	3304      	adds	r3, #4
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	220f      	movs	r2, #15
 8003006:	401a      	ands	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	331b      	adds	r3, #27
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	18d3      	adds	r3, r2, r3
 8003018:	3304      	adds	r3, #4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	0a1b      	lsrs	r3, r3, #8
 800301e:	22ff      	movs	r2, #255	; 0xff
 8003020:	401a      	ands	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	331b      	adds	r3, #27
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	18d3      	adds	r3, r2, r3
 8003032:	3304      	adds	r3, #4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	0c1b      	lsrs	r3, r3, #16
 8003038:	041b      	lsls	r3, r3, #16
 800303a:	0c1a      	lsrs	r2, r3, #16
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6819      	ldr	r1, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	23dc      	movs	r3, #220	; 0xdc
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	0112      	lsls	r2, r2, #4
 800304c:	188a      	adds	r2, r1, r2
 800304e:	18d3      	adds	r3, r2, r3
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6819      	ldr	r1, [r3, #0]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	23dc      	movs	r3, #220	; 0xdc
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	0112      	lsls	r2, r2, #4
 8003064:	188a      	adds	r2, r1, r2
 8003066:	18d3      	adds	r3, r2, r3
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	0a1a      	lsrs	r2, r3, #8
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	3301      	adds	r3, #1
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6819      	ldr	r1, [r3, #0]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	23dc      	movs	r3, #220	; 0xdc
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	0112      	lsls	r2, r2, #4
 8003080:	188a      	adds	r2, r1, r2
 8003082:	18d3      	adds	r3, r2, r3
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	0c1a      	lsrs	r2, r3, #16
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	3302      	adds	r3, #2
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6819      	ldr	r1, [r3, #0]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	23dc      	movs	r3, #220	; 0xdc
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	0112      	lsls	r2, r2, #4
 800309c:	188a      	adds	r2, r1, r2
 800309e:	18d3      	adds	r3, r2, r3
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	0e1a      	lsrs	r2, r3, #24
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	3303      	adds	r3, #3
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	23de      	movs	r3, #222	; 0xde
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	0112      	lsls	r2, r2, #4
 80030b8:	188a      	adds	r2, r1, r2
 80030ba:	18d3      	adds	r3, r2, r3
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	3304      	adds	r3, #4
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6819      	ldr	r1, [r3, #0]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	23de      	movs	r3, #222	; 0xde
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	0112      	lsls	r2, r2, #4
 80030d2:	188a      	adds	r2, r1, r2
 80030d4:	18d3      	adds	r3, r2, r3
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	0a1a      	lsrs	r2, r3, #8
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	3305      	adds	r3, #5
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6819      	ldr	r1, [r3, #0]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	23de      	movs	r3, #222	; 0xde
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	0112      	lsls	r2, r2, #4
 80030ee:	188a      	adds	r2, r1, r2
 80030f0:	18d3      	adds	r3, r2, r3
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	0c1a      	lsrs	r2, r3, #16
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	3306      	adds	r3, #6
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6819      	ldr	r1, [r3, #0]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	23de      	movs	r3, #222	; 0xde
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	0112      	lsls	r2, r2, #4
 800310a:	188a      	adds	r2, r1, r2
 800310c:	18d3      	adds	r3, r2, r3
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	0e1a      	lsrs	r2, r3, #24
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	3307      	adds	r3, #7
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d108      	bne.n	8003132 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2120      	movs	r1, #32
 800312c:	430a      	orrs	r2, r1
 800312e:	60da      	str	r2, [r3, #12]
 8003130:	e007      	b.n	8003142 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2120      	movs	r1, #32
 800313e:	430a      	orrs	r2, r1
 8003140:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	e007      	b.n	8003156 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	2280      	movs	r2, #128	; 0x80
 800314c:	02d2      	lsls	r2, r2, #11
 800314e:	431a      	orrs	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
  }
}
 8003156:	0018      	movs	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	b006      	add	sp, #24
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003168:	200f      	movs	r0, #15
 800316a:	183b      	adds	r3, r7, r0
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	2120      	movs	r1, #32
 8003170:	5c52      	ldrb	r2, [r2, r1]
 8003172:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003174:	183b      	adds	r3, r7, r0
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d004      	beq.n	8003186 <HAL_CAN_ActivateNotification+0x28>
 800317c:	230f      	movs	r3, #15
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d109      	bne.n	800319a <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6959      	ldr	r1, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	e007      	b.n	80031aa <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	2280      	movs	r2, #128	; 0x80
 80031a0:	02d2      	lsls	r2, r2, #11
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
  }
}
 80031aa:	0018      	movs	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b004      	add	sp, #16
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b08a      	sub	sp, #40	; 0x28
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80031ba:	2300      	movs	r3, #0
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	2201      	movs	r2, #1
 80031f2:	4013      	ands	r3, r2
 80031f4:	d100      	bne.n	80031f8 <HAL_CAN_IRQHandler+0x46>
 80031f6:	e084      	b.n	8003302 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2201      	movs	r2, #1
 80031fc:	4013      	ands	r3, r2
 80031fe:	d024      	beq.n	800324a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2201      	movs	r2, #1
 8003206:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	2202      	movs	r2, #2
 800320c:	4013      	ands	r3, r2
 800320e:	d004      	beq.n	800321a <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	0018      	movs	r0, r3
 8003214:	f7ff f852 	bl	80022bc <HAL_CAN_TxMailbox0CompleteCallback>
 8003218:	e017      	b.n	800324a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	2204      	movs	r2, #4
 800321e:	4013      	ands	r3, r2
 8003220:	d005      	beq.n	800322e <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	2280      	movs	r2, #128	; 0x80
 8003226:	0112      	lsls	r2, r2, #4
 8003228:	4313      	orrs	r3, r2
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
 800322c:	e00d      	b.n	800324a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	2208      	movs	r2, #8
 8003232:	4013      	ands	r3, r2
 8003234:	d005      	beq.n	8003242 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	2280      	movs	r2, #128	; 0x80
 800323a:	0152      	lsls	r2, r2, #5
 800323c:	4313      	orrs	r3, r2
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
 8003240:	e003      	b.n	800324a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	0018      	movs	r0, r3
 8003246:	f000 f975 	bl	8003534 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4013      	ands	r3, r2
 8003252:	d028      	beq.n	80032a6 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2280      	movs	r2, #128	; 0x80
 800325a:	0052      	lsls	r2, r2, #1
 800325c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4013      	ands	r3, r2
 8003266:	d004      	beq.n	8003272 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	0018      	movs	r0, r3
 800326c:	f000 f952 	bl	8003514 <HAL_CAN_TxMailbox1CompleteCallback>
 8003270:	e019      	b.n	80032a6 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4013      	ands	r3, r2
 800327a:	d005      	beq.n	8003288 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	2280      	movs	r2, #128	; 0x80
 8003280:	0192      	lsls	r2, r2, #6
 8003282:	4313      	orrs	r3, r2
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
 8003286:	e00e      	b.n	80032a6 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	4013      	ands	r3, r2
 8003290:	d005      	beq.n	800329e <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	2280      	movs	r2, #128	; 0x80
 8003296:	01d2      	lsls	r2, r2, #7
 8003298:	4313      	orrs	r3, r2
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
 800329c:	e003      	b.n	80032a6 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	0018      	movs	r0, r3
 80032a2:	f000 f94f 	bl	8003544 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	2380      	movs	r3, #128	; 0x80
 80032aa:	025b      	lsls	r3, r3, #9
 80032ac:	4013      	ands	r3, r2
 80032ae:	d028      	beq.n	8003302 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2280      	movs	r2, #128	; 0x80
 80032b6:	0252      	lsls	r2, r2, #9
 80032b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	029b      	lsls	r3, r3, #10
 80032c0:	4013      	ands	r3, r2
 80032c2:	d004      	beq.n	80032ce <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	0018      	movs	r0, r3
 80032c8:	f000 f92c 	bl	8003524 <HAL_CAN_TxMailbox2CompleteCallback>
 80032cc:	e019      	b.n	8003302 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	02db      	lsls	r3, r3, #11
 80032d4:	4013      	ands	r3, r2
 80032d6:	d005      	beq.n	80032e4 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	2280      	movs	r2, #128	; 0x80
 80032dc:	0212      	lsls	r2, r2, #8
 80032de:	4313      	orrs	r3, r2
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
 80032e2:	e00e      	b.n	8003302 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	031b      	lsls	r3, r3, #12
 80032ea:	4013      	ands	r3, r2
 80032ec:	d005      	beq.n	80032fa <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	2280      	movs	r2, #128	; 0x80
 80032f2:	0252      	lsls	r2, r2, #9
 80032f4:	4313      	orrs	r3, r2
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
 80032f8:	e003      	b.n	8003302 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	0018      	movs	r0, r3
 80032fe:	f000 f929 	bl	8003554 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	2208      	movs	r2, #8
 8003306:	4013      	ands	r3, r2
 8003308:	d00c      	beq.n	8003324 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2210      	movs	r2, #16
 800330e:	4013      	ands	r3, r2
 8003310:	d008      	beq.n	8003324 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	2280      	movs	r2, #128	; 0x80
 8003316:	0092      	lsls	r2, r2, #2
 8003318:	4313      	orrs	r3, r2
 800331a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2210      	movs	r2, #16
 8003322:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	2204      	movs	r2, #4
 8003328:	4013      	ands	r3, r2
 800332a:	d00b      	beq.n	8003344 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	2208      	movs	r2, #8
 8003330:	4013      	ands	r3, r2
 8003332:	d007      	beq.n	8003344 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2208      	movs	r2, #8
 800333a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	0018      	movs	r0, r3
 8003340:	f000 f910 	bl	8003564 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	2202      	movs	r2, #2
 8003348:	4013      	ands	r3, r2
 800334a:	d009      	beq.n	8003360 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	2203      	movs	r2, #3
 8003354:	4013      	ands	r3, r2
 8003356:	d003      	beq.n	8003360 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	0018      	movs	r0, r3
 800335c:	f7fe ffbc 	bl	80022d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	2240      	movs	r2, #64	; 0x40
 8003364:	4013      	ands	r3, r2
 8003366:	d00c      	beq.n	8003382 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	2210      	movs	r2, #16
 800336c:	4013      	ands	r3, r2
 800336e:	d008      	beq.n	8003382 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	2280      	movs	r2, #128	; 0x80
 8003374:	00d2      	lsls	r2, r2, #3
 8003376:	4313      	orrs	r3, r2
 8003378:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2210      	movs	r2, #16
 8003380:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	2220      	movs	r2, #32
 8003386:	4013      	ands	r3, r2
 8003388:	d00b      	beq.n	80033a2 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	2208      	movs	r2, #8
 800338e:	4013      	ands	r3, r2
 8003390:	d007      	beq.n	80033a2 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2208      	movs	r2, #8
 8003398:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	0018      	movs	r0, r3
 800339e:	f000 f8f1 	bl	8003584 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	2210      	movs	r2, #16
 80033a6:	4013      	ands	r3, r2
 80033a8:	d009      	beq.n	80033be <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2203      	movs	r2, #3
 80033b2:	4013      	ands	r3, r2
 80033b4:	d003      	beq.n	80033be <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	0018      	movs	r0, r3
 80033ba:	f000 f8db 	bl	8003574 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80033be:	6a3a      	ldr	r2, [r7, #32]
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	029b      	lsls	r3, r3, #10
 80033c4:	4013      	ands	r3, r2
 80033c6:	d00b      	beq.n	80033e0 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2210      	movs	r2, #16
 80033cc:	4013      	ands	r3, r2
 80033ce:	d007      	beq.n	80033e0 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2210      	movs	r2, #16
 80033d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	0018      	movs	r0, r3
 80033dc:	f000 f8da 	bl	8003594 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80033e0:	6a3a      	ldr	r2, [r7, #32]
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	025b      	lsls	r3, r3, #9
 80033e6:	4013      	ands	r3, r2
 80033e8:	d00b      	beq.n	8003402 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	2208      	movs	r2, #8
 80033ee:	4013      	ands	r3, r2
 80033f0:	d007      	beq.n	8003402 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2208      	movs	r2, #8
 80033f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	0018      	movs	r0, r3
 80033fe:	f000 f8d1 	bl	80035a4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003402:	6a3a      	ldr	r2, [r7, #32]
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	4013      	ands	r3, r2
 800340a:	d100      	bne.n	800340e <HAL_CAN_IRQHandler+0x25c>
 800340c:	e071      	b.n	80034f2 <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	2204      	movs	r2, #4
 8003412:	4013      	ands	r3, r2
 8003414:	d100      	bne.n	8003418 <HAL_CAN_IRQHandler+0x266>
 8003416:	e068      	b.n	80034ea <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003418:	6a3a      	ldr	r2, [r7, #32]
 800341a:	2380      	movs	r3, #128	; 0x80
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4013      	ands	r3, r2
 8003420:	d007      	beq.n	8003432 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003428:	d003      	beq.n	8003432 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	2201      	movs	r2, #1
 800342e:	4313      	orrs	r3, r2
 8003430:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003432:	6a3a      	ldr	r2, [r7, #32]
 8003434:	2380      	movs	r3, #128	; 0x80
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4013      	ands	r3, r2
 800343a:	d007      	beq.n	800344c <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2202      	movs	r2, #2
 8003440:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003442:	d003      	beq.n	800344c <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	2202      	movs	r2, #2
 8003448:	4313      	orrs	r3, r2
 800344a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800344c:	6a3a      	ldr	r2, [r7, #32]
 800344e:	2380      	movs	r3, #128	; 0x80
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4013      	ands	r3, r2
 8003454:	d007      	beq.n	8003466 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2204      	movs	r2, #4
 800345a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800345c:	d003      	beq.n	8003466 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	2204      	movs	r2, #4
 8003462:	4313      	orrs	r3, r2
 8003464:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003466:	6a3a      	ldr	r2, [r7, #32]
 8003468:	2380      	movs	r3, #128	; 0x80
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	4013      	ands	r3, r2
 800346e:	d03c      	beq.n	80034ea <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2270      	movs	r2, #112	; 0x70
 8003474:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003476:	d038      	beq.n	80034ea <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2270      	movs	r2, #112	; 0x70
 800347c:	4013      	ands	r3, r2
 800347e:	2b30      	cmp	r3, #48	; 0x30
 8003480:	d016      	beq.n	80034b0 <HAL_CAN_IRQHandler+0x2fe>
 8003482:	d804      	bhi.n	800348e <HAL_CAN_IRQHandler+0x2dc>
 8003484:	2b10      	cmp	r3, #16
 8003486:	d009      	beq.n	800349c <HAL_CAN_IRQHandler+0x2ea>
 8003488:	2b20      	cmp	r3, #32
 800348a:	d00c      	beq.n	80034a6 <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800348c:	e025      	b.n	80034da <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 800348e:	2b50      	cmp	r3, #80	; 0x50
 8003490:	d018      	beq.n	80034c4 <HAL_CAN_IRQHandler+0x312>
 8003492:	2b60      	cmp	r3, #96	; 0x60
 8003494:	d01b      	beq.n	80034ce <HAL_CAN_IRQHandler+0x31c>
 8003496:	2b40      	cmp	r3, #64	; 0x40
 8003498:	d00f      	beq.n	80034ba <HAL_CAN_IRQHandler+0x308>
            break;
 800349a:	e01e      	b.n	80034da <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	2208      	movs	r2, #8
 80034a0:	4313      	orrs	r3, r2
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034a4:	e019      	b.n	80034da <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	2210      	movs	r2, #16
 80034aa:	4313      	orrs	r3, r2
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034ae:	e014      	b.n	80034da <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	2220      	movs	r2, #32
 80034b4:	4313      	orrs	r3, r2
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034b8:	e00f      	b.n	80034da <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	2240      	movs	r2, #64	; 0x40
 80034be:	4313      	orrs	r3, r2
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034c2:	e00a      	b.n	80034da <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	2280      	movs	r2, #128	; 0x80
 80034c8:	4313      	orrs	r3, r2
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034cc:	e005      	b.n	80034da <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	2280      	movs	r2, #128	; 0x80
 80034d2:	0052      	lsls	r2, r2, #1
 80034d4:	4313      	orrs	r3, r2
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034d8:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699a      	ldr	r2, [r3, #24]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2170      	movs	r1, #112	; 0x70
 80034e6:	438a      	bics	r2, r1
 80034e8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2204      	movs	r2, #4
 80034f0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d009      	beq.n	800350c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	0018      	movs	r0, r3
 8003508:	f7fe fefe 	bl	8002308 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800350c:	46c0      	nop			; (mov r8, r8)
 800350e:	46bd      	mov	sp, r7
 8003510:	b00a      	add	sp, #40	; 0x28
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800351c:	46c0      	nop			; (mov r8, r8)
 800351e:	46bd      	mov	sp, r7
 8003520:	b002      	add	sp, #8
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800352c:	46c0      	nop			; (mov r8, r8)
 800352e:	46bd      	mov	sp, r7
 8003530:	b002      	add	sp, #8
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	b002      	add	sp, #8
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	b002      	add	sp, #8
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	b002      	add	sp, #8
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	b002      	add	sp, #8
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800357c:	46c0      	nop			; (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	b002      	add	sp, #8
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	46bd      	mov	sp, r7
 8003590:	b002      	add	sp, #8
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b002      	add	sp, #8
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b002      	add	sp, #8
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	0002      	movs	r2, r0
 80035bc:	1dfb      	adds	r3, r7, #7
 80035be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035c0:	1dfb      	adds	r3, r7, #7
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b7f      	cmp	r3, #127	; 0x7f
 80035c6:	d809      	bhi.n	80035dc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035c8:	1dfb      	adds	r3, r7, #7
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	001a      	movs	r2, r3
 80035ce:	231f      	movs	r3, #31
 80035d0:	401a      	ands	r2, r3
 80035d2:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <__NVIC_EnableIRQ+0x30>)
 80035d4:	2101      	movs	r1, #1
 80035d6:	4091      	lsls	r1, r2
 80035d8:	000a      	movs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]
  }
}
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	46bd      	mov	sp, r7
 80035e0:	b002      	add	sp, #8
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	e000e100 	.word	0xe000e100

080035e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	0002      	movs	r2, r0
 80035f0:	6039      	str	r1, [r7, #0]
 80035f2:	1dfb      	adds	r3, r7, #7
 80035f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035f6:	1dfb      	adds	r3, r7, #7
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b7f      	cmp	r3, #127	; 0x7f
 80035fc:	d828      	bhi.n	8003650 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035fe:	4a2f      	ldr	r2, [pc, #188]	; (80036bc <__NVIC_SetPriority+0xd4>)
 8003600:	1dfb      	adds	r3, r7, #7
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	b25b      	sxtb	r3, r3
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	33c0      	adds	r3, #192	; 0xc0
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	589b      	ldr	r3, [r3, r2]
 800360e:	1dfa      	adds	r2, r7, #7
 8003610:	7812      	ldrb	r2, [r2, #0]
 8003612:	0011      	movs	r1, r2
 8003614:	2203      	movs	r2, #3
 8003616:	400a      	ands	r2, r1
 8003618:	00d2      	lsls	r2, r2, #3
 800361a:	21ff      	movs	r1, #255	; 0xff
 800361c:	4091      	lsls	r1, r2
 800361e:	000a      	movs	r2, r1
 8003620:	43d2      	mvns	r2, r2
 8003622:	401a      	ands	r2, r3
 8003624:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	019b      	lsls	r3, r3, #6
 800362a:	22ff      	movs	r2, #255	; 0xff
 800362c:	401a      	ands	r2, r3
 800362e:	1dfb      	adds	r3, r7, #7
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	0018      	movs	r0, r3
 8003634:	2303      	movs	r3, #3
 8003636:	4003      	ands	r3, r0
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800363c:	481f      	ldr	r0, [pc, #124]	; (80036bc <__NVIC_SetPriority+0xd4>)
 800363e:	1dfb      	adds	r3, r7, #7
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	b25b      	sxtb	r3, r3
 8003644:	089b      	lsrs	r3, r3, #2
 8003646:	430a      	orrs	r2, r1
 8003648:	33c0      	adds	r3, #192	; 0xc0
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800364e:	e031      	b.n	80036b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003650:	4a1b      	ldr	r2, [pc, #108]	; (80036c0 <__NVIC_SetPriority+0xd8>)
 8003652:	1dfb      	adds	r3, r7, #7
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	0019      	movs	r1, r3
 8003658:	230f      	movs	r3, #15
 800365a:	400b      	ands	r3, r1
 800365c:	3b08      	subs	r3, #8
 800365e:	089b      	lsrs	r3, r3, #2
 8003660:	3306      	adds	r3, #6
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	18d3      	adds	r3, r2, r3
 8003666:	3304      	adds	r3, #4
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	1dfa      	adds	r2, r7, #7
 800366c:	7812      	ldrb	r2, [r2, #0]
 800366e:	0011      	movs	r1, r2
 8003670:	2203      	movs	r2, #3
 8003672:	400a      	ands	r2, r1
 8003674:	00d2      	lsls	r2, r2, #3
 8003676:	21ff      	movs	r1, #255	; 0xff
 8003678:	4091      	lsls	r1, r2
 800367a:	000a      	movs	r2, r1
 800367c:	43d2      	mvns	r2, r2
 800367e:	401a      	ands	r2, r3
 8003680:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	019b      	lsls	r3, r3, #6
 8003686:	22ff      	movs	r2, #255	; 0xff
 8003688:	401a      	ands	r2, r3
 800368a:	1dfb      	adds	r3, r7, #7
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	0018      	movs	r0, r3
 8003690:	2303      	movs	r3, #3
 8003692:	4003      	ands	r3, r0
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003698:	4809      	ldr	r0, [pc, #36]	; (80036c0 <__NVIC_SetPriority+0xd8>)
 800369a:	1dfb      	adds	r3, r7, #7
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	001c      	movs	r4, r3
 80036a0:	230f      	movs	r3, #15
 80036a2:	4023      	ands	r3, r4
 80036a4:	3b08      	subs	r3, #8
 80036a6:	089b      	lsrs	r3, r3, #2
 80036a8:	430a      	orrs	r2, r1
 80036aa:	3306      	adds	r3, #6
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	18c3      	adds	r3, r0, r3
 80036b0:	3304      	adds	r3, #4
 80036b2:	601a      	str	r2, [r3, #0]
}
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b003      	add	sp, #12
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	e000e100 	.word	0xe000e100
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	4a0c      	ldr	r2, [pc, #48]	; (8003704 <SysTick_Config+0x40>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036d6:	2301      	movs	r3, #1
 80036d8:	e010      	b.n	80036fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <SysTick_Config+0x44>)
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	3a01      	subs	r2, #1
 80036e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036e2:	2301      	movs	r3, #1
 80036e4:	425b      	negs	r3, r3
 80036e6:	2103      	movs	r1, #3
 80036e8:	0018      	movs	r0, r3
 80036ea:	f7ff ff7d 	bl	80035e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ee:	4b06      	ldr	r3, [pc, #24]	; (8003708 <SysTick_Config+0x44>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <SysTick_Config+0x44>)
 80036f6:	2207      	movs	r2, #7
 80036f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	b002      	add	sp, #8
 8003702:	bd80      	pop	{r7, pc}
 8003704:	00ffffff 	.word	0x00ffffff
 8003708:	e000e010 	.word	0xe000e010

0800370c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	210f      	movs	r1, #15
 8003718:	187b      	adds	r3, r7, r1
 800371a:	1c02      	adds	r2, r0, #0
 800371c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	187b      	adds	r3, r7, r1
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	b25b      	sxtb	r3, r3
 8003726:	0011      	movs	r1, r2
 8003728:	0018      	movs	r0, r3
 800372a:	f7ff ff5d 	bl	80035e8 <__NVIC_SetPriority>
}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b004      	add	sp, #16
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	0002      	movs	r2, r0
 800373e:	1dfb      	adds	r3, r7, #7
 8003740:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003742:	1dfb      	adds	r3, r7, #7
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	b25b      	sxtb	r3, r3
 8003748:	0018      	movs	r0, r3
 800374a:	f7ff ff33 	bl	80035b4 <__NVIC_EnableIRQ>
}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	46bd      	mov	sp, r7
 8003752:	b002      	add	sp, #8
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	0018      	movs	r0, r3
 8003762:	f7ff ffaf 	bl	80036c4 <SysTick_Config>
 8003766:	0003      	movs	r3, r0
}
 8003768:	0018      	movs	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	b002      	add	sp, #8
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800377e:	e155      	b.n	8003a2c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2101      	movs	r1, #1
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4091      	lsls	r1, r2
 800378a:	000a      	movs	r2, r1
 800378c:	4013      	ands	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d100      	bne.n	8003798 <HAL_GPIO_Init+0x28>
 8003796:	e146      	b.n	8003a26 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d003      	beq.n	80037a8 <HAL_GPIO_Init+0x38>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b12      	cmp	r3, #18
 80037a6:	d123      	bne.n	80037f0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	08da      	lsrs	r2, r3, #3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3208      	adds	r2, #8
 80037b0:	0092      	lsls	r2, r2, #2
 80037b2:	58d3      	ldr	r3, [r2, r3]
 80037b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2207      	movs	r2, #7
 80037ba:	4013      	ands	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	220f      	movs	r2, #15
 80037c0:	409a      	lsls	r2, r3
 80037c2:	0013      	movs	r3, r2
 80037c4:	43da      	mvns	r2, r3
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4013      	ands	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2107      	movs	r1, #7
 80037d4:	400b      	ands	r3, r1
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	409a      	lsls	r2, r3
 80037da:	0013      	movs	r3, r2
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	08da      	lsrs	r2, r3, #3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3208      	adds	r2, #8
 80037ea:	0092      	lsls	r2, r2, #2
 80037ec:	6939      	ldr	r1, [r7, #16]
 80037ee:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	2203      	movs	r2, #3
 80037fc:	409a      	lsls	r2, r3
 80037fe:	0013      	movs	r3, r2
 8003800:	43da      	mvns	r2, r3
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4013      	ands	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2203      	movs	r2, #3
 800380e:	401a      	ands	r2, r3
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	409a      	lsls	r2, r3
 8003816:	0013      	movs	r3, r2
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d00b      	beq.n	8003844 <HAL_GPIO_Init+0xd4>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d007      	beq.n	8003844 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003838:	2b11      	cmp	r3, #17
 800383a:	d003      	beq.n	8003844 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b12      	cmp	r3, #18
 8003842:	d130      	bne.n	80038a6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	2203      	movs	r2, #3
 8003850:	409a      	lsls	r2, r3
 8003852:	0013      	movs	r3, r2
 8003854:	43da      	mvns	r2, r3
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	409a      	lsls	r2, r3
 8003866:	0013      	movs	r3, r2
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800387a:	2201      	movs	r2, #1
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	409a      	lsls	r2, r3
 8003880:	0013      	movs	r3, r2
 8003882:	43da      	mvns	r2, r3
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4013      	ands	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	091b      	lsrs	r3, r3, #4
 8003890:	2201      	movs	r2, #1
 8003892:	401a      	ands	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	409a      	lsls	r2, r3
 8003898:	0013      	movs	r3, r2
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	2203      	movs	r2, #3
 80038b2:	409a      	lsls	r2, r3
 80038b4:	0013      	movs	r3, r2
 80038b6:	43da      	mvns	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4013      	ands	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	409a      	lsls	r2, r3
 80038c8:	0013      	movs	r3, r2
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	055b      	lsls	r3, r3, #21
 80038de:	4013      	ands	r3, r2
 80038e0:	d100      	bne.n	80038e4 <HAL_GPIO_Init+0x174>
 80038e2:	e0a0      	b.n	8003a26 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038e4:	4b57      	ldr	r3, [pc, #348]	; (8003a44 <HAL_GPIO_Init+0x2d4>)
 80038e6:	699a      	ldr	r2, [r3, #24]
 80038e8:	4b56      	ldr	r3, [pc, #344]	; (8003a44 <HAL_GPIO_Init+0x2d4>)
 80038ea:	2101      	movs	r1, #1
 80038ec:	430a      	orrs	r2, r1
 80038ee:	619a      	str	r2, [r3, #24]
 80038f0:	4b54      	ldr	r3, [pc, #336]	; (8003a44 <HAL_GPIO_Init+0x2d4>)
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	2201      	movs	r2, #1
 80038f6:	4013      	ands	r3, r2
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038fc:	4a52      	ldr	r2, [pc, #328]	; (8003a48 <HAL_GPIO_Init+0x2d8>)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	089b      	lsrs	r3, r3, #2
 8003902:	3302      	adds	r3, #2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	589b      	ldr	r3, [r3, r2]
 8003908:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2203      	movs	r2, #3
 800390e:	4013      	ands	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	220f      	movs	r2, #15
 8003914:	409a      	lsls	r2, r3
 8003916:	0013      	movs	r3, r2
 8003918:	43da      	mvns	r2, r3
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4013      	ands	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	2390      	movs	r3, #144	; 0x90
 8003924:	05db      	lsls	r3, r3, #23
 8003926:	429a      	cmp	r2, r3
 8003928:	d019      	beq.n	800395e <HAL_GPIO_Init+0x1ee>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a47      	ldr	r2, [pc, #284]	; (8003a4c <HAL_GPIO_Init+0x2dc>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <HAL_GPIO_Init+0x1ea>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a46      	ldr	r2, [pc, #280]	; (8003a50 <HAL_GPIO_Init+0x2e0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00d      	beq.n	8003956 <HAL_GPIO_Init+0x1e6>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a45      	ldr	r2, [pc, #276]	; (8003a54 <HAL_GPIO_Init+0x2e4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d007      	beq.n	8003952 <HAL_GPIO_Init+0x1e2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a44      	ldr	r2, [pc, #272]	; (8003a58 <HAL_GPIO_Init+0x2e8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <HAL_GPIO_Init+0x1de>
 800394a:	2304      	movs	r3, #4
 800394c:	e008      	b.n	8003960 <HAL_GPIO_Init+0x1f0>
 800394e:	2305      	movs	r3, #5
 8003950:	e006      	b.n	8003960 <HAL_GPIO_Init+0x1f0>
 8003952:	2303      	movs	r3, #3
 8003954:	e004      	b.n	8003960 <HAL_GPIO_Init+0x1f0>
 8003956:	2302      	movs	r3, #2
 8003958:	e002      	b.n	8003960 <HAL_GPIO_Init+0x1f0>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <HAL_GPIO_Init+0x1f0>
 800395e:	2300      	movs	r3, #0
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	2103      	movs	r1, #3
 8003964:	400a      	ands	r2, r1
 8003966:	0092      	lsls	r2, r2, #2
 8003968:	4093      	lsls	r3, r2
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003970:	4935      	ldr	r1, [pc, #212]	; (8003a48 <HAL_GPIO_Init+0x2d8>)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	089b      	lsrs	r3, r3, #2
 8003976:	3302      	adds	r3, #2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800397e:	4b37      	ldr	r3, [pc, #220]	; (8003a5c <HAL_GPIO_Init+0x2ec>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	43da      	mvns	r2, r3
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4013      	ands	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	2380      	movs	r3, #128	; 0x80
 8003994:	025b      	lsls	r3, r3, #9
 8003996:	4013      	ands	r3, r2
 8003998:	d003      	beq.n	80039a2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80039a2:	4b2e      	ldr	r3, [pc, #184]	; (8003a5c <HAL_GPIO_Init+0x2ec>)
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80039a8:	4b2c      	ldr	r3, [pc, #176]	; (8003a5c <HAL_GPIO_Init+0x2ec>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	43da      	mvns	r2, r3
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4013      	ands	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	2380      	movs	r3, #128	; 0x80
 80039be:	029b      	lsls	r3, r3, #10
 80039c0:	4013      	ands	r3, r2
 80039c2:	d003      	beq.n	80039cc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80039cc:	4b23      	ldr	r3, [pc, #140]	; (8003a5c <HAL_GPIO_Init+0x2ec>)
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039d2:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <HAL_GPIO_Init+0x2ec>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	43da      	mvns	r2, r3
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	4013      	ands	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	2380      	movs	r3, #128	; 0x80
 80039e8:	035b      	lsls	r3, r3, #13
 80039ea:	4013      	ands	r3, r2
 80039ec:	d003      	beq.n	80039f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80039f6:	4b19      	ldr	r3, [pc, #100]	; (8003a5c <HAL_GPIO_Init+0x2ec>)
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80039fc:	4b17      	ldr	r3, [pc, #92]	; (8003a5c <HAL_GPIO_Init+0x2ec>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	43da      	mvns	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	2380      	movs	r3, #128	; 0x80
 8003a12:	039b      	lsls	r3, r3, #14
 8003a14:	4013      	ands	r3, r2
 8003a16:	d003      	beq.n	8003a20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a20:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <HAL_GPIO_Init+0x2ec>)
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	40da      	lsrs	r2, r3
 8003a34:	1e13      	subs	r3, r2, #0
 8003a36:	d000      	beq.n	8003a3a <HAL_GPIO_Init+0x2ca>
 8003a38:	e6a2      	b.n	8003780 <HAL_GPIO_Init+0x10>
  } 
}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b006      	add	sp, #24
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	48000400 	.word	0x48000400
 8003a50:	48000800 	.word	0x48000800
 8003a54:	48000c00 	.word	0x48000c00
 8003a58:	48001000 	.word	0x48001000
 8003a5c:	40010400 	.word	0x40010400

08003a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	0008      	movs	r0, r1
 8003a6a:	0011      	movs	r1, r2
 8003a6c:	1cbb      	adds	r3, r7, #2
 8003a6e:	1c02      	adds	r2, r0, #0
 8003a70:	801a      	strh	r2, [r3, #0]
 8003a72:	1c7b      	adds	r3, r7, #1
 8003a74:	1c0a      	adds	r2, r1, #0
 8003a76:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a78:	1c7b      	adds	r3, r7, #1
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a80:	1cbb      	adds	r3, r7, #2
 8003a82:	881a      	ldrh	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a88:	e003      	b.n	8003a92 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a8a:	1cbb      	adds	r3, r7, #2
 8003a8c:	881a      	ldrh	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b002      	add	sp, #8
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a9e:	b08b      	sub	sp, #44	; 0x2c
 8003aa0:	af06      	add	r7, sp, #24
 8003aa2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e0d4      	b.n	8003c58 <HAL_PCD_Init+0x1bc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a6b      	ldr	r2, [pc, #428]	; (8003c60 <HAL_PCD_Init+0x1c4>)
 8003ab2:	5c9b      	ldrb	r3, [r3, r2]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d108      	bne.n	8003acc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	238a      	movs	r3, #138	; 0x8a
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f004 fd24 	bl	8008514 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a64      	ldr	r2, [pc, #400]	; (8003c60 <HAL_PCD_Init+0x1c4>)
 8003ad0:	2103      	movs	r1, #3
 8003ad2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f001 fde3 	bl	80056a4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ade:	230f      	movs	r3, #15
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	e043      	b.n	8003b70 <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ae8:	200f      	movs	r0, #15
 8003aea:	183b      	adds	r3, r7, r0
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	2129      	movs	r1, #41	; 0x29
 8003af2:	015b      	lsls	r3, r3, #5
 8003af4:	18d3      	adds	r3, r2, r3
 8003af6:	185b      	adds	r3, r3, r1
 8003af8:	2201      	movs	r2, #1
 8003afa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003afc:	183b      	adds	r3, r7, r0
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	2128      	movs	r1, #40	; 0x28
 8003b04:	015b      	lsls	r3, r3, #5
 8003b06:	18d3      	adds	r3, r2, r3
 8003b08:	185b      	adds	r3, r3, r1
 8003b0a:	183a      	adds	r2, r7, r0
 8003b0c:	7812      	ldrb	r2, [r2, #0]
 8003b0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b10:	183b      	adds	r3, r7, r0
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	183a      	adds	r2, r7, r0
 8003b16:	7812      	ldrb	r2, [r2, #0]
 8003b18:	b291      	uxth	r1, r2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	015b      	lsls	r3, r3, #5
 8003b1e:	18d3      	adds	r3, r2, r3
 8003b20:	3336      	adds	r3, #54	; 0x36
 8003b22:	1c0a      	adds	r2, r1, #0
 8003b24:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b26:	183b      	adds	r3, r7, r0
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	212b      	movs	r1, #43	; 0x2b
 8003b2e:	015b      	lsls	r3, r3, #5
 8003b30:	18d3      	adds	r3, r2, r3
 8003b32:	185b      	adds	r3, r3, r1
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b38:	183b      	adds	r3, r7, r0
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	015b      	lsls	r3, r3, #5
 8003b40:	18d3      	adds	r3, r2, r3
 8003b42:	3338      	adds	r3, #56	; 0x38
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b48:	183b      	adds	r3, r7, r0
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	015b      	lsls	r3, r3, #5
 8003b50:	18d3      	adds	r3, r2, r3
 8003b52:	333c      	adds	r3, #60	; 0x3c
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b58:	183b      	adds	r3, r7, r0
 8003b5a:	781a      	ldrb	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3202      	adds	r2, #2
 8003b60:	0152      	lsls	r2, r2, #5
 8003b62:	2100      	movs	r1, #0
 8003b64:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b66:	183b      	adds	r3, r7, r0
 8003b68:	781a      	ldrb	r2, [r3, #0]
 8003b6a:	183b      	adds	r3, r7, r0
 8003b6c:	3201      	adds	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]
 8003b70:	230f      	movs	r3, #15
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	781a      	ldrb	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d3b4      	bcc.n	8003ae8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b7e:	230f      	movs	r3, #15
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	e03f      	b.n	8003c08 <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b88:	200f      	movs	r0, #15
 8003b8a:	183b      	adds	r3, r7, r0
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	232a      	movs	r3, #42	; 0x2a
 8003b92:	33ff      	adds	r3, #255	; 0xff
 8003b94:	0152      	lsls	r2, r2, #5
 8003b96:	188a      	adds	r2, r1, r2
 8003b98:	18d3      	adds	r3, r2, r3
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b9e:	183b      	adds	r3, r7, r0
 8003ba0:	781a      	ldrb	r2, [r3, #0]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	2394      	movs	r3, #148	; 0x94
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	0152      	lsls	r2, r2, #5
 8003baa:	188a      	adds	r2, r1, r2
 8003bac:	18d3      	adds	r3, r2, r3
 8003bae:	183a      	adds	r2, r7, r0
 8003bb0:	7812      	ldrb	r2, [r2, #0]
 8003bb2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bb4:	183b      	adds	r3, r7, r0
 8003bb6:	781a      	ldrb	r2, [r3, #0]
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	232c      	movs	r3, #44	; 0x2c
 8003bbc:	33ff      	adds	r3, #255	; 0xff
 8003bbe:	0152      	lsls	r2, r2, #5
 8003bc0:	188a      	adds	r2, r1, r2
 8003bc2:	18d3      	adds	r3, r2, r3
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bc8:	183b      	adds	r3, r7, r0
 8003bca:	781a      	ldrb	r2, [r3, #0]
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	239c      	movs	r3, #156	; 0x9c
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	0152      	lsls	r2, r2, #5
 8003bd4:	188a      	adds	r2, r1, r2
 8003bd6:	18d3      	adds	r3, r2, r3
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bdc:	183b      	adds	r3, r7, r0
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	239e      	movs	r3, #158	; 0x9e
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	0152      	lsls	r2, r2, #5
 8003be8:	188a      	adds	r2, r1, r2
 8003bea:	18d3      	adds	r3, r2, r3
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bf0:	183b      	adds	r3, r7, r0
 8003bf2:	781a      	ldrb	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	320a      	adds	r2, #10
 8003bf8:	0152      	lsls	r2, r2, #5
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bfe:	183b      	adds	r3, r7, r0
 8003c00:	781a      	ldrb	r2, [r3, #0]
 8003c02:	183b      	adds	r3, r7, r0
 8003c04:	3201      	adds	r2, #1
 8003c06:	701a      	strb	r2, [r3, #0]
 8003c08:	230f      	movs	r3, #15
 8003c0a:	18fb      	adds	r3, r7, r3
 8003c0c:	781a      	ldrb	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d3b8      	bcc.n	8003b88 <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	466a      	mov	r2, sp
 8003c1e:	0011      	movs	r1, r2
 8003c20:	001a      	movs	r2, r3
 8003c22:	3210      	adds	r2, #16
 8003c24:	ca70      	ldmia	r2!, {r4, r5, r6}
 8003c26:	c170      	stmia	r1!, {r4, r5, r6}
 8003c28:	ca30      	ldmia	r2!, {r4, r5}
 8003c2a:	c130      	stmia	r1!, {r4, r5}
 8003c2c:	6859      	ldr	r1, [r3, #4]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f001 fd57 	bl	80056e4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2224      	movs	r2, #36	; 0x24
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a07      	ldr	r2, [pc, #28]	; (8003c60 <HAL_PCD_Init+0x1c4>)
 8003c42:	2101      	movs	r1, #1
 8003c44:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d103      	bne.n	8003c56 <HAL_PCD_Init+0x1ba>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	0018      	movs	r0, r3
 8003c52:	f000 fef9 	bl	8004a48 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	0018      	movs	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b005      	add	sp, #20
 8003c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c60:	00000229 	.word	0x00000229

08003c64 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	238a      	movs	r3, #138	; 0x8a
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	5cd3      	ldrb	r3, [r2, r3]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_PCD_Start+0x18>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e014      	b.n	8003ca6 <HAL_PCD_Start+0x42>
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	238a      	movs	r3, #138	; 0x8a
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	2101      	movs	r1, #1
 8003c84:	54d1      	strb	r1, [r2, r3]
  (void)USB_DevConnect(hpcd->Instance);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f002 fd82 	bl	8006794 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	0018      	movs	r0, r3
 8003c96:	f001 fceb 	bl	8005670 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	238a      	movs	r3, #138	; 0x8a
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b002      	add	sp, #8
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f002 fd7f 	bl	80067c0 <USB_ReadInterrupts>
 8003cc2:	0002      	movs	r2, r0
 8003cc4:	2380      	movs	r3, #128	; 0x80
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	401a      	ands	r2, r3
 8003cca:	2380      	movs	r3, #128	; 0x80
 8003ccc:	021b      	lsls	r3, r3, #8
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d103      	bne.n	8003cda <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f000 fb9b 	bl	8004410 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f002 fd6e 	bl	80067c0 <USB_ReadInterrupts>
 8003ce4:	0002      	movs	r2, r0
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	401a      	ands	r2, r3
 8003cec:	2380      	movs	r3, #128	; 0x80
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d114      	bne.n	8003d1e <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2244      	movs	r2, #68	; 0x44
 8003cfa:	5a9b      	ldrh	r3, [r3, r2]
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	49a8      	ldr	r1, [pc, #672]	; (8003fa4 <HAL_PCD_IRQHandler+0x2f4>)
 8003d04:	400a      	ands	r2, r1
 8003d06:	b291      	uxth	r1, r2
 8003d08:	2244      	movs	r2, #68	; 0x44
 8003d0a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f004 fc84 	bl	800861c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2100      	movs	r1, #0
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f000 f951 	bl	8003fc0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	0018      	movs	r0, r3
 8003d24:	f002 fd4c 	bl	80067c0 <USB_ReadInterrupts>
 8003d28:	0002      	movs	r2, r0
 8003d2a:	2380      	movs	r3, #128	; 0x80
 8003d2c:	01db      	lsls	r3, r3, #7
 8003d2e:	401a      	ands	r2, r3
 8003d30:	2380      	movs	r3, #128	; 0x80
 8003d32:	01db      	lsls	r3, r3, #7
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d10b      	bne.n	8003d50 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2244      	movs	r2, #68	; 0x44
 8003d3e:	5a9b      	ldrh	r3, [r3, r2]
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4998      	ldr	r1, [pc, #608]	; (8003fa8 <HAL_PCD_IRQHandler+0x2f8>)
 8003d48:	400a      	ands	r2, r1
 8003d4a:	b291      	uxth	r1, r2
 8003d4c:	2244      	movs	r2, #68	; 0x44
 8003d4e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	0018      	movs	r0, r3
 8003d56:	f002 fd33 	bl	80067c0 <USB_ReadInterrupts>
 8003d5a:	0002      	movs	r2, r0
 8003d5c:	2380      	movs	r3, #128	; 0x80
 8003d5e:	019b      	lsls	r3, r3, #6
 8003d60:	401a      	ands	r2, r3
 8003d62:	2380      	movs	r3, #128	; 0x80
 8003d64:	019b      	lsls	r3, r3, #6
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d10b      	bne.n	8003d82 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2244      	movs	r2, #68	; 0x44
 8003d70:	5a9b      	ldrh	r3, [r3, r2]
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	498c      	ldr	r1, [pc, #560]	; (8003fac <HAL_PCD_IRQHandler+0x2fc>)
 8003d7a:	400a      	ands	r2, r1
 8003d7c:	b291      	uxth	r1, r2
 8003d7e:	2244      	movs	r2, #68	; 0x44
 8003d80:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	0018      	movs	r0, r3
 8003d88:	f002 fd1a 	bl	80067c0 <USB_ReadInterrupts>
 8003d8c:	0002      	movs	r2, r0
 8003d8e:	2380      	movs	r3, #128	; 0x80
 8003d90:	015b      	lsls	r3, r3, #5
 8003d92:	401a      	ands	r2, r3
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	015b      	lsls	r3, r3, #5
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d137      	bne.n	8003e0c <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2240      	movs	r2, #64	; 0x40
 8003da2:	5a9b      	ldrh	r3, [r3, r2]
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2104      	movs	r1, #4
 8003dac:	438a      	bics	r2, r1
 8003dae:	b291      	uxth	r1, r2
 8003db0:	2240      	movs	r2, #64	; 0x40
 8003db2:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2240      	movs	r2, #64	; 0x40
 8003dba:	5a9b      	ldrh	r3, [r3, r2]
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2108      	movs	r1, #8
 8003dc4:	438a      	bics	r2, r1
 8003dc6:	b291      	uxth	r1, r2
 8003dc8:	2240      	movs	r2, #64	; 0x40
 8003dca:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	2398      	movs	r3, #152	; 0x98
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	5cd3      	ldrb	r3, [r2, r3]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d109      	bne.n	8003dec <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	2398      	movs	r3, #152	; 0x98
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	2100      	movs	r1, #0
 8003de0:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2100      	movs	r1, #0
 8003de6:	0018      	movs	r0, r3
 8003de8:	f000 fe58 	bl	8004a9c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	0018      	movs	r0, r3
 8003df0:	f004 fc54 	bl	800869c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2244      	movs	r2, #68	; 0x44
 8003dfa:	5a9b      	ldrh	r3, [r3, r2]
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	496b      	ldr	r1, [pc, #428]	; (8003fb0 <HAL_PCD_IRQHandler+0x300>)
 8003e04:	400a      	ands	r2, r1
 8003e06:	b291      	uxth	r1, r2
 8003e08:	2244      	movs	r2, #68	; 0x44
 8003e0a:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	0018      	movs	r0, r3
 8003e12:	f002 fcd5 	bl	80067c0 <USB_ReadInterrupts>
 8003e16:	0002      	movs	r2, r0
 8003e18:	2380      	movs	r3, #128	; 0x80
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	401a      	ands	r2, r3
 8003e1e:	2380      	movs	r3, #128	; 0x80
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d134      	bne.n	8003e90 <HAL_PCD_IRQHandler+0x1e0>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2240      	movs	r2, #64	; 0x40
 8003e2c:	5a9b      	ldrh	r3, [r3, r2]
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2108      	movs	r1, #8
 8003e36:	430a      	orrs	r2, r1
 8003e38:	b291      	uxth	r1, r2
 8003e3a:	2240      	movs	r2, #64	; 0x40
 8003e3c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2244      	movs	r2, #68	; 0x44
 8003e44:	5a9b      	ldrh	r3, [r3, r2]
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4959      	ldr	r1, [pc, #356]	; (8003fb4 <HAL_PCD_IRQHandler+0x304>)
 8003e4e:	400a      	ands	r2, r1
 8003e50:	b291      	uxth	r1, r2
 8003e52:	2244      	movs	r2, #68	; 0x44
 8003e54:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2240      	movs	r2, #64	; 0x40
 8003e5c:	5a9b      	ldrh	r3, [r3, r2]
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2104      	movs	r1, #4
 8003e66:	430a      	orrs	r2, r1
 8003e68:	b291      	uxth	r1, r2
 8003e6a:	2240      	movs	r2, #64	; 0x40
 8003e6c:	5299      	strh	r1, [r3, r2]

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	0018      	movs	r0, r3
 8003e74:	f002 fca4 	bl	80067c0 <USB_ReadInterrupts>
 8003e78:	0002      	movs	r2, r0
 8003e7a:	2380      	movs	r3, #128	; 0x80
 8003e7c:	015b      	lsls	r3, r3, #5
 8003e7e:	401a      	ands	r2, r3
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	015b      	lsls	r3, r3, #5
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d003      	beq.n	8003e90 <HAL_PCD_IRQHandler+0x1e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f004 fbea 	bl	8008664 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	0018      	movs	r0, r3
 8003e96:	f002 fc93 	bl	80067c0 <USB_ReadInterrupts>
 8003e9a:	0002      	movs	r2, r0
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b80      	cmp	r3, #128	; 0x80
 8003ea2:	d145      	bne.n	8003f30 <HAL_PCD_IRQHandler+0x280>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2244      	movs	r2, #68	; 0x44
 8003eaa:	5a9b      	ldrh	r3, [r3, r2]
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2180      	movs	r1, #128	; 0x80
 8003eb4:	438a      	bics	r2, r1
 8003eb6:	b291      	uxth	r1, r2
 8003eb8:	2244      	movs	r2, #68	; 0x44
 8003eba:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	2398      	movs	r3, #152	; 0x98
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	5cd3      	ldrb	r3, [r2, r3]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d12f      	bne.n	8003f28 <HAL_PCD_IRQHandler+0x278>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2240      	movs	r2, #64	; 0x40
 8003ece:	5a9b      	ldrh	r3, [r3, r2]
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2104      	movs	r1, #4
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	b291      	uxth	r1, r2
 8003edc:	2240      	movs	r2, #64	; 0x40
 8003ede:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2240      	movs	r2, #64	; 0x40
 8003ee6:	5a9b      	ldrh	r3, [r3, r2]
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2108      	movs	r1, #8
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	b291      	uxth	r1, r2
 8003ef4:	2240      	movs	r2, #64	; 0x40
 8003ef6:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	2398      	movs	r3, #152	; 0x98
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	2101      	movs	r1, #1
 8003f00:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2254      	movs	r2, #84	; 0x54
 8003f08:	5a9b      	ldrh	r3, [r3, r2]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	089b      	lsrs	r3, r3, #2
 8003f0e:	223c      	movs	r2, #60	; 0x3c
 8003f10:	4013      	ands	r3, r2
 8003f12:	0019      	movs	r1, r3
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	2399      	movs	r3, #153	; 0x99
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2101      	movs	r1, #1
 8003f20:	0018      	movs	r0, r3
 8003f22:	f000 fdbb 	bl	8004a9c <HAL_PCDEx_LPM_Callback>
 8003f26:	e003      	b.n	8003f30 <HAL_PCD_IRQHandler+0x280>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f004 fb9a 	bl	8008664 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	0018      	movs	r0, r3
 8003f36:	f002 fc43 	bl	80067c0 <USB_ReadInterrupts>
 8003f3a:	0002      	movs	r2, r0
 8003f3c:	2380      	movs	r3, #128	; 0x80
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	401a      	ands	r2, r3
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d10f      	bne.n	8003f6a <HAL_PCD_IRQHandler+0x2ba>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2244      	movs	r2, #68	; 0x44
 8003f50:	5a9b      	ldrh	r3, [r3, r2]
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4917      	ldr	r1, [pc, #92]	; (8003fb8 <HAL_PCD_IRQHandler+0x308>)
 8003f5a:	400a      	ands	r2, r1
 8003f5c:	b291      	uxth	r1, r2
 8003f5e:	2244      	movs	r2, #68	; 0x44
 8003f60:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	0018      	movs	r0, r3
 8003f66:	f004 fb4a 	bl	80085fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f002 fc26 	bl	80067c0 <USB_ReadInterrupts>
 8003f74:	0002      	movs	r2, r0
 8003f76:	2380      	movs	r3, #128	; 0x80
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	2380      	movs	r3, #128	; 0x80
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d10b      	bne.n	8003f9c <HAL_PCD_IRQHandler+0x2ec>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2244      	movs	r2, #68	; 0x44
 8003f8a:	5a9b      	ldrh	r3, [r3, r2]
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	490a      	ldr	r1, [pc, #40]	; (8003fbc <HAL_PCD_IRQHandler+0x30c>)
 8003f94:	400a      	ands	r2, r1
 8003f96:	b291      	uxth	r1, r2
 8003f98:	2244      	movs	r2, #68	; 0x44
 8003f9a:	5299      	strh	r1, [r3, r2]
  }
}
 8003f9c:	46c0      	nop			; (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b002      	add	sp, #8
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	fffffbff 	.word	0xfffffbff
 8003fa8:	ffffbfff 	.word	0xffffbfff
 8003fac:	ffffdfff 	.word	0xffffdfff
 8003fb0:	ffffefff 	.word	0xffffefff
 8003fb4:	fffff7ff 	.word	0xfffff7ff
 8003fb8:	fffffdff 	.word	0xfffffdff
 8003fbc:	fffffeff 	.word	0xfffffeff

08003fc0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	000a      	movs	r2, r1
 8003fca:	1cfb      	adds	r3, r7, #3
 8003fcc:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	238a      	movs	r3, #138	; 0x8a
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	5cd3      	ldrb	r3, [r2, r3]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_PCD_SetAddress+0x1e>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e017      	b.n	800400e <HAL_PCD_SetAddress+0x4e>
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	238a      	movs	r3, #138	; 0x8a
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	1cfa      	adds	r2, r7, #3
 8003fec:	2124      	movs	r1, #36	; 0x24
 8003fee:	7812      	ldrb	r2, [r2, #0]
 8003ff0:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	1cfb      	adds	r3, r7, #3
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	0019      	movs	r1, r3
 8003ffc:	0010      	movs	r0, r2
 8003ffe:	f002 fbb5 	bl	800676c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	238a      	movs	r3, #138	; 0x8a
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	2100      	movs	r1, #0
 800400a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	0018      	movs	r0, r3
 8004010:	46bd      	mov	sp, r7
 8004012:	b002      	add	sp, #8
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004016:	b590      	push	{r4, r7, lr}
 8004018:	b085      	sub	sp, #20
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	000c      	movs	r4, r1
 8004020:	0010      	movs	r0, r2
 8004022:	0019      	movs	r1, r3
 8004024:	1cfb      	adds	r3, r7, #3
 8004026:	1c22      	adds	r2, r4, #0
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	003b      	movs	r3, r7
 800402c:	1c02      	adds	r2, r0, #0
 800402e:	801a      	strh	r2, [r3, #0]
 8004030:	1cbb      	adds	r3, r7, #2
 8004032:	1c0a      	adds	r2, r1, #0
 8004034:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004036:	230b      	movs	r3, #11
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	2200      	movs	r2, #0
 800403c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800403e:	1cfb      	adds	r3, r7, #3
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	b25b      	sxtb	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	da0c      	bge.n	8004062 <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004048:	1cfb      	adds	r3, r7, #3
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2207      	movs	r2, #7
 800404e:	4013      	ands	r3, r2
 8004050:	015b      	lsls	r3, r3, #5
 8004052:	3328      	adds	r3, #40	; 0x28
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	18d3      	adds	r3, r2, r3
 8004058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	705a      	strb	r2, [r3, #1]
 8004060:	e00c      	b.n	800407c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004062:	1cfb      	adds	r3, r7, #3
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2207      	movs	r2, #7
 8004068:	4013      	ands	r3, r2
 800406a:	015b      	lsls	r3, r3, #5
 800406c:	3329      	adds	r3, #41	; 0x29
 800406e:	33ff      	adds	r3, #255	; 0xff
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	18d3      	adds	r3, r2, r3
 8004074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800407c:	1cfb      	adds	r3, r7, #3
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2207      	movs	r2, #7
 8004082:	4013      	ands	r3, r2
 8004084:	b2da      	uxtb	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800408a:	003b      	movs	r3, r7
 800408c:	881a      	ldrh	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1cba      	adds	r2, r7, #2
 8004096:	7812      	ldrb	r2, [r2, #0]
 8004098:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	785b      	ldrb	r3, [r3, #1]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d004      	beq.n	80040ac <HAL_PCD_EP_Open+0x96>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040ac:	1cbb      	adds	r3, r7, #2
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d102      	bne.n	80040ba <HAL_PCD_EP_Open+0xa4>
  {
    ep->data_pid_start = 0U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	238a      	movs	r3, #138	; 0x8a
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	5cd3      	ldrb	r3, [r2, r3]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_PCD_EP_Open+0xb4>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e013      	b.n	80040f2 <HAL_PCD_EP_Open+0xdc>
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	238a      	movs	r3, #138	; 0x8a
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	2101      	movs	r1, #1
 80040d2:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	0011      	movs	r1, r2
 80040dc:	0018      	movs	r0, r3
 80040de:	f001 fb31 	bl	8005744 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	238a      	movs	r3, #138	; 0x8a
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	2100      	movs	r1, #0
 80040ea:	54d1      	strb	r1, [r2, r3]

  return ret;
 80040ec:	230b      	movs	r3, #11
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	781b      	ldrb	r3, [r3, #0]
}
 80040f2:	0018      	movs	r0, r3
 80040f4:	46bd      	mov	sp, r7
 80040f6:	b005      	add	sp, #20
 80040f8:	bd90      	pop	{r4, r7, pc}

080040fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	000a      	movs	r2, r1
 8004104:	1cfb      	adds	r3, r7, #3
 8004106:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004108:	1cfb      	adds	r3, r7, #3
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	b25b      	sxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	da0c      	bge.n	800412c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004112:	1cfb      	adds	r3, r7, #3
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2207      	movs	r2, #7
 8004118:	4013      	ands	r3, r2
 800411a:	015b      	lsls	r3, r3, #5
 800411c:	3328      	adds	r3, #40	; 0x28
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	18d3      	adds	r3, r2, r3
 8004122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2201      	movs	r2, #1
 8004128:	705a      	strb	r2, [r3, #1]
 800412a:	e00c      	b.n	8004146 <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800412c:	1cfb      	adds	r3, r7, #3
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2207      	movs	r2, #7
 8004132:	4013      	ands	r3, r2
 8004134:	015b      	lsls	r3, r3, #5
 8004136:	3329      	adds	r3, #41	; 0x29
 8004138:	33ff      	adds	r3, #255	; 0xff
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	18d3      	adds	r3, r2, r3
 800413e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004146:	1cfb      	adds	r3, r7, #3
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2207      	movs	r2, #7
 800414c:	4013      	ands	r3, r2
 800414e:	b2da      	uxtb	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	238a      	movs	r3, #138	; 0x8a
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	5cd3      	ldrb	r3, [r2, r3]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_PCD_EP_Close+0x6a>
 8004160:	2302      	movs	r3, #2
 8004162:	e011      	b.n	8004188 <HAL_PCD_EP_Close+0x8e>
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	238a      	movs	r3, #138	; 0x8a
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	2101      	movs	r1, #1
 800416c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	0011      	movs	r1, r2
 8004176:	0018      	movs	r0, r3
 8004178:	f001 fddc 	bl	8005d34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	238a      	movs	r3, #138	; 0x8a
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	2100      	movs	r1, #0
 8004184:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	0018      	movs	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	b004      	add	sp, #16
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	200b      	movs	r0, #11
 800419e:	183b      	adds	r3, r7, r0
 80041a0:	1c0a      	adds	r2, r1, #0
 80041a2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041a4:	0001      	movs	r1, r0
 80041a6:	187b      	adds	r3, r7, r1
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2207      	movs	r2, #7
 80041ac:	4013      	ands	r3, r2
 80041ae:	015b      	lsls	r3, r3, #5
 80041b0:	3329      	adds	r3, #41	; 0x29
 80041b2:	33ff      	adds	r3, #255	; 0xff
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	18d3      	adds	r3, r2, r3
 80041b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2200      	movs	r2, #0
 80041ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2200      	movs	r2, #0
 80041d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041d2:	187b      	adds	r3, r7, r1
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2207      	movs	r2, #7
 80041d8:	4013      	ands	r3, r2
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041e0:	187b      	adds	r3, r7, r1
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2207      	movs	r2, #7
 80041e6:	4013      	ands	r3, r2
 80041e8:	d107      	bne.n	80041fa <HAL_PCD_EP_Receive+0x6a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	0011      	movs	r1, r2
 80041f2:	0018      	movs	r0, r3
 80041f4:	f001 ff14 	bl	8006020 <USB_EPStartXfer>
 80041f8:	e006      	b.n	8004208 <HAL_PCD_EP_Receive+0x78>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	0011      	movs	r1, r2
 8004202:	0018      	movs	r0, r3
 8004204:	f001 ff0c 	bl	8006020 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	0018      	movs	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	b006      	add	sp, #24
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b086      	sub	sp, #24
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
 800421e:	200b      	movs	r0, #11
 8004220:	183b      	adds	r3, r7, r0
 8004222:	1c0a      	adds	r2, r1, #0
 8004224:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004226:	0001      	movs	r1, r0
 8004228:	187b      	adds	r3, r7, r1
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2207      	movs	r2, #7
 800422e:	4013      	ands	r3, r2
 8004230:	015b      	lsls	r3, r3, #5
 8004232:	3328      	adds	r3, #40	; 0x28
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	18d3      	adds	r3, r2, r3
 8004238:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2200      	movs	r2, #0
 800424a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2201      	movs	r2, #1
 8004250:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004252:	187b      	adds	r3, r7, r1
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2207      	movs	r2, #7
 8004258:	4013      	ands	r3, r2
 800425a:	b2da      	uxtb	r2, r3
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004260:	187b      	adds	r3, r7, r1
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2207      	movs	r2, #7
 8004266:	4013      	ands	r3, r2
 8004268:	d107      	bne.n	800427a <HAL_PCD_EP_Transmit+0x68>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	0011      	movs	r1, r2
 8004272:	0018      	movs	r0, r3
 8004274:	f001 fed4 	bl	8006020 <USB_EPStartXfer>
 8004278:	e006      	b.n	8004288 <HAL_PCD_EP_Transmit+0x76>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	0011      	movs	r1, r2
 8004282:	0018      	movs	r0, r3
 8004284:	f001 fecc 	bl	8006020 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	0018      	movs	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	b006      	add	sp, #24
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	000a      	movs	r2, r1
 800429c:	1cfb      	adds	r3, r7, #3
 800429e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042a0:	1cfb      	adds	r3, r7, #3
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2207      	movs	r2, #7
 80042a6:	401a      	ands	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d901      	bls.n	80042b4 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e050      	b.n	8004356 <HAL_PCD_EP_SetStall+0xc4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042b4:	1cfb      	adds	r3, r7, #3
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	b25b      	sxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	da0c      	bge.n	80042d8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042be:	1cfb      	adds	r3, r7, #3
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2207      	movs	r2, #7
 80042c4:	4013      	ands	r3, r2
 80042c6:	015b      	lsls	r3, r3, #5
 80042c8:	3328      	adds	r3, #40	; 0x28
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	18d3      	adds	r3, r2, r3
 80042ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	705a      	strb	r2, [r3, #1]
 80042d6:	e00a      	b.n	80042ee <HAL_PCD_EP_SetStall+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042d8:	1cfb      	adds	r3, r7, #3
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	015b      	lsls	r3, r3, #5
 80042de:	3329      	adds	r3, #41	; 0x29
 80042e0:	33ff      	adds	r3, #255	; 0xff
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	18d3      	adds	r3, r2, r3
 80042e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042f4:	1cfb      	adds	r3, r7, #3
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2207      	movs	r2, #7
 80042fa:	4013      	ands	r3, r2
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	238a      	movs	r3, #138	; 0x8a
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	5cd3      	ldrb	r3, [r2, r3]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_PCD_EP_SetStall+0x80>
 800430e:	2302      	movs	r3, #2
 8004310:	e021      	b.n	8004356 <HAL_PCD_EP_SetStall+0xc4>
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	238a      	movs	r3, #138	; 0x8a
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	2101      	movs	r1, #1
 800431a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	0011      	movs	r1, r2
 8004324:	0018      	movs	r0, r3
 8004326:	f002 f94d 	bl	80065c4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800432a:	1cfb      	adds	r3, r7, #3
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2207      	movs	r2, #7
 8004330:	4013      	ands	r3, r2
 8004332:	d10a      	bne.n	800434a <HAL_PCD_EP_SetStall+0xb8>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	218c      	movs	r1, #140	; 0x8c
 800433c:	0089      	lsls	r1, r1, #2
 800433e:	468c      	mov	ip, r1
 8004340:	4463      	add	r3, ip
 8004342:	0019      	movs	r1, r3
 8004344:	0010      	movs	r0, r2
 8004346:	f002 fa49 	bl	80067dc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	238a      	movs	r3, #138	; 0x8a
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	2100      	movs	r1, #0
 8004352:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	0018      	movs	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	b004      	add	sp, #16
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	000a      	movs	r2, r1
 8004368:	1cfb      	adds	r3, r7, #3
 800436a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800436c:	1cfb      	adds	r3, r7, #3
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	220f      	movs	r2, #15
 8004372:	401a      	ands	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	429a      	cmp	r2, r3
 800437a:	d901      	bls.n	8004380 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e042      	b.n	8004406 <HAL_PCD_EP_ClrStall+0xa8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004380:	1cfb      	adds	r3, r7, #3
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	b25b      	sxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	da0c      	bge.n	80043a4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800438a:	1cfb      	adds	r3, r7, #3
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2207      	movs	r2, #7
 8004390:	4013      	ands	r3, r2
 8004392:	015b      	lsls	r3, r3, #5
 8004394:	3328      	adds	r3, #40	; 0x28
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	18d3      	adds	r3, r2, r3
 800439a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	705a      	strb	r2, [r3, #1]
 80043a2:	e00c      	b.n	80043be <HAL_PCD_EP_ClrStall+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043a4:	1cfb      	adds	r3, r7, #3
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2207      	movs	r2, #7
 80043aa:	4013      	ands	r3, r2
 80043ac:	015b      	lsls	r3, r3, #5
 80043ae:	3329      	adds	r3, #41	; 0x29
 80043b0:	33ff      	adds	r3, #255	; 0xff
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	18d3      	adds	r3, r2, r3
 80043b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043c4:	1cfb      	adds	r3, r7, #3
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2207      	movs	r2, #7
 80043ca:	4013      	ands	r3, r2
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	238a      	movs	r3, #138	; 0x8a
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	5cd3      	ldrb	r3, [r2, r3]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_PCD_EP_ClrStall+0x84>
 80043de:	2302      	movs	r3, #2
 80043e0:	e011      	b.n	8004406 <HAL_PCD_EP_ClrStall+0xa8>
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	238a      	movs	r3, #138	; 0x8a
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	2101      	movs	r1, #1
 80043ea:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	0011      	movs	r1, r2
 80043f4:	0018      	movs	r0, r3
 80043f6:	f002 f927 	bl	8006648 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	238a      	movs	r3, #138	; 0x8a
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	2100      	movs	r1, #0
 8004402:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	0018      	movs	r0, r3
 8004408:	46bd      	mov	sp, r7
 800440a:	b004      	add	sp, #16
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004410:	b590      	push	{r4, r7, lr}
 8004412:	b089      	sub	sp, #36	; 0x24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004418:	e2b3      	b.n	8004982 <PCD_EP_ISR_Handler+0x572>
  {
    wIstr = hpcd->Instance->ISTR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	2016      	movs	r0, #22
 8004420:	183b      	adds	r3, r7, r0
 8004422:	2144      	movs	r1, #68	; 0x44
 8004424:	5a52      	ldrh	r2, [r2, r1]
 8004426:	801a      	strh	r2, [r3, #0]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004428:	183b      	adds	r3, r7, r0
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	2015      	movs	r0, #21
 8004430:	183b      	adds	r3, r7, r0
 8004432:	210f      	movs	r1, #15
 8004434:	400a      	ands	r2, r1
 8004436:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8004438:	183b      	adds	r3, r7, r0
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d000      	beq.n	8004442 <PCD_EP_ISR_Handler+0x32>
 8004440:	e141      	b.n	80046c6 <PCD_EP_ISR_Handler+0x2b6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004442:	2316      	movs	r3, #22
 8004444:	18fb      	adds	r3, r7, r3
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	2210      	movs	r2, #16
 800444a:	4013      	ands	r3, r2
 800444c:	d14e      	bne.n	80044ec <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	b29b      	uxth	r3, r3
 8004456:	4aca      	ldr	r2, [pc, #808]	; (8004780 <PCD_EP_ISR_Handler+0x370>)
 8004458:	4013      	ands	r3, r2
 800445a:	b29c      	uxth	r4, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4ac8      	ldr	r2, [pc, #800]	; (8004784 <PCD_EP_ISR_Handler+0x374>)
 8004462:	4322      	orrs	r2, r4
 8004464:	b292      	uxth	r2, r2
 8004466:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3328      	adds	r3, #40	; 0x28
 800446c:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2250      	movs	r2, #80	; 0x50
 8004474:	5a9b      	ldrh	r3, [r3, r2]
 8004476:	b29b      	uxth	r3, r3
 8004478:	001a      	movs	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	18d2      	adds	r2, r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	18d3      	adds	r3, r2, r3
 8004488:	4abf      	ldr	r2, [pc, #764]	; (8004788 <PCD_EP_ISR_Handler+0x378>)
 800448a:	4694      	mov	ip, r2
 800448c:	4463      	add	r3, ip
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	059b      	lsls	r3, r3, #22
 8004492:	0d9a      	lsrs	r2, r3, #22
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	695a      	ldr	r2, [r3, #20]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	18d2      	adds	r2, r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2100      	movs	r1, #0
 80044aa:	0018      	movs	r0, r3
 80044ac:	f004 f88c 	bl	80085c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2224      	movs	r2, #36	; 0x24
 80044b4:	5c9b      	ldrb	r3, [r3, r2]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d100      	bne.n	80044be <PCD_EP_ISR_Handler+0xae>
 80044bc:	e261      	b.n	8004982 <PCD_EP_ISR_Handler+0x572>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d000      	beq.n	80044c8 <PCD_EP_ISR_Handler+0xb8>
 80044c6:	e25c      	b.n	8004982 <PCD_EP_ISR_Handler+0x572>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2224      	movs	r2, #36	; 0x24
 80044cc:	5c9b      	ldrb	r3, [r3, r2]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2280      	movs	r2, #128	; 0x80
 80044d2:	4252      	negs	r2, r2
 80044d4:	4313      	orrs	r3, r2
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	b291      	uxth	r1, r2
 80044de:	224c      	movs	r2, #76	; 0x4c
 80044e0:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2224      	movs	r2, #36	; 0x24
 80044e6:	2100      	movs	r1, #0
 80044e8:	5499      	strb	r1, [r3, r2]
 80044ea:	e24a      	b.n	8004982 <PCD_EP_ISR_Handler+0x572>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3329      	adds	r3, #41	; 0x29
 80044f0:	33ff      	adds	r3, #255	; 0xff
 80044f2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	2112      	movs	r1, #18
 80044fa:	187b      	adds	r3, r7, r1
 80044fc:	8812      	ldrh	r2, [r2, #0]
 80044fe:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004500:	187b      	adds	r3, r7, r1
 8004502:	881a      	ldrh	r2, [r3, #0]
 8004504:	2380      	movs	r3, #128	; 0x80
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	4013      	ands	r3, r2
 800450a:	d033      	beq.n	8004574 <PCD_EP_ISR_Handler+0x164>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2250      	movs	r2, #80	; 0x50
 8004512:	5a9b      	ldrh	r3, [r3, r2]
 8004514:	b29b      	uxth	r3, r3
 8004516:	001a      	movs	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	18d2      	adds	r2, r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	18d3      	adds	r3, r2, r3
 8004526:	4a99      	ldr	r2, [pc, #612]	; (800478c <PCD_EP_ISR_Handler+0x37c>)
 8004528:	4694      	mov	ip, r2
 800452a:	4463      	add	r3, ip
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	059b      	lsls	r3, r3, #22
 8004530:	0d9a      	lsrs	r2, r3, #22
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	228c      	movs	r2, #140	; 0x8c
 800453e:	0092      	lsls	r2, r2, #2
 8004540:	1899      	adds	r1, r3, r2
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800454a:	b29b      	uxth	r3, r3
 800454c:	f002 f993 	bl	8006876 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	b29b      	uxth	r3, r3
 8004558:	4a8d      	ldr	r2, [pc, #564]	; (8004790 <PCD_EP_ISR_Handler+0x380>)
 800455a:	4013      	ands	r3, r2
 800455c:	b29c      	uxth	r4, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2280      	movs	r2, #128	; 0x80
 8004564:	4322      	orrs	r2, r4
 8004566:	b292      	uxth	r2, r2
 8004568:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	0018      	movs	r0, r3
 800456e:	f003 fff9 	bl	8008564 <HAL_PCD_SetupStageCallback>
 8004572:	e206      	b.n	8004982 <PCD_EP_ISR_Handler+0x572>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004574:	2312      	movs	r3, #18
 8004576:	18fb      	adds	r3, r7, r3
 8004578:	2200      	movs	r2, #0
 800457a:	5e9b      	ldrsh	r3, [r3, r2]
 800457c:	2b00      	cmp	r3, #0
 800457e:	db00      	blt.n	8004582 <PCD_EP_ISR_Handler+0x172>
 8004580:	e1ff      	b.n	8004982 <PCD_EP_ISR_Handler+0x572>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	b29b      	uxth	r3, r3
 800458a:	4a81      	ldr	r2, [pc, #516]	; (8004790 <PCD_EP_ISR_Handler+0x380>)
 800458c:	4013      	ands	r3, r2
 800458e:	b29c      	uxth	r4, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2280      	movs	r2, #128	; 0x80
 8004596:	4322      	orrs	r2, r4
 8004598:	b292      	uxth	r2, r2
 800459a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2250      	movs	r2, #80	; 0x50
 80045a2:	5a9b      	ldrh	r3, [r3, r2]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	001a      	movs	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	18d2      	adds	r2, r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	18d3      	adds	r3, r2, r3
 80045b6:	4a75      	ldr	r2, [pc, #468]	; (800478c <PCD_EP_ISR_Handler+0x37c>)
 80045b8:	4694      	mov	ip, r2
 80045ba:	4463      	add	r3, ip
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	059b      	lsls	r3, r3, #22
 80045c0:	0d9a      	lsrs	r2, r3, #22
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d01a      	beq.n	8004604 <PCD_EP_ISR_Handler+0x1f4>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d016      	beq.n	8004604 <PCD_EP_ISR_Handler+0x1f4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6959      	ldr	r1, [r3, #20]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f002 f945 	bl	8006876 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	695a      	ldr	r2, [r3, #20]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	18d2      	adds	r2, r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2100      	movs	r1, #0
 80045fe:	0018      	movs	r0, r3
 8004600:	f003 ffc5 	bl	800858e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	001c      	movs	r4, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2250      	movs	r2, #80	; 0x50
 8004610:	5a9b      	ldrh	r3, [r3, r2]
 8004612:	b29b      	uxth	r3, r3
 8004614:	18e4      	adds	r4, r4, r3
 8004616:	4b5d      	ldr	r3, [pc, #372]	; (800478c <PCD_EP_ISR_Handler+0x37c>)
 8004618:	18e3      	adds	r3, r4, r3
 800461a:	60bb      	str	r3, [r7, #8]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10e      	bne.n	8004642 <PCD_EP_ISR_Handler+0x232>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	4a5a      	ldr	r2, [pc, #360]	; (8004794 <PCD_EP_ISR_Handler+0x384>)
 800462a:	4013      	ands	r3, r2
 800462c:	b29a      	uxth	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	801a      	strh	r2, [r3, #0]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	4a53      	ldr	r2, [pc, #332]	; (8004784 <PCD_EP_ISR_Handler+0x374>)
 8004638:	4313      	orrs	r3, r2
 800463a:	b29a      	uxth	r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	801a      	strh	r2, [r3, #0]
 8004640:	e02b      	b.n	800469a <PCD_EP_ISR_Handler+0x28a>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b3e      	cmp	r3, #62	; 0x3e
 8004648:	d812      	bhi.n	8004670 <PCD_EP_ISR_Handler+0x260>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	085b      	lsrs	r3, r3, #1
 8004650:	61bb      	str	r3, [r7, #24]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2201      	movs	r2, #1
 8004658:	4013      	ands	r3, r2
 800465a:	d002      	beq.n	8004662 <PCD_EP_ISR_Handler+0x252>
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	3301      	adds	r3, #1
 8004660:	61bb      	str	r3, [r7, #24]
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	b29b      	uxth	r3, r3
 8004666:	029b      	lsls	r3, r3, #10
 8004668:	b29a      	uxth	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	801a      	strh	r2, [r3, #0]
 800466e:	e014      	b.n	800469a <PCD_EP_ISR_Handler+0x28a>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	095b      	lsrs	r3, r3, #5
 8004676:	61bb      	str	r3, [r7, #24]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	221f      	movs	r2, #31
 800467e:	4013      	ands	r3, r2
 8004680:	d102      	bne.n	8004688 <PCD_EP_ISR_Handler+0x278>
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	3b01      	subs	r3, #1
 8004686:	61bb      	str	r3, [r7, #24]
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	b29b      	uxth	r3, r3
 800468c:	029b      	lsls	r3, r3, #10
 800468e:	b29b      	uxth	r3, r3
 8004690:	4a3c      	ldr	r2, [pc, #240]	; (8004784 <PCD_EP_ISR_Handler+0x374>)
 8004692:	4313      	orrs	r3, r2
 8004694:	b29a      	uxth	r2, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	4a3d      	ldr	r2, [pc, #244]	; (8004798 <PCD_EP_ISR_Handler+0x388>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	b29c      	uxth	r4, r3
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	015b      	lsls	r3, r3, #5
 80046ac:	4063      	eors	r3, r4
 80046ae:	b29c      	uxth	r4, r3
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	019b      	lsls	r3, r3, #6
 80046b4:	4063      	eors	r3, r4
 80046b6:	b29c      	uxth	r4, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a37      	ldr	r2, [pc, #220]	; (800479c <PCD_EP_ISR_Handler+0x38c>)
 80046be:	4322      	orrs	r2, r4
 80046c0:	b292      	uxth	r2, r2
 80046c2:	801a      	strh	r2, [r3, #0]
 80046c4:	e15d      	b.n	8004982 <PCD_EP_ISR_Handler+0x572>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	001a      	movs	r2, r3
 80046cc:	2315      	movs	r3, #21
 80046ce:	18fb      	adds	r3, r7, r3
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	18d2      	adds	r2, r2, r3
 80046d6:	2112      	movs	r1, #18
 80046d8:	187b      	adds	r3, r7, r1
 80046da:	8812      	ldrh	r2, [r2, #0]
 80046dc:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80046de:	187b      	adds	r3, r7, r1
 80046e0:	2200      	movs	r2, #0
 80046e2:	5e9b      	ldrsh	r3, [r3, r2]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	db00      	blt.n	80046ea <PCD_EP_ISR_Handler+0x2da>
 80046e8:	e0f5      	b.n	80048d6 <PCD_EP_ISR_Handler+0x4c6>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	001a      	movs	r2, r3
 80046f0:	2115      	movs	r1, #21
 80046f2:	187b      	adds	r3, r7, r1
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	18d3      	adds	r3, r2, r3
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	4a24      	ldr	r2, [pc, #144]	; (8004790 <PCD_EP_ISR_Handler+0x380>)
 8004700:	4013      	ands	r3, r2
 8004702:	b29c      	uxth	r4, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	001a      	movs	r2, r3
 800470a:	187b      	adds	r3, r7, r1
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	18d3      	adds	r3, r2, r3
 8004712:	2280      	movs	r2, #128	; 0x80
 8004714:	4322      	orrs	r2, r4
 8004716:	b292      	uxth	r2, r2
 8004718:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800471a:	187b      	adds	r3, r7, r1
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	015b      	lsls	r3, r3, #5
 8004720:	3329      	adds	r3, #41	; 0x29
 8004722:	33ff      	adds	r3, #255	; 0xff
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	18d3      	adds	r3, r2, r3
 8004728:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	7b1b      	ldrb	r3, [r3, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d136      	bne.n	80047a0 <PCD_EP_ISR_Handler+0x390>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2250      	movs	r2, #80	; 0x50
 8004738:	5a9b      	ldrh	r3, [r3, r2]
 800473a:	b29b      	uxth	r3, r3
 800473c:	001a      	movs	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	18d2      	adds	r2, r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	18d3      	adds	r3, r2, r3
 800474c:	4a0f      	ldr	r2, [pc, #60]	; (800478c <PCD_EP_ISR_Handler+0x37c>)
 800474e:	4694      	mov	ip, r2
 8004750:	4463      	add	r3, ip
 8004752:	881a      	ldrh	r2, [r3, #0]
 8004754:	211e      	movs	r1, #30
 8004756:	187b      	adds	r3, r7, r1
 8004758:	0592      	lsls	r2, r2, #22
 800475a:	0d92      	lsrs	r2, r2, #22
 800475c:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 800475e:	187b      	adds	r3, r7, r1
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d100      	bne.n	8004768 <PCD_EP_ISR_Handler+0x358>
 8004766:	e08b      	b.n	8004880 <PCD_EP_ISR_Handler+0x470>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6818      	ldr	r0, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6959      	ldr	r1, [r3, #20]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	88da      	ldrh	r2, [r3, #6]
 8004774:	231e      	movs	r3, #30
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	f002 f87c 	bl	8006876 <USB_ReadPMA>
 800477e:	e07f      	b.n	8004880 <PCD_EP_ISR_Handler+0x470>
 8004780:	ffff8f0f 	.word	0xffff8f0f
 8004784:	ffff8000 	.word	0xffff8000
 8004788:	00000402 	.word	0x00000402
 800478c:	00000406 	.word	0x00000406
 8004790:	00000f8f 	.word	0x00000f8f
 8004794:	ffff83ff 	.word	0xffff83ff
 8004798:	ffffbf8f 	.word	0xffffbf8f
 800479c:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	001a      	movs	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	18d3      	adds	r3, r2, r3
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	001a      	movs	r2, r3
 80047b4:	2380      	movs	r3, #128	; 0x80
 80047b6:	01db      	lsls	r3, r3, #7
 80047b8:	4013      	ands	r3, r2
 80047ba:	d025      	beq.n	8004808 <PCD_EP_ISR_Handler+0x3f8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2250      	movs	r2, #80	; 0x50
 80047c2:	5a9b      	ldrh	r3, [r3, r2]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	001a      	movs	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	18d2      	adds	r2, r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	18d3      	adds	r3, r2, r3
 80047d6:	4a72      	ldr	r2, [pc, #456]	; (80049a0 <PCD_EP_ISR_Handler+0x590>)
 80047d8:	4694      	mov	ip, r2
 80047da:	4463      	add	r3, ip
 80047dc:	881a      	ldrh	r2, [r3, #0]
 80047de:	211e      	movs	r1, #30
 80047e0:	187b      	adds	r3, r7, r1
 80047e2:	0592      	lsls	r2, r2, #22
 80047e4:	0d92      	lsrs	r2, r2, #22
 80047e6:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 80047e8:	187b      	adds	r3, r7, r1
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d030      	beq.n	8004852 <PCD_EP_ISR_Handler+0x442>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6959      	ldr	r1, [r3, #20]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	891a      	ldrh	r2, [r3, #8]
 80047fc:	231e      	movs	r3, #30
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	f002 f838 	bl	8006876 <USB_ReadPMA>
 8004806:	e024      	b.n	8004852 <PCD_EP_ISR_Handler+0x442>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2250      	movs	r2, #80	; 0x50
 800480e:	5a9b      	ldrh	r3, [r3, r2]
 8004810:	b29b      	uxth	r3, r3
 8004812:	001a      	movs	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	18d2      	adds	r2, r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	18d3      	adds	r3, r2, r3
 8004822:	4a60      	ldr	r2, [pc, #384]	; (80049a4 <PCD_EP_ISR_Handler+0x594>)
 8004824:	4694      	mov	ip, r2
 8004826:	4463      	add	r3, ip
 8004828:	881a      	ldrh	r2, [r3, #0]
 800482a:	211e      	movs	r1, #30
 800482c:	187b      	adds	r3, r7, r1
 800482e:	0592      	lsls	r2, r2, #22
 8004830:	0d92      	lsrs	r2, r2, #22
 8004832:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8004834:	187b      	adds	r3, r7, r1
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00a      	beq.n	8004852 <PCD_EP_ISR_Handler+0x442>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6959      	ldr	r1, [r3, #20]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	895a      	ldrh	r2, [r3, #10]
 8004848:	231e      	movs	r3, #30
 800484a:	18fb      	adds	r3, r7, r3
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	f002 f812 	bl	8006876 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	001a      	movs	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	18d3      	adds	r3, r2, r3
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	4a50      	ldr	r2, [pc, #320]	; (80049a8 <PCD_EP_ISR_Handler+0x598>)
 8004866:	4013      	ands	r3, r2
 8004868:	b29c      	uxth	r4, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	001a      	movs	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	18d3      	adds	r3, r2, r3
 8004878:	4a4c      	ldr	r2, [pc, #304]	; (80049ac <PCD_EP_ISR_Handler+0x59c>)
 800487a:	4322      	orrs	r2, r4
 800487c:	b292      	uxth	r2, r2
 800487e:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	211e      	movs	r1, #30
 8004886:	187b      	adds	r3, r7, r1
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	18d2      	adds	r2, r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	695a      	ldr	r2, [r3, #20]
 8004894:	187b      	adds	r3, r7, r1
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	18d2      	adds	r2, r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d006      	beq.n	80048b4 <PCD_EP_ISR_Handler+0x4a4>
 80048a6:	231e      	movs	r3, #30
 80048a8:	18fb      	adds	r3, r7, r3
 80048aa:	881a      	ldrh	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d207      	bcs.n	80048c4 <PCD_EP_ISR_Handler+0x4b4>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	0011      	movs	r1, r2
 80048bc:	0018      	movs	r0, r3
 80048be:	f003 fe66 	bl	800858e <HAL_PCD_DataOutStageCallback>
 80048c2:	e008      	b.n	80048d6 <PCD_EP_ISR_Handler+0x4c6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	7819      	ldrb	r1, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	695a      	ldr	r2, [r3, #20]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7ff fc5d 	bl	8004190 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80048d6:	2312      	movs	r3, #18
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	2280      	movs	r2, #128	; 0x80
 80048de:	4013      	ands	r3, r2
 80048e0:	d04f      	beq.n	8004982 <PCD_EP_ISR_Handler+0x572>
      {
        ep = &hpcd->IN_ep[epindex];
 80048e2:	2115      	movs	r1, #21
 80048e4:	187b      	adds	r3, r7, r1
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	015b      	lsls	r3, r3, #5
 80048ea:	3328      	adds	r3, #40	; 0x28
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	18d3      	adds	r3, r2, r3
 80048f0:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	001a      	movs	r2, r3
 80048f8:	187b      	adds	r3, r7, r1
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	18d3      	adds	r3, r2, r3
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b29b      	uxth	r3, r3
 8004904:	4a2a      	ldr	r2, [pc, #168]	; (80049b0 <PCD_EP_ISR_Handler+0x5a0>)
 8004906:	4013      	ands	r3, r2
 8004908:	b29c      	uxth	r4, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	001a      	movs	r2, r3
 8004910:	187b      	adds	r3, r7, r1
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	18d3      	adds	r3, r2, r3
 8004918:	4a26      	ldr	r2, [pc, #152]	; (80049b4 <PCD_EP_ISR_Handler+0x5a4>)
 800491a:	4322      	orrs	r2, r4
 800491c:	b292      	uxth	r2, r2
 800491e:	801a      	strh	r2, [r3, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2250      	movs	r2, #80	; 0x50
 8004926:	5a9b      	ldrh	r3, [r3, r2]
 8004928:	b29b      	uxth	r3, r3
 800492a:	001a      	movs	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	18d2      	adds	r2, r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	18d3      	adds	r3, r2, r3
 800493a:	4a19      	ldr	r2, [pc, #100]	; (80049a0 <PCD_EP_ISR_Handler+0x590>)
 800493c:	4694      	mov	ip, r2
 800493e:	4463      	add	r3, ip
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	059b      	lsls	r3, r3, #22
 8004944:	0d9a      	lsrs	r2, r3, #22
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	18d2      	adds	r2, r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d107      	bne.n	8004970 <PCD_EP_ISR_Handler+0x560>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	781a      	ldrb	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	0011      	movs	r1, r2
 8004968:	0018      	movs	r0, r3
 800496a:	f003 fe2d 	bl	80085c8 <HAL_PCD_DataInStageCallback>
 800496e:	e008      	b.n	8004982 <PCD_EP_ISR_Handler+0x572>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	7819      	ldrb	r1, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	695a      	ldr	r2, [r3, #20]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff fc48 	bl	8004212 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2244      	movs	r2, #68	; 0x44
 8004988:	5a9b      	ldrh	r3, [r3, r2]
 800498a:	b29b      	uxth	r3, r3
 800498c:	b21b      	sxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	da00      	bge.n	8004994 <PCD_EP_ISR_Handler+0x584>
 8004992:	e542      	b.n	800441a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	0018      	movs	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	b009      	add	sp, #36	; 0x24
 800499c:	bd90      	pop	{r4, r7, pc}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	00000402 	.word	0x00000402
 80049a4:	00000406 	.word	0x00000406
 80049a8:	ffff8f8f 	.word	0xffff8f8f
 80049ac:	ffff80c0 	.word	0xffff80c0
 80049b0:	ffff8f0f 	.word	0xffff8f0f
 80049b4:	ffff8000 	.word	0xffff8000

080049b8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80049b8:	b590      	push	{r4, r7, lr}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	0008      	movs	r0, r1
 80049c2:	0011      	movs	r1, r2
 80049c4:	607b      	str	r3, [r7, #4]
 80049c6:	240a      	movs	r4, #10
 80049c8:	193b      	adds	r3, r7, r4
 80049ca:	1c02      	adds	r2, r0, #0
 80049cc:	801a      	strh	r2, [r3, #0]
 80049ce:	2308      	movs	r3, #8
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	1c0a      	adds	r2, r1, #0
 80049d4:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80049d6:	193b      	adds	r3, r7, r4
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	2280      	movs	r2, #128	; 0x80
 80049dc:	4013      	ands	r3, r2
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <HAL_PCDEx_PMAConfig+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049e4:	230a      	movs	r3, #10
 80049e6:	18fb      	adds	r3, r7, r3
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	2207      	movs	r2, #7
 80049ec:	4013      	ands	r3, r2
 80049ee:	015b      	lsls	r3, r3, #5
 80049f0:	3328      	adds	r3, #40	; 0x28
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	18d3      	adds	r3, r2, r3
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	e008      	b.n	8004a0c <HAL_PCDEx_PMAConfig+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049fa:	230a      	movs	r3, #10
 80049fc:	18fb      	adds	r3, r7, r3
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	015b      	lsls	r3, r3, #5
 8004a02:	3329      	adds	r3, #41	; 0x29
 8004a04:	33ff      	adds	r3, #255	; 0xff
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	18d3      	adds	r3, r2, r3
 8004a0a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d107      	bne.n	8004a26 <HAL_PCDEx_PMAConfig+0x6e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	80da      	strh	r2, [r3, #6]
 8004a24:	e00b      	b.n	8004a3e <HAL_PCDEx_PMAConfig+0x86>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	0c1b      	lsrs	r3, r3, #16
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	0018      	movs	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	b007      	add	sp, #28
 8004a46:	bd90      	pop	{r4, r7, pc}

08004a48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	239a      	movs	r3, #154	; 0x9a
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	2398      	movs	r3, #152	; 0x98
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	2100      	movs	r1, #0
 8004a68:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2254      	movs	r2, #84	; 0x54
 8004a6e:	5a9b      	ldrh	r3, [r3, r2]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2201      	movs	r2, #1
 8004a74:	4313      	orrs	r3, r2
 8004a76:	b299      	uxth	r1, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2254      	movs	r2, #84	; 0x54
 8004a7c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2254      	movs	r2, #84	; 0x54
 8004a82:	5a9b      	ldrh	r3, [r3, r2]
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2202      	movs	r2, #2
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	b299      	uxth	r1, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2254      	movs	r2, #84	; 0x54
 8004a90:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	0018      	movs	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b004      	add	sp, #16
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	000a      	movs	r2, r1
 8004aa6:	1cfb      	adds	r3, r7, #3
 8004aa8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b002      	add	sp, #8
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d102      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f000 fb76 	bl	80051b4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2201      	movs	r2, #1
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d100      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x20>
 8004ad2:	e08e      	b.n	8004bf2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004ad4:	4bc5      	ldr	r3, [pc, #788]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	220c      	movs	r2, #12
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d00e      	beq.n	8004afe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ae0:	4bc2      	ldr	r3, [pc, #776]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	220c      	movs	r2, #12
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d117      	bne.n	8004b1c <HAL_RCC_OscConfig+0x68>
 8004aec:	4bbf      	ldr	r3, [pc, #764]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	23c0      	movs	r3, #192	; 0xc0
 8004af2:	025b      	lsls	r3, r3, #9
 8004af4:	401a      	ands	r2, r3
 8004af6:	2380      	movs	r3, #128	; 0x80
 8004af8:	025b      	lsls	r3, r3, #9
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d10e      	bne.n	8004b1c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004afe:	4bbb      	ldr	r3, [pc, #748]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	2380      	movs	r3, #128	; 0x80
 8004b04:	029b      	lsls	r3, r3, #10
 8004b06:	4013      	ands	r3, r2
 8004b08:	d100      	bne.n	8004b0c <HAL_RCC_OscConfig+0x58>
 8004b0a:	e071      	b.n	8004bf0 <HAL_RCC_OscConfig+0x13c>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d000      	beq.n	8004b16 <HAL_RCC_OscConfig+0x62>
 8004b14:	e06c      	b.n	8004bf0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	f000 fb4c 	bl	80051b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_OscConfig+0x80>
 8004b24:	4bb1      	ldr	r3, [pc, #708]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4bb0      	ldr	r3, [pc, #704]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b2a:	2180      	movs	r1, #128	; 0x80
 8004b2c:	0249      	lsls	r1, r1, #9
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e02f      	b.n	8004b94 <HAL_RCC_OscConfig+0xe0>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10c      	bne.n	8004b56 <HAL_RCC_OscConfig+0xa2>
 8004b3c:	4bab      	ldr	r3, [pc, #684]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	4baa      	ldr	r3, [pc, #680]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b42:	49ab      	ldr	r1, [pc, #684]	; (8004df0 <HAL_RCC_OscConfig+0x33c>)
 8004b44:	400a      	ands	r2, r1
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	4ba8      	ldr	r3, [pc, #672]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	4ba7      	ldr	r3, [pc, #668]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b4e:	49a9      	ldr	r1, [pc, #676]	; (8004df4 <HAL_RCC_OscConfig+0x340>)
 8004b50:	400a      	ands	r2, r1
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	e01e      	b.n	8004b94 <HAL_RCC_OscConfig+0xe0>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b05      	cmp	r3, #5
 8004b5c:	d10e      	bne.n	8004b7c <HAL_RCC_OscConfig+0xc8>
 8004b5e:	4ba3      	ldr	r3, [pc, #652]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4ba2      	ldr	r3, [pc, #648]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b64:	2180      	movs	r1, #128	; 0x80
 8004b66:	02c9      	lsls	r1, r1, #11
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	4b9f      	ldr	r3, [pc, #636]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4b9e      	ldr	r3, [pc, #632]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b72:	2180      	movs	r1, #128	; 0x80
 8004b74:	0249      	lsls	r1, r1, #9
 8004b76:	430a      	orrs	r2, r1
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	e00b      	b.n	8004b94 <HAL_RCC_OscConfig+0xe0>
 8004b7c:	4b9b      	ldr	r3, [pc, #620]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4b9a      	ldr	r3, [pc, #616]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b82:	499b      	ldr	r1, [pc, #620]	; (8004df0 <HAL_RCC_OscConfig+0x33c>)
 8004b84:	400a      	ands	r2, r1
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	4b98      	ldr	r3, [pc, #608]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4b97      	ldr	r3, [pc, #604]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004b8e:	4999      	ldr	r1, [pc, #612]	; (8004df4 <HAL_RCC_OscConfig+0x340>)
 8004b90:	400a      	ands	r2, r1
 8004b92:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d014      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fd fe6c 	bl	8002878 <HAL_GetTick>
 8004ba0:	0003      	movs	r3, r0
 8004ba2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba6:	f7fd fe67 	bl	8002878 <HAL_GetTick>
 8004baa:	0002      	movs	r2, r0
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b64      	cmp	r3, #100	; 0x64
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e2fd      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb8:	4b8c      	ldr	r3, [pc, #560]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	2380      	movs	r3, #128	; 0x80
 8004bbe:	029b      	lsls	r3, r3, #10
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0xf2>
 8004bc4:	e015      	b.n	8004bf2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc6:	f7fd fe57 	bl	8002878 <HAL_GetTick>
 8004bca:	0003      	movs	r3, r0
 8004bcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bd0:	f7fd fe52 	bl	8002878 <HAL_GetTick>
 8004bd4:	0002      	movs	r2, r0
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b64      	cmp	r3, #100	; 0x64
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e2e8      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be2:	4b82      	ldr	r3, [pc, #520]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	2380      	movs	r3, #128	; 0x80
 8004be8:	029b      	lsls	r3, r3, #10
 8004bea:	4013      	ands	r3, r2
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x11c>
 8004bee:	e000      	b.n	8004bf2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	d100      	bne.n	8004bfe <HAL_RCC_OscConfig+0x14a>
 8004bfc:	e06c      	b.n	8004cd8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004bfe:	4b7b      	ldr	r3, [pc, #492]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	220c      	movs	r2, #12
 8004c04:	4013      	ands	r3, r2
 8004c06:	d00e      	beq.n	8004c26 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c08:	4b78      	ldr	r3, [pc, #480]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	220c      	movs	r2, #12
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d11f      	bne.n	8004c54 <HAL_RCC_OscConfig+0x1a0>
 8004c14:	4b75      	ldr	r3, [pc, #468]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	23c0      	movs	r3, #192	; 0xc0
 8004c1a:	025b      	lsls	r3, r3, #9
 8004c1c:	401a      	ands	r2, r3
 8004c1e:	2380      	movs	r3, #128	; 0x80
 8004c20:	021b      	lsls	r3, r3, #8
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d116      	bne.n	8004c54 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c26:	4b71      	ldr	r3, [pc, #452]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_OscConfig+0x188>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d001      	beq.n	8004c3c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e2bb      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3c:	4b6b      	ldr	r3, [pc, #428]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	22f8      	movs	r2, #248	; 0xf8
 8004c42:	4393      	bics	r3, r2
 8004c44:	0019      	movs	r1, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	00da      	lsls	r2, r3, #3
 8004c4c:	4b67      	ldr	r3, [pc, #412]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c52:	e041      	b.n	8004cd8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d024      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c5c:	4b63      	ldr	r3, [pc, #396]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4b62      	ldr	r3, [pc, #392]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c62:	2101      	movs	r1, #1
 8004c64:	430a      	orrs	r2, r1
 8004c66:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c68:	f7fd fe06 	bl	8002878 <HAL_GetTick>
 8004c6c:	0003      	movs	r3, r0
 8004c6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c72:	f7fd fe01 	bl	8002878 <HAL_GetTick>
 8004c76:	0002      	movs	r2, r0
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e297      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c84:	4b59      	ldr	r3, [pc, #356]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d0f1      	beq.n	8004c72 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c8e:	4b57      	ldr	r3, [pc, #348]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	22f8      	movs	r2, #248	; 0xf8
 8004c94:	4393      	bics	r3, r2
 8004c96:	0019      	movs	r1, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	00da      	lsls	r2, r3, #3
 8004c9e:	4b53      	ldr	r3, [pc, #332]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e018      	b.n	8004cd8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ca6:	4b51      	ldr	r3, [pc, #324]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4b50      	ldr	r3, [pc, #320]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004cac:	2101      	movs	r1, #1
 8004cae:	438a      	bics	r2, r1
 8004cb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb2:	f7fd fde1 	bl	8002878 <HAL_GetTick>
 8004cb6:	0003      	movs	r3, r0
 8004cb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cbc:	f7fd fddc 	bl	8002878 <HAL_GetTick>
 8004cc0:	0002      	movs	r2, r0
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e272      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cce:	4b47      	ldr	r3, [pc, #284]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d1f1      	bne.n	8004cbc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2208      	movs	r2, #8
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d036      	beq.n	8004d50 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d019      	beq.n	8004d1e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cea:	4b40      	ldr	r3, [pc, #256]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cee:	4b3f      	ldr	r3, [pc, #252]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf6:	f7fd fdbf 	bl	8002878 <HAL_GetTick>
 8004cfa:	0003      	movs	r3, r0
 8004cfc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d00:	f7fd fdba 	bl	8002878 <HAL_GetTick>
 8004d04:	0002      	movs	r2, r0
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e250      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d12:	4b36      	ldr	r3, [pc, #216]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	2202      	movs	r2, #2
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d0f1      	beq.n	8004d00 <HAL_RCC_OscConfig+0x24c>
 8004d1c:	e018      	b.n	8004d50 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d1e:	4b33      	ldr	r3, [pc, #204]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d22:	4b32      	ldr	r3, [pc, #200]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d24:	2101      	movs	r1, #1
 8004d26:	438a      	bics	r2, r1
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d2a:	f7fd fda5 	bl	8002878 <HAL_GetTick>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d34:	f7fd fda0 	bl	8002878 <HAL_GetTick>
 8004d38:	0002      	movs	r2, r0
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e236      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d46:	4b29      	ldr	r3, [pc, #164]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d1f1      	bne.n	8004d34 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2204      	movs	r2, #4
 8004d56:	4013      	ands	r3, r2
 8004d58:	d100      	bne.n	8004d5c <HAL_RCC_OscConfig+0x2a8>
 8004d5a:	e0b5      	b.n	8004ec8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d5c:	231f      	movs	r3, #31
 8004d5e:	18fb      	adds	r3, r7, r3
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d64:	4b21      	ldr	r3, [pc, #132]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	2380      	movs	r3, #128	; 0x80
 8004d6a:	055b      	lsls	r3, r3, #21
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	d111      	bne.n	8004d94 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d70:	4b1e      	ldr	r3, [pc, #120]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d72:	69da      	ldr	r2, [r3, #28]
 8004d74:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d76:	2180      	movs	r1, #128	; 0x80
 8004d78:	0549      	lsls	r1, r1, #21
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	61da      	str	r2, [r3, #28]
 8004d7e:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004d80:	69da      	ldr	r2, [r3, #28]
 8004d82:	2380      	movs	r3, #128	; 0x80
 8004d84:	055b      	lsls	r3, r3, #21
 8004d86:	4013      	ands	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d8c:	231f      	movs	r3, #31
 8004d8e:	18fb      	adds	r3, r7, r3
 8004d90:	2201      	movs	r2, #1
 8004d92:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d94:	4b18      	ldr	r3, [pc, #96]	; (8004df8 <HAL_RCC_OscConfig+0x344>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	2380      	movs	r3, #128	; 0x80
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	d11a      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004da0:	4b15      	ldr	r3, [pc, #84]	; (8004df8 <HAL_RCC_OscConfig+0x344>)
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	4b14      	ldr	r3, [pc, #80]	; (8004df8 <HAL_RCC_OscConfig+0x344>)
 8004da6:	2180      	movs	r1, #128	; 0x80
 8004da8:	0049      	lsls	r1, r1, #1
 8004daa:	430a      	orrs	r2, r1
 8004dac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dae:	f7fd fd63 	bl	8002878 <HAL_GetTick>
 8004db2:	0003      	movs	r3, r0
 8004db4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db8:	f7fd fd5e 	bl	8002878 <HAL_GetTick>
 8004dbc:	0002      	movs	r2, r0
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b64      	cmp	r3, #100	; 0x64
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e1f4      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dca:	4b0b      	ldr	r3, [pc, #44]	; (8004df8 <HAL_RCC_OscConfig+0x344>)
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	2380      	movs	r3, #128	; 0x80
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d0f0      	beq.n	8004db8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d10e      	bne.n	8004dfc <HAL_RCC_OscConfig+0x348>
 8004dde:	4b03      	ldr	r3, [pc, #12]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004de0:	6a1a      	ldr	r2, [r3, #32]
 8004de2:	4b02      	ldr	r3, [pc, #8]	; (8004dec <HAL_RCC_OscConfig+0x338>)
 8004de4:	2101      	movs	r1, #1
 8004de6:	430a      	orrs	r2, r1
 8004de8:	621a      	str	r2, [r3, #32]
 8004dea:	e035      	b.n	8004e58 <HAL_RCC_OscConfig+0x3a4>
 8004dec:	40021000 	.word	0x40021000
 8004df0:	fffeffff 	.word	0xfffeffff
 8004df4:	fffbffff 	.word	0xfffbffff
 8004df8:	40007000 	.word	0x40007000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10c      	bne.n	8004e1e <HAL_RCC_OscConfig+0x36a>
 8004e04:	4bca      	ldr	r3, [pc, #808]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e06:	6a1a      	ldr	r2, [r3, #32]
 8004e08:	4bc9      	ldr	r3, [pc, #804]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	438a      	bics	r2, r1
 8004e0e:	621a      	str	r2, [r3, #32]
 8004e10:	4bc7      	ldr	r3, [pc, #796]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e12:	6a1a      	ldr	r2, [r3, #32]
 8004e14:	4bc6      	ldr	r3, [pc, #792]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e16:	2104      	movs	r1, #4
 8004e18:	438a      	bics	r2, r1
 8004e1a:	621a      	str	r2, [r3, #32]
 8004e1c:	e01c      	b.n	8004e58 <HAL_RCC_OscConfig+0x3a4>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b05      	cmp	r3, #5
 8004e24:	d10c      	bne.n	8004e40 <HAL_RCC_OscConfig+0x38c>
 8004e26:	4bc2      	ldr	r3, [pc, #776]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e28:	6a1a      	ldr	r2, [r3, #32]
 8004e2a:	4bc1      	ldr	r3, [pc, #772]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e2c:	2104      	movs	r1, #4
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	621a      	str	r2, [r3, #32]
 8004e32:	4bbf      	ldr	r3, [pc, #764]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e34:	6a1a      	ldr	r2, [r3, #32]
 8004e36:	4bbe      	ldr	r3, [pc, #760]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e38:	2101      	movs	r1, #1
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	621a      	str	r2, [r3, #32]
 8004e3e:	e00b      	b.n	8004e58 <HAL_RCC_OscConfig+0x3a4>
 8004e40:	4bbb      	ldr	r3, [pc, #748]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e42:	6a1a      	ldr	r2, [r3, #32]
 8004e44:	4bba      	ldr	r3, [pc, #744]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e46:	2101      	movs	r1, #1
 8004e48:	438a      	bics	r2, r1
 8004e4a:	621a      	str	r2, [r3, #32]
 8004e4c:	4bb8      	ldr	r3, [pc, #736]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e4e:	6a1a      	ldr	r2, [r3, #32]
 8004e50:	4bb7      	ldr	r3, [pc, #732]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e52:	2104      	movs	r1, #4
 8004e54:	438a      	bics	r2, r1
 8004e56:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d014      	beq.n	8004e8a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e60:	f7fd fd0a 	bl	8002878 <HAL_GetTick>
 8004e64:	0003      	movs	r3, r0
 8004e66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e68:	e009      	b.n	8004e7e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e6a:	f7fd fd05 	bl	8002878 <HAL_GetTick>
 8004e6e:	0002      	movs	r2, r0
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	4aaf      	ldr	r2, [pc, #700]	; (8005134 <HAL_RCC_OscConfig+0x680>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e19a      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7e:	4bac      	ldr	r3, [pc, #688]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	2202      	movs	r2, #2
 8004e84:	4013      	ands	r3, r2
 8004e86:	d0f0      	beq.n	8004e6a <HAL_RCC_OscConfig+0x3b6>
 8004e88:	e013      	b.n	8004eb2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e8a:	f7fd fcf5 	bl	8002878 <HAL_GetTick>
 8004e8e:	0003      	movs	r3, r0
 8004e90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e92:	e009      	b.n	8004ea8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e94:	f7fd fcf0 	bl	8002878 <HAL_GetTick>
 8004e98:	0002      	movs	r2, r0
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	4aa5      	ldr	r2, [pc, #660]	; (8005134 <HAL_RCC_OscConfig+0x680>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e185      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ea8:	4ba1      	ldr	r3, [pc, #644]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	2202      	movs	r2, #2
 8004eae:	4013      	ands	r3, r2
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004eb2:	231f      	movs	r3, #31
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d105      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ebc:	4b9c      	ldr	r3, [pc, #624]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	4b9b      	ldr	r3, [pc, #620]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004ec2:	499d      	ldr	r1, [pc, #628]	; (8005138 <HAL_RCC_OscConfig+0x684>)
 8004ec4:	400a      	ands	r2, r1
 8004ec6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2210      	movs	r2, #16
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d063      	beq.n	8004f9a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d12a      	bne.n	8004f30 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004eda:	4b95      	ldr	r3, [pc, #596]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ede:	4b94      	ldr	r3, [pc, #592]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004ee0:	2104      	movs	r1, #4
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004ee6:	4b92      	ldr	r3, [pc, #584]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eea:	4b91      	ldr	r3, [pc, #580]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004eec:	2101      	movs	r1, #1
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef2:	f7fd fcc1 	bl	8002878 <HAL_GetTick>
 8004ef6:	0003      	movs	r3, r0
 8004ef8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004efc:	f7fd fcbc 	bl	8002878 <HAL_GetTick>
 8004f00:	0002      	movs	r2, r0
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e152      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004f0e:	4b88      	ldr	r3, [pc, #544]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f12:	2202      	movs	r2, #2
 8004f14:	4013      	ands	r3, r2
 8004f16:	d0f1      	beq.n	8004efc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004f18:	4b85      	ldr	r3, [pc, #532]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1c:	22f8      	movs	r2, #248	; 0xf8
 8004f1e:	4393      	bics	r3, r2
 8004f20:	0019      	movs	r1, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	00da      	lsls	r2, r3, #3
 8004f28:	4b81      	ldr	r3, [pc, #516]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	635a      	str	r2, [r3, #52]	; 0x34
 8004f2e:	e034      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	3305      	adds	r3, #5
 8004f36:	d111      	bne.n	8004f5c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004f38:	4b7d      	ldr	r3, [pc, #500]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f3c:	4b7c      	ldr	r3, [pc, #496]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f3e:	2104      	movs	r1, #4
 8004f40:	438a      	bics	r2, r1
 8004f42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004f44:	4b7a      	ldr	r3, [pc, #488]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	22f8      	movs	r2, #248	; 0xf8
 8004f4a:	4393      	bics	r3, r2
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	00da      	lsls	r2, r3, #3
 8004f54:	4b76      	ldr	r3, [pc, #472]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f56:	430a      	orrs	r2, r1
 8004f58:	635a      	str	r2, [r3, #52]	; 0x34
 8004f5a:	e01e      	b.n	8004f9a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004f5c:	4b74      	ldr	r3, [pc, #464]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f60:	4b73      	ldr	r3, [pc, #460]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f62:	2104      	movs	r1, #4
 8004f64:	430a      	orrs	r2, r1
 8004f66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004f68:	4b71      	ldr	r3, [pc, #452]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f6c:	4b70      	ldr	r3, [pc, #448]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f6e:	2101      	movs	r1, #1
 8004f70:	438a      	bics	r2, r1
 8004f72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f74:	f7fd fc80 	bl	8002878 <HAL_GetTick>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004f7e:	f7fd fc7b 	bl	8002878 <HAL_GetTick>
 8004f82:	0002      	movs	r2, r0
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e111      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004f90:	4b67      	ldr	r3, [pc, #412]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f94:	2202      	movs	r2, #2
 8004f96:	4013      	ands	r3, r2
 8004f98:	d1f1      	bne.n	8004f7e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d05c      	beq.n	800505e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004fa4:	4b62      	ldr	r3, [pc, #392]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	220c      	movs	r2, #12
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b0c      	cmp	r3, #12
 8004fae:	d00e      	beq.n	8004fce <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004fb0:	4b5f      	ldr	r3, [pc, #380]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	220c      	movs	r2, #12
 8004fb6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d114      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004fbc:	4b5c      	ldr	r3, [pc, #368]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	23c0      	movs	r3, #192	; 0xc0
 8004fc2:	025b      	lsls	r3, r3, #9
 8004fc4:	401a      	ands	r2, r3
 8004fc6:	23c0      	movs	r3, #192	; 0xc0
 8004fc8:	025b      	lsls	r3, r3, #9
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d10b      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004fce:	4b58      	ldr	r3, [pc, #352]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd2:	2380      	movs	r3, #128	; 0x80
 8004fd4:	025b      	lsls	r3, r3, #9
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	d040      	beq.n	800505c <HAL_RCC_OscConfig+0x5a8>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d03c      	beq.n	800505c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e0e6      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d01b      	beq.n	8005026 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004fee:	4b50      	ldr	r3, [pc, #320]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ff2:	4b4f      	ldr	r3, [pc, #316]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8004ff4:	2180      	movs	r1, #128	; 0x80
 8004ff6:	0249      	lsls	r1, r1, #9
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffc:	f7fd fc3c 	bl	8002878 <HAL_GetTick>
 8005000:	0003      	movs	r3, r0
 8005002:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005006:	f7fd fc37 	bl	8002878 <HAL_GetTick>
 800500a:	0002      	movs	r2, r0
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e0cd      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005018:	4b45      	ldr	r3, [pc, #276]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 800501a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800501c:	2380      	movs	r3, #128	; 0x80
 800501e:	025b      	lsls	r3, r3, #9
 8005020:	4013      	ands	r3, r2
 8005022:	d0f0      	beq.n	8005006 <HAL_RCC_OscConfig+0x552>
 8005024:	e01b      	b.n	800505e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005026:	4b42      	ldr	r3, [pc, #264]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8005028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800502a:	4b41      	ldr	r3, [pc, #260]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 800502c:	4943      	ldr	r1, [pc, #268]	; (800513c <HAL_RCC_OscConfig+0x688>)
 800502e:	400a      	ands	r2, r1
 8005030:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005032:	f7fd fc21 	bl	8002878 <HAL_GetTick>
 8005036:	0003      	movs	r3, r0
 8005038:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800503c:	f7fd fc1c 	bl	8002878 <HAL_GetTick>
 8005040:	0002      	movs	r2, r0
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e0b2      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800504e:	4b38      	ldr	r3, [pc, #224]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8005050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005052:	2380      	movs	r3, #128	; 0x80
 8005054:	025b      	lsls	r3, r3, #9
 8005056:	4013      	ands	r3, r2
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x588>
 800505a:	e000      	b.n	800505e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800505c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	2b00      	cmp	r3, #0
 8005064:	d100      	bne.n	8005068 <HAL_RCC_OscConfig+0x5b4>
 8005066:	e0a4      	b.n	80051b2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005068:	4b31      	ldr	r3, [pc, #196]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	220c      	movs	r2, #12
 800506e:	4013      	ands	r3, r2
 8005070:	2b08      	cmp	r3, #8
 8005072:	d100      	bne.n	8005076 <HAL_RCC_OscConfig+0x5c2>
 8005074:	e078      	b.n	8005168 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	2b02      	cmp	r3, #2
 800507c:	d14c      	bne.n	8005118 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800507e:	4b2c      	ldr	r3, [pc, #176]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b2b      	ldr	r3, [pc, #172]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 8005084:	492e      	ldr	r1, [pc, #184]	; (8005140 <HAL_RCC_OscConfig+0x68c>)
 8005086:	400a      	ands	r2, r1
 8005088:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508a:	f7fd fbf5 	bl	8002878 <HAL_GetTick>
 800508e:	0003      	movs	r3, r0
 8005090:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005094:	f7fd fbf0 	bl	8002878 <HAL_GetTick>
 8005098:	0002      	movs	r2, r0
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e086      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050a6:	4b22      	ldr	r3, [pc, #136]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	2380      	movs	r3, #128	; 0x80
 80050ac:	049b      	lsls	r3, r3, #18
 80050ae:	4013      	ands	r3, r2
 80050b0:	d1f0      	bne.n	8005094 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050b2:	4b1f      	ldr	r3, [pc, #124]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b6:	220f      	movs	r2, #15
 80050b8:	4393      	bics	r3, r2
 80050ba:	0019      	movs	r1, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c0:	4b1b      	ldr	r3, [pc, #108]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050c2:	430a      	orrs	r2, r1
 80050c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80050c6:	4b1a      	ldr	r3, [pc, #104]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	4a1e      	ldr	r2, [pc, #120]	; (8005144 <HAL_RCC_OscConfig+0x690>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	0019      	movs	r1, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	431a      	orrs	r2, r3
 80050da:	4b15      	ldr	r3, [pc, #84]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050dc:	430a      	orrs	r2, r1
 80050de:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050e0:	4b13      	ldr	r3, [pc, #76]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	4b12      	ldr	r3, [pc, #72]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 80050e6:	2180      	movs	r1, #128	; 0x80
 80050e8:	0449      	lsls	r1, r1, #17
 80050ea:	430a      	orrs	r2, r1
 80050ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ee:	f7fd fbc3 	bl	8002878 <HAL_GetTick>
 80050f2:	0003      	movs	r3, r0
 80050f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050f8:	f7fd fbbe 	bl	8002878 <HAL_GetTick>
 80050fc:	0002      	movs	r2, r0
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e054      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800510a:	4b09      	ldr	r3, [pc, #36]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	2380      	movs	r3, #128	; 0x80
 8005110:	049b      	lsls	r3, r3, #18
 8005112:	4013      	ands	r3, r2
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCC_OscConfig+0x644>
 8005116:	e04c      	b.n	80051b2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005118:	4b05      	ldr	r3, [pc, #20]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	4b04      	ldr	r3, [pc, #16]	; (8005130 <HAL_RCC_OscConfig+0x67c>)
 800511e:	4908      	ldr	r1, [pc, #32]	; (8005140 <HAL_RCC_OscConfig+0x68c>)
 8005120:	400a      	ands	r2, r1
 8005122:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005124:	f7fd fba8 	bl	8002878 <HAL_GetTick>
 8005128:	0003      	movs	r3, r0
 800512a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800512c:	e015      	b.n	800515a <HAL_RCC_OscConfig+0x6a6>
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	40021000 	.word	0x40021000
 8005134:	00001388 	.word	0x00001388
 8005138:	efffffff 	.word	0xefffffff
 800513c:	fffeffff 	.word	0xfffeffff
 8005140:	feffffff 	.word	0xfeffffff
 8005144:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005148:	f7fd fb96 	bl	8002878 <HAL_GetTick>
 800514c:	0002      	movs	r2, r0
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e02c      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800515a:	4b18      	ldr	r3, [pc, #96]	; (80051bc <HAL_RCC_OscConfig+0x708>)
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	2380      	movs	r3, #128	; 0x80
 8005160:	049b      	lsls	r3, r3, #18
 8005162:	4013      	ands	r3, r2
 8005164:	d1f0      	bne.n	8005148 <HAL_RCC_OscConfig+0x694>
 8005166:	e024      	b.n	80051b2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e01f      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005174:	4b11      	ldr	r3, [pc, #68]	; (80051bc <HAL_RCC_OscConfig+0x708>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800517a:	4b10      	ldr	r3, [pc, #64]	; (80051bc <HAL_RCC_OscConfig+0x708>)
 800517c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	23c0      	movs	r3, #192	; 0xc0
 8005184:	025b      	lsls	r3, r3, #9
 8005186:	401a      	ands	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518c:	429a      	cmp	r2, r3
 800518e:	d10e      	bne.n	80051ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	220f      	movs	r2, #15
 8005194:	401a      	ands	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800519a:	429a      	cmp	r2, r3
 800519c:	d107      	bne.n	80051ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	23f0      	movs	r3, #240	; 0xf0
 80051a2:	039b      	lsls	r3, r3, #14
 80051a4:	401a      	ands	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d001      	beq.n	80051b2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e000      	b.n	80051b4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	0018      	movs	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b008      	add	sp, #32
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40021000 	.word	0x40021000

080051c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0bf      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051d4:	4b61      	ldr	r3, [pc, #388]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2201      	movs	r2, #1
 80051da:	4013      	ands	r3, r2
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d911      	bls.n	8005206 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e2:	4b5e      	ldr	r3, [pc, #376]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2201      	movs	r2, #1
 80051e8:	4393      	bics	r3, r2
 80051ea:	0019      	movs	r1, r3
 80051ec:	4b5b      	ldr	r3, [pc, #364]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f4:	4b59      	ldr	r3, [pc, #356]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2201      	movs	r2, #1
 80051fa:	4013      	ands	r3, r2
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d001      	beq.n	8005206 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e0a6      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2202      	movs	r2, #2
 800520c:	4013      	ands	r3, r2
 800520e:	d015      	beq.n	800523c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2204      	movs	r2, #4
 8005216:	4013      	ands	r3, r2
 8005218:	d006      	beq.n	8005228 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800521a:	4b51      	ldr	r3, [pc, #324]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	4b50      	ldr	r3, [pc, #320]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005220:	21e0      	movs	r1, #224	; 0xe0
 8005222:	00c9      	lsls	r1, r1, #3
 8005224:	430a      	orrs	r2, r1
 8005226:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005228:	4b4d      	ldr	r3, [pc, #308]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	22f0      	movs	r2, #240	; 0xf0
 800522e:	4393      	bics	r3, r2
 8005230:	0019      	movs	r1, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	4b4a      	ldr	r3, [pc, #296]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005238:	430a      	orrs	r2, r1
 800523a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2201      	movs	r2, #1
 8005242:	4013      	ands	r3, r2
 8005244:	d04c      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d107      	bne.n	800525e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800524e:	4b44      	ldr	r3, [pc, #272]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	2380      	movs	r3, #128	; 0x80
 8005254:	029b      	lsls	r3, r3, #10
 8005256:	4013      	ands	r3, r2
 8005258:	d120      	bne.n	800529c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e07a      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d107      	bne.n	8005276 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005266:	4b3e      	ldr	r3, [pc, #248]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	2380      	movs	r3, #128	; 0x80
 800526c:	049b      	lsls	r3, r3, #18
 800526e:	4013      	ands	r3, r2
 8005270:	d114      	bne.n	800529c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e06e      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b03      	cmp	r3, #3
 800527c:	d107      	bne.n	800528e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800527e:	4b38      	ldr	r3, [pc, #224]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005282:	2380      	movs	r3, #128	; 0x80
 8005284:	025b      	lsls	r3, r3, #9
 8005286:	4013      	ands	r3, r2
 8005288:	d108      	bne.n	800529c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e062      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528e:	4b34      	ldr	r3, [pc, #208]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2202      	movs	r2, #2
 8005294:	4013      	ands	r3, r2
 8005296:	d101      	bne.n	800529c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e05b      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800529c:	4b30      	ldr	r3, [pc, #192]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2203      	movs	r2, #3
 80052a2:	4393      	bics	r3, r2
 80052a4:	0019      	movs	r1, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	4b2d      	ldr	r3, [pc, #180]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 80052ac:	430a      	orrs	r2, r1
 80052ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052b0:	f7fd fae2 	bl	8002878 <HAL_GetTick>
 80052b4:	0003      	movs	r3, r0
 80052b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b8:	e009      	b.n	80052ce <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ba:	f7fd fadd 	bl	8002878 <HAL_GetTick>
 80052be:	0002      	movs	r2, r0
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	4a27      	ldr	r2, [pc, #156]	; (8005364 <HAL_RCC_ClockConfig+0x1a4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e042      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ce:	4b24      	ldr	r3, [pc, #144]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	220c      	movs	r2, #12
 80052d4:	401a      	ands	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	429a      	cmp	r2, r3
 80052de:	d1ec      	bne.n	80052ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052e0:	4b1e      	ldr	r3, [pc, #120]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2201      	movs	r2, #1
 80052e6:	4013      	ands	r3, r2
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d211      	bcs.n	8005312 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ee:	4b1b      	ldr	r3, [pc, #108]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2201      	movs	r2, #1
 80052f4:	4393      	bics	r3, r2
 80052f6:	0019      	movs	r1, r3
 80052f8:	4b18      	ldr	r3, [pc, #96]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005300:	4b16      	ldr	r3, [pc, #88]	; (800535c <HAL_RCC_ClockConfig+0x19c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2201      	movs	r2, #1
 8005306:	4013      	ands	r3, r2
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d001      	beq.n	8005312 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e020      	b.n	8005354 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2204      	movs	r2, #4
 8005318:	4013      	ands	r3, r2
 800531a:	d009      	beq.n	8005330 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800531c:	4b10      	ldr	r3, [pc, #64]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	4a11      	ldr	r2, [pc, #68]	; (8005368 <HAL_RCC_ClockConfig+0x1a8>)
 8005322:	4013      	ands	r3, r2
 8005324:	0019      	movs	r1, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 800532c:	430a      	orrs	r2, r1
 800532e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005330:	f000 f820 	bl	8005374 <HAL_RCC_GetSysClockFreq>
 8005334:	0001      	movs	r1, r0
 8005336:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <HAL_RCC_ClockConfig+0x1a0>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	091b      	lsrs	r3, r3, #4
 800533c:	220f      	movs	r2, #15
 800533e:	4013      	ands	r3, r2
 8005340:	4a0a      	ldr	r2, [pc, #40]	; (800536c <HAL_RCC_ClockConfig+0x1ac>)
 8005342:	5cd3      	ldrb	r3, [r2, r3]
 8005344:	000a      	movs	r2, r1
 8005346:	40da      	lsrs	r2, r3
 8005348:	4b09      	ldr	r3, [pc, #36]	; (8005370 <HAL_RCC_ClockConfig+0x1b0>)
 800534a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800534c:	2000      	movs	r0, #0
 800534e:	f7fd fa4d 	bl	80027ec <HAL_InitTick>
  
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	0018      	movs	r0, r3
 8005356:	46bd      	mov	sp, r7
 8005358:	b004      	add	sp, #16
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40022000 	.word	0x40022000
 8005360:	40021000 	.word	0x40021000
 8005364:	00001388 	.word	0x00001388
 8005368:	fffff8ff 	.word	0xfffff8ff
 800536c:	0800ba64 	.word	0x0800ba64
 8005370:	20000000 	.word	0x20000000

08005374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005374:	b590      	push	{r4, r7, lr}
 8005376:	b08f      	sub	sp, #60	; 0x3c
 8005378:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800537a:	2314      	movs	r3, #20
 800537c:	18fb      	adds	r3, r7, r3
 800537e:	4a37      	ldr	r2, [pc, #220]	; (800545c <HAL_RCC_GetSysClockFreq+0xe8>)
 8005380:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005382:	c313      	stmia	r3!, {r0, r1, r4}
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005388:	1d3b      	adds	r3, r7, #4
 800538a:	4a35      	ldr	r2, [pc, #212]	; (8005460 <HAL_RCC_GetSysClockFreq+0xec>)
 800538c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800538e:	c313      	stmia	r3!, {r0, r1, r4}
 8005390:	6812      	ldr	r2, [r2, #0]
 8005392:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005398:	2300      	movs	r3, #0
 800539a:	62bb      	str	r3, [r7, #40]	; 0x28
 800539c:	2300      	movs	r3, #0
 800539e:	637b      	str	r3, [r7, #52]	; 0x34
 80053a0:	2300      	movs	r3, #0
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80053a8:	4b2e      	ldr	r3, [pc, #184]	; (8005464 <HAL_RCC_GetSysClockFreq+0xf0>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b0:	220c      	movs	r2, #12
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d006      	beq.n	80053c6 <HAL_RCC_GetSysClockFreq+0x52>
 80053b8:	2b0c      	cmp	r3, #12
 80053ba:	d043      	beq.n	8005444 <HAL_RCC_GetSysClockFreq+0xd0>
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d144      	bne.n	800544a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053c0:	4b29      	ldr	r3, [pc, #164]	; (8005468 <HAL_RCC_GetSysClockFreq+0xf4>)
 80053c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80053c4:	e044      	b.n	8005450 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80053c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c8:	0c9b      	lsrs	r3, r3, #18
 80053ca:	220f      	movs	r2, #15
 80053cc:	4013      	ands	r3, r2
 80053ce:	2214      	movs	r2, #20
 80053d0:	18ba      	adds	r2, r7, r2
 80053d2:	5cd3      	ldrb	r3, [r2, r3]
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80053d6:	4b23      	ldr	r3, [pc, #140]	; (8005464 <HAL_RCC_GetSysClockFreq+0xf0>)
 80053d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053da:	220f      	movs	r2, #15
 80053dc:	4013      	ands	r3, r2
 80053de:	1d3a      	adds	r2, r7, #4
 80053e0:	5cd3      	ldrb	r3, [r2, r3]
 80053e2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80053e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053e6:	23c0      	movs	r3, #192	; 0xc0
 80053e8:	025b      	lsls	r3, r3, #9
 80053ea:	401a      	ands	r2, r3
 80053ec:	2380      	movs	r3, #128	; 0x80
 80053ee:	025b      	lsls	r3, r3, #9
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d109      	bne.n	8005408 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80053f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053f6:	481c      	ldr	r0, [pc, #112]	; (8005468 <HAL_RCC_GetSysClockFreq+0xf4>)
 80053f8:	f7fa fe98 	bl	800012c <__udivsi3>
 80053fc:	0003      	movs	r3, r0
 80053fe:	001a      	movs	r2, r3
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	4353      	muls	r3, r2
 8005404:	637b      	str	r3, [r7, #52]	; 0x34
 8005406:	e01a      	b.n	800543e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800540a:	23c0      	movs	r3, #192	; 0xc0
 800540c:	025b      	lsls	r3, r3, #9
 800540e:	401a      	ands	r2, r3
 8005410:	23c0      	movs	r3, #192	; 0xc0
 8005412:	025b      	lsls	r3, r3, #9
 8005414:	429a      	cmp	r2, r3
 8005416:	d109      	bne.n	800542c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800541a:	4814      	ldr	r0, [pc, #80]	; (800546c <HAL_RCC_GetSysClockFreq+0xf8>)
 800541c:	f7fa fe86 	bl	800012c <__udivsi3>
 8005420:	0003      	movs	r3, r0
 8005422:	001a      	movs	r2, r3
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	4353      	muls	r3, r2
 8005428:	637b      	str	r3, [r7, #52]	; 0x34
 800542a:	e008      	b.n	800543e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800542c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800542e:	480e      	ldr	r0, [pc, #56]	; (8005468 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005430:	f7fa fe7c 	bl	800012c <__udivsi3>
 8005434:	0003      	movs	r3, r0
 8005436:	001a      	movs	r2, r3
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	4353      	muls	r3, r2
 800543c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800543e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005440:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005442:	e005      	b.n	8005450 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005444:	4b09      	ldr	r3, [pc, #36]	; (800546c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005446:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005448:	e002      	b.n	8005450 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800544a:	4b07      	ldr	r3, [pc, #28]	; (8005468 <HAL_RCC_GetSysClockFreq+0xf4>)
 800544c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800544e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005452:	0018      	movs	r0, r3
 8005454:	46bd      	mov	sp, r7
 8005456:	b00f      	add	sp, #60	; 0x3c
 8005458:	bd90      	pop	{r4, r7, pc}
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	0800b964 	.word	0x0800b964
 8005460:	0800b974 	.word	0x0800b974
 8005464:	40021000 	.word	0x40021000
 8005468:	007a1200 	.word	0x007a1200
 800546c:	02dc6c00 	.word	0x02dc6c00

08005470 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	2380      	movs	r3, #128	; 0x80
 8005486:	025b      	lsls	r3, r3, #9
 8005488:	4013      	ands	r3, r2
 800548a:	d100      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800548c:	e08f      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800548e:	2317      	movs	r3, #23
 8005490:	18fb      	adds	r3, r7, r3
 8005492:	2200      	movs	r2, #0
 8005494:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005496:	4b6f      	ldr	r3, [pc, #444]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005498:	69da      	ldr	r2, [r3, #28]
 800549a:	2380      	movs	r3, #128	; 0x80
 800549c:	055b      	lsls	r3, r3, #21
 800549e:	4013      	ands	r3, r2
 80054a0:	d111      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054a2:	4b6c      	ldr	r3, [pc, #432]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80054a4:	69da      	ldr	r2, [r3, #28]
 80054a6:	4b6b      	ldr	r3, [pc, #428]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80054a8:	2180      	movs	r1, #128	; 0x80
 80054aa:	0549      	lsls	r1, r1, #21
 80054ac:	430a      	orrs	r2, r1
 80054ae:	61da      	str	r2, [r3, #28]
 80054b0:	4b68      	ldr	r3, [pc, #416]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	2380      	movs	r3, #128	; 0x80
 80054b6:	055b      	lsls	r3, r3, #21
 80054b8:	4013      	ands	r3, r2
 80054ba:	60bb      	str	r3, [r7, #8]
 80054bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054be:	2317      	movs	r3, #23
 80054c0:	18fb      	adds	r3, r7, r3
 80054c2:	2201      	movs	r2, #1
 80054c4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c6:	4b64      	ldr	r3, [pc, #400]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	2380      	movs	r3, #128	; 0x80
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	4013      	ands	r3, r2
 80054d0:	d11a      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054d2:	4b61      	ldr	r3, [pc, #388]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	4b60      	ldr	r3, [pc, #384]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80054d8:	2180      	movs	r1, #128	; 0x80
 80054da:	0049      	lsls	r1, r1, #1
 80054dc:	430a      	orrs	r2, r1
 80054de:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054e0:	f7fd f9ca 	bl	8002878 <HAL_GetTick>
 80054e4:	0003      	movs	r3, r0
 80054e6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e8:	e008      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ea:	f7fd f9c5 	bl	8002878 <HAL_GetTick>
 80054ee:	0002      	movs	r2, r0
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b64      	cmp	r3, #100	; 0x64
 80054f6:	d901      	bls.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e0a6      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054fc:	4b56      	ldr	r3, [pc, #344]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	2380      	movs	r3, #128	; 0x80
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	4013      	ands	r3, r2
 8005506:	d0f0      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005508:	4b52      	ldr	r3, [pc, #328]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800550a:	6a1a      	ldr	r2, [r3, #32]
 800550c:	23c0      	movs	r3, #192	; 0xc0
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4013      	ands	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d034      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	23c0      	movs	r3, #192	; 0xc0
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4013      	ands	r3, r2
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	429a      	cmp	r2, r3
 8005528:	d02c      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800552a:	4b4a      	ldr	r3, [pc, #296]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	4a4b      	ldr	r2, [pc, #300]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005530:	4013      	ands	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005534:	4b47      	ldr	r3, [pc, #284]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005536:	6a1a      	ldr	r2, [r3, #32]
 8005538:	4b46      	ldr	r3, [pc, #280]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800553a:	2180      	movs	r1, #128	; 0x80
 800553c:	0249      	lsls	r1, r1, #9
 800553e:	430a      	orrs	r2, r1
 8005540:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005542:	4b44      	ldr	r3, [pc, #272]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005544:	6a1a      	ldr	r2, [r3, #32]
 8005546:	4b43      	ldr	r3, [pc, #268]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005548:	4945      	ldr	r1, [pc, #276]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800554a:	400a      	ands	r2, r1
 800554c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800554e:	4b41      	ldr	r3, [pc, #260]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	4013      	ands	r3, r2
 800555a:	d013      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555c:	f7fd f98c 	bl	8002878 <HAL_GetTick>
 8005560:	0003      	movs	r3, r0
 8005562:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005564:	e009      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005566:	f7fd f987 	bl	8002878 <HAL_GetTick>
 800556a:	0002      	movs	r2, r0
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	4a3c      	ldr	r2, [pc, #240]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d901      	bls.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e067      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800557a:	4b36      	ldr	r3, [pc, #216]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	2202      	movs	r2, #2
 8005580:	4013      	ands	r3, r2
 8005582:	d0f0      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005584:	4b33      	ldr	r3, [pc, #204]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	4a34      	ldr	r2, [pc, #208]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800558a:	4013      	ands	r3, r2
 800558c:	0019      	movs	r1, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	4b30      	ldr	r3, [pc, #192]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005594:	430a      	orrs	r2, r1
 8005596:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005598:	2317      	movs	r3, #23
 800559a:	18fb      	adds	r3, r7, r3
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d105      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055a2:	4b2c      	ldr	r3, [pc, #176]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80055a4:	69da      	ldr	r2, [r3, #28]
 80055a6:	4b2b      	ldr	r3, [pc, #172]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80055a8:	492f      	ldr	r1, [pc, #188]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80055aa:	400a      	ands	r2, r1
 80055ac:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2201      	movs	r2, #1
 80055b4:	4013      	ands	r3, r2
 80055b6:	d009      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055b8:	4b26      	ldr	r3, [pc, #152]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	2203      	movs	r2, #3
 80055be:	4393      	bics	r3, r2
 80055c0:	0019      	movs	r1, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	4b23      	ldr	r3, [pc, #140]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80055c8:	430a      	orrs	r2, r1
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2202      	movs	r2, #2
 80055d2:	4013      	ands	r3, r2
 80055d4:	d009      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055d6:	4b1f      	ldr	r3, [pc, #124]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	4a24      	ldr	r2, [pc, #144]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80055dc:	4013      	ands	r3, r2
 80055de:	0019      	movs	r1, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	4b1b      	ldr	r3, [pc, #108]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80055e6:	430a      	orrs	r2, r1
 80055e8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2220      	movs	r2, #32
 80055f0:	4013      	ands	r3, r2
 80055f2:	d009      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055f4:	4b17      	ldr	r3, [pc, #92]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	2210      	movs	r2, #16
 80055fa:	4393      	bics	r3, r2
 80055fc:	0019      	movs	r1, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691a      	ldr	r2, [r3, #16]
 8005602:	4b14      	ldr	r3, [pc, #80]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005604:	430a      	orrs	r2, r1
 8005606:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	2380      	movs	r3, #128	; 0x80
 800560e:	029b      	lsls	r3, r3, #10
 8005610:	4013      	ands	r3, r2
 8005612:	d009      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005614:	4b0f      	ldr	r3, [pc, #60]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	2280      	movs	r2, #128	; 0x80
 800561a:	4393      	bics	r3, r2
 800561c:	0019      	movs	r1, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	4b0c      	ldr	r3, [pc, #48]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005624:	430a      	orrs	r2, r1
 8005626:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	2380      	movs	r3, #128	; 0x80
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	4013      	ands	r3, r2
 8005632:	d009      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005634:	4b07      	ldr	r3, [pc, #28]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	2240      	movs	r2, #64	; 0x40
 800563a:	4393      	bics	r3, r2
 800563c:	0019      	movs	r1, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695a      	ldr	r2, [r3, #20]
 8005642:	4b04      	ldr	r3, [pc, #16]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005644:	430a      	orrs	r2, r1
 8005646:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	0018      	movs	r0, r3
 800564c:	46bd      	mov	sp, r7
 800564e:	b006      	add	sp, #24
 8005650:	bd80      	pop	{r7, pc}
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	40021000 	.word	0x40021000
 8005658:	40007000 	.word	0x40007000
 800565c:	fffffcff 	.word	0xfffffcff
 8005660:	fffeffff 	.word	0xfffeffff
 8005664:	00001388 	.word	0x00001388
 8005668:	efffffff 	.word	0xefffffff
 800566c:	fffcffff 	.word	0xfffcffff

08005670 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005678:	210e      	movs	r1, #14
 800567a:	187b      	adds	r3, r7, r1
 800567c:	4a08      	ldr	r2, [pc, #32]	; (80056a0 <USB_EnableGlobalInt+0x30>)
 800567e:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2240      	movs	r2, #64	; 0x40
 8005684:	5a9b      	ldrh	r3, [r3, r2]
 8005686:	b29a      	uxth	r2, r3
 8005688:	187b      	adds	r3, r7, r1
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	4313      	orrs	r3, r2
 800568e:	b299      	uxth	r1, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2240      	movs	r2, #64	; 0x40
 8005694:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	0018      	movs	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	b004      	add	sp, #16
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	ffffbf80 	.word	0xffffbf80

080056a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80056ac:	210e      	movs	r1, #14
 80056ae:	187b      	adds	r3, r7, r1
 80056b0:	4a0b      	ldr	r2, [pc, #44]	; (80056e0 <USB_DisableGlobalInt+0x3c>)
 80056b2:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2240      	movs	r2, #64	; 0x40
 80056b8:	5a9b      	ldrh	r3, [r3, r2]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	b21b      	sxth	r3, r3
 80056be:	187a      	adds	r2, r7, r1
 80056c0:	2100      	movs	r1, #0
 80056c2:	5e52      	ldrsh	r2, [r2, r1]
 80056c4:	43d2      	mvns	r2, r2
 80056c6:	b212      	sxth	r2, r2
 80056c8:	4013      	ands	r3, r2
 80056ca:	b21b      	sxth	r3, r3
 80056cc:	b299      	uxth	r1, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2240      	movs	r2, #64	; 0x40
 80056d2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	0018      	movs	r0, r3
 80056d8:	46bd      	mov	sp, r7
 80056da:	b004      	add	sp, #16
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	ffffbf80 	.word	0xffffbf80

080056e4 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80056e4:	b084      	sub	sp, #16
 80056e6:	b590      	push	{r4, r7, lr}
 80056e8:	46c6      	mov	lr, r8
 80056ea:	b500      	push	{lr}
 80056ec:	b082      	sub	sp, #8
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	2004      	movs	r0, #4
 80056f4:	2410      	movs	r4, #16
 80056f6:	46a4      	mov	ip, r4
 80056f8:	2408      	movs	r4, #8
 80056fa:	46a0      	mov	r8, r4
 80056fc:	44b8      	add	r8, r7
 80056fe:	44c4      	add	ip, r8
 8005700:	4460      	add	r0, ip
 8005702:	6001      	str	r1, [r0, #0]
 8005704:	6042      	str	r2, [r0, #4]
 8005706:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2240      	movs	r2, #64	; 0x40
 800570c:	2101      	movs	r1, #1
 800570e:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2240      	movs	r2, #64	; 0x40
 8005714:	2100      	movs	r1, #0
 8005716:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2244      	movs	r2, #68	; 0x44
 800571c:	2100      	movs	r1, #0
 800571e:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2250      	movs	r2, #80	; 0x50
 8005724:	2100      	movs	r1, #0
 8005726:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	0018      	movs	r0, r3
 800572c:	f7ff ffa0 	bl	8005670 <USB_EnableGlobalInt>

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	0018      	movs	r0, r3
 8005734:	46bd      	mov	sp, r7
 8005736:	b002      	add	sp, #8
 8005738:	bc04      	pop	{r2}
 800573a:	4690      	mov	r8, r2
 800573c:	bc90      	pop	{r4, r7}
 800573e:	bc08      	pop	{r3}
 8005740:	b004      	add	sp, #16
 8005742:	4718      	bx	r3

08005744 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005744:	b590      	push	{r4, r7, lr}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800574e:	2317      	movs	r3, #23
 8005750:	18fb      	adds	r3, r7, r3
 8005752:	2200      	movs	r2, #0
 8005754:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	18d3      	adds	r3, r2, r3
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29a      	uxth	r2, r3
 8005764:	2314      	movs	r3, #20
 8005766:	18fb      	adds	r3, r7, r3
 8005768:	49b2      	ldr	r1, [pc, #712]	; (8005a34 <USB_ActivateEndpoint+0x2f0>)
 800576a:	400a      	ands	r2, r1
 800576c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	78db      	ldrb	r3, [r3, #3]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d020      	beq.n	80057b8 <USB_ActivateEndpoint+0x74>
 8005776:	dc02      	bgt.n	800577e <USB_ActivateEndpoint+0x3a>
 8005778:	2b00      	cmp	r3, #0
 800577a:	d005      	beq.n	8005788 <USB_ActivateEndpoint+0x44>
 800577c:	e025      	b.n	80057ca <USB_ActivateEndpoint+0x86>
 800577e:	2b02      	cmp	r3, #2
 8005780:	d00b      	beq.n	800579a <USB_ActivateEndpoint+0x56>
 8005782:	2b03      	cmp	r3, #3
 8005784:	d00f      	beq.n	80057a6 <USB_ActivateEndpoint+0x62>
 8005786:	e020      	b.n	80057ca <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005788:	2214      	movs	r2, #20
 800578a:	18bb      	adds	r3, r7, r2
 800578c:	18ba      	adds	r2, r7, r2
 800578e:	8812      	ldrh	r2, [r2, #0]
 8005790:	2180      	movs	r1, #128	; 0x80
 8005792:	0089      	lsls	r1, r1, #2
 8005794:	430a      	orrs	r2, r1
 8005796:	801a      	strh	r2, [r3, #0]
      break;
 8005798:	e01c      	b.n	80057d4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800579a:	2214      	movs	r2, #20
 800579c:	18bb      	adds	r3, r7, r2
 800579e:	18ba      	adds	r2, r7, r2
 80057a0:	8812      	ldrh	r2, [r2, #0]
 80057a2:	801a      	strh	r2, [r3, #0]
      break;
 80057a4:	e016      	b.n	80057d4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80057a6:	2214      	movs	r2, #20
 80057a8:	18bb      	adds	r3, r7, r2
 80057aa:	18ba      	adds	r2, r7, r2
 80057ac:	8812      	ldrh	r2, [r2, #0]
 80057ae:	21c0      	movs	r1, #192	; 0xc0
 80057b0:	00c9      	lsls	r1, r1, #3
 80057b2:	430a      	orrs	r2, r1
 80057b4:	801a      	strh	r2, [r3, #0]
      break;
 80057b6:	e00d      	b.n	80057d4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80057b8:	2214      	movs	r2, #20
 80057ba:	18bb      	adds	r3, r7, r2
 80057bc:	18ba      	adds	r2, r7, r2
 80057be:	8812      	ldrh	r2, [r2, #0]
 80057c0:	2180      	movs	r1, #128	; 0x80
 80057c2:	00c9      	lsls	r1, r1, #3
 80057c4:	430a      	orrs	r2, r1
 80057c6:	801a      	strh	r2, [r3, #0]
      break;
 80057c8:	e004      	b.n	80057d4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80057ca:	2317      	movs	r3, #23
 80057cc:	18fb      	adds	r3, r7, r3
 80057ce:	2201      	movs	r2, #1
 80057d0:	701a      	strb	r2, [r3, #0]
      break;
 80057d2:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	18d3      	adds	r3, r2, r3
 80057de:	2214      	movs	r2, #20
 80057e0:	18ba      	adds	r2, r7, r2
 80057e2:	8812      	ldrh	r2, [r2, #0]
 80057e4:	4994      	ldr	r1, [pc, #592]	; (8005a38 <USB_ActivateEndpoint+0x2f4>)
 80057e6:	430a      	orrs	r2, r1
 80057e8:	b292      	uxth	r2, r2
 80057ea:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	18d3      	adds	r3, r2, r3
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	b21b      	sxth	r3, r3
 80057fc:	4a8f      	ldr	r2, [pc, #572]	; (8005a3c <USB_ActivateEndpoint+0x2f8>)
 80057fe:	4013      	ands	r3, r2
 8005800:	b21a      	sxth	r2, r3
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	b21b      	sxth	r3, r3
 8005808:	4313      	orrs	r3, r2
 800580a:	b21b      	sxth	r3, r3
 800580c:	b29c      	uxth	r4, r3
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	18d3      	adds	r3, r2, r3
 8005818:	4a87      	ldr	r2, [pc, #540]	; (8005a38 <USB_ActivateEndpoint+0x2f4>)
 800581a:	4322      	orrs	r2, r4
 800581c:	b292      	uxth	r2, r2
 800581e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	7b1b      	ldrb	r3, [r3, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d000      	beq.n	800582a <USB_ActivateEndpoint+0xe6>
 8005828:	e11a      	b.n	8005a60 <USB_ActivateEndpoint+0x31c>
  {
    if (ep->is_in != 0U)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	785b      	ldrb	r3, [r3, #1]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d062      	beq.n	80058f8 <USB_ActivateEndpoint+0x1b4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005832:	687c      	ldr	r4, [r7, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2250      	movs	r2, #80	; 0x50
 8005838:	5a9b      	ldrh	r3, [r3, r2]
 800583a:	b29b      	uxth	r3, r3
 800583c:	18e4      	adds	r4, r4, r3
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	18e3      	adds	r3, r4, r3
 8005846:	2280      	movs	r2, #128	; 0x80
 8005848:	00d2      	lsls	r2, r2, #3
 800584a:	4694      	mov	ip, r2
 800584c:	4463      	add	r3, ip
 800584e:	001c      	movs	r4, r3
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	88db      	ldrh	r3, [r3, #6]
 8005854:	085b      	lsrs	r3, r3, #1
 8005856:	b29b      	uxth	r3, r3
 8005858:	18db      	adds	r3, r3, r3
 800585a:	b29b      	uxth	r3, r3
 800585c:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	18d3      	adds	r3, r2, r3
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	b29c      	uxth	r4, r3
 800586c:	0022      	movs	r2, r4
 800586e:	2340      	movs	r3, #64	; 0x40
 8005870:	4013      	ands	r3, r2
 8005872:	d012      	beq.n	800589a <USB_ActivateEndpoint+0x156>
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	18d3      	adds	r3, r2, r3
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	b29b      	uxth	r3, r3
 8005882:	4a6e      	ldr	r2, [pc, #440]	; (8005a3c <USB_ActivateEndpoint+0x2f8>)
 8005884:	4013      	ands	r3, r2
 8005886:	b29c      	uxth	r4, r3
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	18d3      	adds	r3, r2, r3
 8005892:	4a6b      	ldr	r2, [pc, #428]	; (8005a40 <USB_ActivateEndpoint+0x2fc>)
 8005894:	4322      	orrs	r2, r4
 8005896:	b292      	uxth	r2, r2
 8005898:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	78db      	ldrb	r3, [r3, #3]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d016      	beq.n	80058d0 <USB_ActivateEndpoint+0x18c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	18d3      	adds	r3, r2, r3
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	4a64      	ldr	r2, [pc, #400]	; (8005a44 <USB_ActivateEndpoint+0x300>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	b29c      	uxth	r4, r3
 80058b6:	2320      	movs	r3, #32
 80058b8:	4063      	eors	r3, r4
 80058ba:	b29c      	uxth	r4, r3
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	18d3      	adds	r3, r2, r3
 80058c6:	4a5c      	ldr	r2, [pc, #368]	; (8005a38 <USB_ActivateEndpoint+0x2f4>)
 80058c8:	4322      	orrs	r2, r4
 80058ca:	b292      	uxth	r2, r2
 80058cc:	801a      	strh	r2, [r3, #0]
 80058ce:	e21a      	b.n	8005d06 <USB_ActivateEndpoint+0x5c2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	18d3      	adds	r3, r2, r3
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	4a59      	ldr	r2, [pc, #356]	; (8005a44 <USB_ActivateEndpoint+0x300>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	b29c      	uxth	r4, r3
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	18d3      	adds	r3, r2, r3
 80058ee:	4a52      	ldr	r2, [pc, #328]	; (8005a38 <USB_ActivateEndpoint+0x2f4>)
 80058f0:	4322      	orrs	r2, r4
 80058f2:	b292      	uxth	r2, r2
 80058f4:	801a      	strh	r2, [r3, #0]
 80058f6:	e206      	b.n	8005d06 <USB_ActivateEndpoint+0x5c2>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80058f8:	687c      	ldr	r4, [r7, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2250      	movs	r2, #80	; 0x50
 80058fe:	5a9b      	ldrh	r3, [r3, r2]
 8005900:	b29b      	uxth	r3, r3
 8005902:	18e4      	adds	r4, r4, r3
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	18e3      	adds	r3, r4, r3
 800590c:	4a4e      	ldr	r2, [pc, #312]	; (8005a48 <USB_ActivateEndpoint+0x304>)
 800590e:	4694      	mov	ip, r2
 8005910:	4463      	add	r3, ip
 8005912:	001c      	movs	r4, r3
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	88db      	ldrh	r3, [r3, #6]
 8005918:	085b      	lsrs	r3, r3, #1
 800591a:	b29b      	uxth	r3, r3
 800591c:	18db      	adds	r3, r3, r3
 800591e:	b29b      	uxth	r3, r3
 8005920:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005922:	687c      	ldr	r4, [r7, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2250      	movs	r2, #80	; 0x50
 8005928:	5a9b      	ldrh	r3, [r3, r2]
 800592a:	b29b      	uxth	r3, r3
 800592c:	18e4      	adds	r4, r4, r3
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	18e3      	adds	r3, r4, r3
 8005936:	4a45      	ldr	r2, [pc, #276]	; (8005a4c <USB_ActivateEndpoint+0x308>)
 8005938:	4694      	mov	ip, r2
 800593a:	4463      	add	r3, ip
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10e      	bne.n	8005964 <USB_ActivateEndpoint+0x220>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	4a41      	ldr	r2, [pc, #260]	; (8005a50 <USB_ActivateEndpoint+0x30c>)
 800594c:	4013      	ands	r3, r2
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	801a      	strh	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	4a3e      	ldr	r2, [pc, #248]	; (8005a54 <USB_ActivateEndpoint+0x310>)
 800595a:	4313      	orrs	r3, r2
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	801a      	strh	r2, [r3, #0]
 8005962:	e02b      	b.n	80059bc <USB_ActivateEndpoint+0x278>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	2b3e      	cmp	r3, #62	; 0x3e
 800596a:	d812      	bhi.n	8005992 <USB_ActivateEndpoint+0x24e>
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	085b      	lsrs	r3, r3, #1
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	2201      	movs	r2, #1
 800597a:	4013      	ands	r3, r2
 800597c:	d002      	beq.n	8005984 <USB_ActivateEndpoint+0x240>
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	3301      	adds	r3, #1
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	b29b      	uxth	r3, r3
 8005988:	029b      	lsls	r3, r3, #10
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	801a      	strh	r2, [r3, #0]
 8005990:	e014      	b.n	80059bc <USB_ActivateEndpoint+0x278>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	095b      	lsrs	r3, r3, #5
 8005998:	613b      	str	r3, [r7, #16]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	221f      	movs	r2, #31
 80059a0:	4013      	ands	r3, r2
 80059a2:	d102      	bne.n	80059aa <USB_ActivateEndpoint+0x266>
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	613b      	str	r3, [r7, #16]
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	029b      	lsls	r3, r3, #10
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	4a28      	ldr	r2, [pc, #160]	; (8005a54 <USB_ActivateEndpoint+0x310>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	18d3      	adds	r3, r2, r3
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	b29c      	uxth	r4, r3
 80059ca:	0022      	movs	r2, r4
 80059cc:	2380      	movs	r3, #128	; 0x80
 80059ce:	01db      	lsls	r3, r3, #7
 80059d0:	4013      	ands	r3, r2
 80059d2:	d012      	beq.n	80059fa <USB_ActivateEndpoint+0x2b6>
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	18d3      	adds	r3, r2, r3
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	4a16      	ldr	r2, [pc, #88]	; (8005a3c <USB_ActivateEndpoint+0x2f8>)
 80059e4:	4013      	ands	r3, r2
 80059e6:	b29c      	uxth	r4, r3
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	18d3      	adds	r3, r2, r3
 80059f2:	4a19      	ldr	r2, [pc, #100]	; (8005a58 <USB_ActivateEndpoint+0x314>)
 80059f4:	4322      	orrs	r2, r4
 80059f6:	b292      	uxth	r2, r2
 80059f8:	801a      	strh	r2, [r3, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	18d3      	adds	r3, r2, r3
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	4a14      	ldr	r2, [pc, #80]	; (8005a5c <USB_ActivateEndpoint+0x318>)
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	b29c      	uxth	r4, r3
 8005a0e:	2380      	movs	r3, #128	; 0x80
 8005a10:	015b      	lsls	r3, r3, #5
 8005a12:	4063      	eors	r3, r4
 8005a14:	b29c      	uxth	r4, r3
 8005a16:	2380      	movs	r3, #128	; 0x80
 8005a18:	019b      	lsls	r3, r3, #6
 8005a1a:	4063      	eors	r3, r4
 8005a1c:	b29c      	uxth	r4, r3
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	18d3      	adds	r3, r2, r3
 8005a28:	4a03      	ldr	r2, [pc, #12]	; (8005a38 <USB_ActivateEndpoint+0x2f4>)
 8005a2a:	4322      	orrs	r2, r4
 8005a2c:	b292      	uxth	r2, r2
 8005a2e:	801a      	strh	r2, [r3, #0]
 8005a30:	e169      	b.n	8005d06 <USB_ActivateEndpoint+0x5c2>
 8005a32:	46c0      	nop			; (mov r8, r8)
 8005a34:	ffff898f 	.word	0xffff898f
 8005a38:	ffff8080 	.word	0xffff8080
 8005a3c:	ffff8f8f 	.word	0xffff8f8f
 8005a40:	ffff80c0 	.word	0xffff80c0
 8005a44:	ffff8fbf 	.word	0xffff8fbf
 8005a48:	00000404 	.word	0x00000404
 8005a4c:	00000406 	.word	0x00000406
 8005a50:	ffff83ff 	.word	0xffff83ff
 8005a54:	ffff8000 	.word	0xffff8000
 8005a58:	ffffc080 	.word	0xffffc080
 8005a5c:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	18d3      	adds	r3, r2, r3
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	4aa9      	ldr	r2, [pc, #676]	; (8005d14 <USB_ActivateEndpoint+0x5d0>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	b29c      	uxth	r4, r3
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	18d3      	adds	r3, r2, r3
 8005a7e:	4aa6      	ldr	r2, [pc, #664]	; (8005d18 <USB_ActivateEndpoint+0x5d4>)
 8005a80:	4322      	orrs	r2, r4
 8005a82:	b292      	uxth	r2, r2
 8005a84:	801a      	strh	r2, [r3, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005a86:	687c      	ldr	r4, [r7, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2250      	movs	r2, #80	; 0x50
 8005a8c:	5a9b      	ldrh	r3, [r3, r2]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	18e4      	adds	r4, r4, r3
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	18e3      	adds	r3, r4, r3
 8005a9a:	2280      	movs	r2, #128	; 0x80
 8005a9c:	00d2      	lsls	r2, r2, #3
 8005a9e:	4694      	mov	ip, r2
 8005aa0:	4463      	add	r3, ip
 8005aa2:	001c      	movs	r4, r3
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	891b      	ldrh	r3, [r3, #8]
 8005aa8:	085b      	lsrs	r3, r3, #1
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	18db      	adds	r3, r3, r3
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	8023      	strh	r3, [r4, #0]
 8005ab2:	687c      	ldr	r4, [r7, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2250      	movs	r2, #80	; 0x50
 8005ab8:	5a9b      	ldrh	r3, [r3, r2]
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	18e4      	adds	r4, r4, r3
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	18e3      	adds	r3, r4, r3
 8005ac6:	4a95      	ldr	r2, [pc, #596]	; (8005d1c <USB_ActivateEndpoint+0x5d8>)
 8005ac8:	4694      	mov	ip, r2
 8005aca:	4463      	add	r3, ip
 8005acc:	001c      	movs	r4, r3
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	895b      	ldrh	r3, [r3, #10]
 8005ad2:	085b      	lsrs	r3, r3, #1
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	18db      	adds	r3, r3, r3
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	785b      	ldrb	r3, [r3, #1]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d000      	beq.n	8005ae6 <USB_ActivateEndpoint+0x3a2>
 8005ae4:	e07e      	b.n	8005be4 <USB_ActivateEndpoint+0x4a0>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	18d3      	adds	r3, r2, r3
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	b29c      	uxth	r4, r3
 8005af4:	0022      	movs	r2, r4
 8005af6:	2380      	movs	r3, #128	; 0x80
 8005af8:	01db      	lsls	r3, r3, #7
 8005afa:	4013      	ands	r3, r2
 8005afc:	d012      	beq.n	8005b24 <USB_ActivateEndpoint+0x3e0>
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	18d3      	adds	r3, r2, r3
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	4a81      	ldr	r2, [pc, #516]	; (8005d14 <USB_ActivateEndpoint+0x5d0>)
 8005b0e:	4013      	ands	r3, r2
 8005b10:	b29c      	uxth	r4, r3
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	18d3      	adds	r3, r2, r3
 8005b1c:	4a80      	ldr	r2, [pc, #512]	; (8005d20 <USB_ActivateEndpoint+0x5dc>)
 8005b1e:	4322      	orrs	r2, r4
 8005b20:	b292      	uxth	r2, r2
 8005b22:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	18d3      	adds	r3, r2, r3
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	b29c      	uxth	r4, r3
 8005b32:	0022      	movs	r2, r4
 8005b34:	2340      	movs	r3, #64	; 0x40
 8005b36:	4013      	ands	r3, r2
 8005b38:	d012      	beq.n	8005b60 <USB_ActivateEndpoint+0x41c>
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	18d3      	adds	r3, r2, r3
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	4a72      	ldr	r2, [pc, #456]	; (8005d14 <USB_ActivateEndpoint+0x5d0>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	b29c      	uxth	r4, r3
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	18d3      	adds	r3, r2, r3
 8005b58:	4a72      	ldr	r2, [pc, #456]	; (8005d24 <USB_ActivateEndpoint+0x5e0>)
 8005b5a:	4322      	orrs	r2, r4
 8005b5c:	b292      	uxth	r2, r2
 8005b5e:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	18d3      	adds	r3, r2, r3
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	4a69      	ldr	r2, [pc, #420]	; (8005d14 <USB_ActivateEndpoint+0x5d0>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	b29c      	uxth	r4, r3
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	18d3      	adds	r3, r2, r3
 8005b7e:	4a69      	ldr	r2, [pc, #420]	; (8005d24 <USB_ActivateEndpoint+0x5e0>)
 8005b80:	4322      	orrs	r2, r4
 8005b82:	b292      	uxth	r2, r2
 8005b84:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	18d3      	adds	r3, r2, r3
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	4a64      	ldr	r2, [pc, #400]	; (8005d28 <USB_ActivateEndpoint+0x5e4>)
 8005b96:	4013      	ands	r3, r2
 8005b98:	b29c      	uxth	r4, r3
 8005b9a:	2380      	movs	r3, #128	; 0x80
 8005b9c:	015b      	lsls	r3, r3, #5
 8005b9e:	4063      	eors	r3, r4
 8005ba0:	b29c      	uxth	r4, r3
 8005ba2:	2380      	movs	r3, #128	; 0x80
 8005ba4:	019b      	lsls	r3, r3, #6
 8005ba6:	4063      	eors	r3, r4
 8005ba8:	b29c      	uxth	r4, r3
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	18d3      	adds	r3, r2, r3
 8005bb4:	4a5d      	ldr	r2, [pc, #372]	; (8005d2c <USB_ActivateEndpoint+0x5e8>)
 8005bb6:	4322      	orrs	r2, r4
 8005bb8:	b292      	uxth	r2, r2
 8005bba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	18d3      	adds	r3, r2, r3
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	4a59      	ldr	r2, [pc, #356]	; (8005d30 <USB_ActivateEndpoint+0x5ec>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	b29c      	uxth	r4, r3
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	18d3      	adds	r3, r2, r3
 8005bda:	4a54      	ldr	r2, [pc, #336]	; (8005d2c <USB_ActivateEndpoint+0x5e8>)
 8005bdc:	4322      	orrs	r2, r4
 8005bde:	b292      	uxth	r2, r2
 8005be0:	801a      	strh	r2, [r3, #0]
 8005be2:	e090      	b.n	8005d06 <USB_ActivateEndpoint+0x5c2>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	18d3      	adds	r3, r2, r3
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29c      	uxth	r4, r3
 8005bf2:	0022      	movs	r2, r4
 8005bf4:	2380      	movs	r3, #128	; 0x80
 8005bf6:	01db      	lsls	r3, r3, #7
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d012      	beq.n	8005c22 <USB_ActivateEndpoint+0x4de>
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	18d3      	adds	r3, r2, r3
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	4a42      	ldr	r2, [pc, #264]	; (8005d14 <USB_ActivateEndpoint+0x5d0>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	b29c      	uxth	r4, r3
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	18d3      	adds	r3, r2, r3
 8005c1a:	4a41      	ldr	r2, [pc, #260]	; (8005d20 <USB_ActivateEndpoint+0x5dc>)
 8005c1c:	4322      	orrs	r2, r4
 8005c1e:	b292      	uxth	r2, r2
 8005c20:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	18d3      	adds	r3, r2, r3
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	b29c      	uxth	r4, r3
 8005c30:	0022      	movs	r2, r4
 8005c32:	2340      	movs	r3, #64	; 0x40
 8005c34:	4013      	ands	r3, r2
 8005c36:	d012      	beq.n	8005c5e <USB_ActivateEndpoint+0x51a>
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	18d3      	adds	r3, r2, r3
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	4a33      	ldr	r2, [pc, #204]	; (8005d14 <USB_ActivateEndpoint+0x5d0>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	b29c      	uxth	r4, r3
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	18d3      	adds	r3, r2, r3
 8005c56:	4a33      	ldr	r2, [pc, #204]	; (8005d24 <USB_ActivateEndpoint+0x5e0>)
 8005c58:	4322      	orrs	r2, r4
 8005c5a:	b292      	uxth	r2, r2
 8005c5c:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	18d3      	adds	r3, r2, r3
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	4a29      	ldr	r2, [pc, #164]	; (8005d14 <USB_ActivateEndpoint+0x5d0>)
 8005c6e:	4013      	ands	r3, r2
 8005c70:	b29c      	uxth	r4, r3
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	18d3      	adds	r3, r2, r3
 8005c7c:	4a28      	ldr	r2, [pc, #160]	; (8005d20 <USB_ActivateEndpoint+0x5dc>)
 8005c7e:	4322      	orrs	r2, r4
 8005c80:	b292      	uxth	r2, r2
 8005c82:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	78db      	ldrb	r3, [r3, #3]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d016      	beq.n	8005cba <USB_ActivateEndpoint+0x576>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	18d3      	adds	r3, r2, r3
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	4a25      	ldr	r2, [pc, #148]	; (8005d30 <USB_ActivateEndpoint+0x5ec>)
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	b29c      	uxth	r4, r3
 8005ca0:	2320      	movs	r3, #32
 8005ca2:	4063      	eors	r3, r4
 8005ca4:	b29c      	uxth	r4, r3
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	18d3      	adds	r3, r2, r3
 8005cb0:	4a1e      	ldr	r2, [pc, #120]	; (8005d2c <USB_ActivateEndpoint+0x5e8>)
 8005cb2:	4322      	orrs	r2, r4
 8005cb4:	b292      	uxth	r2, r2
 8005cb6:	801a      	strh	r2, [r3, #0]
 8005cb8:	e012      	b.n	8005ce0 <USB_ActivateEndpoint+0x59c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	18d3      	adds	r3, r2, r3
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	4a19      	ldr	r2, [pc, #100]	; (8005d30 <USB_ActivateEndpoint+0x5ec>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	b29c      	uxth	r4, r3
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	18d3      	adds	r3, r2, r3
 8005cd8:	4a14      	ldr	r2, [pc, #80]	; (8005d2c <USB_ActivateEndpoint+0x5e8>)
 8005cda:	4322      	orrs	r2, r4
 8005cdc:	b292      	uxth	r2, r2
 8005cde:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	18d3      	adds	r3, r2, r3
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	4a0e      	ldr	r2, [pc, #56]	; (8005d28 <USB_ActivateEndpoint+0x5e4>)
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	b29c      	uxth	r4, r3
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	18d3      	adds	r3, r2, r3
 8005cfe:	4a0b      	ldr	r2, [pc, #44]	; (8005d2c <USB_ActivateEndpoint+0x5e8>)
 8005d00:	4322      	orrs	r2, r4
 8005d02:	b292      	uxth	r2, r2
 8005d04:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8005d06:	2317      	movs	r3, #23
 8005d08:	18fb      	adds	r3, r7, r3
 8005d0a:	781b      	ldrb	r3, [r3, #0]
}
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	b007      	add	sp, #28
 8005d12:	bd90      	pop	{r4, r7, pc}
 8005d14:	ffff8f8f 	.word	0xffff8f8f
 8005d18:	ffff8180 	.word	0xffff8180
 8005d1c:	00000404 	.word	0x00000404
 8005d20:	ffffc080 	.word	0xffffc080
 8005d24:	ffff80c0 	.word	0xffff80c0
 8005d28:	ffffbf8f 	.word	0xffffbf8f
 8005d2c:	ffff8080 	.word	0xffff8080
 8005d30:	ffff8fbf 	.word	0xffff8fbf

08005d34 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d34:	b590      	push	{r4, r7, lr}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	7b1b      	ldrb	r3, [r3, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d168      	bne.n	8005e18 <USB_DeactivateEndpoint+0xe4>
  {
    if (ep->is_in != 0U)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	785b      	ldrb	r3, [r3, #1]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d031      	beq.n	8005db2 <USB_DeactivateEndpoint+0x7e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	18d3      	adds	r3, r2, r3
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	b29c      	uxth	r4, r3
 8005d5c:	0022      	movs	r2, r4
 8005d5e:	2340      	movs	r3, #64	; 0x40
 8005d60:	4013      	ands	r3, r2
 8005d62:	d012      	beq.n	8005d8a <USB_DeactivateEndpoint+0x56>
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	18d3      	adds	r3, r2, r3
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	4aa5      	ldr	r2, [pc, #660]	; (8006008 <USB_DeactivateEndpoint+0x2d4>)
 8005d74:	4013      	ands	r3, r2
 8005d76:	b29c      	uxth	r4, r3
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	18d3      	adds	r3, r2, r3
 8005d82:	4aa2      	ldr	r2, [pc, #648]	; (800600c <USB_DeactivateEndpoint+0x2d8>)
 8005d84:	4322      	orrs	r2, r4
 8005d86:	b292      	uxth	r2, r2
 8005d88:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	18d3      	adds	r3, r2, r3
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	4a9d      	ldr	r2, [pc, #628]	; (8006010 <USB_DeactivateEndpoint+0x2dc>)
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	b29c      	uxth	r4, r3
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	18d3      	adds	r3, r2, r3
 8005da8:	4a9a      	ldr	r2, [pc, #616]	; (8006014 <USB_DeactivateEndpoint+0x2e0>)
 8005daa:	4322      	orrs	r2, r4
 8005dac:	b292      	uxth	r2, r2
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	e124      	b.n	8005ffc <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	18d3      	adds	r3, r2, r3
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	b29c      	uxth	r4, r3
 8005dc0:	0022      	movs	r2, r4
 8005dc2:	2380      	movs	r3, #128	; 0x80
 8005dc4:	01db      	lsls	r3, r3, #7
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	d012      	beq.n	8005df0 <USB_DeactivateEndpoint+0xbc>
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	18d3      	adds	r3, r2, r3
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	4a8b      	ldr	r2, [pc, #556]	; (8006008 <USB_DeactivateEndpoint+0x2d4>)
 8005dda:	4013      	ands	r3, r2
 8005ddc:	b29c      	uxth	r4, r3
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	18d3      	adds	r3, r2, r3
 8005de8:	4a8b      	ldr	r2, [pc, #556]	; (8006018 <USB_DeactivateEndpoint+0x2e4>)
 8005dea:	4322      	orrs	r2, r4
 8005dec:	b292      	uxth	r2, r2
 8005dee:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	18d3      	adds	r3, r2, r3
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	4a87      	ldr	r2, [pc, #540]	; (800601c <USB_DeactivateEndpoint+0x2e8>)
 8005e00:	4013      	ands	r3, r2
 8005e02:	b29c      	uxth	r4, r3
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	18d3      	adds	r3, r2, r3
 8005e0e:	4a81      	ldr	r2, [pc, #516]	; (8006014 <USB_DeactivateEndpoint+0x2e0>)
 8005e10:	4322      	orrs	r2, r4
 8005e12:	b292      	uxth	r2, r2
 8005e14:	801a      	strh	r2, [r3, #0]
 8005e16:	e0f1      	b.n	8005ffc <USB_DeactivateEndpoint+0x2c8>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d000      	beq.n	8005e22 <USB_DeactivateEndpoint+0xee>
 8005e20:	e076      	b.n	8005f10 <USB_DeactivateEndpoint+0x1dc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	18d3      	adds	r3, r2, r3
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29c      	uxth	r4, r3
 8005e30:	0022      	movs	r2, r4
 8005e32:	2380      	movs	r3, #128	; 0x80
 8005e34:	01db      	lsls	r3, r3, #7
 8005e36:	4013      	ands	r3, r2
 8005e38:	d012      	beq.n	8005e60 <USB_DeactivateEndpoint+0x12c>
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	18d3      	adds	r3, r2, r3
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	4a6f      	ldr	r2, [pc, #444]	; (8006008 <USB_DeactivateEndpoint+0x2d4>)
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	b29c      	uxth	r4, r3
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	18d3      	adds	r3, r2, r3
 8005e58:	4a6f      	ldr	r2, [pc, #444]	; (8006018 <USB_DeactivateEndpoint+0x2e4>)
 8005e5a:	4322      	orrs	r2, r4
 8005e5c:	b292      	uxth	r2, r2
 8005e5e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	18d3      	adds	r3, r2, r3
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b29c      	uxth	r4, r3
 8005e6e:	0022      	movs	r2, r4
 8005e70:	2340      	movs	r3, #64	; 0x40
 8005e72:	4013      	ands	r3, r2
 8005e74:	d012      	beq.n	8005e9c <USB_DeactivateEndpoint+0x168>
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	18d3      	adds	r3, r2, r3
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	4a60      	ldr	r2, [pc, #384]	; (8006008 <USB_DeactivateEndpoint+0x2d4>)
 8005e86:	4013      	ands	r3, r2
 8005e88:	b29c      	uxth	r4, r3
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	18d3      	adds	r3, r2, r3
 8005e94:	4a5d      	ldr	r2, [pc, #372]	; (800600c <USB_DeactivateEndpoint+0x2d8>)
 8005e96:	4322      	orrs	r2, r4
 8005e98:	b292      	uxth	r2, r2
 8005e9a:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	18d3      	adds	r3, r2, r3
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	4a57      	ldr	r2, [pc, #348]	; (8006008 <USB_DeactivateEndpoint+0x2d4>)
 8005eac:	4013      	ands	r3, r2
 8005eae:	b29c      	uxth	r4, r3
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	18d3      	adds	r3, r2, r3
 8005eba:	4a54      	ldr	r2, [pc, #336]	; (800600c <USB_DeactivateEndpoint+0x2d8>)
 8005ebc:	4322      	orrs	r2, r4
 8005ebe:	b292      	uxth	r2, r2
 8005ec0:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	18d3      	adds	r3, r2, r3
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	4a52      	ldr	r2, [pc, #328]	; (800601c <USB_DeactivateEndpoint+0x2e8>)
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	b29c      	uxth	r4, r3
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	18d3      	adds	r3, r2, r3
 8005ee0:	4a4c      	ldr	r2, [pc, #304]	; (8006014 <USB_DeactivateEndpoint+0x2e0>)
 8005ee2:	4322      	orrs	r2, r4
 8005ee4:	b292      	uxth	r2, r2
 8005ee6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	18d3      	adds	r3, r2, r3
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	4a46      	ldr	r2, [pc, #280]	; (8006010 <USB_DeactivateEndpoint+0x2dc>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	b29c      	uxth	r4, r3
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	18d3      	adds	r3, r2, r3
 8005f06:	4a43      	ldr	r2, [pc, #268]	; (8006014 <USB_DeactivateEndpoint+0x2e0>)
 8005f08:	4322      	orrs	r2, r4
 8005f0a:	b292      	uxth	r2, r2
 8005f0c:	801a      	strh	r2, [r3, #0]
 8005f0e:	e075      	b.n	8005ffc <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	18d3      	adds	r3, r2, r3
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	b29c      	uxth	r4, r3
 8005f1e:	0022      	movs	r2, r4
 8005f20:	2380      	movs	r3, #128	; 0x80
 8005f22:	01db      	lsls	r3, r3, #7
 8005f24:	4013      	ands	r3, r2
 8005f26:	d012      	beq.n	8005f4e <USB_DeactivateEndpoint+0x21a>
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	18d3      	adds	r3, r2, r3
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	4a34      	ldr	r2, [pc, #208]	; (8006008 <USB_DeactivateEndpoint+0x2d4>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	b29c      	uxth	r4, r3
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	18d3      	adds	r3, r2, r3
 8005f46:	4a34      	ldr	r2, [pc, #208]	; (8006018 <USB_DeactivateEndpoint+0x2e4>)
 8005f48:	4322      	orrs	r2, r4
 8005f4a:	b292      	uxth	r2, r2
 8005f4c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	18d3      	adds	r3, r2, r3
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	b29c      	uxth	r4, r3
 8005f5c:	0022      	movs	r2, r4
 8005f5e:	2340      	movs	r3, #64	; 0x40
 8005f60:	4013      	ands	r3, r2
 8005f62:	d012      	beq.n	8005f8a <USB_DeactivateEndpoint+0x256>
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	18d3      	adds	r3, r2, r3
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	4a25      	ldr	r2, [pc, #148]	; (8006008 <USB_DeactivateEndpoint+0x2d4>)
 8005f74:	4013      	ands	r3, r2
 8005f76:	b29c      	uxth	r4, r3
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	18d3      	adds	r3, r2, r3
 8005f82:	4a22      	ldr	r2, [pc, #136]	; (800600c <USB_DeactivateEndpoint+0x2d8>)
 8005f84:	4322      	orrs	r2, r4
 8005f86:	b292      	uxth	r2, r2
 8005f88:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	18d3      	adds	r3, r2, r3
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	4a1b      	ldr	r2, [pc, #108]	; (8006008 <USB_DeactivateEndpoint+0x2d4>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	b29c      	uxth	r4, r3
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	18d3      	adds	r3, r2, r3
 8005fa8:	4a1b      	ldr	r2, [pc, #108]	; (8006018 <USB_DeactivateEndpoint+0x2e4>)
 8005faa:	4322      	orrs	r2, r4
 8005fac:	b292      	uxth	r2, r2
 8005fae:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	18d3      	adds	r3, r2, r3
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	4a14      	ldr	r2, [pc, #80]	; (8006010 <USB_DeactivateEndpoint+0x2dc>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	b29c      	uxth	r4, r3
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	18d3      	adds	r3, r2, r3
 8005fce:	4a11      	ldr	r2, [pc, #68]	; (8006014 <USB_DeactivateEndpoint+0x2e0>)
 8005fd0:	4322      	orrs	r2, r4
 8005fd2:	b292      	uxth	r2, r2
 8005fd4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	18d3      	adds	r3, r2, r3
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	4a0d      	ldr	r2, [pc, #52]	; (800601c <USB_DeactivateEndpoint+0x2e8>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	b29c      	uxth	r4, r3
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	18d3      	adds	r3, r2, r3
 8005ff4:	4a07      	ldr	r2, [pc, #28]	; (8006014 <USB_DeactivateEndpoint+0x2e0>)
 8005ff6:	4322      	orrs	r2, r4
 8005ff8:	b292      	uxth	r2, r2
 8005ffa:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	0018      	movs	r0, r3
 8006000:	46bd      	mov	sp, r7
 8006002:	b003      	add	sp, #12
 8006004:	bd90      	pop	{r4, r7, pc}
 8006006:	46c0      	nop			; (mov r8, r8)
 8006008:	ffff8f8f 	.word	0xffff8f8f
 800600c:	ffff80c0 	.word	0xffff80c0
 8006010:	ffff8fbf 	.word	0xffff8fbf
 8006014:	ffff8080 	.word	0xffff8080
 8006018:	ffffc080 	.word	0xffffc080
 800601c:	ffffbf8f 	.word	0xffffbf8f

08006020 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006020:	b590      	push	{r4, r7, lr}
 8006022:	b095      	sub	sp, #84	; 0x54
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	785b      	ldrb	r3, [r3, #1]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d000      	beq.n	8006034 <USB_EPStartXfer+0x14>
 8006032:	e163      	b.n	80062fc <USB_EPStartXfer+0x2dc>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	699a      	ldr	r2, [r3, #24]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	429a      	cmp	r2, r3
 800603e:	d909      	bls.n	8006054 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	699a      	ldr	r2, [r3, #24]
 800604a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800604c:	1ad2      	subs	r2, r2, r3
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	619a      	str	r2, [r3, #24]
 8006052:	e005      	b.n	8006060 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2200      	movs	r2, #0
 800605e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	7b1b      	ldrb	r3, [r3, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d11b      	bne.n	80060a0 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	6959      	ldr	r1, [r3, #20]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	88da      	ldrh	r2, [r3, #6]
 8006070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006072:	b29b      	uxth	r3, r3
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fbbb 	bl	80067f0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800607a:	687c      	ldr	r4, [r7, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2250      	movs	r2, #80	; 0x50
 8006080:	5a9b      	ldrh	r3, [r3, r2]
 8006082:	b29b      	uxth	r3, r3
 8006084:	18e4      	adds	r4, r4, r3
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	18e3      	adds	r3, r4, r3
 800608e:	4acc      	ldr	r2, [pc, #816]	; (80063c0 <USB_EPStartXfer+0x3a0>)
 8006090:	4694      	mov	ip, r2
 8006092:	4463      	add	r3, ip
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006098:	b29a      	uxth	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	801a      	strh	r2, [r3, #0]
 800609e:	e113      	b.n	80062c8 <USB_EPStartXfer+0x2a8>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	18d3      	adds	r3, r2, r3
 80060aa:	881b      	ldrh	r3, [r3, #0]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	001a      	movs	r2, r3
 80060b0:	2340      	movs	r3, #64	; 0x40
 80060b2:	4013      	ands	r3, r2
 80060b4:	d067      	beq.n	8006186 <USB_EPStartXfer+0x166>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060b6:	687c      	ldr	r4, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	785b      	ldrb	r3, [r3, #1]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d147      	bne.n	8006150 <USB_EPStartXfer+0x130>
 80060c0:	687c      	ldr	r4, [r7, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2250      	movs	r2, #80	; 0x50
 80060c6:	5a9b      	ldrh	r3, [r3, r2]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	18e4      	adds	r4, r4, r3
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	18e3      	adds	r3, r4, r3
 80060d4:	4abb      	ldr	r2, [pc, #748]	; (80063c4 <USB_EPStartXfer+0x3a4>)
 80060d6:	4694      	mov	ip, r2
 80060d8:	4463      	add	r3, ip
 80060da:	613b      	str	r3, [r7, #16]
 80060dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10e      	bne.n	8006100 <USB_EPStartXfer+0xe0>
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	4ab8      	ldr	r2, [pc, #736]	; (80063c8 <USB_EPStartXfer+0x3a8>)
 80060e8:	4013      	ands	r3, r2
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	801a      	strh	r2, [r3, #0]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	4ab5      	ldr	r2, [pc, #724]	; (80063cc <USB_EPStartXfer+0x3ac>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	801a      	strh	r2, [r3, #0]
 80060fe:	e03c      	b.n	800617a <USB_EPStartXfer+0x15a>
 8006100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006102:	2b3e      	cmp	r3, #62	; 0x3e
 8006104:	d810      	bhi.n	8006128 <USB_EPStartXfer+0x108>
 8006106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006108:	085b      	lsrs	r3, r3, #1
 800610a:	647b      	str	r3, [r7, #68]	; 0x44
 800610c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800610e:	2201      	movs	r2, #1
 8006110:	4013      	ands	r3, r2
 8006112:	d002      	beq.n	800611a <USB_EPStartXfer+0xfa>
 8006114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006116:	3301      	adds	r3, #1
 8006118:	647b      	str	r3, [r7, #68]	; 0x44
 800611a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800611c:	b29b      	uxth	r3, r3
 800611e:	029b      	lsls	r3, r3, #10
 8006120:	b29a      	uxth	r2, r3
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	801a      	strh	r2, [r3, #0]
 8006126:	e028      	b.n	800617a <USB_EPStartXfer+0x15a>
 8006128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	647b      	str	r3, [r7, #68]	; 0x44
 800612e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006130:	221f      	movs	r2, #31
 8006132:	4013      	ands	r3, r2
 8006134:	d102      	bne.n	800613c <USB_EPStartXfer+0x11c>
 8006136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006138:	3b01      	subs	r3, #1
 800613a:	647b      	str	r3, [r7, #68]	; 0x44
 800613c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800613e:	b29b      	uxth	r3, r3
 8006140:	029b      	lsls	r3, r3, #10
 8006142:	b29b      	uxth	r3, r3
 8006144:	4aa1      	ldr	r2, [pc, #644]	; (80063cc <USB_EPStartXfer+0x3ac>)
 8006146:	4313      	orrs	r3, r2
 8006148:	b29a      	uxth	r2, r3
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	801a      	strh	r2, [r3, #0]
 800614e:	e014      	b.n	800617a <USB_EPStartXfer+0x15a>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	785b      	ldrb	r3, [r3, #1]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d110      	bne.n	800617a <USB_EPStartXfer+0x15a>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2250      	movs	r2, #80	; 0x50
 800615c:	5a9b      	ldrh	r3, [r3, r2]
 800615e:	b29b      	uxth	r3, r3
 8006160:	18e4      	adds	r4, r4, r3
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	18e3      	adds	r3, r4, r3
 800616a:	4a96      	ldr	r2, [pc, #600]	; (80063c4 <USB_EPStartXfer+0x3a4>)
 800616c:	4694      	mov	ip, r2
 800616e:	4463      	add	r3, ip
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006174:	b29a      	uxth	r2, r3
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800617a:	234e      	movs	r3, #78	; 0x4e
 800617c:	18fb      	adds	r3, r7, r3
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	8952      	ldrh	r2, [r2, #10]
 8006182:	801a      	strh	r2, [r3, #0]
 8006184:	e066      	b.n	8006254 <USB_EPStartXfer+0x234>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	785b      	ldrb	r3, [r3, #1]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d147      	bne.n	800621e <USB_EPStartXfer+0x1fe>
 800618e:	687c      	ldr	r4, [r7, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2250      	movs	r2, #80	; 0x50
 8006194:	5a9b      	ldrh	r3, [r3, r2]
 8006196:	b29b      	uxth	r3, r3
 8006198:	18e4      	adds	r4, r4, r3
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	18e3      	adds	r3, r4, r3
 80061a2:	4a87      	ldr	r2, [pc, #540]	; (80063c0 <USB_EPStartXfer+0x3a0>)
 80061a4:	4694      	mov	ip, r2
 80061a6:	4463      	add	r3, ip
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10e      	bne.n	80061ce <USB_EPStartXfer+0x1ae>
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	4a84      	ldr	r2, [pc, #528]	; (80063c8 <USB_EPStartXfer+0x3a8>)
 80061b6:	4013      	ands	r3, r2
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	801a      	strh	r2, [r3, #0]
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	4a82      	ldr	r2, [pc, #520]	; (80063cc <USB_EPStartXfer+0x3ac>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	801a      	strh	r2, [r3, #0]
 80061cc:	e03d      	b.n	800624a <USB_EPStartXfer+0x22a>
 80061ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061d0:	2b3e      	cmp	r3, #62	; 0x3e
 80061d2:	d810      	bhi.n	80061f6 <USB_EPStartXfer+0x1d6>
 80061d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061d6:	085b      	lsrs	r3, r3, #1
 80061d8:	643b      	str	r3, [r7, #64]	; 0x40
 80061da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061dc:	2201      	movs	r2, #1
 80061de:	4013      	ands	r3, r2
 80061e0:	d002      	beq.n	80061e8 <USB_EPStartXfer+0x1c8>
 80061e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e4:	3301      	adds	r3, #1
 80061e6:	643b      	str	r3, [r7, #64]	; 0x40
 80061e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	029b      	lsls	r3, r3, #10
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	801a      	strh	r2, [r3, #0]
 80061f4:	e029      	b.n	800624a <USB_EPStartXfer+0x22a>
 80061f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061f8:	095b      	lsrs	r3, r3, #5
 80061fa:	643b      	str	r3, [r7, #64]	; 0x40
 80061fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061fe:	221f      	movs	r2, #31
 8006200:	4013      	ands	r3, r2
 8006202:	d102      	bne.n	800620a <USB_EPStartXfer+0x1ea>
 8006204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006206:	3b01      	subs	r3, #1
 8006208:	643b      	str	r3, [r7, #64]	; 0x40
 800620a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800620c:	b29b      	uxth	r3, r3
 800620e:	029b      	lsls	r3, r3, #10
 8006210:	b29b      	uxth	r3, r3
 8006212:	4a6e      	ldr	r2, [pc, #440]	; (80063cc <USB_EPStartXfer+0x3ac>)
 8006214:	4313      	orrs	r3, r2
 8006216:	b29a      	uxth	r2, r3
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	801a      	strh	r2, [r3, #0]
 800621c:	e015      	b.n	800624a <USB_EPStartXfer+0x22a>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	785b      	ldrb	r3, [r3, #1]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d111      	bne.n	800624a <USB_EPStartXfer+0x22a>
 8006226:	687c      	ldr	r4, [r7, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2250      	movs	r2, #80	; 0x50
 800622c:	5a9b      	ldrh	r3, [r3, r2]
 800622e:	b29b      	uxth	r3, r3
 8006230:	18e4      	adds	r4, r4, r3
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	18e3      	adds	r3, r4, r3
 800623a:	4a61      	ldr	r2, [pc, #388]	; (80063c0 <USB_EPStartXfer+0x3a0>)
 800623c:	4694      	mov	ip, r2
 800623e:	4463      	add	r3, ip
 8006240:	61fb      	str	r3, [r7, #28]
 8006242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006244:	b29a      	uxth	r2, r3
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800624a:	234e      	movs	r3, #78	; 0x4e
 800624c:	18fb      	adds	r3, r7, r3
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	8912      	ldrh	r2, [r2, #8]
 8006252:	801a      	strh	r2, [r3, #0]
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	6959      	ldr	r1, [r3, #20]
 8006258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800625a:	b29c      	uxth	r4, r3
 800625c:	234e      	movs	r3, #78	; 0x4e
 800625e:	18fb      	adds	r3, r7, r3
 8006260:	881a      	ldrh	r2, [r3, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	0023      	movs	r3, r4
 8006266:	f000 fac3 	bl	80067f0 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	785b      	ldrb	r3, [r3, #1]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d113      	bne.n	800629a <USB_EPStartXfer+0x27a>
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	18d3      	adds	r3, r2, r3
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	b29b      	uxth	r3, r3
 8006280:	4a53      	ldr	r2, [pc, #332]	; (80063d0 <USB_EPStartXfer+0x3b0>)
 8006282:	4013      	ands	r3, r2
 8006284:	b29c      	uxth	r4, r3
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	18d3      	adds	r3, r2, r3
 8006290:	4a50      	ldr	r2, [pc, #320]	; (80063d4 <USB_EPStartXfer+0x3b4>)
 8006292:	4322      	orrs	r2, r4
 8006294:	b292      	uxth	r2, r2
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	e016      	b.n	80062c8 <USB_EPStartXfer+0x2a8>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	785b      	ldrb	r3, [r3, #1]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d112      	bne.n	80062c8 <USB_EPStartXfer+0x2a8>
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	18d3      	adds	r3, r2, r3
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	4a47      	ldr	r2, [pc, #284]	; (80063d0 <USB_EPStartXfer+0x3b0>)
 80062b2:	4013      	ands	r3, r2
 80062b4:	b29c      	uxth	r4, r3
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	18d3      	adds	r3, r2, r3
 80062c0:	4a45      	ldr	r2, [pc, #276]	; (80063d8 <USB_EPStartXfer+0x3b8>)
 80062c2:	4322      	orrs	r2, r4
 80062c4:	b292      	uxth	r2, r2
 80062c6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	18d3      	adds	r3, r2, r3
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	4a41      	ldr	r2, [pc, #260]	; (80063dc <USB_EPStartXfer+0x3bc>)
 80062d8:	4013      	ands	r3, r2
 80062da:	b29c      	uxth	r4, r3
 80062dc:	2310      	movs	r3, #16
 80062de:	4063      	eors	r3, r4
 80062e0:	b29c      	uxth	r4, r3
 80062e2:	2320      	movs	r3, #32
 80062e4:	4063      	eors	r3, r4
 80062e6:	b29c      	uxth	r4, r3
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	18d3      	adds	r3, r2, r3
 80062f2:	4a3b      	ldr	r2, [pc, #236]	; (80063e0 <USB_EPStartXfer+0x3c0>)
 80062f4:	4322      	orrs	r2, r4
 80062f6:	b292      	uxth	r2, r2
 80062f8:	801a      	strh	r2, [r3, #0]
 80062fa:	e152      	b.n	80065a2 <USB_EPStartXfer+0x582>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	699a      	ldr	r2, [r3, #24]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	429a      	cmp	r2, r3
 8006306:	d909      	bls.n	800631c <USB_EPStartXfer+0x2fc>
    {
      len = ep->maxpacket;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	699a      	ldr	r2, [r3, #24]
 8006312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006314:	1ad2      	subs	r2, r2, r3
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	619a      	str	r2, [r3, #24]
 800631a:	e005      	b.n	8006328 <USB_EPStartXfer+0x308>
    }
    else
    {
      len = ep->xfer_len;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2200      	movs	r2, #0
 8006326:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	7b1b      	ldrb	r3, [r3, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d159      	bne.n	80063e4 <USB_EPStartXfer+0x3c4>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006330:	687c      	ldr	r4, [r7, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2250      	movs	r2, #80	; 0x50
 8006336:	5a9b      	ldrh	r3, [r3, r2]
 8006338:	b29b      	uxth	r3, r3
 800633a:	18e4      	adds	r4, r4, r3
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	18e3      	adds	r3, r4, r3
 8006344:	4a1f      	ldr	r2, [pc, #124]	; (80063c4 <USB_EPStartXfer+0x3a4>)
 8006346:	4694      	mov	ip, r2
 8006348:	4463      	add	r3, ip
 800634a:	623b      	str	r3, [r7, #32]
 800634c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10e      	bne.n	8006370 <USB_EPStartXfer+0x350>
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	4a1c      	ldr	r2, [pc, #112]	; (80063c8 <USB_EPStartXfer+0x3a8>)
 8006358:	4013      	ands	r3, r2
 800635a:	b29a      	uxth	r2, r3
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	801a      	strh	r2, [r3, #0]
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	4a19      	ldr	r2, [pc, #100]	; (80063cc <USB_EPStartXfer+0x3ac>)
 8006366:	4313      	orrs	r3, r2
 8006368:	b29a      	uxth	r2, r3
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	801a      	strh	r2, [r3, #0]
 800636e:	e0fd      	b.n	800656c <USB_EPStartXfer+0x54c>
 8006370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006372:	2b3e      	cmp	r3, #62	; 0x3e
 8006374:	d810      	bhi.n	8006398 <USB_EPStartXfer+0x378>
 8006376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006378:	085b      	lsrs	r3, r3, #1
 800637a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800637c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800637e:	2201      	movs	r2, #1
 8006380:	4013      	ands	r3, r2
 8006382:	d002      	beq.n	800638a <USB_EPStartXfer+0x36a>
 8006384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006386:	3301      	adds	r3, #1
 8006388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800638a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638c:	b29b      	uxth	r3, r3
 800638e:	029b      	lsls	r3, r3, #10
 8006390:	b29a      	uxth	r2, r3
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	801a      	strh	r2, [r3, #0]
 8006396:	e0e9      	b.n	800656c <USB_EPStartXfer+0x54c>
 8006398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800639e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063a0:	221f      	movs	r2, #31
 80063a2:	4013      	ands	r3, r2
 80063a4:	d102      	bne.n	80063ac <USB_EPStartXfer+0x38c>
 80063a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a8:	3b01      	subs	r3, #1
 80063aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	029b      	lsls	r3, r3, #10
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	4a05      	ldr	r2, [pc, #20]	; (80063cc <USB_EPStartXfer+0x3ac>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	801a      	strh	r2, [r3, #0]
 80063be:	e0d5      	b.n	800656c <USB_EPStartXfer+0x54c>
 80063c0:	00000402 	.word	0x00000402
 80063c4:	00000406 	.word	0x00000406
 80063c8:	ffff83ff 	.word	0xffff83ff
 80063cc:	ffff8000 	.word	0xffff8000
 80063d0:	ffff8f8f 	.word	0xffff8f8f
 80063d4:	ffff80c0 	.word	0xffff80c0
 80063d8:	ffffc080 	.word	0xffffc080
 80063dc:	ffff8fbf 	.word	0xffff8fbf
 80063e0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	785b      	ldrb	r3, [r3, #1]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d147      	bne.n	800647c <USB_EPStartXfer+0x45c>
 80063ec:	687c      	ldr	r4, [r7, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2250      	movs	r2, #80	; 0x50
 80063f2:	5a9b      	ldrh	r3, [r3, r2]
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	18e4      	adds	r4, r4, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	18e3      	adds	r3, r4, r3
 8006400:	4a6a      	ldr	r2, [pc, #424]	; (80065ac <USB_EPStartXfer+0x58c>)
 8006402:	4694      	mov	ip, r2
 8006404:	4463      	add	r3, ip
 8006406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10e      	bne.n	800642c <USB_EPStartXfer+0x40c>
 800640e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	4a67      	ldr	r2, [pc, #412]	; (80065b0 <USB_EPStartXfer+0x590>)
 8006414:	4013      	ands	r3, r2
 8006416:	b29a      	uxth	r2, r3
 8006418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641a:	801a      	strh	r2, [r3, #0]
 800641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	4a64      	ldr	r2, [pc, #400]	; (80065b4 <USB_EPStartXfer+0x594>)
 8006422:	4313      	orrs	r3, r2
 8006424:	b29a      	uxth	r2, r3
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	801a      	strh	r2, [r3, #0]
 800642a:	e03d      	b.n	80064a8 <USB_EPStartXfer+0x488>
 800642c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800642e:	2b3e      	cmp	r3, #62	; 0x3e
 8006430:	d810      	bhi.n	8006454 <USB_EPStartXfer+0x434>
 8006432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006434:	085b      	lsrs	r3, r3, #1
 8006436:	63bb      	str	r3, [r7, #56]	; 0x38
 8006438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800643a:	2201      	movs	r2, #1
 800643c:	4013      	ands	r3, r2
 800643e:	d002      	beq.n	8006446 <USB_EPStartXfer+0x426>
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	3301      	adds	r3, #1
 8006444:	63bb      	str	r3, [r7, #56]	; 0x38
 8006446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006448:	b29b      	uxth	r3, r3
 800644a:	029b      	lsls	r3, r3, #10
 800644c:	b29a      	uxth	r2, r3
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	801a      	strh	r2, [r3, #0]
 8006452:	e029      	b.n	80064a8 <USB_EPStartXfer+0x488>
 8006454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006456:	095b      	lsrs	r3, r3, #5
 8006458:	63bb      	str	r3, [r7, #56]	; 0x38
 800645a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800645c:	221f      	movs	r2, #31
 800645e:	4013      	ands	r3, r2
 8006460:	d102      	bne.n	8006468 <USB_EPStartXfer+0x448>
 8006462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006464:	3b01      	subs	r3, #1
 8006466:	63bb      	str	r3, [r7, #56]	; 0x38
 8006468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646a:	b29b      	uxth	r3, r3
 800646c:	029b      	lsls	r3, r3, #10
 800646e:	b29b      	uxth	r3, r3
 8006470:	4a50      	ldr	r2, [pc, #320]	; (80065b4 <USB_EPStartXfer+0x594>)
 8006472:	4313      	orrs	r3, r2
 8006474:	b29a      	uxth	r2, r3
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006478:	801a      	strh	r2, [r3, #0]
 800647a:	e015      	b.n	80064a8 <USB_EPStartXfer+0x488>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	785b      	ldrb	r3, [r3, #1]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d111      	bne.n	80064a8 <USB_EPStartXfer+0x488>
 8006484:	687c      	ldr	r4, [r7, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2250      	movs	r2, #80	; 0x50
 800648a:	5a9b      	ldrh	r3, [r3, r2]
 800648c:	b29b      	uxth	r3, r3
 800648e:	18e4      	adds	r4, r4, r3
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	18e3      	adds	r3, r4, r3
 8006498:	4a44      	ldr	r2, [pc, #272]	; (80065ac <USB_EPStartXfer+0x58c>)
 800649a:	4694      	mov	ip, r2
 800649c:	4463      	add	r3, ip
 800649e:	633b      	str	r3, [r7, #48]	; 0x30
 80064a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	801a      	strh	r2, [r3, #0]
 80064a8:	687c      	ldr	r4, [r7, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	785b      	ldrb	r3, [r3, #1]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d147      	bne.n	8006542 <USB_EPStartXfer+0x522>
 80064b2:	687c      	ldr	r4, [r7, #4]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2250      	movs	r2, #80	; 0x50
 80064b8:	5a9b      	ldrh	r3, [r3, r2]
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	18e4      	adds	r4, r4, r3
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	18e3      	adds	r3, r4, r3
 80064c6:	4a3c      	ldr	r2, [pc, #240]	; (80065b8 <USB_EPStartXfer+0x598>)
 80064c8:	4694      	mov	ip, r2
 80064ca:	4463      	add	r3, ip
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
 80064ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10e      	bne.n	80064f2 <USB_EPStartXfer+0x4d2>
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	4a35      	ldr	r2, [pc, #212]	; (80065b0 <USB_EPStartXfer+0x590>)
 80064da:	4013      	ands	r3, r2
 80064dc:	b29a      	uxth	r2, r3
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	801a      	strh	r2, [r3, #0]
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	4a33      	ldr	r2, [pc, #204]	; (80065b4 <USB_EPStartXfer+0x594>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	801a      	strh	r2, [r3, #0]
 80064f0:	e03c      	b.n	800656c <USB_EPStartXfer+0x54c>
 80064f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064f4:	2b3e      	cmp	r3, #62	; 0x3e
 80064f6:	d810      	bhi.n	800651a <USB_EPStartXfer+0x4fa>
 80064f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064fa:	085b      	lsrs	r3, r3, #1
 80064fc:	637b      	str	r3, [r7, #52]	; 0x34
 80064fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006500:	2201      	movs	r2, #1
 8006502:	4013      	ands	r3, r2
 8006504:	d002      	beq.n	800650c <USB_EPStartXfer+0x4ec>
 8006506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006508:	3301      	adds	r3, #1
 800650a:	637b      	str	r3, [r7, #52]	; 0x34
 800650c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650e:	b29b      	uxth	r3, r3
 8006510:	029b      	lsls	r3, r3, #10
 8006512:	b29a      	uxth	r2, r3
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	801a      	strh	r2, [r3, #0]
 8006518:	e028      	b.n	800656c <USB_EPStartXfer+0x54c>
 800651a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800651c:	095b      	lsrs	r3, r3, #5
 800651e:	637b      	str	r3, [r7, #52]	; 0x34
 8006520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006522:	221f      	movs	r2, #31
 8006524:	4013      	ands	r3, r2
 8006526:	d102      	bne.n	800652e <USB_EPStartXfer+0x50e>
 8006528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652a:	3b01      	subs	r3, #1
 800652c:	637b      	str	r3, [r7, #52]	; 0x34
 800652e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006530:	b29b      	uxth	r3, r3
 8006532:	029b      	lsls	r3, r3, #10
 8006534:	b29b      	uxth	r3, r3
 8006536:	4a1f      	ldr	r2, [pc, #124]	; (80065b4 <USB_EPStartXfer+0x594>)
 8006538:	4313      	orrs	r3, r2
 800653a:	b29a      	uxth	r2, r3
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	801a      	strh	r2, [r3, #0]
 8006540:	e014      	b.n	800656c <USB_EPStartXfer+0x54c>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	785b      	ldrb	r3, [r3, #1]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d110      	bne.n	800656c <USB_EPStartXfer+0x54c>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2250      	movs	r2, #80	; 0x50
 800654e:	5a9b      	ldrh	r3, [r3, r2]
 8006550:	b29b      	uxth	r3, r3
 8006552:	18e4      	adds	r4, r4, r3
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	18e3      	adds	r3, r4, r3
 800655c:	4a16      	ldr	r2, [pc, #88]	; (80065b8 <USB_EPStartXfer+0x598>)
 800655e:	4694      	mov	ip, r2
 8006560:	4463      	add	r3, ip
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28
 8006564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006566:	b29a      	uxth	r2, r3
 8006568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	18d3      	adds	r3, r2, r3
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	4a10      	ldr	r2, [pc, #64]	; (80065bc <USB_EPStartXfer+0x59c>)
 800657c:	4013      	ands	r3, r2
 800657e:	b29c      	uxth	r4, r3
 8006580:	2380      	movs	r3, #128	; 0x80
 8006582:	015b      	lsls	r3, r3, #5
 8006584:	4063      	eors	r3, r4
 8006586:	b29c      	uxth	r4, r3
 8006588:	2380      	movs	r3, #128	; 0x80
 800658a:	019b      	lsls	r3, r3, #6
 800658c:	4063      	eors	r3, r4
 800658e:	b29c      	uxth	r4, r3
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	18d3      	adds	r3, r2, r3
 800659a:	4a09      	ldr	r2, [pc, #36]	; (80065c0 <USB_EPStartXfer+0x5a0>)
 800659c:	4322      	orrs	r2, r4
 800659e:	b292      	uxth	r2, r2
 80065a0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	0018      	movs	r0, r3
 80065a6:	46bd      	mov	sp, r7
 80065a8:	b015      	add	sp, #84	; 0x54
 80065aa:	bd90      	pop	{r4, r7, pc}
 80065ac:	00000402 	.word	0x00000402
 80065b0:	ffff83ff 	.word	0xffff83ff
 80065b4:	ffff8000 	.word	0xffff8000
 80065b8:	00000406 	.word	0x00000406
 80065bc:	ffffbf8f 	.word	0xffffbf8f
 80065c0:	ffff8080 	.word	0xffff8080

080065c4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065c4:	b590      	push	{r4, r7, lr}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	785b      	ldrb	r3, [r3, #1]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d016      	beq.n	8006604 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	18d3      	adds	r3, r2, r3
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	4a15      	ldr	r2, [pc, #84]	; (800663c <USB_EPSetStall+0x78>)
 80065e6:	4013      	ands	r3, r2
 80065e8:	b29c      	uxth	r4, r3
 80065ea:	2310      	movs	r3, #16
 80065ec:	4063      	eors	r3, r4
 80065ee:	b29c      	uxth	r4, r3
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	18d3      	adds	r3, r2, r3
 80065fa:	4a11      	ldr	r2, [pc, #68]	; (8006640 <USB_EPSetStall+0x7c>)
 80065fc:	4322      	orrs	r2, r4
 80065fe:	b292      	uxth	r2, r2
 8006600:	801a      	strh	r2, [r3, #0]
 8006602:	e016      	b.n	8006632 <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	18d3      	adds	r3, r2, r3
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29b      	uxth	r3, r3
 8006612:	4a0c      	ldr	r2, [pc, #48]	; (8006644 <USB_EPSetStall+0x80>)
 8006614:	4013      	ands	r3, r2
 8006616:	b29c      	uxth	r4, r3
 8006618:	2380      	movs	r3, #128	; 0x80
 800661a:	015b      	lsls	r3, r3, #5
 800661c:	4063      	eors	r3, r4
 800661e:	b29c      	uxth	r4, r3
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	18d3      	adds	r3, r2, r3
 800662a:	4a05      	ldr	r2, [pc, #20]	; (8006640 <USB_EPSetStall+0x7c>)
 800662c:	4322      	orrs	r2, r4
 800662e:	b292      	uxth	r2, r2
 8006630:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	0018      	movs	r0, r3
 8006636:	46bd      	mov	sp, r7
 8006638:	b003      	add	sp, #12
 800663a:	bd90      	pop	{r4, r7, pc}
 800663c:	ffff8fbf 	.word	0xffff8fbf
 8006640:	ffff8080 	.word	0xffff8080
 8006644:	ffffbf8f 	.word	0xffffbf8f

08006648 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006648:	b590      	push	{r4, r7, lr}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	7b1b      	ldrb	r3, [r3, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d000      	beq.n	800665c <USB_EPClearStall+0x14>
 800665a:	e076      	b.n	800674a <USB_EPClearStall+0x102>
  {
    if (ep->is_in != 0U)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	785b      	ldrb	r3, [r3, #1]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d038      	beq.n	80066d6 <USB_EPClearStall+0x8e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	18d3      	adds	r3, r2, r3
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	b29c      	uxth	r4, r3
 8006672:	0022      	movs	r2, r4
 8006674:	2340      	movs	r3, #64	; 0x40
 8006676:	4013      	ands	r3, r2
 8006678:	d012      	beq.n	80066a0 <USB_EPClearStall+0x58>
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	18d3      	adds	r3, r2, r3
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	b29b      	uxth	r3, r3
 8006688:	4a32      	ldr	r2, [pc, #200]	; (8006754 <USB_EPClearStall+0x10c>)
 800668a:	4013      	ands	r3, r2
 800668c:	b29c      	uxth	r4, r3
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	18d3      	adds	r3, r2, r3
 8006698:	4a2f      	ldr	r2, [pc, #188]	; (8006758 <USB_EPClearStall+0x110>)
 800669a:	4322      	orrs	r2, r4
 800669c:	b292      	uxth	r2, r2
 800669e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	78db      	ldrb	r3, [r3, #3]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d050      	beq.n	800674a <USB_EPClearStall+0x102>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	18d3      	adds	r3, r2, r3
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	4a29      	ldr	r2, [pc, #164]	; (800675c <USB_EPClearStall+0x114>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	b29c      	uxth	r4, r3
 80066bc:	2320      	movs	r3, #32
 80066be:	4063      	eors	r3, r4
 80066c0:	b29c      	uxth	r4, r3
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	18d3      	adds	r3, r2, r3
 80066cc:	4a24      	ldr	r2, [pc, #144]	; (8006760 <USB_EPClearStall+0x118>)
 80066ce:	4322      	orrs	r2, r4
 80066d0:	b292      	uxth	r2, r2
 80066d2:	801a      	strh	r2, [r3, #0]
 80066d4:	e039      	b.n	800674a <USB_EPClearStall+0x102>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	18d3      	adds	r3, r2, r3
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	b29c      	uxth	r4, r3
 80066e4:	0022      	movs	r2, r4
 80066e6:	2380      	movs	r3, #128	; 0x80
 80066e8:	01db      	lsls	r3, r3, #7
 80066ea:	4013      	ands	r3, r2
 80066ec:	d012      	beq.n	8006714 <USB_EPClearStall+0xcc>
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	18d3      	adds	r3, r2, r3
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	4a15      	ldr	r2, [pc, #84]	; (8006754 <USB_EPClearStall+0x10c>)
 80066fe:	4013      	ands	r3, r2
 8006700:	b29c      	uxth	r4, r3
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	18d3      	adds	r3, r2, r3
 800670c:	4a15      	ldr	r2, [pc, #84]	; (8006764 <USB_EPClearStall+0x11c>)
 800670e:	4322      	orrs	r2, r4
 8006710:	b292      	uxth	r2, r2
 8006712:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	18d3      	adds	r3, r2, r3
 800671e:	881b      	ldrh	r3, [r3, #0]
 8006720:	b29b      	uxth	r3, r3
 8006722:	4a11      	ldr	r2, [pc, #68]	; (8006768 <USB_EPClearStall+0x120>)
 8006724:	4013      	ands	r3, r2
 8006726:	b29c      	uxth	r4, r3
 8006728:	2380      	movs	r3, #128	; 0x80
 800672a:	015b      	lsls	r3, r3, #5
 800672c:	4063      	eors	r3, r4
 800672e:	b29c      	uxth	r4, r3
 8006730:	2380      	movs	r3, #128	; 0x80
 8006732:	019b      	lsls	r3, r3, #6
 8006734:	4063      	eors	r3, r4
 8006736:	b29c      	uxth	r4, r3
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	18d3      	adds	r3, r2, r3
 8006742:	4a07      	ldr	r2, [pc, #28]	; (8006760 <USB_EPClearStall+0x118>)
 8006744:	4322      	orrs	r2, r4
 8006746:	b292      	uxth	r2, r2
 8006748:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	0018      	movs	r0, r3
 800674e:	46bd      	mov	sp, r7
 8006750:	b003      	add	sp, #12
 8006752:	bd90      	pop	{r4, r7, pc}
 8006754:	ffff8f8f 	.word	0xffff8f8f
 8006758:	ffff80c0 	.word	0xffff80c0
 800675c:	ffff8fbf 	.word	0xffff8fbf
 8006760:	ffff8080 	.word	0xffff8080
 8006764:	ffffc080 	.word	0xffffc080
 8006768:	ffffbf8f 	.word	0xffffbf8f

0800676c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	000a      	movs	r2, r1
 8006776:	1cfb      	adds	r3, r7, #3
 8006778:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800677a:	1cfb      	adds	r3, r7, #3
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d103      	bne.n	800678a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	224c      	movs	r2, #76	; 0x4c
 8006786:	2180      	movs	r1, #128	; 0x80
 8006788:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	0018      	movs	r0, r3
 800678e:	46bd      	mov	sp, r7
 8006790:	b002      	add	sp, #8
 8006792:	bd80      	pop	{r7, pc}

08006794 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2258      	movs	r2, #88	; 0x58
 80067a0:	5a9b      	ldrh	r3, [r3, r2]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	4a05      	ldr	r2, [pc, #20]	; (80067bc <USB_DevConnect+0x28>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	b299      	uxth	r1, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2258      	movs	r2, #88	; 0x58
 80067ae:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	0018      	movs	r0, r3
 80067b4:	46bd      	mov	sp, r7
 80067b6:	b002      	add	sp, #8
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	46c0      	nop			; (mov r8, r8)
 80067bc:	ffff8000 	.word	0xffff8000

080067c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2244      	movs	r2, #68	; 0x44
 80067cc:	5a9b      	ldrh	r3, [r3, r2]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80067d2:	68fb      	ldr	r3, [r7, #12]
}
 80067d4:	0018      	movs	r0, r3
 80067d6:	46bd      	mov	sp, r7
 80067d8:	b004      	add	sp, #16
 80067da:	bd80      	pop	{r7, pc}

080067dc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	0018      	movs	r0, r3
 80067ea:	46bd      	mov	sp, r7
 80067ec:	b002      	add	sp, #8
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08c      	sub	sp, #48	; 0x30
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	0019      	movs	r1, r3
 80067fc:	1dbb      	adds	r3, r7, #6
 80067fe:	801a      	strh	r2, [r3, #0]
 8006800:	1d3b      	adds	r3, r7, #4
 8006802:	1c0a      	adds	r2, r1, #0
 8006804:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006806:	1d3b      	adds	r3, r7, #4
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	3301      	adds	r3, #1
 800680c:	085b      	lsrs	r3, r3, #1
 800680e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006818:	1dbb      	adds	r3, r7, #6
 800681a:	881a      	ldrh	r2, [r3, #0]
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	18d3      	adds	r3, r2, r3
 8006820:	2280      	movs	r2, #128	; 0x80
 8006822:	00d2      	lsls	r2, r2, #3
 8006824:	4694      	mov	ip, r2
 8006826:	4463      	add	r3, ip
 8006828:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800682e:	e01b      	b.n	8006868 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	3301      	adds	r3, #1
 800683a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	021b      	lsls	r3, r3, #8
 8006844:	b29b      	uxth	r3, r3
 8006846:	001a      	movs	r2, r3
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	4313      	orrs	r3, r2
 800684c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	b29a      	uxth	r2, r3
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006854:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006858:	3302      	adds	r3, #2
 800685a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	3301      	adds	r3, #1
 8006860:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006864:	3b01      	subs	r3, #1
 8006866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e0      	bne.n	8006830 <USB_WritePMA+0x40>
  }
}
 800686e:	46c0      	nop			; (mov r8, r8)
 8006870:	46bd      	mov	sp, r7
 8006872:	b00c      	add	sp, #48	; 0x30
 8006874:	bd80      	pop	{r7, pc}

08006876 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b08a      	sub	sp, #40	; 0x28
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	0019      	movs	r1, r3
 8006882:	1dbb      	adds	r3, r7, #6
 8006884:	801a      	strh	r2, [r3, #0]
 8006886:	1d3b      	adds	r3, r7, #4
 8006888:	1c0a      	adds	r2, r1, #0
 800688a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800688c:	1d3b      	adds	r3, r7, #4
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	085b      	lsrs	r3, r3, #1
 8006892:	b29b      	uxth	r3, r3
 8006894:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800689e:	1dbb      	adds	r3, r7, #6
 80068a0:	881a      	ldrh	r2, [r3, #0]
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	18d3      	adds	r3, r2, r3
 80068a6:	2280      	movs	r2, #128	; 0x80
 80068a8:	00d2      	lsls	r2, r2, #3
 80068aa:	4694      	mov	ip, r2
 80068ac:	4463      	add	r3, ip
 80068ae:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
 80068b4:	e018      	b.n	80068e8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	3302      	adds	r3, #2
 80068c2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	3301      	adds	r3, #1
 80068d0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	0a1b      	lsrs	r3, r3, #8
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	3301      	adds	r3, #1
 80068e0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	3b01      	subs	r3, #1
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1e3      	bne.n	80068b6 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80068ee:	1d3b      	adds	r3, r7, #4
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	2201      	movs	r2, #1
 80068f4:	4013      	ands	r3, r2
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d007      	beq.n	800690c <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	b2da      	uxtb	r2, r3
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	701a      	strb	r2, [r3, #0]
  }
}
 800690c:	46c0      	nop			; (mov r8, r8)
 800690e:	46bd      	mov	sp, r7
 8006910:	b00a      	add	sp, #40	; 0x28
 8006912:	bd80      	pop	{r7, pc}

08006914 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	000a      	movs	r2, r1
 800691e:	1cfb      	adds	r3, r7, #3
 8006920:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8006922:	230f      	movs	r3, #15
 8006924:	18fb      	adds	r3, r7, r3
 8006926:	2200      	movs	r2, #0
 8006928:	701a      	strb	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	2302      	movs	r3, #2
 800692e:	2203      	movs	r2, #3
 8006930:	2181      	movs	r1, #129	; 0x81
 8006932:	f001 ff4f 	bl	80087d4 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	2302      	movs	r3, #2
 8006940:	2203      	movs	r2, #3
 8006942:	2101      	movs	r1, #1
 8006944:	f001 ff46 	bl	80087d4 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	23b6      	movs	r3, #182	; 0xb6
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	2101      	movs	r1, #1
 8006950:	50d1      	str	r1, [r2, r3]

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006952:	2054      	movs	r0, #84	; 0x54
 8006954:	f002 f8c0 	bl	8008ad8 <USBD_static_malloc>
 8006958:	0001      	movs	r1, r0
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	23ae      	movs	r3, #174	; 0xae
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	23ae      	movs	r3, #174	; 0xae
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	58d3      	ldr	r3, [r2, r3]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d104      	bne.n	8006978 <USBD_CUSTOM_HID_Init+0x64>
  {
    ret = 1U;
 800696e:	230f      	movs	r3, #15
 8006970:	18fb      	adds	r3, r7, r3
 8006972:	2201      	movs	r2, #1
 8006974:	701a      	strb	r2, [r3, #0]
 8006976:	e014      	b.n	80069a2 <USBD_CUSTOM_HID_Init+0x8e>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	23ae      	movs	r3, #174	; 0xae
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	58d3      	ldr	r3, [r2, r3]
 8006980:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2250      	movs	r2, #80	; 0x50
 8006986:	2100      	movs	r1, #0
 8006988:	5499      	strb	r1, [r3, r2]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	23af      	movs	r3, #175	; 0xaf
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	58d3      	ldr	r3, [r2, r3]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	2340      	movs	r3, #64	; 0x40
 800699c:	2101      	movs	r1, #1
 800699e:	f002 f863 	bl	8008a68 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80069a2:	230f      	movs	r3, #15
 80069a4:	18fb      	adds	r3, r7, r3
 80069a6:	781b      	ldrb	r3, [r3, #0]
}
 80069a8:	0018      	movs	r0, r3
 80069aa:	46bd      	mov	sp, r7
 80069ac:	b004      	add	sp, #16
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	000a      	movs	r2, r1
 80069ba:	1cfb      	adds	r3, r7, #3
 80069bc:	701a      	strb	r2, [r3, #0]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2181      	movs	r1, #129	; 0x81
 80069c2:	0018      	movs	r0, r3
 80069c4:	f001 ff3d 	bl	8008842 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2101      	movs	r1, #1
 80069d2:	0018      	movs	r0, r3
 80069d4:	f001 ff35 	bl	8008842 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	23b6      	movs	r3, #182	; 0xb6
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	2100      	movs	r1, #0
 80069e0:	50d1      	str	r1, [r2, r3]

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	23ae      	movs	r3, #174	; 0xae
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	58d3      	ldr	r3, [r2, r3]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d011      	beq.n	8006a12 <USBD_CUSTOM_HID_DeInit+0x62>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	23af      	movs	r3, #175	; 0xaf
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	58d3      	ldr	r3, [r2, r3]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	23ae      	movs	r3, #174	; 0xae
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	58d3      	ldr	r3, [r2, r3]
 8006a02:	0018      	movs	r0, r3
 8006a04:	f002 f874 	bl	8008af0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	23ae      	movs	r3, #174	; 0xae
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	2100      	movs	r1, #0
 8006a10:	50d1      	str	r1, [r2, r3]
  }
  return USBD_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	0018      	movs	r0, r3
 8006a16:	46bd      	mov	sp, r7
 8006a18:	b002      	add	sp, #8
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	23ae      	movs	r3, #174	; 0xae
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	58d3      	ldr	r3, [r2, r3]
 8006a2e:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006a30:	231e      	movs	r3, #30
 8006a32:	18fb      	adds	r3, r7, r3
 8006a34:	2200      	movs	r2, #0
 8006a36:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf = NULL;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006a3c:	230e      	movs	r3, #14
 8006a3e:	18fb      	adds	r3, r7, r3
 8006a40:	2200      	movs	r2, #0
 8006a42:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8006a44:	2317      	movs	r3, #23
 8006a46:	18fb      	adds	r3, r7, r3
 8006a48:	2200      	movs	r2, #0
 8006a4a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	001a      	movs	r2, r3
 8006a52:	2360      	movs	r3, #96	; 0x60
 8006a54:	4013      	ands	r3, r2
 8006a56:	d044      	beq.n	8006ae2 <USBD_CUSTOM_HID_Setup+0xc6>
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d000      	beq.n	8006a5e <USBD_CUSTOM_HID_Setup+0x42>
 8006a5c:	e0d5      	b.n	8006c0a <USBD_CUSTOM_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	785b      	ldrb	r3, [r3, #1]
 8006a62:	2b0b      	cmp	r3, #11
 8006a64:	d831      	bhi.n	8006aca <USBD_CUSTOM_HID_Setup+0xae>
 8006a66:	009a      	lsls	r2, r3, #2
 8006a68:	4b71      	ldr	r3, [pc, #452]	; (8006c30 <USBD_CUSTOM_HID_Setup+0x214>)
 8006a6a:	18d3      	adds	r3, r2, r3
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	469f      	mov	pc, r3
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	885b      	ldrh	r3, [r3, #2]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	001a      	movs	r2, r3
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8006a7c:	e030      	b.n	8006ae0 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	3340      	adds	r3, #64	; 0x40
 8006a82:	0019      	movs	r1, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	0018      	movs	r0, r3
 8006a8a:	f001 fb2f 	bl	80080ec <USBD_CtlSendData>
          break;
 8006a8e:	e027      	b.n	8006ae0 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	885b      	ldrh	r3, [r3, #2]
 8006a94:	0a1b      	lsrs	r3, r3, #8
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	001a      	movs	r2, r3
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8006aa0:	e01e      	b.n	8006ae0 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	3344      	adds	r3, #68	; 0x44
 8006aa6:	0019      	movs	r1, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	0018      	movs	r0, r3
 8006aae:	f001 fb1d 	bl	80080ec <USBD_CtlSendData>
          break;
 8006ab2:	e015      	b.n	8006ae0 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8006aba:	6939      	ldr	r1, [r7, #16]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	88da      	ldrh	r2, [r3, #6]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f001 fb45 	bl	8008152 <USBD_CtlPrepareRx>
          break;
 8006ac8:	e00a      	b.n	8006ae0 <USBD_CUSTOM_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	0011      	movs	r1, r2
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f001 fa8c 	bl	8007fee <USBD_CtlError>
          ret = USBD_FAIL;
 8006ad6:	2317      	movs	r3, #23
 8006ad8:	18fb      	adds	r3, r7, r3
 8006ada:	2202      	movs	r2, #2
 8006adc:	701a      	strb	r2, [r3, #0]
          break;
 8006ade:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006ae0:	e09e      	b.n	8006c20 <USBD_CUSTOM_HID_Setup+0x204>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	785b      	ldrb	r3, [r3, #1]
 8006ae6:	2b06      	cmp	r3, #6
 8006ae8:	d021      	beq.n	8006b2e <USBD_CUSTOM_HID_Setup+0x112>
 8006aea:	dc02      	bgt.n	8006af2 <USBD_CUSTOM_HID_Setup+0xd6>
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <USBD_CUSTOM_HID_Setup+0xe0>
 8006af0:	e07f      	b.n	8006bf2 <USBD_CUSTOM_HID_Setup+0x1d6>
 8006af2:	2b0a      	cmp	r3, #10
 8006af4:	d04b      	beq.n	8006b8e <USBD_CUSTOM_HID_Setup+0x172>
 8006af6:	2b0b      	cmp	r3, #11
 8006af8:	d063      	beq.n	8006bc2 <USBD_CUSTOM_HID_Setup+0x1a6>
 8006afa:	e07a      	b.n	8006bf2 <USBD_CUSTOM_HID_Setup+0x1d6>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	23a7      	movs	r3, #167	; 0xa7
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	5cd3      	ldrb	r3, [r2, r3]
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	d107      	bne.n	8006b18 <USBD_CUSTOM_HID_Setup+0xfc>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006b08:	230e      	movs	r3, #14
 8006b0a:	18f9      	adds	r1, r7, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	0018      	movs	r0, r3
 8006b12:	f001 faeb 	bl	80080ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b16:	e077      	b.n	8006c08 <USBD_CUSTOM_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	0011      	movs	r1, r2
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f001 fa65 	bl	8007fee <USBD_CtlError>
            ret = USBD_FAIL;
 8006b24:	2317      	movs	r3, #23
 8006b26:	18fb      	adds	r3, r7, r3
 8006b28:	2202      	movs	r2, #2
 8006b2a:	701a      	strb	r2, [r3, #0]
          break;
 8006b2c:	e06c      	b.n	8006c08 <USBD_CUSTOM_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	885b      	ldrh	r3, [r3, #2]
 8006b32:	0a1b      	lsrs	r3, r3, #8
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	2b22      	cmp	r3, #34	; 0x22
 8006b38:	d10f      	bne.n	8006b5a <USBD_CUSTOM_HID_Setup+0x13e>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	88db      	ldrh	r3, [r3, #6]
 8006b3e:	221e      	movs	r2, #30
 8006b40:	18ba      	adds	r2, r7, r2
 8006b42:	b299      	uxth	r1, r3
 8006b44:	2921      	cmp	r1, #33	; 0x21
 8006b46:	d900      	bls.n	8006b4a <USBD_CUSTOM_HID_Setup+0x12e>
 8006b48:	2321      	movs	r3, #33	; 0x21
 8006b4a:	8013      	strh	r3, [r2, #0]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	23af      	movs	r3, #175	; 0xaf
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	58d3      	ldr	r3, [r2, r3]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	61bb      	str	r3, [r7, #24]
 8006b58:	e010      	b.n	8006b7c <USBD_CUSTOM_HID_Setup+0x160>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	885b      	ldrh	r3, [r3, #2]
 8006b5e:	0a1b      	lsrs	r3, r3, #8
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b21      	cmp	r3, #33	; 0x21
 8006b64:	d10a      	bne.n	8006b7c <USBD_CUSTOM_HID_Setup+0x160>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006b66:	4b33      	ldr	r3, [pc, #204]	; (8006c34 <USBD_CUSTOM_HID_Setup+0x218>)
 8006b68:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	88db      	ldrh	r3, [r3, #6]
 8006b6e:	221e      	movs	r2, #30
 8006b70:	18ba      	adds	r2, r7, r2
 8006b72:	b299      	uxth	r1, r3
 8006b74:	2909      	cmp	r1, #9
 8006b76:	d900      	bls.n	8006b7a <USBD_CUSTOM_HID_Setup+0x15e>
 8006b78:	2309      	movs	r3, #9
 8006b7a:	8013      	strh	r3, [r2, #0]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8006b7c:	231e      	movs	r3, #30
 8006b7e:	18fb      	adds	r3, r7, r3
 8006b80:	881a      	ldrh	r2, [r3, #0]
 8006b82:	69b9      	ldr	r1, [r7, #24]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	0018      	movs	r0, r3
 8006b88:	f001 fab0 	bl	80080ec <USBD_CtlSendData>
          break;
 8006b8c:	e03c      	b.n	8006c08 <USBD_CUSTOM_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	23a7      	movs	r3, #167	; 0xa7
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	5cd3      	ldrb	r3, [r2, r3]
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	d108      	bne.n	8006bac <USBD_CUSTOM_HID_Setup+0x190>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	3348      	adds	r3, #72	; 0x48
 8006b9e:	0019      	movs	r1, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	f001 faa1 	bl	80080ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006baa:	e02d      	b.n	8006c08 <USBD_CUSTOM_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	0011      	movs	r1, r2
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f001 fa1b 	bl	8007fee <USBD_CtlError>
            ret = USBD_FAIL;
 8006bb8:	2317      	movs	r3, #23
 8006bba:	18fb      	adds	r3, r7, r3
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	701a      	strb	r2, [r3, #0]
          break;
 8006bc0:	e022      	b.n	8006c08 <USBD_CUSTOM_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	23a7      	movs	r3, #167	; 0xa7
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	5cd3      	ldrb	r3, [r2, r3]
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	d106      	bne.n	8006bdc <USBD_CUSTOM_HID_Setup+0x1c0>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	885b      	ldrh	r3, [r3, #2]
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	001a      	movs	r2, r3
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bda:	e015      	b.n	8006c08 <USBD_CUSTOM_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	0011      	movs	r1, r2
 8006be2:	0018      	movs	r0, r3
 8006be4:	f001 fa03 	bl	8007fee <USBD_CtlError>
            ret = USBD_FAIL;
 8006be8:	2317      	movs	r3, #23
 8006bea:	18fb      	adds	r3, r7, r3
 8006bec:	2202      	movs	r2, #2
 8006bee:	701a      	strb	r2, [r3, #0]
          break;
 8006bf0:	e00a      	b.n	8006c08 <USBD_CUSTOM_HID_Setup+0x1ec>

        default:
          USBD_CtlError(pdev, req);
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	0011      	movs	r1, r2
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f001 f9f8 	bl	8007fee <USBD_CtlError>
          ret = USBD_FAIL;
 8006bfe:	2317      	movs	r3, #23
 8006c00:	18fb      	adds	r3, r7, r3
 8006c02:	2202      	movs	r2, #2
 8006c04:	701a      	strb	r2, [r3, #0]
          break;
 8006c06:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006c08:	e00a      	b.n	8006c20 <USBD_CUSTOM_HID_Setup+0x204>

    default:
      USBD_CtlError(pdev, req);
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	0011      	movs	r1, r2
 8006c10:	0018      	movs	r0, r3
 8006c12:	f001 f9ec 	bl	8007fee <USBD_CtlError>
      ret = USBD_FAIL;
 8006c16:	2317      	movs	r3, #23
 8006c18:	18fb      	adds	r3, r7, r3
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	701a      	strb	r2, [r3, #0]
      break;
 8006c1e:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 8006c20:	2317      	movs	r3, #23
 8006c22:	18fb      	adds	r3, r7, r3
 8006c24:	781b      	ldrb	r3, [r3, #0]
}
 8006c26:	0018      	movs	r0, r3
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	b008      	add	sp, #32
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	46c0      	nop			; (mov r8, r8)
 8006c30:	0800ba74 	.word	0x0800ba74
 8006c34:	200000c8 	.word	0x200000c8

08006c38 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	1dbb      	adds	r3, r7, #6
 8006c44:	801a      	strh	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	23ae      	movs	r3, #174	; 0xae
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	58d3      	ldr	r3, [r2, r3]
 8006c4e:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	23a7      	movs	r3, #167	; 0xa7
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	5cd3      	ldrb	r3, [r2, r3]
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	d112      	bne.n	8006c82 <USBD_CUSTOM_HID_SendReport+0x4a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	2250      	movs	r2, #80	; 0x50
 8006c60:	5c9b      	ldrb	r3, [r3, r2]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10b      	bne.n	8006c7e <USBD_CUSTOM_HID_SendReport+0x46>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2250      	movs	r2, #80	; 0x50
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	5499      	strb	r1, [r3, r2]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8006c6e:	1dbb      	adds	r3, r7, #6
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	2181      	movs	r1, #129	; 0x81
 8006c78:	f001 febe 	bl	80089f8 <USBD_LL_Transmit>
 8006c7c:	e001      	b.n	8006c82 <USBD_CUSTOM_HID_SendReport+0x4a>
    }
    else
    {
      return USBD_BUSY;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e000      	b.n	8006c84 <USBD_CUSTOM_HID_SendReport+0x4c>
    }
  }
  return USBD_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	0018      	movs	r0, r3
 8006c86:	46bd      	mov	sp, r7
 8006c88:	b006      	add	sp, #24
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2229      	movs	r2, #41	; 0x29
 8006c98:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8006c9a:	4b02      	ldr	r3, [pc, #8]	; (8006ca4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x18>)
}
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	b002      	add	sp, #8
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	20000044 	.word	0x20000044

08006ca8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2229      	movs	r2, #41	; 0x29
 8006cb4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8006cb6:	4b02      	ldr	r3, [pc, #8]	; (8006cc0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x18>)
}
 8006cb8:	0018      	movs	r0, r3
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	b002      	add	sp, #8
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20000070 	.word	0x20000070

08006cc4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2229      	movs	r2, #41	; 0x29
 8006cd0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8006cd2:	4b02      	ldr	r3, [pc, #8]	; (8006cdc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	b002      	add	sp, #8
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	2000009c 	.word	0x2000009c

08006ce0 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	000a      	movs	r2, r1
 8006cea:	1cfb      	adds	r3, r7, #3
 8006cec:	701a      	strb	r2, [r3, #0]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	23ae      	movs	r3, #174	; 0xae
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	58d3      	ldr	r3, [r2, r3]
 8006cf6:	2250      	movs	r2, #80	; 0x50
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	5499      	strb	r1, [r3, r2]

  return USBD_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	0018      	movs	r0, r3
 8006d00:	46bd      	mov	sp, r7
 8006d02:	b002      	add	sp, #8
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	000a      	movs	r2, r1
 8006d10:	1cfb      	adds	r3, r7, #3
 8006d12:	701a      	strb	r2, [r3, #0]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	23ae      	movs	r3, #174	; 0xae
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	58d3      	ldr	r3, [r2, r3]
 8006d1c:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	23af      	movs	r3, #175	; 0xaf
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	58d3      	ldr	r3, [r2, r3]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	7810      	ldrb	r0, [r2, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	7852      	ldrb	r2, [r2, #1]
 8006d30:	0011      	movs	r1, r2
 8006d32:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	2340      	movs	r3, #64	; 0x40
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	f001 fe94 	bl	8008a68 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	0018      	movs	r0, r3
 8006d44:	46bd      	mov	sp, r7
 8006d46:	b004      	add	sp, #16
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	23ae      	movs	r3, #174	; 0xae
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	58d3      	ldr	r3, [r2, r3]
 8006d5a:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d10d      	bne.n	8006d80 <USBD_CUSTOM_HID_EP0_RxReady+0x36>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	23af      	movs	r3, #175	; 0xaf
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	58d3      	ldr	r3, [r2, r3]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	7810      	ldrb	r0, [r2, #0]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	7852      	ldrb	r2, [r2, #1]
 8006d76:	0011      	movs	r1, r2
 8006d78:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	0018      	movs	r0, r3
 8006d84:	46bd      	mov	sp, r7
 8006d86:	b004      	add	sp, #16
 8006d88:	bd80      	pop	{r7, pc}
	...

08006d8c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	220a      	movs	r2, #10
 8006d98:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006d9a:	4b02      	ldr	r3, [pc, #8]	; (8006da4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x18>)
}
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	b002      	add	sp, #8
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	200000d4 	.word	0x200000d4

08006da8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006db2:	230f      	movs	r3, #15
 8006db4:	18fb      	adds	r3, r7, r3
 8006db6:	2202      	movs	r2, #2
 8006db8:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d008      	beq.n	8006dd2 <USBD_CUSTOM_HID_RegisterInterface+0x2a>
  {
    pdev->pUserData = fops;
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	23af      	movs	r3, #175	; 0xaf
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8006dca:	230f      	movs	r3, #15
 8006dcc:	18fb      	adds	r3, r7, r3
 8006dce:	2200      	movs	r2, #0
 8006dd0:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8006dd2:	230f      	movs	r3, #15
 8006dd4:	18fb      	adds	r3, r7, r3
 8006dd6:	781b      	ldrb	r3, [r3, #0]
}
 8006dd8:	0018      	movs	r0, r3
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	b004      	add	sp, #16
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	1dfb      	adds	r3, r7, #7
 8006dec:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006df4:	2302      	movs	r3, #2
 8006df6:	e020      	b.n	8006e3a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	23ad      	movs	r3, #173	; 0xad
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	58d3      	ldr	r3, [r2, r3]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d004      	beq.n	8006e0e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	23ad      	movs	r3, #173	; 0xad
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d004      	beq.n	8006e1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	23ac      	movs	r3, #172	; 0xac
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	23a7      	movs	r3, #167	; 0xa7
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	2101      	movs	r1, #1
 8006e26:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	1dfa      	adds	r2, r7, #7
 8006e2c:	7812      	ldrb	r2, [r2, #0]
 8006e2e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	0018      	movs	r0, r3
 8006e34:	f001 fc50 	bl	80086d8 <USBD_LL_Init>

  return USBD_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	b004      	add	sp, #16
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006e4c:	230f      	movs	r3, #15
 8006e4e:	18fb      	adds	r3, r7, r3
 8006e50:	2200      	movs	r2, #0
 8006e52:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d009      	beq.n	8006e6e <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	23ad      	movs	r3, #173	; 0xad
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8006e64:	230f      	movs	r3, #15
 8006e66:	18fb      	adds	r3, r7, r3
 8006e68:	2200      	movs	r2, #0
 8006e6a:	701a      	strb	r2, [r3, #0]
 8006e6c:	e003      	b.n	8006e76 <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006e6e:	230f      	movs	r3, #15
 8006e70:	18fb      	adds	r3, r7, r3
 8006e72:	2202      	movs	r2, #2
 8006e74:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006e76:	230f      	movs	r3, #15
 8006e78:	18fb      	adds	r3, r7, r3
 8006e7a:	781b      	ldrb	r3, [r3, #0]
}
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	b004      	add	sp, #16
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	0018      	movs	r0, r3
 8006e90:	f001 fc7a 	bl	8008788 <USBD_LL_Start>

  return USBD_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	0018      	movs	r0, r3
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	b002      	add	sp, #8
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b082      	sub	sp, #8
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	b002      	add	sp, #8
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	000a      	movs	r2, r1
 8006eba:	1cfb      	adds	r3, r7, #3
 8006ebc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006ebe:	230f      	movs	r3, #15
 8006ec0:	18fb      	adds	r3, r7, r3
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	23ad      	movs	r3, #173	; 0xad
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	58d3      	ldr	r3, [r2, r3]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00f      	beq.n	8006ef2 <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	23ad      	movs	r3, #173	; 0xad
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	58d3      	ldr	r3, [r2, r3]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	1cfa      	adds	r2, r7, #3
 8006ede:	7811      	ldrb	r1, [r2, #0]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	0010      	movs	r0, r2
 8006ee4:	4798      	blx	r3
 8006ee6:	1e03      	subs	r3, r0, #0
 8006ee8:	d103      	bne.n	8006ef2 <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 8006eea:	230f      	movs	r3, #15
 8006eec:	18fb      	adds	r3, r7, r3
 8006eee:	2200      	movs	r2, #0
 8006ef0:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8006ef2:	230f      	movs	r3, #15
 8006ef4:	18fb      	adds	r3, r7, r3
 8006ef6:	781b      	ldrb	r3, [r3, #0]
}
 8006ef8:	0018      	movs	r0, r3
 8006efa:	46bd      	mov	sp, r7
 8006efc:	b004      	add	sp, #16
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	000a      	movs	r2, r1
 8006f0a:	1cfb      	adds	r3, r7, #3
 8006f0c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	23ad      	movs	r3, #173	; 0xad
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	58d3      	ldr	r3, [r2, r3]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	1cfa      	adds	r2, r7, #3
 8006f1a:	7811      	ldrb	r1, [r2, #0]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	0010      	movs	r0, r2
 8006f20:	4798      	blx	r3

  return USBD_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	0018      	movs	r0, r3
 8006f26:	46bd      	mov	sp, r7
 8006f28:	b002      	add	sp, #8
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	22aa      	movs	r2, #170	; 0xaa
 8006f3a:	0092      	lsls	r2, r2, #2
 8006f3c:	4694      	mov	ip, r2
 8006f3e:	4463      	add	r3, ip
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	0011      	movs	r1, r2
 8006f44:	0018      	movs	r0, r3
 8006f46:	f001 f817 	bl	8007f78 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	23a5      	movs	r3, #165	; 0xa5
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	2101      	movs	r1, #1
 8006f52:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a22      	ldr	r2, [pc, #136]	; (8006fe0 <USBD_LL_SetupStage+0xb4>)
 8006f58:	5a9b      	ldrh	r3, [r3, r2]
 8006f5a:	0019      	movs	r1, r3
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	23a6      	movs	r3, #166	; 0xa6
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	23aa      	movs	r3, #170	; 0xaa
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	5cd3      	ldrb	r3, [r2, r3]
 8006f6c:	001a      	movs	r2, r3
 8006f6e:	231f      	movs	r3, #31
 8006f70:	4013      	ands	r3, r2
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d00d      	beq.n	8006f92 <USBD_LL_SetupStage+0x66>
 8006f76:	d302      	bcc.n	8006f7e <USBD_LL_SetupStage+0x52>
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d014      	beq.n	8006fa6 <USBD_LL_SetupStage+0x7a>
 8006f7c:	e01d      	b.n	8006fba <USBD_LL_SetupStage+0x8e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	22aa      	movs	r2, #170	; 0xaa
 8006f82:	0092      	lsls	r2, r2, #2
 8006f84:	189a      	adds	r2, r3, r2
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	0011      	movs	r1, r2
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	f000 fa10 	bl	80073b0 <USBD_StdDevReq>
      break;
 8006f90:	e020      	b.n	8006fd4 <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	22aa      	movs	r2, #170	; 0xaa
 8006f96:	0092      	lsls	r2, r2, #2
 8006f98:	189a      	adds	r2, r3, r2
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	0011      	movs	r1, r2
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	f000 fa78 	bl	8007494 <USBD_StdItfReq>
      break;
 8006fa4:	e016      	b.n	8006fd4 <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	22aa      	movs	r2, #170	; 0xaa
 8006faa:	0092      	lsls	r2, r2, #2
 8006fac:	189a      	adds	r2, r3, r2
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	0011      	movs	r1, r2
 8006fb2:	0018      	movs	r0, r3
 8006fb4:	f000 fac5 	bl	8007542 <USBD_StdEPReq>
      break;
 8006fb8:	e00c      	b.n	8006fd4 <USBD_LL_SetupStage+0xa8>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	23aa      	movs	r3, #170	; 0xaa
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	5cd3      	ldrb	r3, [r2, r3]
 8006fc2:	227f      	movs	r2, #127	; 0x7f
 8006fc4:	4393      	bics	r3, r2
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	0011      	movs	r1, r2
 8006fcc:	0018      	movs	r0, r3
 8006fce:	f001 fc64 	bl	800889a <USBD_LL_StallEP>
      break;
 8006fd2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	b002      	add	sp, #8
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	46c0      	nop			; (mov r8, r8)
 8006fe0:	000002ae 	.word	0x000002ae

08006fe4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	607a      	str	r2, [r7, #4]
 8006fee:	200b      	movs	r0, #11
 8006ff0:	183b      	adds	r3, r7, r0
 8006ff2:	1c0a      	adds	r2, r1, #0
 8006ff4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006ff6:	183b      	adds	r3, r7, r0
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d154      	bne.n	80070a8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3355      	adds	r3, #85	; 0x55
 8007002:	33ff      	adds	r3, #255	; 0xff
 8007004:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	23a5      	movs	r3, #165	; 0xa5
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	58d3      	ldr	r3, [r2, r3]
 800700e:	2b03      	cmp	r3, #3
 8007010:	d139      	bne.n	8007086 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	68da      	ldr	r2, [r3, #12]
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	429a      	cmp	r2, r3
 800701c:	d919      	bls.n	8007052 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	1ad2      	subs	r2, r2, r3
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	68da      	ldr	r2, [r3, #12]
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007034:	429a      	cmp	r2, r3
 8007036:	d203      	bcs.n	8007040 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800703c:	b29b      	uxth	r3, r3
 800703e:	e002      	b.n	8007046 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007044:	b29b      	uxth	r3, r3
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	001a      	movs	r2, r3
 800704c:	f001 f8a5 	bl	800819a <USBD_CtlContinueRx>
 8007050:	e045      	b.n	80070de <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	23ad      	movs	r3, #173	; 0xad
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	58d3      	ldr	r3, [r2, r3]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00d      	beq.n	800707c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	23a7      	movs	r3, #167	; 0xa7
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007068:	2b03      	cmp	r3, #3
 800706a:	d107      	bne.n	800707c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	23ad      	movs	r3, #173	; 0xad
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	58d3      	ldr	r3, [r2, r3]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	0010      	movs	r0, r2
 800707a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	0018      	movs	r0, r3
 8007080:	f001 f89e 	bl	80081c0 <USBD_CtlSendStatus>
 8007084:	e02b      	b.n	80070de <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	23a5      	movs	r3, #165	; 0xa5
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	58d3      	ldr	r3, [r2, r3]
 800708e:	2b05      	cmp	r3, #5
 8007090:	d125      	bne.n	80070de <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	23a5      	movs	r3, #165	; 0xa5
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	2100      	movs	r1, #0
 800709a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2100      	movs	r1, #0
 80070a0:	0018      	movs	r0, r3
 80070a2:	f001 fbfa 	bl	800889a <USBD_LL_StallEP>
 80070a6:	e01a      	b.n	80070de <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	23ad      	movs	r3, #173	; 0xad
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	58d3      	ldr	r3, [r2, r3]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d011      	beq.n	80070da <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	23a7      	movs	r3, #167	; 0xa7
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80070be:	2b03      	cmp	r3, #3
 80070c0:	d10b      	bne.n	80070da <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	23ad      	movs	r3, #173	; 0xad
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	58d3      	ldr	r3, [r2, r3]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	220b      	movs	r2, #11
 80070ce:	18ba      	adds	r2, r7, r2
 80070d0:	7811      	ldrb	r1, [r2, #0]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	0010      	movs	r0, r2
 80070d6:	4798      	blx	r3
 80070d8:	e001      	b.n	80070de <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80070da:	2302      	movs	r3, #2
 80070dc:	e000      	b.n	80070e0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	0018      	movs	r0, r3
 80070e2:	46bd      	mov	sp, r7
 80070e4:	b006      	add	sp, #24
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	607a      	str	r2, [r7, #4]
 80070f2:	200b      	movs	r0, #11
 80070f4:	183b      	adds	r3, r7, r0
 80070f6:	1c0a      	adds	r2, r1, #0
 80070f8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070fa:	183b      	adds	r3, r7, r0
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d000      	beq.n	8007104 <USBD_LL_DataInStage+0x1c>
 8007102:	e08e      	b.n	8007222 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3314      	adds	r3, #20
 8007108:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	23a5      	movs	r3, #165	; 0xa5
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	58d3      	ldr	r3, [r2, r3]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d164      	bne.n	80071e0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	429a      	cmp	r2, r3
 8007120:	d915      	bls.n	800714e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	68da      	ldr	r2, [r3, #12]
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	1ad2      	subs	r2, r2, r3
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	b29a      	uxth	r2, r3
 8007136:	6879      	ldr	r1, [r7, #4]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	0018      	movs	r0, r3
 800713c:	f000 fff6 	bl	800812c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	2300      	movs	r3, #0
 8007144:	2200      	movs	r2, #0
 8007146:	2100      	movs	r1, #0
 8007148:	f001 fc8e 	bl	8008a68 <USBD_LL_PrepareReceive>
 800714c:	e059      	b.n	8007202 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	689a      	ldr	r2, [r3, #8]
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	0019      	movs	r1, r3
 8007158:	0010      	movs	r0, r2
 800715a:	f7f9 f86d 	bl	8000238 <__aeabi_uidivmod>
 800715e:	1e0b      	subs	r3, r1, #0
 8007160:	d11f      	bne.n	80071a2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	689a      	ldr	r2, [r3, #8]
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800716a:	429a      	cmp	r2, r3
 800716c:	d319      	bcc.n	80071a2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	689a      	ldr	r2, [r3, #8]
 8007172:	68f9      	ldr	r1, [r7, #12]
 8007174:	23a6      	movs	r3, #166	; 0xa6
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800717a:	429a      	cmp	r2, r3
 800717c:	d211      	bcs.n	80071a2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	2100      	movs	r1, #0
 8007184:	0018      	movs	r0, r3
 8007186:	f000 ffd1 	bl	800812c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	23a6      	movs	r3, #166	; 0xa6
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	2100      	movs	r1, #0
 8007192:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	2300      	movs	r3, #0
 8007198:	2200      	movs	r2, #0
 800719a:	2100      	movs	r1, #0
 800719c:	f001 fc64 	bl	8008a68 <USBD_LL_PrepareReceive>
 80071a0:	e02f      	b.n	8007202 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	23ad      	movs	r3, #173	; 0xad
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	58d3      	ldr	r3, [r2, r3]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00d      	beq.n	80071cc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	23a7      	movs	r3, #167	; 0xa7
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d107      	bne.n	80071cc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	23ad      	movs	r3, #173	; 0xad
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	58d3      	ldr	r3, [r2, r3]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	0010      	movs	r0, r2
 80071ca:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2180      	movs	r1, #128	; 0x80
 80071d0:	0018      	movs	r0, r3
 80071d2:	f001 fb62 	bl	800889a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	0018      	movs	r0, r3
 80071da:	f001 f805 	bl	80081e8 <USBD_CtlReceiveStatus>
 80071de:	e010      	b.n	8007202 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	23a5      	movs	r3, #165	; 0xa5
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	58d3      	ldr	r3, [r2, r3]
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d005      	beq.n	80071f8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	23a5      	movs	r3, #165	; 0xa5
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d104      	bne.n	8007202 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2180      	movs	r1, #128	; 0x80
 80071fc:	0018      	movs	r0, r3
 80071fe:	f001 fb4c 	bl	800889a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	23a8      	movs	r3, #168	; 0xa8
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	5cd3      	ldrb	r3, [r2, r3]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d124      	bne.n	8007258 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	0018      	movs	r0, r3
 8007212:	f7ff fe44 	bl	8006e9e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	23a8      	movs	r3, #168	; 0xa8
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	2100      	movs	r1, #0
 800721e:	54d1      	strb	r1, [r2, r3]
 8007220:	e01a      	b.n	8007258 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	23ad      	movs	r3, #173	; 0xad
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	58d3      	ldr	r3, [r2, r3]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d011      	beq.n	8007254 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	23a7      	movs	r3, #167	; 0xa7
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8007238:	2b03      	cmp	r3, #3
 800723a:	d10b      	bne.n	8007254 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	23ad      	movs	r3, #173	; 0xad
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	58d3      	ldr	r3, [r2, r3]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	220b      	movs	r2, #11
 8007248:	18ba      	adds	r2, r7, r2
 800724a:	7811      	ldrb	r1, [r2, #0]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	0010      	movs	r0, r2
 8007250:	4798      	blx	r3
 8007252:	e001      	b.n	8007258 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007254:	2302      	movs	r3, #2
 8007256:	e000      	b.n	800725a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	0018      	movs	r0, r3
 800725c:	46bd      	mov	sp, r7
 800725e:	b006      	add	sp, #24
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	2340      	movs	r3, #64	; 0x40
 800726e:	2200      	movs	r2, #0
 8007270:	2100      	movs	r1, #0
 8007272:	f001 faaf 	bl	80087d4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	23ac      	movs	r3, #172	; 0xac
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	2101      	movs	r1, #1
 800727e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	23b2      	movs	r3, #178	; 0xb2
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	2140      	movs	r1, #64	; 0x40
 8007288:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	2340      	movs	r3, #64	; 0x40
 800728e:	2200      	movs	r2, #0
 8007290:	2180      	movs	r1, #128	; 0x80
 8007292:	f001 fa9f 	bl	80087d4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2240      	movs	r2, #64	; 0x40
 80072a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	23a7      	movs	r3, #167	; 0xa7
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	2101      	movs	r1, #1
 80072aa:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	23a5      	movs	r3, #165	; 0xa5
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	2100      	movs	r1, #0
 80072b4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	23a9      	movs	r3, #169	; 0xa9
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	2100      	movs	r1, #0
 80072c4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	23ae      	movs	r3, #174	; 0xae
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	58d3      	ldr	r3, [r2, r3]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00a      	beq.n	80072e8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	23ad      	movs	r3, #173	; 0xad
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	58d3      	ldr	r3, [r2, r3]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	b2d9      	uxtb	r1, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	0018      	movs	r0, r3
 80072e6:	4790      	blx	r2
  }

  return USBD_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	0018      	movs	r0, r3
 80072ec:	46bd      	mov	sp, r7
 80072ee:	b002      	add	sp, #8
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b082      	sub	sp, #8
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	000a      	movs	r2, r1
 80072fc:	1cfb      	adds	r3, r7, #3
 80072fe:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	1cfa      	adds	r2, r7, #3
 8007304:	7812      	ldrb	r2, [r2, #0]
 8007306:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	0018      	movs	r0, r3
 800730c:	46bd      	mov	sp, r7
 800730e:	b002      	add	sp, #8
 8007310:	bd80      	pop	{r7, pc}
	...

08007314 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	23a7      	movs	r3, #167	; 0xa7
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	5cd1      	ldrb	r1, [r2, r3]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a06      	ldr	r2, [pc, #24]	; (8007340 <USBD_LL_Suspend+0x2c>)
 8007328:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	23a7      	movs	r3, #167	; 0xa7
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	2104      	movs	r1, #4
 8007332:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	0018      	movs	r0, r3
 8007338:	46bd      	mov	sp, r7
 800733a:	b002      	add	sp, #8
 800733c:	bd80      	pop	{r7, pc}
 800733e:	46c0      	nop			; (mov r8, r8)
 8007340:	0000029d 	.word	0x0000029d

08007344 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	23a7      	movs	r3, #167	; 0xa7
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	5cd3      	ldrb	r3, [r2, r3]
 8007354:	2b04      	cmp	r3, #4
 8007356:	d106      	bne.n	8007366 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a05      	ldr	r2, [pc, #20]	; (8007370 <USBD_LL_Resume+0x2c>)
 800735c:	5c99      	ldrb	r1, [r3, r2]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	23a7      	movs	r3, #167	; 0xa7
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	0018      	movs	r0, r3
 800736a:	46bd      	mov	sp, r7
 800736c:	b002      	add	sp, #8
 800736e:	bd80      	pop	{r7, pc}
 8007370:	0000029d 	.word	0x0000029d

08007374 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	23a7      	movs	r3, #167	; 0xa7
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	5cd3      	ldrb	r3, [r2, r3]
 8007384:	2b03      	cmp	r3, #3
 8007386:	d10e      	bne.n	80073a6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	23ad      	movs	r3, #173	; 0xad
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	58d3      	ldr	r3, [r2, r3]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d007      	beq.n	80073a6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	23ad      	movs	r3, #173	; 0xad
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	58d3      	ldr	r3, [r2, r3]
 800739e:	69db      	ldr	r3, [r3, #28]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	0010      	movs	r0, r2
 80073a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	0018      	movs	r0, r3
 80073aa:	46bd      	mov	sp, r7
 80073ac:	b002      	add	sp, #8
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ba:	230f      	movs	r3, #15
 80073bc:	18fb      	adds	r3, r7, r3
 80073be:	2200      	movs	r2, #0
 80073c0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	001a      	movs	r2, r3
 80073c8:	2360      	movs	r3, #96	; 0x60
 80073ca:	4013      	ands	r3, r2
 80073cc:	2b20      	cmp	r3, #32
 80073ce:	d004      	beq.n	80073da <USBD_StdDevReq+0x2a>
 80073d0:	2b40      	cmp	r3, #64	; 0x40
 80073d2:	d002      	beq.n	80073da <USBD_StdDevReq+0x2a>
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00a      	beq.n	80073ee <USBD_StdDevReq+0x3e>
 80073d8:	e04b      	b.n	8007472 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	23ad      	movs	r3, #173	; 0xad
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	58d3      	ldr	r3, [r2, r3]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	6839      	ldr	r1, [r7, #0]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	0010      	movs	r0, r2
 80073ea:	4798      	blx	r3
      break;
 80073ec:	e048      	b.n	8007480 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	785b      	ldrb	r3, [r3, #1]
 80073f2:	2b09      	cmp	r3, #9
 80073f4:	d835      	bhi.n	8007462 <USBD_StdDevReq+0xb2>
 80073f6:	009a      	lsls	r2, r3, #2
 80073f8:	4b25      	ldr	r3, [pc, #148]	; (8007490 <USBD_StdDevReq+0xe0>)
 80073fa:	18d3      	adds	r3, r2, r3
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	0011      	movs	r1, r2
 8007406:	0018      	movs	r0, r3
 8007408:	f000 fa5a 	bl	80078c0 <USBD_GetDescriptor>
          break;
 800740c:	e030      	b.n	8007470 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	0011      	movs	r1, r2
 8007414:	0018      	movs	r0, r3
 8007416:	f000 fc07 	bl	8007c28 <USBD_SetAddress>
          break;
 800741a:	e029      	b.n	8007470 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	0011      	movs	r1, r2
 8007422:	0018      	movs	r0, r3
 8007424:	f000 fc54 	bl	8007cd0 <USBD_SetConfig>
          break;
 8007428:	e022      	b.n	8007470 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	0011      	movs	r1, r2
 8007430:	0018      	movs	r0, r3
 8007432:	f000 fcf1 	bl	8007e18 <USBD_GetConfig>
          break;
 8007436:	e01b      	b.n	8007470 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	0011      	movs	r1, r2
 800743e:	0018      	movs	r0, r3
 8007440:	f000 fd24 	bl	8007e8c <USBD_GetStatus>
          break;
 8007444:	e014      	b.n	8007470 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	0011      	movs	r1, r2
 800744c:	0018      	movs	r0, r3
 800744e:	f000 fd57 	bl	8007f00 <USBD_SetFeature>
          break;
 8007452:	e00d      	b.n	8007470 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	0011      	movs	r1, r2
 800745a:	0018      	movs	r0, r3
 800745c:	f000 fd66 	bl	8007f2c <USBD_ClrFeature>
          break;
 8007460:	e006      	b.n	8007470 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	0011      	movs	r1, r2
 8007468:	0018      	movs	r0, r3
 800746a:	f000 fdc0 	bl	8007fee <USBD_CtlError>
          break;
 800746e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007470:	e006      	b.n	8007480 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	0011      	movs	r1, r2
 8007478:	0018      	movs	r0, r3
 800747a:	f000 fdb8 	bl	8007fee <USBD_CtlError>
      break;
 800747e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007480:	230f      	movs	r3, #15
 8007482:	18fb      	adds	r3, r7, r3
 8007484:	781b      	ldrb	r3, [r3, #0]
}
 8007486:	0018      	movs	r0, r3
 8007488:	46bd      	mov	sp, r7
 800748a:	b004      	add	sp, #16
 800748c:	bd80      	pop	{r7, pc}
 800748e:	46c0      	nop			; (mov r8, r8)
 8007490:	0800baa4 	.word	0x0800baa4

08007494 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007494:	b590      	push	{r4, r7, lr}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800749e:	230f      	movs	r3, #15
 80074a0:	18fb      	adds	r3, r7, r3
 80074a2:	2200      	movs	r2, #0
 80074a4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	001a      	movs	r2, r3
 80074ac:	2360      	movs	r3, #96	; 0x60
 80074ae:	4013      	ands	r3, r2
 80074b0:	2b20      	cmp	r3, #32
 80074b2:	d003      	beq.n	80074bc <USBD_StdItfReq+0x28>
 80074b4:	2b40      	cmp	r3, #64	; 0x40
 80074b6:	d001      	beq.n	80074bc <USBD_StdItfReq+0x28>
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d136      	bne.n	800752a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	23a7      	movs	r3, #167	; 0xa7
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	5cd3      	ldrb	r3, [r2, r3]
 80074c4:	3b01      	subs	r3, #1
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d826      	bhi.n	8007518 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	889b      	ldrh	r3, [r3, #4]
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d81a      	bhi.n	800750a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	23ad      	movs	r3, #173	; 0xad
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	58d3      	ldr	r3, [r2, r3]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	220f      	movs	r2, #15
 80074e0:	18bc      	adds	r4, r7, r2
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	0010      	movs	r0, r2
 80074e8:	4798      	blx	r3
 80074ea:	0003      	movs	r3, r0
 80074ec:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	88db      	ldrh	r3, [r3, #6]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d117      	bne.n	8007526 <USBD_StdItfReq+0x92>
 80074f6:	230f      	movs	r3, #15
 80074f8:	18fb      	adds	r3, r7, r3
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d112      	bne.n	8007526 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	0018      	movs	r0, r3
 8007504:	f000 fe5c 	bl	80081c0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007508:	e00d      	b.n	8007526 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	0011      	movs	r1, r2
 8007510:	0018      	movs	r0, r3
 8007512:	f000 fd6c 	bl	8007fee <USBD_CtlError>
          break;
 8007516:	e006      	b.n	8007526 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	0011      	movs	r1, r2
 800751e:	0018      	movs	r0, r3
 8007520:	f000 fd65 	bl	8007fee <USBD_CtlError>
          break;
 8007524:	e000      	b.n	8007528 <USBD_StdItfReq+0x94>
          break;
 8007526:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007528:	e006      	b.n	8007538 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	0011      	movs	r1, r2
 8007530:	0018      	movs	r0, r3
 8007532:	f000 fd5c 	bl	8007fee <USBD_CtlError>
      break;
 8007536:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	0018      	movs	r0, r3
 800753c:	46bd      	mov	sp, r7
 800753e:	b005      	add	sp, #20
 8007540:	bd90      	pop	{r4, r7, pc}

08007542 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007542:	b5b0      	push	{r4, r5, r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800754c:	230f      	movs	r3, #15
 800754e:	18fb      	adds	r3, r7, r3
 8007550:	2200      	movs	r2, #0
 8007552:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	889a      	ldrh	r2, [r3, #4]
 8007558:	230e      	movs	r3, #14
 800755a:	18fb      	adds	r3, r7, r3
 800755c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	001a      	movs	r2, r3
 8007564:	2360      	movs	r3, #96	; 0x60
 8007566:	4013      	ands	r3, r2
 8007568:	2b20      	cmp	r3, #32
 800756a:	d004      	beq.n	8007576 <USBD_StdEPReq+0x34>
 800756c:	2b40      	cmp	r3, #64	; 0x40
 800756e:	d002      	beq.n	8007576 <USBD_StdEPReq+0x34>
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00a      	beq.n	800758a <USBD_StdEPReq+0x48>
 8007574:	e195      	b.n	80078a2 <USBD_StdEPReq+0x360>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	23ad      	movs	r3, #173	; 0xad
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	58d3      	ldr	r3, [r2, r3]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	0010      	movs	r0, r2
 8007586:	4798      	blx	r3
      break;
 8007588:	e192      	b.n	80078b0 <USBD_StdEPReq+0x36e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	001a      	movs	r2, r3
 8007590:	2360      	movs	r3, #96	; 0x60
 8007592:	4013      	ands	r3, r2
 8007594:	2b20      	cmp	r3, #32
 8007596:	d10f      	bne.n	80075b8 <USBD_StdEPReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	23ad      	movs	r3, #173	; 0xad
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	58d3      	ldr	r3, [r2, r3]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	250f      	movs	r5, #15
 80075a4:	197c      	adds	r4, r7, r5
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	0010      	movs	r0, r2
 80075ac:	4798      	blx	r3
 80075ae:	0003      	movs	r3, r0
 80075b0:	7023      	strb	r3, [r4, #0]

        return ret;
 80075b2:	197b      	adds	r3, r7, r5
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	e17e      	b.n	80078b6 <USBD_StdEPReq+0x374>
      }

      switch (req->bRequest)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	785b      	ldrb	r3, [r3, #1]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d054      	beq.n	800766a <USBD_StdEPReq+0x128>
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d003      	beq.n	80075cc <USBD_StdEPReq+0x8a>
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d100      	bne.n	80075ca <USBD_StdEPReq+0x88>
 80075c8:	e097      	b.n	80076fa <USBD_StdEPReq+0x1b8>
 80075ca:	e162      	b.n	8007892 <USBD_StdEPReq+0x350>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	23a7      	movs	r3, #167	; 0xa7
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	5cd3      	ldrb	r3, [r2, r3]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d002      	beq.n	80075de <USBD_StdEPReq+0x9c>
 80075d8:	2b03      	cmp	r3, #3
 80075da:	d01f      	beq.n	800761c <USBD_StdEPReq+0xda>
 80075dc:	e03d      	b.n	800765a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075de:	230e      	movs	r3, #14
 80075e0:	18fb      	adds	r3, r7, r3
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d012      	beq.n	800760e <USBD_StdEPReq+0xcc>
 80075e8:	230e      	movs	r3, #14
 80075ea:	18fb      	adds	r3, r7, r3
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	2b80      	cmp	r3, #128	; 0x80
 80075f0:	d00d      	beq.n	800760e <USBD_StdEPReq+0xcc>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80075f2:	230e      	movs	r3, #14
 80075f4:	18fb      	adds	r3, r7, r3
 80075f6:	781a      	ldrb	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	0011      	movs	r1, r2
 80075fc:	0018      	movs	r0, r3
 80075fe:	f001 f94c 	bl	800889a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2180      	movs	r1, #128	; 0x80
 8007606:	0018      	movs	r0, r3
 8007608:	f001 f947 	bl	800889a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800760c:	e02c      	b.n	8007668 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	0011      	movs	r1, r2
 8007614:	0018      	movs	r0, r3
 8007616:	f000 fcea 	bl	8007fee <USBD_CtlError>
              break;
 800761a:	e025      	b.n	8007668 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	885b      	ldrh	r3, [r3, #2]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d115      	bne.n	8007650 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8007624:	230e      	movs	r3, #14
 8007626:	18fb      	adds	r3, r7, r3
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d010      	beq.n	8007650 <USBD_StdEPReq+0x10e>
 800762e:	230e      	movs	r3, #14
 8007630:	18fb      	adds	r3, r7, r3
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b80      	cmp	r3, #128	; 0x80
 8007636:	d00b      	beq.n	8007650 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	88db      	ldrh	r3, [r3, #6]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d107      	bne.n	8007650 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007640:	230e      	movs	r3, #14
 8007642:	18fb      	adds	r3, r7, r3
 8007644:	781a      	ldrb	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	0011      	movs	r1, r2
 800764a:	0018      	movs	r0, r3
 800764c:	f001 f925 	bl	800889a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	0018      	movs	r0, r3
 8007654:	f000 fdb4 	bl	80081c0 <USBD_CtlSendStatus>

              break;
 8007658:	e006      	b.n	8007668 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	0011      	movs	r1, r2
 8007660:	0018      	movs	r0, r3
 8007662:	f000 fcc4 	bl	8007fee <USBD_CtlError>
              break;
 8007666:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007668:	e11a      	b.n	80078a0 <USBD_StdEPReq+0x35e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	23a7      	movs	r3, #167	; 0xa7
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	5cd3      	ldrb	r3, [r2, r3]
 8007672:	2b02      	cmp	r3, #2
 8007674:	d002      	beq.n	800767c <USBD_StdEPReq+0x13a>
 8007676:	2b03      	cmp	r3, #3
 8007678:	d01f      	beq.n	80076ba <USBD_StdEPReq+0x178>
 800767a:	e035      	b.n	80076e8 <USBD_StdEPReq+0x1a6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800767c:	230e      	movs	r3, #14
 800767e:	18fb      	adds	r3, r7, r3
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d012      	beq.n	80076ac <USBD_StdEPReq+0x16a>
 8007686:	230e      	movs	r3, #14
 8007688:	18fb      	adds	r3, r7, r3
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	2b80      	cmp	r3, #128	; 0x80
 800768e:	d00d      	beq.n	80076ac <USBD_StdEPReq+0x16a>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007690:	230e      	movs	r3, #14
 8007692:	18fb      	adds	r3, r7, r3
 8007694:	781a      	ldrb	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	0011      	movs	r1, r2
 800769a:	0018      	movs	r0, r3
 800769c:	f001 f8fd 	bl	800889a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2180      	movs	r1, #128	; 0x80
 80076a4:	0018      	movs	r0, r3
 80076a6:	f001 f8f8 	bl	800889a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076aa:	e025      	b.n	80076f8 <USBD_StdEPReq+0x1b6>
                USBD_CtlError(pdev, req);
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	0011      	movs	r1, r2
 80076b2:	0018      	movs	r0, r3
 80076b4:	f000 fc9b 	bl	8007fee <USBD_CtlError>
              break;
 80076b8:	e01e      	b.n	80076f8 <USBD_StdEPReq+0x1b6>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	885b      	ldrh	r3, [r3, #2]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d119      	bne.n	80076f6 <USBD_StdEPReq+0x1b4>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80076c2:	230e      	movs	r3, #14
 80076c4:	18fb      	adds	r3, r7, r3
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	227f      	movs	r2, #127	; 0x7f
 80076ca:	4013      	ands	r3, r2
 80076cc:	d007      	beq.n	80076de <USBD_StdEPReq+0x19c>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80076ce:	230e      	movs	r3, #14
 80076d0:	18fb      	adds	r3, r7, r3
 80076d2:	781a      	ldrb	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	0011      	movs	r1, r2
 80076d8:	0018      	movs	r0, r3
 80076da:	f001 f90a 	bl	80088f2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	0018      	movs	r0, r3
 80076e2:	f000 fd6d 	bl	80081c0 <USBD_CtlSendStatus>
              }
              break;
 80076e6:	e006      	b.n	80076f6 <USBD_StdEPReq+0x1b4>

            default:
              USBD_CtlError(pdev, req);
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	0011      	movs	r1, r2
 80076ee:	0018      	movs	r0, r3
 80076f0:	f000 fc7d 	bl	8007fee <USBD_CtlError>
              break;
 80076f4:	e000      	b.n	80076f8 <USBD_StdEPReq+0x1b6>
              break;
 80076f6:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80076f8:	e0d2      	b.n	80078a0 <USBD_StdEPReq+0x35e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	23a7      	movs	r3, #167	; 0xa7
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	5cd3      	ldrb	r3, [r2, r3]
 8007702:	2b02      	cmp	r3, #2
 8007704:	d002      	beq.n	800770c <USBD_StdEPReq+0x1ca>
 8007706:	2b03      	cmp	r3, #3
 8007708:	d03e      	beq.n	8007788 <USBD_StdEPReq+0x246>
 800770a:	e0ba      	b.n	8007882 <USBD_StdEPReq+0x340>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800770c:	230e      	movs	r3, #14
 800770e:	18fb      	adds	r3, r7, r3
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00b      	beq.n	800772e <USBD_StdEPReq+0x1ec>
 8007716:	230e      	movs	r3, #14
 8007718:	18fb      	adds	r3, r7, r3
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b80      	cmp	r3, #128	; 0x80
 800771e:	d006      	beq.n	800772e <USBD_StdEPReq+0x1ec>
              {
                USBD_CtlError(pdev, req);
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	0011      	movs	r1, r2
 8007726:	0018      	movs	r0, r3
 8007728:	f000 fc61 	bl	8007fee <USBD_CtlError>
                break;
 800772c:	e0b0      	b.n	8007890 <USBD_StdEPReq+0x34e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800772e:	230e      	movs	r3, #14
 8007730:	18fb      	adds	r3, r7, r3
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	b25b      	sxtb	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	da0d      	bge.n	8007756 <USBD_StdEPReq+0x214>
 800773a:	230e      	movs	r3, #14
 800773c:	18fb      	adds	r3, r7, r3
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	227f      	movs	r2, #127	; 0x7f
 8007742:	401a      	ands	r2, r3
 8007744:	0013      	movs	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	189b      	adds	r3, r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	3310      	adds	r3, #16
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	18d3      	adds	r3, r2, r3
 8007752:	3304      	adds	r3, #4
 8007754:	e00d      	b.n	8007772 <USBD_StdEPReq+0x230>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007756:	230e      	movs	r3, #14
 8007758:	18fb      	adds	r3, r7, r3
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	227f      	movs	r2, #127	; 0x7f
 800775e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007760:	0013      	movs	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	189b      	adds	r3, r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	3351      	adds	r3, #81	; 0x51
 800776a:	33ff      	adds	r3, #255	; 0xff
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	18d3      	adds	r3, r2, r3
 8007770:	3304      	adds	r3, #4
 8007772:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800777a:	68b9      	ldr	r1, [r7, #8]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2202      	movs	r2, #2
 8007780:	0018      	movs	r0, r3
 8007782:	f000 fcb3 	bl	80080ec <USBD_CtlSendData>
              break;
 8007786:	e083      	b.n	8007890 <USBD_StdEPReq+0x34e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007788:	230e      	movs	r3, #14
 800778a:	18fb      	adds	r3, r7, r3
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	b25b      	sxtb	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	da15      	bge.n	80077c0 <USBD_StdEPReq+0x27e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007794:	230e      	movs	r3, #14
 8007796:	18fb      	adds	r3, r7, r3
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	220f      	movs	r2, #15
 800779c:	401a      	ands	r2, r3
 800779e:	6879      	ldr	r1, [r7, #4]
 80077a0:	0013      	movs	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	189b      	adds	r3, r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	18cb      	adds	r3, r1, r3
 80077aa:	3318      	adds	r3, #24
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d11e      	bne.n	80077f0 <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	0011      	movs	r1, r2
 80077b8:	0018      	movs	r0, r3
 80077ba:	f000 fc18 	bl	8007fee <USBD_CtlError>
                  break;
 80077be:	e067      	b.n	8007890 <USBD_StdEPReq+0x34e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077c0:	230e      	movs	r3, #14
 80077c2:	18fb      	adds	r3, r7, r3
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	220f      	movs	r2, #15
 80077c8:	401a      	ands	r2, r3
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	23ac      	movs	r3, #172	; 0xac
 80077ce:	0059      	lsls	r1, r3, #1
 80077d0:	0013      	movs	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	189b      	adds	r3, r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	18c3      	adds	r3, r0, r3
 80077da:	185b      	adds	r3, r3, r1
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d106      	bne.n	80077f0 <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	0011      	movs	r1, r2
 80077e8:	0018      	movs	r0, r3
 80077ea:	f000 fc00 	bl	8007fee <USBD_CtlError>
                  break;
 80077ee:	e04f      	b.n	8007890 <USBD_StdEPReq+0x34e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077f0:	230e      	movs	r3, #14
 80077f2:	18fb      	adds	r3, r7, r3
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	b25b      	sxtb	r3, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	da0d      	bge.n	8007818 <USBD_StdEPReq+0x2d6>
 80077fc:	230e      	movs	r3, #14
 80077fe:	18fb      	adds	r3, r7, r3
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	227f      	movs	r2, #127	; 0x7f
 8007804:	401a      	ands	r2, r3
 8007806:	0013      	movs	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	189b      	adds	r3, r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	3310      	adds	r3, #16
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	18d3      	adds	r3, r2, r3
 8007814:	3304      	adds	r3, #4
 8007816:	e00d      	b.n	8007834 <USBD_StdEPReq+0x2f2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007818:	230e      	movs	r3, #14
 800781a:	18fb      	adds	r3, r7, r3
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	227f      	movs	r2, #127	; 0x7f
 8007820:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007822:	0013      	movs	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	189b      	adds	r3, r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	3351      	adds	r3, #81	; 0x51
 800782c:	33ff      	adds	r3, #255	; 0xff
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	18d3      	adds	r3, r2, r3
 8007832:	3304      	adds	r3, #4
 8007834:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007836:	230e      	movs	r3, #14
 8007838:	18fb      	adds	r3, r7, r3
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d004      	beq.n	800784a <USBD_StdEPReq+0x308>
 8007840:	230e      	movs	r3, #14
 8007842:	18fb      	adds	r3, r7, r3
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b80      	cmp	r3, #128	; 0x80
 8007848:	d103      	bne.n	8007852 <USBD_StdEPReq+0x310>
              {
                pep->status = 0x0000U;
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2200      	movs	r2, #0
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	e010      	b.n	8007874 <USBD_StdEPReq+0x332>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007852:	230e      	movs	r3, #14
 8007854:	18fb      	adds	r3, r7, r3
 8007856:	781a      	ldrb	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	0011      	movs	r1, r2
 800785c:	0018      	movs	r0, r3
 800785e:	f001 f874 	bl	800894a <USBD_LL_IsStallEP>
 8007862:	1e03      	subs	r3, r0, #0
 8007864:	d003      	beq.n	800786e <USBD_StdEPReq+0x32c>
              {
                pep->status = 0x0001U;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2201      	movs	r2, #1
 800786a:	601a      	str	r2, [r3, #0]
 800786c:	e002      	b.n	8007874 <USBD_StdEPReq+0x332>
              }
              else
              {
                pep->status = 0x0000U;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2200      	movs	r2, #0
 8007872:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007874:	68b9      	ldr	r1, [r7, #8]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2202      	movs	r2, #2
 800787a:	0018      	movs	r0, r3
 800787c:	f000 fc36 	bl	80080ec <USBD_CtlSendData>
              break;
 8007880:	e006      	b.n	8007890 <USBD_StdEPReq+0x34e>

            default:
              USBD_CtlError(pdev, req);
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	0011      	movs	r1, r2
 8007888:	0018      	movs	r0, r3
 800788a:	f000 fbb0 	bl	8007fee <USBD_CtlError>
              break;
 800788e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007890:	e006      	b.n	80078a0 <USBD_StdEPReq+0x35e>

        default:
          USBD_CtlError(pdev, req);
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	0011      	movs	r1, r2
 8007898:	0018      	movs	r0, r3
 800789a:	f000 fba8 	bl	8007fee <USBD_CtlError>
          break;
 800789e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80078a0:	e006      	b.n	80078b0 <USBD_StdEPReq+0x36e>

    default:
      USBD_CtlError(pdev, req);
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	0011      	movs	r1, r2
 80078a8:	0018      	movs	r0, r3
 80078aa:	f000 fba0 	bl	8007fee <USBD_CtlError>
      break;
 80078ae:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80078b0:	230f      	movs	r3, #15
 80078b2:	18fb      	adds	r3, r7, r3
 80078b4:	781b      	ldrb	r3, [r3, #0]
}
 80078b6:	0018      	movs	r0, r3
 80078b8:	46bd      	mov	sp, r7
 80078ba:	b004      	add	sp, #16
 80078bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080078c0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078ca:	2308      	movs	r3, #8
 80078cc:	18fb      	adds	r3, r7, r3
 80078ce:	2200      	movs	r2, #0
 80078d0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078d6:	230b      	movs	r3, #11
 80078d8:	18fb      	adds	r3, r7, r3
 80078da:	2200      	movs	r2, #0
 80078dc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	885b      	ldrh	r3, [r3, #2]
 80078e2:	0a1b      	lsrs	r3, r3, #8
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	2b07      	cmp	r3, #7
 80078e8:	d900      	bls.n	80078ec <USBD_GetDescriptor+0x2c>
 80078ea:	e159      	b.n	8007ba0 <USBD_GetDescriptor+0x2e0>
 80078ec:	009a      	lsls	r2, r3, #2
 80078ee:	4bcc      	ldr	r3, [pc, #816]	; (8007c20 <USBD_GetDescriptor+0x360>)
 80078f0:	18d3      	adds	r3, r2, r3
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	23ac      	movs	r3, #172	; 0xac
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	58d3      	ldr	r3, [r2, r3]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	7c12      	ldrb	r2, [r2, #16]
 8007904:	2108      	movs	r1, #8
 8007906:	1879      	adds	r1, r7, r1
 8007908:	0010      	movs	r0, r2
 800790a:	4798      	blx	r3
 800790c:	0003      	movs	r3, r0
 800790e:	60fb      	str	r3, [r7, #12]
      break;
 8007910:	e153      	b.n	8007bba <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	7c1b      	ldrb	r3, [r3, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10f      	bne.n	800793a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	23ad      	movs	r3, #173	; 0xad
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	58d3      	ldr	r3, [r2, r3]
 8007922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007924:	2208      	movs	r2, #8
 8007926:	18ba      	adds	r2, r7, r2
 8007928:	0010      	movs	r0, r2
 800792a:	4798      	blx	r3
 800792c:	0003      	movs	r3, r0
 800792e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3301      	adds	r3, #1
 8007934:	2202      	movs	r2, #2
 8007936:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007938:	e13f      	b.n	8007bba <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	23ad      	movs	r3, #173	; 0xad
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	58d3      	ldr	r3, [r2, r3]
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	2208      	movs	r2, #8
 8007946:	18ba      	adds	r2, r7, r2
 8007948:	0010      	movs	r0, r2
 800794a:	4798      	blx	r3
 800794c:	0003      	movs	r3, r0
 800794e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3301      	adds	r3, #1
 8007954:	2202      	movs	r2, #2
 8007956:	701a      	strb	r2, [r3, #0]
      break;
 8007958:	e12f      	b.n	8007bba <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	885b      	ldrh	r3, [r3, #2]
 800795e:	b2db      	uxtb	r3, r3
 8007960:	2b05      	cmp	r3, #5
 8007962:	d900      	bls.n	8007966 <USBD_GetDescriptor+0xa6>
 8007964:	e0d0      	b.n	8007b08 <USBD_GetDescriptor+0x248>
 8007966:	009a      	lsls	r2, r3, #2
 8007968:	4bae      	ldr	r3, [pc, #696]	; (8007c24 <USBD_GetDescriptor+0x364>)
 800796a:	18d3      	adds	r3, r2, r3
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	23ac      	movs	r3, #172	; 0xac
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	58d3      	ldr	r3, [r2, r3]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00d      	beq.n	800799a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	23ac      	movs	r3, #172	; 0xac
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	58d3      	ldr	r3, [r2, r3]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	7c12      	ldrb	r2, [r2, #16]
 800798c:	2108      	movs	r1, #8
 800798e:	1879      	adds	r1, r7, r1
 8007990:	0010      	movs	r0, r2
 8007992:	4798      	blx	r3
 8007994:	0003      	movs	r3, r0
 8007996:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007998:	e0c3      	b.n	8007b22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	0011      	movs	r1, r2
 80079a0:	0018      	movs	r0, r3
 80079a2:	f000 fb24 	bl	8007fee <USBD_CtlError>
            err++;
 80079a6:	210b      	movs	r1, #11
 80079a8:	187b      	adds	r3, r7, r1
 80079aa:	781a      	ldrb	r2, [r3, #0]
 80079ac:	187b      	adds	r3, r7, r1
 80079ae:	3201      	adds	r2, #1
 80079b0:	701a      	strb	r2, [r3, #0]
          break;
 80079b2:	e0b6      	b.n	8007b22 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	23ac      	movs	r3, #172	; 0xac
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	58d3      	ldr	r3, [r2, r3]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00d      	beq.n	80079de <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	23ac      	movs	r3, #172	; 0xac
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	58d3      	ldr	r3, [r2, r3]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	7c12      	ldrb	r2, [r2, #16]
 80079d0:	2108      	movs	r1, #8
 80079d2:	1879      	adds	r1, r7, r1
 80079d4:	0010      	movs	r0, r2
 80079d6:	4798      	blx	r3
 80079d8:	0003      	movs	r3, r0
 80079da:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079dc:	e0a1      	b.n	8007b22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	0011      	movs	r1, r2
 80079e4:	0018      	movs	r0, r3
 80079e6:	f000 fb02 	bl	8007fee <USBD_CtlError>
            err++;
 80079ea:	210b      	movs	r1, #11
 80079ec:	187b      	adds	r3, r7, r1
 80079ee:	781a      	ldrb	r2, [r3, #0]
 80079f0:	187b      	adds	r3, r7, r1
 80079f2:	3201      	adds	r2, #1
 80079f4:	701a      	strb	r2, [r3, #0]
          break;
 80079f6:	e094      	b.n	8007b22 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	23ac      	movs	r3, #172	; 0xac
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	58d3      	ldr	r3, [r2, r3]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00d      	beq.n	8007a22 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	23ac      	movs	r3, #172	; 0xac
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	58d3      	ldr	r3, [r2, r3]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	7c12      	ldrb	r2, [r2, #16]
 8007a14:	2108      	movs	r1, #8
 8007a16:	1879      	adds	r1, r7, r1
 8007a18:	0010      	movs	r0, r2
 8007a1a:	4798      	blx	r3
 8007a1c:	0003      	movs	r3, r0
 8007a1e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a20:	e07f      	b.n	8007b22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	0011      	movs	r1, r2
 8007a28:	0018      	movs	r0, r3
 8007a2a:	f000 fae0 	bl	8007fee <USBD_CtlError>
            err++;
 8007a2e:	210b      	movs	r1, #11
 8007a30:	187b      	adds	r3, r7, r1
 8007a32:	781a      	ldrb	r2, [r3, #0]
 8007a34:	187b      	adds	r3, r7, r1
 8007a36:	3201      	adds	r2, #1
 8007a38:	701a      	strb	r2, [r3, #0]
          break;
 8007a3a:	e072      	b.n	8007b22 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	23ac      	movs	r3, #172	; 0xac
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	58d3      	ldr	r3, [r2, r3]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00d      	beq.n	8007a66 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	23ac      	movs	r3, #172	; 0xac
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	58d3      	ldr	r3, [r2, r3]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	7c12      	ldrb	r2, [r2, #16]
 8007a58:	2108      	movs	r1, #8
 8007a5a:	1879      	adds	r1, r7, r1
 8007a5c:	0010      	movs	r0, r2
 8007a5e:	4798      	blx	r3
 8007a60:	0003      	movs	r3, r0
 8007a62:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a64:	e05d      	b.n	8007b22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	0011      	movs	r1, r2
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	f000 fabe 	bl	8007fee <USBD_CtlError>
            err++;
 8007a72:	210b      	movs	r1, #11
 8007a74:	187b      	adds	r3, r7, r1
 8007a76:	781a      	ldrb	r2, [r3, #0]
 8007a78:	187b      	adds	r3, r7, r1
 8007a7a:	3201      	adds	r2, #1
 8007a7c:	701a      	strb	r2, [r3, #0]
          break;
 8007a7e:	e050      	b.n	8007b22 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	23ac      	movs	r3, #172	; 0xac
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	58d3      	ldr	r3, [r2, r3]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00d      	beq.n	8007aaa <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	23ac      	movs	r3, #172	; 0xac
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	58d3      	ldr	r3, [r2, r3]
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	7c12      	ldrb	r2, [r2, #16]
 8007a9c:	2108      	movs	r1, #8
 8007a9e:	1879      	adds	r1, r7, r1
 8007aa0:	0010      	movs	r0, r2
 8007aa2:	4798      	blx	r3
 8007aa4:	0003      	movs	r3, r0
 8007aa6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aa8:	e03b      	b.n	8007b22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	0011      	movs	r1, r2
 8007ab0:	0018      	movs	r0, r3
 8007ab2:	f000 fa9c 	bl	8007fee <USBD_CtlError>
            err++;
 8007ab6:	210b      	movs	r1, #11
 8007ab8:	187b      	adds	r3, r7, r1
 8007aba:	781a      	ldrb	r2, [r3, #0]
 8007abc:	187b      	adds	r3, r7, r1
 8007abe:	3201      	adds	r2, #1
 8007ac0:	701a      	strb	r2, [r3, #0]
          break;
 8007ac2:	e02e      	b.n	8007b22 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	23ac      	movs	r3, #172	; 0xac
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	58d3      	ldr	r3, [r2, r3]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00d      	beq.n	8007aee <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	23ac      	movs	r3, #172	; 0xac
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	58d3      	ldr	r3, [r2, r3]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	7c12      	ldrb	r2, [r2, #16]
 8007ae0:	2108      	movs	r1, #8
 8007ae2:	1879      	adds	r1, r7, r1
 8007ae4:	0010      	movs	r0, r2
 8007ae6:	4798      	blx	r3
 8007ae8:	0003      	movs	r3, r0
 8007aea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aec:	e019      	b.n	8007b22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	0011      	movs	r1, r2
 8007af4:	0018      	movs	r0, r3
 8007af6:	f000 fa7a 	bl	8007fee <USBD_CtlError>
            err++;
 8007afa:	210b      	movs	r1, #11
 8007afc:	187b      	adds	r3, r7, r1
 8007afe:	781a      	ldrb	r2, [r3, #0]
 8007b00:	187b      	adds	r3, r7, r1
 8007b02:	3201      	adds	r2, #1
 8007b04:	701a      	strb	r2, [r3, #0]
          break;
 8007b06:	e00c      	b.n	8007b22 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	0011      	movs	r1, r2
 8007b0e:	0018      	movs	r0, r3
 8007b10:	f000 fa6d 	bl	8007fee <USBD_CtlError>
          err++;
 8007b14:	210b      	movs	r1, #11
 8007b16:	187b      	adds	r3, r7, r1
 8007b18:	781a      	ldrb	r2, [r3, #0]
 8007b1a:	187b      	adds	r3, r7, r1
 8007b1c:	3201      	adds	r2, #1
 8007b1e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8007b20:	e04b      	b.n	8007bba <USBD_GetDescriptor+0x2fa>
 8007b22:	e04a      	b.n	8007bba <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	7c1b      	ldrb	r3, [r3, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10b      	bne.n	8007b44 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	23ad      	movs	r3, #173	; 0xad
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	58d3      	ldr	r3, [r2, r3]
 8007b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b36:	2208      	movs	r2, #8
 8007b38:	18ba      	adds	r2, r7, r2
 8007b3a:	0010      	movs	r0, r2
 8007b3c:	4798      	blx	r3
 8007b3e:	0003      	movs	r3, r0
 8007b40:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b42:	e03a      	b.n	8007bba <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	0011      	movs	r1, r2
 8007b4a:	0018      	movs	r0, r3
 8007b4c:	f000 fa4f 	bl	8007fee <USBD_CtlError>
        err++;
 8007b50:	210b      	movs	r1, #11
 8007b52:	187b      	adds	r3, r7, r1
 8007b54:	781a      	ldrb	r2, [r3, #0]
 8007b56:	187b      	adds	r3, r7, r1
 8007b58:	3201      	adds	r2, #1
 8007b5a:	701a      	strb	r2, [r3, #0]
      break;
 8007b5c:	e02d      	b.n	8007bba <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	7c1b      	ldrb	r3, [r3, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10f      	bne.n	8007b86 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	23ad      	movs	r3, #173	; 0xad
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	58d3      	ldr	r3, [r2, r3]
 8007b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b70:	2208      	movs	r2, #8
 8007b72:	18ba      	adds	r2, r7, r2
 8007b74:	0010      	movs	r0, r2
 8007b76:	4798      	blx	r3
 8007b78:	0003      	movs	r3, r0
 8007b7a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	2207      	movs	r2, #7
 8007b82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b84:	e019      	b.n	8007bba <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	0011      	movs	r1, r2
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	f000 fa2e 	bl	8007fee <USBD_CtlError>
        err++;
 8007b92:	210b      	movs	r1, #11
 8007b94:	187b      	adds	r3, r7, r1
 8007b96:	781a      	ldrb	r2, [r3, #0]
 8007b98:	187b      	adds	r3, r7, r1
 8007b9a:	3201      	adds	r2, #1
 8007b9c:	701a      	strb	r2, [r3, #0]
      break;
 8007b9e:	e00c      	b.n	8007bba <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	0011      	movs	r1, r2
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	f000 fa21 	bl	8007fee <USBD_CtlError>
      err++;
 8007bac:	210b      	movs	r1, #11
 8007bae:	187b      	adds	r3, r7, r1
 8007bb0:	781a      	ldrb	r2, [r3, #0]
 8007bb2:	187b      	adds	r3, r7, r1
 8007bb4:	3201      	adds	r2, #1
 8007bb6:	701a      	strb	r2, [r3, #0]
      break;
 8007bb8:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8007bba:	230b      	movs	r3, #11
 8007bbc:	18fb      	adds	r3, r7, r3
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d128      	bne.n	8007c16 <USBD_GetDescriptor+0x356>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007bc4:	2308      	movs	r3, #8
 8007bc6:	18fb      	adds	r3, r7, r3
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d01a      	beq.n	8007c04 <USBD_GetDescriptor+0x344>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	88db      	ldrh	r3, [r3, #6]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d016      	beq.n	8007c04 <USBD_GetDescriptor+0x344>
    {
      len = MIN(len, req->wLength);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	88da      	ldrh	r2, [r3, #6]
 8007bda:	2308      	movs	r3, #8
 8007bdc:	18fb      	adds	r3, r7, r3
 8007bde:	881b      	ldrh	r3, [r3, #0]
 8007be0:	1c18      	adds	r0, r3, #0
 8007be2:	1c11      	adds	r1, r2, #0
 8007be4:	b28a      	uxth	r2, r1
 8007be6:	b283      	uxth	r3, r0
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d900      	bls.n	8007bee <USBD_GetDescriptor+0x32e>
 8007bec:	1c01      	adds	r1, r0, #0
 8007bee:	b28a      	uxth	r2, r1
 8007bf0:	2108      	movs	r1, #8
 8007bf2:	187b      	adds	r3, r7, r1
 8007bf4:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007bf6:	187b      	adds	r3, r7, r1
 8007bf8:	881a      	ldrh	r2, [r3, #0]
 8007bfa:	68f9      	ldr	r1, [r7, #12]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	0018      	movs	r0, r3
 8007c00:	f000 fa74 	bl	80080ec <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	88db      	ldrh	r3, [r3, #6]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d105      	bne.n	8007c18 <USBD_GetDescriptor+0x358>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	0018      	movs	r0, r3
 8007c10:	f000 fad6 	bl	80081c0 <USBD_CtlSendStatus>
 8007c14:	e000      	b.n	8007c18 <USBD_GetDescriptor+0x358>
    return;
 8007c16:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	b004      	add	sp, #16
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	46c0      	nop			; (mov r8, r8)
 8007c20:	0800bacc 	.word	0x0800bacc
 8007c24:	0800baec 	.word	0x0800baec

08007c28 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c28:	b590      	push	{r4, r7, lr}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	889b      	ldrh	r3, [r3, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d13d      	bne.n	8007cb6 <USBD_SetAddress+0x8e>
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	88db      	ldrh	r3, [r3, #6]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d139      	bne.n	8007cb6 <USBD_SetAddress+0x8e>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	885b      	ldrh	r3, [r3, #2]
 8007c46:	2b7f      	cmp	r3, #127	; 0x7f
 8007c48:	d835      	bhi.n	8007cb6 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	885b      	ldrh	r3, [r3, #2]
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	230f      	movs	r3, #15
 8007c52:	18fb      	adds	r3, r7, r3
 8007c54:	217f      	movs	r1, #127	; 0x7f
 8007c56:	400a      	ands	r2, r1
 8007c58:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	23a7      	movs	r3, #167	; 0xa7
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	5cd3      	ldrb	r3, [r2, r3]
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d106      	bne.n	8007c74 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	0011      	movs	r1, r2
 8007c6c:	0018      	movs	r0, r3
 8007c6e:	f000 f9be 	bl	8007fee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c72:	e026      	b.n	8007cc2 <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	240f      	movs	r4, #15
 8007c78:	193a      	adds	r2, r7, r4
 8007c7a:	4914      	ldr	r1, [pc, #80]	; (8007ccc <USBD_SetAddress+0xa4>)
 8007c7c:	7812      	ldrb	r2, [r2, #0]
 8007c7e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c80:	193b      	adds	r3, r7, r4
 8007c82:	781a      	ldrb	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	0011      	movs	r1, r2
 8007c88:	0018      	movs	r0, r3
 8007c8a:	f000 fe89 	bl	80089a0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	0018      	movs	r0, r3
 8007c92:	f000 fa95 	bl	80081c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c96:	193b      	adds	r3, r7, r4
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d005      	beq.n	8007caa <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	23a7      	movs	r3, #167	; 0xa7
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	2102      	movs	r1, #2
 8007ca6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ca8:	e00b      	b.n	8007cc2 <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	23a7      	movs	r3, #167	; 0xa7
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cb4:	e005      	b.n	8007cc2 <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	0011      	movs	r1, r2
 8007cbc:	0018      	movs	r0, r3
 8007cbe:	f000 f996 	bl	8007fee <USBD_CtlError>
  }
}
 8007cc2:	46c0      	nop			; (mov r8, r8)
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	b005      	add	sp, #20
 8007cc8:	bd90      	pop	{r4, r7, pc}
 8007cca:	46c0      	nop			; (mov r8, r8)
 8007ccc:	0000029e 	.word	0x0000029e

08007cd0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	885b      	ldrh	r3, [r3, #2]
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	4b4c      	ldr	r3, [pc, #304]	; (8007e14 <USBD_SetConfig+0x144>)
 8007ce2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ce4:	4b4b      	ldr	r3, [pc, #300]	; (8007e14 <USBD_SetConfig+0x144>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d906      	bls.n	8007cfa <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	0011      	movs	r1, r2
 8007cf2:	0018      	movs	r0, r3
 8007cf4:	f000 f97b 	bl	8007fee <USBD_CtlError>
 8007cf8:	e088      	b.n	8007e0c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	23a7      	movs	r3, #167	; 0xa7
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	5cd3      	ldrb	r3, [r2, r3]
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d002      	beq.n	8007d0c <USBD_SetConfig+0x3c>
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d029      	beq.n	8007d5e <USBD_SetConfig+0x8e>
 8007d0a:	e071      	b.n	8007df0 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007d0c:	4b41      	ldr	r3, [pc, #260]	; (8007e14 <USBD_SetConfig+0x144>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d01f      	beq.n	8007d54 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8007d14:	4b3f      	ldr	r3, [pc, #252]	; (8007e14 <USBD_SetConfig+0x144>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	001a      	movs	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	23a7      	movs	r3, #167	; 0xa7
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	2103      	movs	r1, #3
 8007d26:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d28:	4b3a      	ldr	r3, [pc, #232]	; (8007e14 <USBD_SetConfig+0x144>)
 8007d2a:	781a      	ldrb	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	0011      	movs	r1, r2
 8007d30:	0018      	movs	r0, r3
 8007d32:	f7ff f8bd 	bl	8006eb0 <USBD_SetClassConfig>
 8007d36:	0003      	movs	r3, r0
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d106      	bne.n	8007d4a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	0011      	movs	r1, r2
 8007d42:	0018      	movs	r0, r3
 8007d44:	f000 f953 	bl	8007fee <USBD_CtlError>
            return;
 8007d48:	e060      	b.n	8007e0c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	0018      	movs	r0, r3
 8007d4e:	f000 fa37 	bl	80081c0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007d52:	e05b      	b.n	8007e0c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	0018      	movs	r0, r3
 8007d58:	f000 fa32 	bl	80081c0 <USBD_CtlSendStatus>
        break;
 8007d5c:	e056      	b.n	8007e0c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007d5e:	4b2d      	ldr	r3, [pc, #180]	; (8007e14 <USBD_SetConfig+0x144>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d115      	bne.n	8007d92 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	23a7      	movs	r3, #167	; 0xa7
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	2102      	movs	r1, #2
 8007d6e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8007d70:	4b28      	ldr	r3, [pc, #160]	; (8007e14 <USBD_SetConfig+0x144>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	001a      	movs	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007d7a:	4b26      	ldr	r3, [pc, #152]	; (8007e14 <USBD_SetConfig+0x144>)
 8007d7c:	781a      	ldrb	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	0011      	movs	r1, r2
 8007d82:	0018      	movs	r0, r3
 8007d84:	f7ff f8bc 	bl	8006f00 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	0018      	movs	r0, r3
 8007d8c:	f000 fa18 	bl	80081c0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007d90:	e03c      	b.n	8007e0c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8007d92:	4b20      	ldr	r3, [pc, #128]	; (8007e14 <USBD_SetConfig+0x144>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	001a      	movs	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d022      	beq.n	8007de6 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	0011      	movs	r1, r2
 8007daa:	0018      	movs	r0, r3
 8007dac:	f7ff f8a8 	bl	8006f00 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007db0:	4b18      	ldr	r3, [pc, #96]	; (8007e14 <USBD_SetConfig+0x144>)
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	001a      	movs	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007dba:	4b16      	ldr	r3, [pc, #88]	; (8007e14 <USBD_SetConfig+0x144>)
 8007dbc:	781a      	ldrb	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	0011      	movs	r1, r2
 8007dc2:	0018      	movs	r0, r3
 8007dc4:	f7ff f874 	bl	8006eb0 <USBD_SetClassConfig>
 8007dc8:	0003      	movs	r3, r0
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d106      	bne.n	8007ddc <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	0011      	movs	r1, r2
 8007dd4:	0018      	movs	r0, r3
 8007dd6:	f000 f90a 	bl	8007fee <USBD_CtlError>
            return;
 8007dda:	e017      	b.n	8007e0c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	0018      	movs	r0, r3
 8007de0:	f000 f9ee 	bl	80081c0 <USBD_CtlSendStatus>
        break;
 8007de4:	e012      	b.n	8007e0c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	0018      	movs	r0, r3
 8007dea:	f000 f9e9 	bl	80081c0 <USBD_CtlSendStatus>
        break;
 8007dee:	e00d      	b.n	8007e0c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	0011      	movs	r1, r2
 8007df6:	0018      	movs	r0, r3
 8007df8:	f000 f8f9 	bl	8007fee <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <USBD_SetConfig+0x144>)
 8007dfe:	781a      	ldrb	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	0011      	movs	r1, r2
 8007e04:	0018      	movs	r0, r3
 8007e06:	f7ff f87b 	bl	8006f00 <USBD_ClrClassConfig>
        break;
 8007e0a:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	b002      	add	sp, #8
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	46c0      	nop			; (mov r8, r8)
 8007e14:	200003c0 	.word	0x200003c0

08007e18 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	88db      	ldrh	r3, [r3, #6]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d006      	beq.n	8007e38 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	0011      	movs	r1, r2
 8007e30:	0018      	movs	r0, r3
 8007e32:	f000 f8dc 	bl	8007fee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e36:	e025      	b.n	8007e84 <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	23a7      	movs	r3, #167	; 0xa7
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	5cd3      	ldrb	r3, [r2, r3]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	db18      	blt.n	8007e76 <USBD_GetConfig+0x5e>
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	dd02      	ble.n	8007e4e <USBD_GetConfig+0x36>
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	d00c      	beq.n	8007e66 <USBD_GetConfig+0x4e>
 8007e4c:	e013      	b.n	8007e76 <USBD_GetConfig+0x5e>
        pdev->dev_default_config = 0U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3308      	adds	r3, #8
 8007e58:	0019      	movs	r1, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	0018      	movs	r0, r3
 8007e60:	f000 f944 	bl	80080ec <USBD_CtlSendData>
        break;
 8007e64:	e00e      	b.n	8007e84 <USBD_GetConfig+0x6c>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	1d19      	adds	r1, r3, #4
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	0018      	movs	r0, r3
 8007e70:	f000 f93c 	bl	80080ec <USBD_CtlSendData>
        break;
 8007e74:	e006      	b.n	8007e84 <USBD_GetConfig+0x6c>
        USBD_CtlError(pdev, req);
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	0011      	movs	r1, r2
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	f000 f8b6 	bl	8007fee <USBD_CtlError>
        break;
 8007e82:	46c0      	nop			; (mov r8, r8)
}
 8007e84:	46c0      	nop			; (mov r8, r8)
 8007e86:	46bd      	mov	sp, r7
 8007e88:	b002      	add	sp, #8
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	23a7      	movs	r3, #167	; 0xa7
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	5cd3      	ldrb	r3, [r2, r3]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d822      	bhi.n	8007eea <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	88db      	ldrh	r3, [r3, #6]
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d006      	beq.n	8007eba <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8007eac:	683a      	ldr	r2, [r7, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	0011      	movs	r1, r2
 8007eb2:	0018      	movs	r0, r3
 8007eb4:	f000 f89b 	bl	8007fee <USBD_CtlError>
        break;
 8007eb8:	e01e      	b.n	8007ef8 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	23a9      	movs	r3, #169	; 0xa9
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	58d3      	ldr	r3, [r2, r3]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d005      	beq.n	8007ed8 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	330c      	adds	r3, #12
 8007edc:	0019      	movs	r1, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	0018      	movs	r0, r3
 8007ee4:	f000 f902 	bl	80080ec <USBD_CtlSendData>
      break;
 8007ee8:	e006      	b.n	8007ef8 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	0011      	movs	r1, r2
 8007ef0:	0018      	movs	r0, r3
 8007ef2:	f000 f87c 	bl	8007fee <USBD_CtlError>
      break;
 8007ef6:	46c0      	nop			; (mov r8, r8)
  }
}
 8007ef8:	46c0      	nop			; (mov r8, r8)
 8007efa:	46bd      	mov	sp, r7
 8007efc:	b002      	add	sp, #8
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	885b      	ldrh	r3, [r3, #2]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d108      	bne.n	8007f24 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	23a9      	movs	r3, #169	; 0xa9
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	2101      	movs	r1, #1
 8007f1a:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	0018      	movs	r0, r3
 8007f20:	f000 f94e 	bl	80081c0 <USBD_CtlSendStatus>
  }
}
 8007f24:	46c0      	nop			; (mov r8, r8)
 8007f26:	46bd      	mov	sp, r7
 8007f28:	b002      	add	sp, #8
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	23a7      	movs	r3, #167	; 0xa7
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	5cd3      	ldrb	r3, [r2, r3]
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d80d      	bhi.n	8007f60 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	885b      	ldrh	r3, [r3, #2]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d110      	bne.n	8007f6e <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	23a9      	movs	r3, #169	; 0xa9
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	2100      	movs	r1, #0
 8007f54:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	0018      	movs	r0, r3
 8007f5a:	f000 f931 	bl	80081c0 <USBD_CtlSendStatus>
      }
      break;
 8007f5e:	e006      	b.n	8007f6e <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	0011      	movs	r1, r2
 8007f66:	0018      	movs	r0, r3
 8007f68:	f000 f841 	bl	8007fee <USBD_CtlError>
      break;
 8007f6c:	e000      	b.n	8007f70 <USBD_ClrFeature+0x44>
      break;
 8007f6e:	46c0      	nop			; (mov r8, r8)
  }
}
 8007f70:	46c0      	nop			; (mov r8, r8)
 8007f72:	46bd      	mov	sp, r7
 8007f74:	b002      	add	sp, #8
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	781a      	ldrb	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	785a      	ldrb	r2, [r3, #1]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	3302      	adds	r3, #2
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	3303      	adds	r3, #3
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	021b      	lsls	r3, r3, #8
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	18d3      	adds	r3, r2, r3
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	3304      	adds	r3, #4
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	3305      	adds	r3, #5
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	021b      	lsls	r3, r3, #8
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	18d3      	adds	r3, r2, r3
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	3306      	adds	r3, #6
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	3307      	adds	r3, #7
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	021b      	lsls	r3, r3, #8
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	18d3      	adds	r3, r2, r3
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	80da      	strh	r2, [r3, #6]

}
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	b002      	add	sp, #8
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2180      	movs	r1, #128	; 0x80
 8007ffc:	0018      	movs	r0, r3
 8007ffe:	f000 fc4c 	bl	800889a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2100      	movs	r1, #0
 8008006:	0018      	movs	r0, r3
 8008008:	f000 fc47 	bl	800889a <USBD_LL_StallEP>
}
 800800c:	46c0      	nop			; (mov r8, r8)
 800800e:	46bd      	mov	sp, r7
 8008010:	b002      	add	sp, #8
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008014:	b590      	push	{r4, r7, lr}
 8008016:	b087      	sub	sp, #28
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008020:	2317      	movs	r3, #23
 8008022:	18fb      	adds	r3, r7, r3
 8008024:	2200      	movs	r2, #0
 8008026:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d03d      	beq.n	80080aa <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	0018      	movs	r0, r3
 8008032:	f000 f83e 	bl	80080b2 <USBD_GetLen>
 8008036:	0003      	movs	r3, r0
 8008038:	3301      	adds	r3, #1
 800803a:	b29b      	uxth	r3, r3
 800803c:	18db      	adds	r3, r3, r3
 800803e:	b29a      	uxth	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008044:	2017      	movs	r0, #23
 8008046:	183b      	adds	r3, r7, r0
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	183a      	adds	r2, r7, r0
 800804c:	1c59      	adds	r1, r3, #1
 800804e:	7011      	strb	r1, [r2, #0]
 8008050:	001a      	movs	r2, r3
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	189b      	adds	r3, r3, r2
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	7812      	ldrb	r2, [r2, #0]
 800805a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800805c:	183b      	adds	r3, r7, r0
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	183a      	adds	r2, r7, r0
 8008062:	1c59      	adds	r1, r3, #1
 8008064:	7011      	strb	r1, [r2, #0]
 8008066:	001a      	movs	r2, r3
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	189b      	adds	r3, r3, r2
 800806c:	2203      	movs	r2, #3
 800806e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008070:	e017      	b.n	80080a2 <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	60fa      	str	r2, [r7, #12]
 8008078:	2417      	movs	r4, #23
 800807a:	193a      	adds	r2, r7, r4
 800807c:	7812      	ldrb	r2, [r2, #0]
 800807e:	1939      	adds	r1, r7, r4
 8008080:	1c50      	adds	r0, r2, #1
 8008082:	7008      	strb	r0, [r1, #0]
 8008084:	0011      	movs	r1, r2
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	1852      	adds	r2, r2, r1
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800808e:	193b      	adds	r3, r7, r4
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	193a      	adds	r2, r7, r4
 8008094:	1c59      	adds	r1, r3, #1
 8008096:	7011      	strb	r1, [r2, #0]
 8008098:	001a      	movs	r2, r3
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	189b      	adds	r3, r3, r2
 800809e:	2200      	movs	r2, #0
 80080a0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1e3      	bne.n	8008072 <USBD_GetString+0x5e>
    }
  }
}
 80080aa:	46c0      	nop			; (mov r8, r8)
 80080ac:	46bd      	mov	sp, r7
 80080ae:	b007      	add	sp, #28
 80080b0:	bd90      	pop	{r4, r7, pc}

080080b2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080ba:	230f      	movs	r3, #15
 80080bc:	18fb      	adds	r3, r7, r3
 80080be:	2200      	movs	r2, #0
 80080c0:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80080c2:	e008      	b.n	80080d6 <USBD_GetLen+0x24>
  {
    len++;
 80080c4:	210f      	movs	r1, #15
 80080c6:	187b      	adds	r3, r7, r1
 80080c8:	781a      	ldrb	r2, [r3, #0]
 80080ca:	187b      	adds	r3, r7, r1
 80080cc:	3201      	adds	r2, #1
 80080ce:	701a      	strb	r2, [r3, #0]
    buf++;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3301      	adds	r3, #1
 80080d4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1f2      	bne.n	80080c4 <USBD_GetLen+0x12>
  }

  return len;
 80080de:	230f      	movs	r3, #15
 80080e0:	18fb      	adds	r3, r7, r3
 80080e2:	781b      	ldrb	r3, [r3, #0]
}
 80080e4:	0018      	movs	r0, r3
 80080e6:	46bd      	mov	sp, r7
 80080e8:	b004      	add	sp, #16
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	1dbb      	adds	r3, r7, #6
 80080f8:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	23a5      	movs	r3, #165	; 0xa5
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	2102      	movs	r1, #2
 8008102:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8008104:	1dbb      	adds	r3, r7, #6
 8008106:	881a      	ldrh	r2, [r3, #0]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800810c:	1dbb      	adds	r3, r7, #6
 800810e:	881a      	ldrh	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008114:	1dbb      	adds	r3, r7, #6
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	2100      	movs	r1, #0
 800811e:	f000 fc6b 	bl	80089f8 <USBD_LL_Transmit>

  return USBD_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	0018      	movs	r0, r3
 8008126:	46bd      	mov	sp, r7
 8008128:	b004      	add	sp, #16
 800812a:	bd80      	pop	{r7, pc}

0800812c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	1dbb      	adds	r3, r7, #6
 8008138:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800813a:	1dbb      	adds	r3, r7, #6
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	2100      	movs	r1, #0
 8008144:	f000 fc58 	bl	80089f8 <USBD_LL_Transmit>

  return USBD_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	0018      	movs	r0, r3
 800814c:	46bd      	mov	sp, r7
 800814e:	b004      	add	sp, #16
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b084      	sub	sp, #16
 8008156:	af00      	add	r7, sp, #0
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	1dbb      	adds	r3, r7, #6
 800815e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	23a5      	movs	r3, #165	; 0xa5
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	2103      	movs	r1, #3
 8008168:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800816a:	1dbb      	adds	r3, r7, #6
 800816c:	8819      	ldrh	r1, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	23ae      	movs	r3, #174	; 0xae
 8008172:	005b      	lsls	r3, r3, #1
 8008174:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8008176:	1dbb      	adds	r3, r7, #6
 8008178:	8819      	ldrh	r1, [r3, #0]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	23b0      	movs	r3, #176	; 0xb0
 800817e:	005b      	lsls	r3, r3, #1
 8008180:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008182:	1dbb      	adds	r3, r7, #6
 8008184:	881b      	ldrh	r3, [r3, #0]
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	2100      	movs	r1, #0
 800818c:	f000 fc6c 	bl	8008a68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	0018      	movs	r0, r3
 8008194:	46bd      	mov	sp, r7
 8008196:	b004      	add	sp, #16
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b084      	sub	sp, #16
 800819e:	af00      	add	r7, sp, #0
 80081a0:	60f8      	str	r0, [r7, #12]
 80081a2:	60b9      	str	r1, [r7, #8]
 80081a4:	1dbb      	adds	r3, r7, #6
 80081a6:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081a8:	1dbb      	adds	r3, r7, #6
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	2100      	movs	r1, #0
 80081b2:	f000 fc59 	bl	8008a68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	0018      	movs	r0, r3
 80081ba:	46bd      	mov	sp, r7
 80081bc:	b004      	add	sp, #16
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	23a5      	movs	r3, #165	; 0xa5
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	2104      	movs	r1, #4
 80081d0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	2300      	movs	r3, #0
 80081d6:	2200      	movs	r2, #0
 80081d8:	2100      	movs	r1, #0
 80081da:	f000 fc0d 	bl	80089f8 <USBD_LL_Transmit>

  return USBD_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	0018      	movs	r0, r3
 80081e2:	46bd      	mov	sp, r7
 80081e4:	b002      	add	sp, #8
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	23a5      	movs	r3, #165	; 0xa5
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	2105      	movs	r1, #5
 80081f8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	2300      	movs	r3, #0
 80081fe:	2200      	movs	r2, #0
 8008200:	2100      	movs	r1, #0
 8008202:	f000 fc31 	bl	8008a68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	0018      	movs	r0, r3
 800820a:	46bd      	mov	sp, r7
 800820c:	b002      	add	sp, #8
 800820e:	bd80      	pop	{r7, pc}

08008210 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008214:	4914      	ldr	r1, [pc, #80]	; (8008268 <MX_USB_DEVICE_Init+0x58>)
 8008216:	4b15      	ldr	r3, [pc, #84]	; (800826c <MX_USB_DEVICE_Init+0x5c>)
 8008218:	2200      	movs	r2, #0
 800821a:	0018      	movs	r0, r3
 800821c:	f7fe fde0 	bl	8006de0 <USBD_Init>
 8008220:	1e03      	subs	r3, r0, #0
 8008222:	d001      	beq.n	8008228 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008224:	f7fa f9c0 	bl	80025a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8008228:	4a11      	ldr	r2, [pc, #68]	; (8008270 <MX_USB_DEVICE_Init+0x60>)
 800822a:	4b10      	ldr	r3, [pc, #64]	; (800826c <MX_USB_DEVICE_Init+0x5c>)
 800822c:	0011      	movs	r1, r2
 800822e:	0018      	movs	r0, r3
 8008230:	f7fe fe07 	bl	8006e42 <USBD_RegisterClass>
 8008234:	1e03      	subs	r3, r0, #0
 8008236:	d001      	beq.n	800823c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8008238:	f7fa f9b6 	bl	80025a8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800823c:	4a0d      	ldr	r2, [pc, #52]	; (8008274 <MX_USB_DEVICE_Init+0x64>)
 800823e:	4b0b      	ldr	r3, [pc, #44]	; (800826c <MX_USB_DEVICE_Init+0x5c>)
 8008240:	0011      	movs	r1, r2
 8008242:	0018      	movs	r0, r3
 8008244:	f7fe fdb0 	bl	8006da8 <USBD_CUSTOM_HID_RegisterInterface>
 8008248:	1e03      	subs	r3, r0, #0
 800824a:	d001      	beq.n	8008250 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800824c:	f7fa f9ac 	bl	80025a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008250:	4b06      	ldr	r3, [pc, #24]	; (800826c <MX_USB_DEVICE_Init+0x5c>)
 8008252:	0018      	movs	r0, r3
 8008254:	f7fe fe16 	bl	8006e84 <USBD_Start>
 8008258:	1e03      	subs	r3, r0, #0
 800825a:	d001      	beq.n	8008260 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800825c:	f7fa f9a4 	bl	80025a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008260:	46c0      	nop			; (mov r8, r8)
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	46c0      	nop			; (mov r8, r8)
 8008268:	20000114 	.word	0x20000114
 800826c:	200005ac 	.word	0x200005ac
 8008270:	2000000c 	.word	0x2000000c
 8008274:	20000104 	.word	0x20000104

08008278 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800827c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800827e:	0018      	movs	r0, r3
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008288:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800828a:	0018      	movs	r0, r3
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	0002      	movs	r2, r0
 8008298:	1dfb      	adds	r3, r7, #7
 800829a:	701a      	strb	r2, [r3, #0]
 800829c:	1dbb      	adds	r3, r7, #6
 800829e:	1c0a      	adds	r2, r1, #0
 80082a0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 6 */

	USB_Receive_Callback(event_idx, state);
 80082a2:	1dbb      	adds	r3, r7, #6
 80082a4:	781a      	ldrb	r2, [r3, #0]
 80082a6:	1dfb      	adds	r3, r7, #7
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	0011      	movs	r1, r2
 80082ac:	0018      	movs	r0, r3
 80082ae:	f7fa f835 	bl	800231c <USB_Receive_Callback>

	return (USBD_OK);
 80082b2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80082b4:	0018      	movs	r0, r3
 80082b6:	46bd      	mov	sp, r7
 80082b8:	b002      	add	sp, #8
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	0002      	movs	r2, r0
 80082c4:	6039      	str	r1, [r7, #0]
 80082c6:	1dfb      	adds	r3, r7, #7
 80082c8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	2212      	movs	r2, #18
 80082ce:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80082d0:	4b02      	ldr	r3, [pc, #8]	; (80082dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80082d2:	0018      	movs	r0, r3
 80082d4:	46bd      	mov	sp, r7
 80082d6:	b002      	add	sp, #8
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	46c0      	nop			; (mov r8, r8)
 80082dc:	20000130 	.word	0x20000130

080082e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	0002      	movs	r2, r0
 80082e8:	6039      	str	r1, [r7, #0]
 80082ea:	1dfb      	adds	r3, r7, #7
 80082ec:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2204      	movs	r2, #4
 80082f2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80082f4:	4b02      	ldr	r3, [pc, #8]	; (8008300 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80082f6:	0018      	movs	r0, r3
 80082f8:	46bd      	mov	sp, r7
 80082fa:	b002      	add	sp, #8
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	46c0      	nop			; (mov r8, r8)
 8008300:	20000144 	.word	0x20000144

08008304 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	0002      	movs	r2, r0
 800830c:	6039      	str	r1, [r7, #0]
 800830e:	1dfb      	adds	r3, r7, #7
 8008310:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8008312:	1dfb      	adds	r3, r7, #7
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d106      	bne.n	8008328 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	4908      	ldr	r1, [pc, #32]	; (8008340 <USBD_FS_ProductStrDescriptor+0x3c>)
 800831e:	4b09      	ldr	r3, [pc, #36]	; (8008344 <USBD_FS_ProductStrDescriptor+0x40>)
 8008320:	0018      	movs	r0, r3
 8008322:	f7ff fe77 	bl	8008014 <USBD_GetString>
 8008326:	e005      	b.n	8008334 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	4905      	ldr	r1, [pc, #20]	; (8008340 <USBD_FS_ProductStrDescriptor+0x3c>)
 800832c:	4b05      	ldr	r3, [pc, #20]	; (8008344 <USBD_FS_ProductStrDescriptor+0x40>)
 800832e:	0018      	movs	r0, r3
 8008330:	f7ff fe70 	bl	8008014 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008334:	4b02      	ldr	r3, [pc, #8]	; (8008340 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8008336:	0018      	movs	r0, r3
 8008338:	46bd      	mov	sp, r7
 800833a:	b002      	add	sp, #8
 800833c:	bd80      	pop	{r7, pc}
 800833e:	46c0      	nop			; (mov r8, r8)
 8008340:	20000870 	.word	0x20000870
 8008344:	0800b984 	.word	0x0800b984

08008348 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	0002      	movs	r2, r0
 8008350:	6039      	str	r1, [r7, #0]
 8008352:	1dfb      	adds	r3, r7, #7
 8008354:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	4904      	ldr	r1, [pc, #16]	; (800836c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800835a:	4b05      	ldr	r3, [pc, #20]	; (8008370 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800835c:	0018      	movs	r0, r3
 800835e:	f7ff fe59 	bl	8008014 <USBD_GetString>
  return USBD_StrDesc;
 8008362:	4b02      	ldr	r3, [pc, #8]	; (800836c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8008364:	0018      	movs	r0, r3
 8008366:	46bd      	mov	sp, r7
 8008368:	b002      	add	sp, #8
 800836a:	bd80      	pop	{r7, pc}
 800836c:	20000870 	.word	0x20000870
 8008370:	0800b9a4 	.word	0x0800b9a4

08008374 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	0002      	movs	r2, r0
 800837c:	6039      	str	r1, [r7, #0]
 800837e:	1dfb      	adds	r3, r7, #7
 8008380:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	221a      	movs	r2, #26
 8008386:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008388:	f000 f84c 	bl	8008424 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800838c:	4b02      	ldr	r3, [pc, #8]	; (8008398 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800838e:	0018      	movs	r0, r3
 8008390:	46bd      	mov	sp, r7
 8008392:	b002      	add	sp, #8
 8008394:	bd80      	pop	{r7, pc}
 8008396:	46c0      	nop			; (mov r8, r8)
 8008398:	20000148 	.word	0x20000148

0800839c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	0002      	movs	r2, r0
 80083a4:	6039      	str	r1, [r7, #0]
 80083a6:	1dfb      	adds	r3, r7, #7
 80083a8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80083aa:	1dfb      	adds	r3, r7, #7
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d106      	bne.n	80083c0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	4908      	ldr	r1, [pc, #32]	; (80083d8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80083b6:	4b09      	ldr	r3, [pc, #36]	; (80083dc <USBD_FS_ConfigStrDescriptor+0x40>)
 80083b8:	0018      	movs	r0, r3
 80083ba:	f7ff fe2b 	bl	8008014 <USBD_GetString>
 80083be:	e005      	b.n	80083cc <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083c0:	683a      	ldr	r2, [r7, #0]
 80083c2:	4905      	ldr	r1, [pc, #20]	; (80083d8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80083c4:	4b05      	ldr	r3, [pc, #20]	; (80083dc <USBD_FS_ConfigStrDescriptor+0x40>)
 80083c6:	0018      	movs	r0, r3
 80083c8:	f7ff fe24 	bl	8008014 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083cc:	4b02      	ldr	r3, [pc, #8]	; (80083d8 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80083ce:	0018      	movs	r0, r3
 80083d0:	46bd      	mov	sp, r7
 80083d2:	b002      	add	sp, #8
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	46c0      	nop			; (mov r8, r8)
 80083d8:	20000870 	.word	0x20000870
 80083dc:	0800b9b8 	.word	0x0800b9b8

080083e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	0002      	movs	r2, r0
 80083e8:	6039      	str	r1, [r7, #0]
 80083ea:	1dfb      	adds	r3, r7, #7
 80083ec:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80083ee:	1dfb      	adds	r3, r7, #7
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d106      	bne.n	8008404 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	4908      	ldr	r1, [pc, #32]	; (800841c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80083fa:	4b09      	ldr	r3, [pc, #36]	; (8008420 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80083fc:	0018      	movs	r0, r3
 80083fe:	f7ff fe09 	bl	8008014 <USBD_GetString>
 8008402:	e005      	b.n	8008410 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	4905      	ldr	r1, [pc, #20]	; (800841c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8008408:	4b05      	ldr	r3, [pc, #20]	; (8008420 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800840a:	0018      	movs	r0, r3
 800840c:	f7ff fe02 	bl	8008014 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008410:	4b02      	ldr	r3, [pc, #8]	; (800841c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8008412:	0018      	movs	r0, r3
 8008414:	46bd      	mov	sp, r7
 8008416:	b002      	add	sp, #8
 8008418:	bd80      	pop	{r7, pc}
 800841a:	46c0      	nop			; (mov r8, r8)
 800841c:	20000870 	.word	0x20000870
 8008420:	0800b9cc 	.word	0x0800b9cc

08008424 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800842a:	4b10      	ldr	r3, [pc, #64]	; (800846c <Get_SerialNum+0x48>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008430:	4b0f      	ldr	r3, [pc, #60]	; (8008470 <Get_SerialNum+0x4c>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008436:	4b0f      	ldr	r3, [pc, #60]	; (8008474 <Get_SerialNum+0x50>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	18d3      	adds	r3, r2, r3
 8008442:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00b      	beq.n	8008462 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800844a:	490b      	ldr	r1, [pc, #44]	; (8008478 <Get_SerialNum+0x54>)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2208      	movs	r2, #8
 8008450:	0018      	movs	r0, r3
 8008452:	f000 f815 	bl	8008480 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008456:	4909      	ldr	r1, [pc, #36]	; (800847c <Get_SerialNum+0x58>)
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	2204      	movs	r2, #4
 800845c:	0018      	movs	r0, r3
 800845e:	f000 f80f 	bl	8008480 <IntToUnicode>
  }
}
 8008462:	46c0      	nop			; (mov r8, r8)
 8008464:	46bd      	mov	sp, r7
 8008466:	b004      	add	sp, #16
 8008468:	bd80      	pop	{r7, pc}
 800846a:	46c0      	nop			; (mov r8, r8)
 800846c:	1ffff7ac 	.word	0x1ffff7ac
 8008470:	1ffff7b0 	.word	0x1ffff7b0
 8008474:	1ffff7b4 	.word	0x1ffff7b4
 8008478:	2000014a 	.word	0x2000014a
 800847c:	2000015a 	.word	0x2000015a

08008480 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	1dfb      	adds	r3, r7, #7
 800848c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800848e:	2117      	movs	r1, #23
 8008490:	187b      	adds	r3, r7, r1
 8008492:	2200      	movs	r2, #0
 8008494:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8008496:	187b      	adds	r3, r7, r1
 8008498:	2200      	movs	r2, #0
 800849a:	701a      	strb	r2, [r3, #0]
 800849c:	e02f      	b.n	80084fe <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	0f1b      	lsrs	r3, r3, #28
 80084a2:	2b09      	cmp	r3, #9
 80084a4:	d80d      	bhi.n	80084c2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	0f1b      	lsrs	r3, r3, #28
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	2317      	movs	r3, #23
 80084ae:	18fb      	adds	r3, r7, r3
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	005b      	lsls	r3, r3, #1
 80084b4:	0019      	movs	r1, r3
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	185b      	adds	r3, r3, r1
 80084ba:	3230      	adds	r2, #48	; 0x30
 80084bc:	b2d2      	uxtb	r2, r2
 80084be:	701a      	strb	r2, [r3, #0]
 80084c0:	e00c      	b.n	80084dc <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	0f1b      	lsrs	r3, r3, #28
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	2317      	movs	r3, #23
 80084ca:	18fb      	adds	r3, r7, r3
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	0019      	movs	r1, r3
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	185b      	adds	r3, r3, r1
 80084d6:	3237      	adds	r2, #55	; 0x37
 80084d8:	b2d2      	uxtb	r2, r2
 80084da:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	011b      	lsls	r3, r3, #4
 80084e0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80084e2:	2117      	movs	r1, #23
 80084e4:	187b      	adds	r3, r7, r1
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	005b      	lsls	r3, r3, #1
 80084ea:	3301      	adds	r3, #1
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	18d3      	adds	r3, r2, r3
 80084f0:	2200      	movs	r2, #0
 80084f2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80084f4:	187b      	adds	r3, r7, r1
 80084f6:	781a      	ldrb	r2, [r3, #0]
 80084f8:	187b      	adds	r3, r7, r1
 80084fa:	3201      	adds	r2, #1
 80084fc:	701a      	strb	r2, [r3, #0]
 80084fe:	2317      	movs	r3, #23
 8008500:	18fa      	adds	r2, r7, r3
 8008502:	1dfb      	adds	r3, r7, #7
 8008504:	7812      	ldrb	r2, [r2, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	429a      	cmp	r2, r3
 800850a:	d3c8      	bcc.n	800849e <IntToUnicode+0x1e>
  }
}
 800850c:	46c0      	nop			; (mov r8, r8)
 800850e:	46bd      	mov	sp, r7
 8008510:	b006      	add	sp, #24
 8008512:	bd80      	pop	{r7, pc}

08008514 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a0e      	ldr	r2, [pc, #56]	; (800855c <HAL_PCD_MspInit+0x48>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d115      	bne.n	8008552 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008526:	4b0e      	ldr	r3, [pc, #56]	; (8008560 <HAL_PCD_MspInit+0x4c>)
 8008528:	69da      	ldr	r2, [r3, #28]
 800852a:	4b0d      	ldr	r3, [pc, #52]	; (8008560 <HAL_PCD_MspInit+0x4c>)
 800852c:	2180      	movs	r1, #128	; 0x80
 800852e:	0409      	lsls	r1, r1, #16
 8008530:	430a      	orrs	r2, r1
 8008532:	61da      	str	r2, [r3, #28]
 8008534:	4b0a      	ldr	r3, [pc, #40]	; (8008560 <HAL_PCD_MspInit+0x4c>)
 8008536:	69da      	ldr	r2, [r3, #28]
 8008538:	2380      	movs	r3, #128	; 0x80
 800853a:	041b      	lsls	r3, r3, #16
 800853c:	4013      	ands	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008542:	2200      	movs	r2, #0
 8008544:	2100      	movs	r1, #0
 8008546:	201f      	movs	r0, #31
 8008548:	f7fb f8e0 	bl	800370c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800854c:	201f      	movs	r0, #31
 800854e:	f7fb f8f2 	bl	8003736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008552:	46c0      	nop			; (mov r8, r8)
 8008554:	46bd      	mov	sp, r7
 8008556:	b004      	add	sp, #16
 8008558:	bd80      	pop	{r7, pc}
 800855a:	46c0      	nop			; (mov r8, r8)
 800855c:	40005c00 	.word	0x40005c00
 8008560:	40021000 	.word	0x40021000

08008564 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	239c      	movs	r3, #156	; 0x9c
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	58d2      	ldr	r2, [r2, r3]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	218c      	movs	r1, #140	; 0x8c
 8008578:	0089      	lsls	r1, r1, #2
 800857a:	468c      	mov	ip, r1
 800857c:	4463      	add	r3, ip
 800857e:	0019      	movs	r1, r3
 8008580:	0010      	movs	r0, r2
 8008582:	f7fe fcd3 	bl	8006f2c <USBD_LL_SetupStage>
}
 8008586:	46c0      	nop			; (mov r8, r8)
 8008588:	46bd      	mov	sp, r7
 800858a:	b002      	add	sp, #8
 800858c:	bd80      	pop	{r7, pc}

0800858e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b082      	sub	sp, #8
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	000a      	movs	r2, r1
 8008598:	1cfb      	adds	r3, r7, #3
 800859a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	239c      	movs	r3, #156	; 0x9c
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	58d0      	ldr	r0, [r2, r3]
 80085a4:	1cfb      	adds	r3, r7, #3
 80085a6:	781a      	ldrb	r2, [r3, #0]
 80085a8:	6879      	ldr	r1, [r7, #4]
 80085aa:	239e      	movs	r3, #158	; 0x9e
 80085ac:	005b      	lsls	r3, r3, #1
 80085ae:	0152      	lsls	r2, r2, #5
 80085b0:	188a      	adds	r2, r1, r2
 80085b2:	18d3      	adds	r3, r2, r3
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	1cfb      	adds	r3, r7, #3
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	0019      	movs	r1, r3
 80085bc:	f7fe fd12 	bl	8006fe4 <USBD_LL_DataOutStage>
}
 80085c0:	46c0      	nop			; (mov r8, r8)
 80085c2:	46bd      	mov	sp, r7
 80085c4:	b002      	add	sp, #8
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	000a      	movs	r2, r1
 80085d2:	1cfb      	adds	r3, r7, #3
 80085d4:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	239c      	movs	r3, #156	; 0x9c
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	58d0      	ldr	r0, [r2, r3]
 80085de:	1cfb      	adds	r3, r7, #3
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	015b      	lsls	r3, r3, #5
 80085e6:	18d3      	adds	r3, r2, r3
 80085e8:	333c      	adds	r3, #60	; 0x3c
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	1cfb      	adds	r3, r7, #3
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	0019      	movs	r1, r3
 80085f2:	f7fe fd79 	bl	80070e8 <USBD_LL_DataInStage>
}
 80085f6:	46c0      	nop			; (mov r8, r8)
 80085f8:	46bd      	mov	sp, r7
 80085fa:	b002      	add	sp, #8
 80085fc:	bd80      	pop	{r7, pc}

080085fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b082      	sub	sp, #8
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	239c      	movs	r3, #156	; 0x9c
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	58d3      	ldr	r3, [r2, r3]
 800860e:	0018      	movs	r0, r3
 8008610:	f7fe feb0 	bl	8007374 <USBD_LL_SOF>
}
 8008614:	46c0      	nop			; (mov r8, r8)
 8008616:	46bd      	mov	sp, r7
 8008618:	b002      	add	sp, #8
 800861a:	bd80      	pop	{r7, pc}

0800861c <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008624:	230f      	movs	r3, #15
 8008626:	18fb      	adds	r3, r7, r3
 8008628:	2201      	movs	r2, #1
 800862a:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	2b02      	cmp	r3, #2
 8008632:	d001      	beq.n	8008638 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8008634:	f7f9 ffb8 	bl	80025a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	239c      	movs	r3, #156	; 0x9c
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	58d2      	ldr	r2, [r2, r3]
 8008640:	230f      	movs	r3, #15
 8008642:	18fb      	adds	r3, r7, r3
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	0019      	movs	r1, r3
 8008648:	0010      	movs	r0, r2
 800864a:	f7fe fe52 	bl	80072f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	239c      	movs	r3, #156	; 0x9c
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	58d3      	ldr	r3, [r2, r3]
 8008656:	0018      	movs	r0, r3
 8008658:	f7fe fe03 	bl	8007262 <USBD_LL_Reset>
}
 800865c:	46c0      	nop			; (mov r8, r8)
 800865e:	46bd      	mov	sp, r7
 8008660:	b004      	add	sp, #16
 8008662:	bd80      	pop	{r7, pc}

08008664 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	239c      	movs	r3, #156	; 0x9c
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	58d3      	ldr	r3, [r2, r3]
 8008674:	0018      	movs	r0, r3
 8008676:	f7fe fe4d 	bl	8007314 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d005      	beq.n	800868e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008682:	4b05      	ldr	r3, [pc, #20]	; (8008698 <HAL_PCD_SuspendCallback+0x34>)
 8008684:	691a      	ldr	r2, [r3, #16]
 8008686:	4b04      	ldr	r3, [pc, #16]	; (8008698 <HAL_PCD_SuspendCallback+0x34>)
 8008688:	2106      	movs	r1, #6
 800868a:	430a      	orrs	r2, r1
 800868c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800868e:	46c0      	nop			; (mov r8, r8)
 8008690:	46bd      	mov	sp, r7
 8008692:	b002      	add	sp, #8
 8008694:	bd80      	pop	{r7, pc}
 8008696:	46c0      	nop			; (mov r8, r8)
 8008698:	e000ed00 	.word	0xe000ed00

0800869c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d007      	beq.n	80086bc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086ac:	4b09      	ldr	r3, [pc, #36]	; (80086d4 <HAL_PCD_ResumeCallback+0x38>)
 80086ae:	691a      	ldr	r2, [r3, #16]
 80086b0:	4b08      	ldr	r3, [pc, #32]	; (80086d4 <HAL_PCD_ResumeCallback+0x38>)
 80086b2:	2106      	movs	r1, #6
 80086b4:	438a      	bics	r2, r1
 80086b6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80086b8:	f000 fa22 	bl	8008b00 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	239c      	movs	r3, #156	; 0x9c
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	58d3      	ldr	r3, [r2, r3]
 80086c4:	0018      	movs	r0, r3
 80086c6:	f7fe fe3d 	bl	8007344 <USBD_LL_Resume>
}
 80086ca:	46c0      	nop			; (mov r8, r8)
 80086cc:	46bd      	mov	sp, r7
 80086ce:	b002      	add	sp, #8
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	46c0      	nop			; (mov r8, r8)
 80086d4:	e000ed00 	.word	0xe000ed00

080086d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80086e0:	4a27      	ldr	r2, [pc, #156]	; (8008780 <USBD_LL_Init+0xa8>)
 80086e2:	239c      	movs	r3, #156	; 0x9c
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	6879      	ldr	r1, [r7, #4]
 80086e8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	23b0      	movs	r3, #176	; 0xb0
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	4923      	ldr	r1, [pc, #140]	; (8008780 <USBD_LL_Init+0xa8>)
 80086f2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80086f4:	4b22      	ldr	r3, [pc, #136]	; (8008780 <USBD_LL_Init+0xa8>)
 80086f6:	4a23      	ldr	r2, [pc, #140]	; (8008784 <USBD_LL_Init+0xac>)
 80086f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80086fa:	4b21      	ldr	r3, [pc, #132]	; (8008780 <USBD_LL_Init+0xa8>)
 80086fc:	2208      	movs	r2, #8
 80086fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008700:	4b1f      	ldr	r3, [pc, #124]	; (8008780 <USBD_LL_Init+0xa8>)
 8008702:	2202      	movs	r2, #2
 8008704:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008706:	4b1e      	ldr	r3, [pc, #120]	; (8008780 <USBD_LL_Init+0xa8>)
 8008708:	2202      	movs	r2, #2
 800870a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800870c:	4b1c      	ldr	r3, [pc, #112]	; (8008780 <USBD_LL_Init+0xa8>)
 800870e:	2200      	movs	r2, #0
 8008710:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008712:	4b1b      	ldr	r3, [pc, #108]	; (8008780 <USBD_LL_Init+0xa8>)
 8008714:	2200      	movs	r2, #0
 8008716:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008718:	4b19      	ldr	r3, [pc, #100]	; (8008780 <USBD_LL_Init+0xa8>)
 800871a:	2200      	movs	r2, #0
 800871c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800871e:	4b18      	ldr	r3, [pc, #96]	; (8008780 <USBD_LL_Init+0xa8>)
 8008720:	0018      	movs	r0, r3
 8008722:	f7fb f9bb 	bl	8003a9c <HAL_PCD_Init>
 8008726:	1e03      	subs	r3, r0, #0
 8008728:	d001      	beq.n	800872e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800872a:	f7f9 ff3d 	bl	80025a8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	23b0      	movs	r3, #176	; 0xb0
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	58d0      	ldr	r0, [r2, r3]
 8008736:	2318      	movs	r3, #24
 8008738:	2200      	movs	r2, #0
 800873a:	2100      	movs	r1, #0
 800873c:	f7fc f93c 	bl	80049b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	23b0      	movs	r3, #176	; 0xb0
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	58d0      	ldr	r0, [r2, r3]
 8008748:	2358      	movs	r3, #88	; 0x58
 800874a:	2200      	movs	r2, #0
 800874c:	2180      	movs	r1, #128	; 0x80
 800874e:	f7fc f933 	bl	80049b8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	23b0      	movs	r3, #176	; 0xb0
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	58d0      	ldr	r0, [r2, r3]
 800875a:	2398      	movs	r3, #152	; 0x98
 800875c:	2200      	movs	r2, #0
 800875e:	2181      	movs	r1, #129	; 0x81
 8008760:	f7fc f92a 	bl	80049b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	23b0      	movs	r3, #176	; 0xb0
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	58d0      	ldr	r0, [r2, r3]
 800876c:	23d8      	movs	r3, #216	; 0xd8
 800876e:	2200      	movs	r2, #0
 8008770:	2101      	movs	r1, #1
 8008772:	f7fc f921 	bl	80049b8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	0018      	movs	r0, r3
 800877a:	46bd      	mov	sp, r7
 800877c:	b002      	add	sp, #8
 800877e:	bd80      	pop	{r7, pc}
 8008780:	20000a70 	.word	0x20000a70
 8008784:	40005c00 	.word	0x40005c00

08008788 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008790:	210f      	movs	r1, #15
 8008792:	187b      	adds	r3, r7, r1
 8008794:	2200      	movs	r2, #0
 8008796:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008798:	260e      	movs	r6, #14
 800879a:	19bb      	adds	r3, r7, r6
 800879c:	2200      	movs	r2, #0
 800879e:	701a      	strb	r2, [r3, #0]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	23b0      	movs	r3, #176	; 0xb0
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	58d3      	ldr	r3, [r2, r3]
 80087a8:	000d      	movs	r5, r1
 80087aa:	187c      	adds	r4, r7, r1
 80087ac:	0018      	movs	r0, r3
 80087ae:	f7fb fa59 	bl	8003c64 <HAL_PCD_Start>
 80087b2:	0003      	movs	r3, r0
 80087b4:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80087b6:	19bc      	adds	r4, r7, r6
 80087b8:	0029      	movs	r1, r5
 80087ba:	187b      	adds	r3, r7, r1
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	0018      	movs	r0, r3
 80087c0:	f000 f9a5 	bl	8008b0e <USBD_Get_USB_Status>
 80087c4:	0003      	movs	r3, r0
 80087c6:	7023      	strb	r3, [r4, #0]
  
  return usb_status;
 80087c8:	19bb      	adds	r3, r7, r6
 80087ca:	781b      	ldrb	r3, [r3, #0]
}
 80087cc:	0018      	movs	r0, r3
 80087ce:	46bd      	mov	sp, r7
 80087d0:	b005      	add	sp, #20
 80087d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080087d4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80087d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	000c      	movs	r4, r1
 80087de:	0010      	movs	r0, r2
 80087e0:	0019      	movs	r1, r3
 80087e2:	1cfb      	adds	r3, r7, #3
 80087e4:	1c22      	adds	r2, r4, #0
 80087e6:	701a      	strb	r2, [r3, #0]
 80087e8:	1cbb      	adds	r3, r7, #2
 80087ea:	1c02      	adds	r2, r0, #0
 80087ec:	701a      	strb	r2, [r3, #0]
 80087ee:	003b      	movs	r3, r7
 80087f0:	1c0a      	adds	r2, r1, #0
 80087f2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087f4:	260f      	movs	r6, #15
 80087f6:	19bb      	adds	r3, r7, r6
 80087f8:	2200      	movs	r2, #0
 80087fa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087fc:	250e      	movs	r5, #14
 80087fe:	197b      	adds	r3, r7, r5
 8008800:	2200      	movs	r2, #0
 8008802:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	23b0      	movs	r3, #176	; 0xb0
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	58d0      	ldr	r0, [r2, r3]
 800880c:	19bc      	adds	r4, r7, r6
 800880e:	1cbb      	adds	r3, r7, #2
 8008810:	781d      	ldrb	r5, [r3, #0]
 8008812:	003b      	movs	r3, r7
 8008814:	881a      	ldrh	r2, [r3, #0]
 8008816:	1cfb      	adds	r3, r7, #3
 8008818:	7819      	ldrb	r1, [r3, #0]
 800881a:	002b      	movs	r3, r5
 800881c:	f7fb fbfb 	bl	8004016 <HAL_PCD_EP_Open>
 8008820:	0003      	movs	r3, r0
 8008822:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008824:	250e      	movs	r5, #14
 8008826:	197c      	adds	r4, r7, r5
 8008828:	19bb      	adds	r3, r7, r6
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	0018      	movs	r0, r3
 800882e:	f000 f96e 	bl	8008b0e <USBD_Get_USB_Status>
 8008832:	0003      	movs	r3, r0
 8008834:	7023      	strb	r3, [r4, #0]
 
  return usb_status;
 8008836:	197b      	adds	r3, r7, r5
 8008838:	781b      	ldrb	r3, [r3, #0]
}
 800883a:	0018      	movs	r0, r3
 800883c:	46bd      	mov	sp, r7
 800883e:	b005      	add	sp, #20
 8008840:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008842 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008842:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008844:	b085      	sub	sp, #20
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	000a      	movs	r2, r1
 800884c:	1cfb      	adds	r3, r7, #3
 800884e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008850:	210f      	movs	r1, #15
 8008852:	187b      	adds	r3, r7, r1
 8008854:	2200      	movs	r2, #0
 8008856:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008858:	260e      	movs	r6, #14
 800885a:	19bb      	adds	r3, r7, r6
 800885c:	2200      	movs	r2, #0
 800885e:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	23b0      	movs	r3, #176	; 0xb0
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	58d2      	ldr	r2, [r2, r3]
 8008868:	000d      	movs	r5, r1
 800886a:	187c      	adds	r4, r7, r1
 800886c:	1cfb      	adds	r3, r7, #3
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	0019      	movs	r1, r3
 8008872:	0010      	movs	r0, r2
 8008874:	f7fb fc41 	bl	80040fa <HAL_PCD_EP_Close>
 8008878:	0003      	movs	r3, r0
 800887a:	7023      	strb	r3, [r4, #0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800887c:	19bc      	adds	r4, r7, r6
 800887e:	0029      	movs	r1, r5
 8008880:	187b      	adds	r3, r7, r1
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	0018      	movs	r0, r3
 8008886:	f000 f942 	bl	8008b0e <USBD_Get_USB_Status>
 800888a:	0003      	movs	r3, r0
 800888c:	7023      	strb	r3, [r4, #0]

  return usb_status;  
 800888e:	19bb      	adds	r3, r7, r6
 8008890:	781b      	ldrb	r3, [r3, #0]
}
 8008892:	0018      	movs	r0, r3
 8008894:	46bd      	mov	sp, r7
 8008896:	b005      	add	sp, #20
 8008898:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800889a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800889a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800889c:	b085      	sub	sp, #20
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	000a      	movs	r2, r1
 80088a4:	1cfb      	adds	r3, r7, #3
 80088a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a8:	210f      	movs	r1, #15
 80088aa:	187b      	adds	r3, r7, r1
 80088ac:	2200      	movs	r2, #0
 80088ae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088b0:	260e      	movs	r6, #14
 80088b2:	19bb      	adds	r3, r7, r6
 80088b4:	2200      	movs	r2, #0
 80088b6:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	23b0      	movs	r3, #176	; 0xb0
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	58d2      	ldr	r2, [r2, r3]
 80088c0:	000d      	movs	r5, r1
 80088c2:	187c      	adds	r4, r7, r1
 80088c4:	1cfb      	adds	r3, r7, #3
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	0019      	movs	r1, r3
 80088ca:	0010      	movs	r0, r2
 80088cc:	f7fb fce1 	bl	8004292 <HAL_PCD_EP_SetStall>
 80088d0:	0003      	movs	r3, r0
 80088d2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088d4:	19bc      	adds	r4, r7, r6
 80088d6:	0029      	movs	r1, r5
 80088d8:	187b      	adds	r3, r7, r1
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	0018      	movs	r0, r3
 80088de:	f000 f916 	bl	8008b0e <USBD_Get_USB_Status>
 80088e2:	0003      	movs	r3, r0
 80088e4:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 80088e6:	19bb      	adds	r3, r7, r6
 80088e8:	781b      	ldrb	r3, [r3, #0]
}
 80088ea:	0018      	movs	r0, r3
 80088ec:	46bd      	mov	sp, r7
 80088ee:	b005      	add	sp, #20
 80088f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080088f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088f4:	b085      	sub	sp, #20
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	000a      	movs	r2, r1
 80088fc:	1cfb      	adds	r3, r7, #3
 80088fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008900:	210f      	movs	r1, #15
 8008902:	187b      	adds	r3, r7, r1
 8008904:	2200      	movs	r2, #0
 8008906:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008908:	260e      	movs	r6, #14
 800890a:	19bb      	adds	r3, r7, r6
 800890c:	2200      	movs	r2, #0
 800890e:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	23b0      	movs	r3, #176	; 0xb0
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	58d2      	ldr	r2, [r2, r3]
 8008918:	000d      	movs	r5, r1
 800891a:	187c      	adds	r4, r7, r1
 800891c:	1cfb      	adds	r3, r7, #3
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	0019      	movs	r1, r3
 8008922:	0010      	movs	r0, r2
 8008924:	f7fb fd1b 	bl	800435e <HAL_PCD_EP_ClrStall>
 8008928:	0003      	movs	r3, r0
 800892a:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800892c:	19bc      	adds	r4, r7, r6
 800892e:	0029      	movs	r1, r5
 8008930:	187b      	adds	r3, r7, r1
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	0018      	movs	r0, r3
 8008936:	f000 f8ea 	bl	8008b0e <USBD_Get_USB_Status>
 800893a:	0003      	movs	r3, r0
 800893c:	7023      	strb	r3, [r4, #0]

  return usb_status; 
 800893e:	19bb      	adds	r3, r7, r6
 8008940:	781b      	ldrb	r3, [r3, #0]
}
 8008942:	0018      	movs	r0, r3
 8008944:	46bd      	mov	sp, r7
 8008946:	b005      	add	sp, #20
 8008948:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800894a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	000a      	movs	r2, r1
 8008954:	1cfb      	adds	r3, r7, #3
 8008956:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	23b0      	movs	r3, #176	; 0xb0
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	58d3      	ldr	r3, [r2, r3]
 8008960:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008962:	1cfb      	adds	r3, r7, #3
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	b25b      	sxtb	r3, r3
 8008968:	2b00      	cmp	r3, #0
 800896a:	da0a      	bge.n	8008982 <USBD_LL_IsStallEP+0x38>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800896c:	1cfb      	adds	r3, r7, #3
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	227f      	movs	r2, #127	; 0x7f
 8008972:	4013      	ands	r3, r2
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	212a      	movs	r1, #42	; 0x2a
 8008978:	015b      	lsls	r3, r3, #5
 800897a:	18d3      	adds	r3, r2, r3
 800897c:	185b      	adds	r3, r3, r1
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	e00a      	b.n	8008998 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008982:	1cfb      	adds	r3, r7, #3
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	227f      	movs	r2, #127	; 0x7f
 8008988:	401a      	ands	r2, r3
 800898a:	68f9      	ldr	r1, [r7, #12]
 800898c:	2395      	movs	r3, #149	; 0x95
 800898e:	005b      	lsls	r3, r3, #1
 8008990:	0152      	lsls	r2, r2, #5
 8008992:	188a      	adds	r2, r1, r2
 8008994:	18d3      	adds	r3, r2, r3
 8008996:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008998:	0018      	movs	r0, r3
 800899a:	46bd      	mov	sp, r7
 800899c:	b004      	add	sp, #16
 800899e:	bd80      	pop	{r7, pc}

080089a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	000a      	movs	r2, r1
 80089aa:	1cfb      	adds	r3, r7, #3
 80089ac:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ae:	210f      	movs	r1, #15
 80089b0:	187b      	adds	r3, r7, r1
 80089b2:	2200      	movs	r2, #0
 80089b4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089b6:	260e      	movs	r6, #14
 80089b8:	19bb      	adds	r3, r7, r6
 80089ba:	2200      	movs	r2, #0
 80089bc:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	23b0      	movs	r3, #176	; 0xb0
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	58d2      	ldr	r2, [r2, r3]
 80089c6:	000d      	movs	r5, r1
 80089c8:	187c      	adds	r4, r7, r1
 80089ca:	1cfb      	adds	r3, r7, #3
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	0019      	movs	r1, r3
 80089d0:	0010      	movs	r0, r2
 80089d2:	f7fb faf5 	bl	8003fc0 <HAL_PCD_SetAddress>
 80089d6:	0003      	movs	r3, r0
 80089d8:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80089da:	19bc      	adds	r4, r7, r6
 80089dc:	0029      	movs	r1, r5
 80089de:	187b      	adds	r3, r7, r1
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	0018      	movs	r0, r3
 80089e4:	f000 f893 	bl	8008b0e <USBD_Get_USB_Status>
 80089e8:	0003      	movs	r3, r0
 80089ea:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 80089ec:	19bb      	adds	r3, r7, r6
 80089ee:	781b      	ldrb	r3, [r3, #0]
}
 80089f0:	0018      	movs	r0, r3
 80089f2:	46bd      	mov	sp, r7
 80089f4:	b005      	add	sp, #20
 80089f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089f8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80089f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	0008      	movs	r0, r1
 8008a02:	607a      	str	r2, [r7, #4]
 8008a04:	0019      	movs	r1, r3
 8008a06:	230b      	movs	r3, #11
 8008a08:	18fb      	adds	r3, r7, r3
 8008a0a:	1c02      	adds	r2, r0, #0
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	2408      	movs	r4, #8
 8008a10:	193b      	adds	r3, r7, r4
 8008a12:	1c0a      	adds	r2, r1, #0
 8008a14:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a16:	2117      	movs	r1, #23
 8008a18:	187b      	adds	r3, r7, r1
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a1e:	2516      	movs	r5, #22
 8008a20:	197b      	adds	r3, r7, r5
 8008a22:	2200      	movs	r2, #0
 8008a24:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	23b0      	movs	r3, #176	; 0xb0
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	58d0      	ldr	r0, [r2, r3]
 8008a2e:	193b      	adds	r3, r7, r4
 8008a30:	881d      	ldrh	r5, [r3, #0]
 8008a32:	000e      	movs	r6, r1
 8008a34:	187c      	adds	r4, r7, r1
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	230b      	movs	r3, #11
 8008a3a:	18fb      	adds	r3, r7, r3
 8008a3c:	7819      	ldrb	r1, [r3, #0]
 8008a3e:	002b      	movs	r3, r5
 8008a40:	f7fb fbe7 	bl	8004212 <HAL_PCD_EP_Transmit>
 8008a44:	0003      	movs	r3, r0
 8008a46:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a48:	2516      	movs	r5, #22
 8008a4a:	197c      	adds	r4, r7, r5
 8008a4c:	0031      	movs	r1, r6
 8008a4e:	187b      	adds	r3, r7, r1
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	0018      	movs	r0, r3
 8008a54:	f000 f85b 	bl	8008b0e <USBD_Get_USB_Status>
 8008a58:	0003      	movs	r3, r0
 8008a5a:	7023      	strb	r3, [r4, #0]
  
  return usb_status;    
 8008a5c:	197b      	adds	r3, r7, r5
 8008a5e:	781b      	ldrb	r3, [r3, #0]
}
 8008a60:	0018      	movs	r0, r3
 8008a62:	46bd      	mov	sp, r7
 8008a64:	b007      	add	sp, #28
 8008a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	0008      	movs	r0, r1
 8008a72:	607a      	str	r2, [r7, #4]
 8008a74:	0019      	movs	r1, r3
 8008a76:	230b      	movs	r3, #11
 8008a78:	18fb      	adds	r3, r7, r3
 8008a7a:	1c02      	adds	r2, r0, #0
 8008a7c:	701a      	strb	r2, [r3, #0]
 8008a7e:	2408      	movs	r4, #8
 8008a80:	193b      	adds	r3, r7, r4
 8008a82:	1c0a      	adds	r2, r1, #0
 8008a84:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a86:	2117      	movs	r1, #23
 8008a88:	187b      	adds	r3, r7, r1
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a8e:	2516      	movs	r5, #22
 8008a90:	197b      	adds	r3, r7, r5
 8008a92:	2200      	movs	r2, #0
 8008a94:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	23b0      	movs	r3, #176	; 0xb0
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	58d0      	ldr	r0, [r2, r3]
 8008a9e:	193b      	adds	r3, r7, r4
 8008aa0:	881d      	ldrh	r5, [r3, #0]
 8008aa2:	000e      	movs	r6, r1
 8008aa4:	187c      	adds	r4, r7, r1
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	230b      	movs	r3, #11
 8008aaa:	18fb      	adds	r3, r7, r3
 8008aac:	7819      	ldrb	r1, [r3, #0]
 8008aae:	002b      	movs	r3, r5
 8008ab0:	f7fb fb6e 	bl	8004190 <HAL_PCD_EP_Receive>
 8008ab4:	0003      	movs	r3, r0
 8008ab6:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ab8:	2516      	movs	r5, #22
 8008aba:	197c      	adds	r4, r7, r5
 8008abc:	0031      	movs	r1, r6
 8008abe:	187b      	adds	r3, r7, r1
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	f000 f823 	bl	8008b0e <USBD_Get_USB_Status>
 8008ac8:	0003      	movs	r3, r0
 8008aca:	7023      	strb	r3, [r4, #0]
  	
  return usb_status; 
 8008acc:	197b      	adds	r3, r7, r5
 8008ace:	781b      	ldrb	r3, [r3, #0]
}
 8008ad0:	0018      	movs	r0, r3
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	b007      	add	sp, #28
 8008ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ad8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008ae0:	4b02      	ldr	r3, [pc, #8]	; (8008aec <USBD_static_malloc+0x14>)
}
 8008ae2:	0018      	movs	r0, r3
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	b002      	add	sp, #8
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	46c0      	nop			; (mov r8, r8)
 8008aec:	200003c4 	.word	0x200003c4

08008af0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]

}
 8008af8:	46c0      	nop			; (mov r8, r8)
 8008afa:	46bd      	mov	sp, r7
 8008afc:	b002      	add	sp, #8
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008b04:	f7f9 fc51 	bl	80023aa <SystemClock_Config>
}
 8008b08:	46c0      	nop			; (mov r8, r8)
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b084      	sub	sp, #16
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	0002      	movs	r2, r0
 8008b16:	1dfb      	adds	r3, r7, #7
 8008b18:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b1a:	230f      	movs	r3, #15
 8008b1c:	18fb      	adds	r3, r7, r3
 8008b1e:	2200      	movs	r2, #0
 8008b20:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8008b22:	1dfb      	adds	r3, r7, #7
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d00d      	beq.n	8008b46 <USBD_Get_USB_Status+0x38>
 8008b2a:	dc02      	bgt.n	8008b32 <USBD_Get_USB_Status+0x24>
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d005      	beq.n	8008b3c <USBD_Get_USB_Status+0x2e>
 8008b30:	e018      	b.n	8008b64 <USBD_Get_USB_Status+0x56>
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d00c      	beq.n	8008b50 <USBD_Get_USB_Status+0x42>
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d00f      	beq.n	8008b5a <USBD_Get_USB_Status+0x4c>
 8008b3a:	e013      	b.n	8008b64 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b3c:	230f      	movs	r3, #15
 8008b3e:	18fb      	adds	r3, r7, r3
 8008b40:	2200      	movs	r2, #0
 8008b42:	701a      	strb	r2, [r3, #0]
    break;
 8008b44:	e013      	b.n	8008b6e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b46:	230f      	movs	r3, #15
 8008b48:	18fb      	adds	r3, r7, r3
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	701a      	strb	r2, [r3, #0]
    break;
 8008b4e:	e00e      	b.n	8008b6e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b50:	230f      	movs	r3, #15
 8008b52:	18fb      	adds	r3, r7, r3
 8008b54:	2201      	movs	r2, #1
 8008b56:	701a      	strb	r2, [r3, #0]
    break;
 8008b58:	e009      	b.n	8008b6e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b5a:	230f      	movs	r3, #15
 8008b5c:	18fb      	adds	r3, r7, r3
 8008b5e:	2202      	movs	r2, #2
 8008b60:	701a      	strb	r2, [r3, #0]
    break;
 8008b62:	e004      	b.n	8008b6e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8008b64:	230f      	movs	r3, #15
 8008b66:	18fb      	adds	r3, r7, r3
 8008b68:	2202      	movs	r2, #2
 8008b6a:	701a      	strb	r2, [r3, #0]
    break;
 8008b6c:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8008b6e:	230f      	movs	r3, #15
 8008b70:	18fb      	adds	r3, r7, r3
 8008b72:	781b      	ldrb	r3, [r3, #0]
}
 8008b74:	0018      	movs	r0, r3
 8008b76:	46bd      	mov	sp, r7
 8008b78:	b004      	add	sp, #16
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <findslot>:
 8008b7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ba8 <findslot+0x2c>)
 8008b7e:	b510      	push	{r4, lr}
 8008b80:	0004      	movs	r4, r0
 8008b82:	6818      	ldr	r0, [r3, #0]
 8008b84:	2800      	cmp	r0, #0
 8008b86:	d004      	beq.n	8008b92 <findslot+0x16>
 8008b88:	6983      	ldr	r3, [r0, #24]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d101      	bne.n	8008b92 <findslot+0x16>
 8008b8e:	f000 fadf 	bl	8009150 <__sinit>
 8008b92:	2000      	movs	r0, #0
 8008b94:	2c13      	cmp	r4, #19
 8008b96:	d805      	bhi.n	8008ba4 <findslot+0x28>
 8008b98:	4b04      	ldr	r3, [pc, #16]	; (8008bac <findslot+0x30>)
 8008b9a:	00e4      	lsls	r4, r4, #3
 8008b9c:	58e2      	ldr	r2, [r4, r3]
 8008b9e:	3201      	adds	r2, #1
 8008ba0:	d000      	beq.n	8008ba4 <findslot+0x28>
 8008ba2:	18e0      	adds	r0, r4, r3
 8008ba4:	bd10      	pop	{r4, pc}
 8008ba6:	46c0      	nop			; (mov r8, r8)
 8008ba8:	2000016c 	.word	0x2000016c
 8008bac:	20000428 	.word	0x20000428

08008bb0 <checkerror>:
 8008bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb2:	0005      	movs	r5, r0
 8008bb4:	1c43      	adds	r3, r0, #1
 8008bb6:	d109      	bne.n	8008bcc <checkerror+0x1c>
 8008bb8:	f000 fa82 	bl	80090c0 <__errno>
 8008bbc:	2413      	movs	r4, #19
 8008bbe:	0006      	movs	r6, r0
 8008bc0:	2700      	movs	r7, #0
 8008bc2:	1c20      	adds	r0, r4, #0
 8008bc4:	1c39      	adds	r1, r7, #0
 8008bc6:	beab      	bkpt	0x00ab
 8008bc8:	1c04      	adds	r4, r0, #0
 8008bca:	6034      	str	r4, [r6, #0]
 8008bcc:	0028      	movs	r0, r5
 8008bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008bd0 <error>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	0005      	movs	r5, r0
 8008bd4:	f000 fa74 	bl	80090c0 <__errno>
 8008bd8:	2413      	movs	r4, #19
 8008bda:	0006      	movs	r6, r0
 8008bdc:	2700      	movs	r7, #0
 8008bde:	1c20      	adds	r0, r4, #0
 8008be0:	1c39      	adds	r1, r7, #0
 8008be2:	beab      	bkpt	0x00ab
 8008be4:	1c04      	adds	r4, r0, #0
 8008be6:	0028      	movs	r0, r5
 8008be8:	6034      	str	r4, [r6, #0]
 8008bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008bec <_swiread>:
 8008bec:	b530      	push	{r4, r5, lr}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	ad01      	add	r5, sp, #4
 8008bf2:	9001      	str	r0, [sp, #4]
 8008bf4:	9102      	str	r1, [sp, #8]
 8008bf6:	9203      	str	r2, [sp, #12]
 8008bf8:	2406      	movs	r4, #6
 8008bfa:	1c20      	adds	r0, r4, #0
 8008bfc:	1c29      	adds	r1, r5, #0
 8008bfe:	beab      	bkpt	0x00ab
 8008c00:	1c04      	adds	r4, r0, #0
 8008c02:	0020      	movs	r0, r4
 8008c04:	f7ff ffd4 	bl	8008bb0 <checkerror>
 8008c08:	b005      	add	sp, #20
 8008c0a:	bd30      	pop	{r4, r5, pc}

08008c0c <_read>:
 8008c0c:	b570      	push	{r4, r5, r6, lr}
 8008c0e:	000e      	movs	r6, r1
 8008c10:	0015      	movs	r5, r2
 8008c12:	f7ff ffb3 	bl	8008b7c <findslot>
 8008c16:	1e04      	subs	r4, r0, #0
 8008c18:	d106      	bne.n	8008c28 <_read+0x1c>
 8008c1a:	f000 fa51 	bl	80090c0 <__errno>
 8008c1e:	2309      	movs	r3, #9
 8008c20:	6003      	str	r3, [r0, #0]
 8008c22:	2001      	movs	r0, #1
 8008c24:	4240      	negs	r0, r0
 8008c26:	bd70      	pop	{r4, r5, r6, pc}
 8008c28:	002a      	movs	r2, r5
 8008c2a:	0031      	movs	r1, r6
 8008c2c:	6800      	ldr	r0, [r0, #0]
 8008c2e:	f7ff ffdd 	bl	8008bec <_swiread>
 8008c32:	1c43      	adds	r3, r0, #1
 8008c34:	d0f7      	beq.n	8008c26 <_read+0x1a>
 8008c36:	6863      	ldr	r3, [r4, #4]
 8008c38:	1a28      	subs	r0, r5, r0
 8008c3a:	181b      	adds	r3, r3, r0
 8008c3c:	6063      	str	r3, [r4, #4]
 8008c3e:	e7f2      	b.n	8008c26 <_read+0x1a>

08008c40 <_swilseek>:
 8008c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c42:	000c      	movs	r4, r1
 8008c44:	0016      	movs	r6, r2
 8008c46:	f7ff ff99 	bl	8008b7c <findslot>
 8008c4a:	1e05      	subs	r5, r0, #0
 8008c4c:	d107      	bne.n	8008c5e <_swilseek+0x1e>
 8008c4e:	f000 fa37 	bl	80090c0 <__errno>
 8008c52:	2309      	movs	r3, #9
 8008c54:	6003      	str	r3, [r0, #0]
 8008c56:	2401      	movs	r4, #1
 8008c58:	4264      	negs	r4, r4
 8008c5a:	0020      	movs	r0, r4
 8008c5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c5e:	2e02      	cmp	r6, #2
 8008c60:	d903      	bls.n	8008c6a <_swilseek+0x2a>
 8008c62:	f000 fa2d 	bl	80090c0 <__errno>
 8008c66:	2316      	movs	r3, #22
 8008c68:	e7f4      	b.n	8008c54 <_swilseek+0x14>
 8008c6a:	2e01      	cmp	r6, #1
 8008c6c:	d112      	bne.n	8008c94 <_swilseek+0x54>
 8008c6e:	6843      	ldr	r3, [r0, #4]
 8008c70:	18e4      	adds	r4, r4, r3
 8008c72:	d4f6      	bmi.n	8008c62 <_swilseek+0x22>
 8008c74:	466f      	mov	r7, sp
 8008c76:	682b      	ldr	r3, [r5, #0]
 8008c78:	260a      	movs	r6, #10
 8008c7a:	9300      	str	r3, [sp, #0]
 8008c7c:	607c      	str	r4, [r7, #4]
 8008c7e:	1c30      	adds	r0, r6, #0
 8008c80:	1c39      	adds	r1, r7, #0
 8008c82:	beab      	bkpt	0x00ab
 8008c84:	1c06      	adds	r6, r0, #0
 8008c86:	0030      	movs	r0, r6
 8008c88:	f7ff ff92 	bl	8008bb0 <checkerror>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	dbe2      	blt.n	8008c56 <_swilseek+0x16>
 8008c90:	606c      	str	r4, [r5, #4]
 8008c92:	e7e2      	b.n	8008c5a <_swilseek+0x1a>
 8008c94:	2e02      	cmp	r6, #2
 8008c96:	d1ed      	bne.n	8008c74 <_swilseek+0x34>
 8008c98:	6803      	ldr	r3, [r0, #0]
 8008c9a:	466f      	mov	r7, sp
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	360a      	adds	r6, #10
 8008ca0:	1c30      	adds	r0, r6, #0
 8008ca2:	1c39      	adds	r1, r7, #0
 8008ca4:	beab      	bkpt	0x00ab
 8008ca6:	1c06      	adds	r6, r0, #0
 8008ca8:	0030      	movs	r0, r6
 8008caa:	f7ff ff81 	bl	8008bb0 <checkerror>
 8008cae:	1824      	adds	r4, r4, r0
 8008cb0:	1c43      	adds	r3, r0, #1
 8008cb2:	d1df      	bne.n	8008c74 <_swilseek+0x34>
 8008cb4:	e7cf      	b.n	8008c56 <_swilseek+0x16>

08008cb6 <_lseek>:
 8008cb6:	b510      	push	{r4, lr}
 8008cb8:	f7ff ffc2 	bl	8008c40 <_swilseek>
 8008cbc:	bd10      	pop	{r4, pc}

08008cbe <_swiwrite>:
 8008cbe:	b530      	push	{r4, r5, lr}
 8008cc0:	b085      	sub	sp, #20
 8008cc2:	ad01      	add	r5, sp, #4
 8008cc4:	9001      	str	r0, [sp, #4]
 8008cc6:	9102      	str	r1, [sp, #8]
 8008cc8:	9203      	str	r2, [sp, #12]
 8008cca:	2405      	movs	r4, #5
 8008ccc:	1c20      	adds	r0, r4, #0
 8008cce:	1c29      	adds	r1, r5, #0
 8008cd0:	beab      	bkpt	0x00ab
 8008cd2:	1c04      	adds	r4, r0, #0
 8008cd4:	0020      	movs	r0, r4
 8008cd6:	f7ff ff6b 	bl	8008bb0 <checkerror>
 8008cda:	b005      	add	sp, #20
 8008cdc:	bd30      	pop	{r4, r5, pc}

08008cde <_write>:
 8008cde:	b570      	push	{r4, r5, r6, lr}
 8008ce0:	000e      	movs	r6, r1
 8008ce2:	0015      	movs	r5, r2
 8008ce4:	f7ff ff4a 	bl	8008b7c <findslot>
 8008ce8:	1e04      	subs	r4, r0, #0
 8008cea:	d106      	bne.n	8008cfa <_write+0x1c>
 8008cec:	f000 f9e8 	bl	80090c0 <__errno>
 8008cf0:	2309      	movs	r3, #9
 8008cf2:	6003      	str	r3, [r0, #0]
 8008cf4:	2001      	movs	r0, #1
 8008cf6:	4240      	negs	r0, r0
 8008cf8:	e00f      	b.n	8008d1a <_write+0x3c>
 8008cfa:	002a      	movs	r2, r5
 8008cfc:	0031      	movs	r1, r6
 8008cfe:	6800      	ldr	r0, [r0, #0]
 8008d00:	f7ff ffdd 	bl	8008cbe <_swiwrite>
 8008d04:	1e02      	subs	r2, r0, #0
 8008d06:	dbf5      	blt.n	8008cf4 <_write+0x16>
 8008d08:	6863      	ldr	r3, [r4, #4]
 8008d0a:	1a28      	subs	r0, r5, r0
 8008d0c:	1819      	adds	r1, r3, r0
 8008d0e:	6061      	str	r1, [r4, #4]
 8008d10:	42aa      	cmp	r2, r5
 8008d12:	d102      	bne.n	8008d1a <_write+0x3c>
 8008d14:	2000      	movs	r0, #0
 8008d16:	f7ff ff5b 	bl	8008bd0 <error>
 8008d1a:	bd70      	pop	{r4, r5, r6, pc}

08008d1c <_swiclose>:
 8008d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d1e:	2402      	movs	r4, #2
 8008d20:	9001      	str	r0, [sp, #4]
 8008d22:	ad01      	add	r5, sp, #4
 8008d24:	1c20      	adds	r0, r4, #0
 8008d26:	1c29      	adds	r1, r5, #0
 8008d28:	beab      	bkpt	0x00ab
 8008d2a:	1c04      	adds	r4, r0, #0
 8008d2c:	0020      	movs	r0, r4
 8008d2e:	f7ff ff3f 	bl	8008bb0 <checkerror>
 8008d32:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08008d34 <_close>:
 8008d34:	b570      	push	{r4, r5, r6, lr}
 8008d36:	0005      	movs	r5, r0
 8008d38:	f7ff ff20 	bl	8008b7c <findslot>
 8008d3c:	1e04      	subs	r4, r0, #0
 8008d3e:	d106      	bne.n	8008d4e <_close+0x1a>
 8008d40:	f000 f9be 	bl	80090c0 <__errno>
 8008d44:	2309      	movs	r3, #9
 8008d46:	6003      	str	r3, [r0, #0]
 8008d48:	2001      	movs	r0, #1
 8008d4a:	4240      	negs	r0, r0
 8008d4c:	bd70      	pop	{r4, r5, r6, pc}
 8008d4e:	3d01      	subs	r5, #1
 8008d50:	2d01      	cmp	r5, #1
 8008d52:	d809      	bhi.n	8008d68 <_close+0x34>
 8008d54:	4b09      	ldr	r3, [pc, #36]	; (8008d7c <_close+0x48>)
 8008d56:	689a      	ldr	r2, [r3, #8]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d104      	bne.n	8008d68 <_close+0x34>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	425b      	negs	r3, r3
 8008d62:	6003      	str	r3, [r0, #0]
 8008d64:	2000      	movs	r0, #0
 8008d66:	e7f1      	b.n	8008d4c <_close+0x18>
 8008d68:	6820      	ldr	r0, [r4, #0]
 8008d6a:	f7ff ffd7 	bl	8008d1c <_swiclose>
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d1ec      	bne.n	8008d4c <_close+0x18>
 8008d72:	2301      	movs	r3, #1
 8008d74:	425b      	negs	r3, r3
 8008d76:	6023      	str	r3, [r4, #0]
 8008d78:	e7e8      	b.n	8008d4c <_close+0x18>
 8008d7a:	46c0      	nop			; (mov r8, r8)
 8008d7c:	20000428 	.word	0x20000428

08008d80 <_swistat>:
 8008d80:	b570      	push	{r4, r5, r6, lr}
 8008d82:	000c      	movs	r4, r1
 8008d84:	f7ff fefa 	bl	8008b7c <findslot>
 8008d88:	1e06      	subs	r6, r0, #0
 8008d8a:	d106      	bne.n	8008d9a <_swistat+0x1a>
 8008d8c:	f000 f998 	bl	80090c0 <__errno>
 8008d90:	2309      	movs	r3, #9
 8008d92:	6003      	str	r3, [r0, #0]
 8008d94:	2001      	movs	r0, #1
 8008d96:	4240      	negs	r0, r0
 8008d98:	bd70      	pop	{r4, r5, r6, pc}
 8008d9a:	2380      	movs	r3, #128	; 0x80
 8008d9c:	6862      	ldr	r2, [r4, #4]
 8008d9e:	019b      	lsls	r3, r3, #6
 8008da0:	4313      	orrs	r3, r2
 8008da2:	6063      	str	r3, [r4, #4]
 8008da4:	2380      	movs	r3, #128	; 0x80
 8008da6:	00db      	lsls	r3, r3, #3
 8008da8:	6463      	str	r3, [r4, #68]	; 0x44
 8008daa:	250c      	movs	r5, #12
 8008dac:	1c28      	adds	r0, r5, #0
 8008dae:	1c31      	adds	r1, r6, #0
 8008db0:	beab      	bkpt	0x00ab
 8008db2:	1c05      	adds	r5, r0, #0
 8008db4:	0028      	movs	r0, r5
 8008db6:	f7ff fefb 	bl	8008bb0 <checkerror>
 8008dba:	1c43      	adds	r3, r0, #1
 8008dbc:	d0ec      	beq.n	8008d98 <_swistat+0x18>
 8008dbe:	6120      	str	r0, [r4, #16]
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	e7e9      	b.n	8008d98 <_swistat+0x18>

08008dc4 <_fstat>:
 8008dc4:	b570      	push	{r4, r5, r6, lr}
 8008dc6:	000c      	movs	r4, r1
 8008dc8:	0005      	movs	r5, r0
 8008dca:	2258      	movs	r2, #88	; 0x58
 8008dcc:	2100      	movs	r1, #0
 8008dce:	0020      	movs	r0, r4
 8008dd0:	f000 fa7f 	bl	80092d2 <memset>
 8008dd4:	0028      	movs	r0, r5
 8008dd6:	0021      	movs	r1, r4
 8008dd8:	f7ff ffd2 	bl	8008d80 <_swistat>
 8008ddc:	bd70      	pop	{r4, r5, r6, pc}

08008dde <_stat>:
 8008dde:	b570      	push	{r4, r5, r6, lr}
 8008de0:	000d      	movs	r5, r1
 8008de2:	0004      	movs	r4, r0
 8008de4:	2258      	movs	r2, #88	; 0x58
 8008de6:	2100      	movs	r1, #0
 8008de8:	0028      	movs	r0, r5
 8008dea:	f000 fa72 	bl	80092d2 <memset>
 8008dee:	0020      	movs	r0, r4
 8008df0:	2100      	movs	r1, #0
 8008df2:	f000 f813 	bl	8008e1c <_swiopen>
 8008df6:	0004      	movs	r4, r0
 8008df8:	1c43      	adds	r3, r0, #1
 8008dfa:	d00c      	beq.n	8008e16 <_stat+0x38>
 8008dfc:	2381      	movs	r3, #129	; 0x81
 8008dfe:	686a      	ldr	r2, [r5, #4]
 8008e00:	021b      	lsls	r3, r3, #8
 8008e02:	4313      	orrs	r3, r2
 8008e04:	606b      	str	r3, [r5, #4]
 8008e06:	0029      	movs	r1, r5
 8008e08:	f7ff ffba 	bl	8008d80 <_swistat>
 8008e0c:	0005      	movs	r5, r0
 8008e0e:	0020      	movs	r0, r4
 8008e10:	f7ff ff90 	bl	8008d34 <_close>
 8008e14:	002c      	movs	r4, r5
 8008e16:	0020      	movs	r0, r4
 8008e18:	bd70      	pop	{r4, r5, r6, pc}
	...

08008e1c <_swiopen>:
 8008e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e1e:	000d      	movs	r5, r1
 8008e20:	2700      	movs	r7, #0
 8008e22:	b099      	sub	sp, #100	; 0x64
 8008e24:	9000      	str	r0, [sp, #0]
 8008e26:	00fb      	lsls	r3, r7, #3
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	4b29      	ldr	r3, [pc, #164]	; (8008ed0 <_swiopen+0xb4>)
 8008e2c:	00fa      	lsls	r2, r7, #3
 8008e2e:	589c      	ldr	r4, [r3, r2]
 8008e30:	1c63      	adds	r3, r4, #1
 8008e32:	d038      	beq.n	8008ea6 <_swiopen+0x8a>
 8008e34:	3701      	adds	r7, #1
 8008e36:	2f14      	cmp	r7, #20
 8008e38:	d1f5      	bne.n	8008e26 <_swiopen+0xa>
 8008e3a:	f000 f941 	bl	80090c0 <__errno>
 8008e3e:	2401      	movs	r4, #1
 8008e40:	2318      	movs	r3, #24
 8008e42:	4264      	negs	r4, r4
 8008e44:	6003      	str	r3, [r0, #0]
 8008e46:	e03f      	b.n	8008ec8 <_swiopen+0xac>
 8008e48:	2302      	movs	r3, #2
 8008e4a:	03ec      	lsls	r4, r5, #15
 8008e4c:	0fe4      	lsrs	r4, r4, #31
 8008e4e:	421d      	tst	r5, r3
 8008e50:	d000      	beq.n	8008e54 <_swiopen+0x38>
 8008e52:	431c      	orrs	r4, r3
 8008e54:	4b1f      	ldr	r3, [pc, #124]	; (8008ed4 <_swiopen+0xb8>)
 8008e56:	421d      	tst	r5, r3
 8008e58:	d001      	beq.n	8008e5e <_swiopen+0x42>
 8008e5a:	2304      	movs	r3, #4
 8008e5c:	431c      	orrs	r4, r3
 8008e5e:	2308      	movs	r3, #8
 8008e60:	421d      	tst	r5, r3
 8008e62:	d002      	beq.n	8008e6a <_swiopen+0x4e>
 8008e64:	2204      	movs	r2, #4
 8008e66:	4394      	bics	r4, r2
 8008e68:	431c      	orrs	r4, r3
 8008e6a:	9b00      	ldr	r3, [sp, #0]
 8008e6c:	0018      	movs	r0, r3
 8008e6e:	9302      	str	r3, [sp, #8]
 8008e70:	f7f7 f94a 	bl	8000108 <strlen>
 8008e74:	6074      	str	r4, [r6, #4]
 8008e76:	60b0      	str	r0, [r6, #8]
 8008e78:	2401      	movs	r4, #1
 8008e7a:	1c20      	adds	r0, r4, #0
 8008e7c:	1c31      	adds	r1, r6, #0
 8008e7e:	beab      	bkpt	0x00ab
 8008e80:	1c06      	adds	r6, r0, #0
 8008e82:	2e00      	cmp	r6, #0
 8008e84:	db0a      	blt.n	8008e9c <_swiopen+0x80>
 8008e86:	4b12      	ldr	r3, [pc, #72]	; (8008ed0 <_swiopen+0xb4>)
 8008e88:	00fa      	lsls	r2, r7, #3
 8008e8a:	509e      	str	r6, [r3, r2]
 8008e8c:	0013      	movs	r3, r2
 8008e8e:	4a10      	ldr	r2, [pc, #64]	; (8008ed0 <_swiopen+0xb4>)
 8008e90:	003c      	movs	r4, r7
 8008e92:	4694      	mov	ip, r2
 8008e94:	2200      	movs	r2, #0
 8008e96:	4463      	add	r3, ip
 8008e98:	605a      	str	r2, [r3, #4]
 8008e9a:	e015      	b.n	8008ec8 <_swiopen+0xac>
 8008e9c:	0030      	movs	r0, r6
 8008e9e:	f7ff fe97 	bl	8008bd0 <error>
 8008ea2:	0004      	movs	r4, r0
 8008ea4:	e010      	b.n	8008ec8 <_swiopen+0xac>
 8008ea6:	23a0      	movs	r3, #160	; 0xa0
 8008ea8:	002a      	movs	r2, r5
 8008eaa:	011b      	lsls	r3, r3, #4
 8008eac:	401a      	ands	r2, r3
 8008eae:	ae02      	add	r6, sp, #8
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d1c9      	bne.n	8008e48 <_swiopen+0x2c>
 8008eb4:	0031      	movs	r1, r6
 8008eb6:	9800      	ldr	r0, [sp, #0]
 8008eb8:	f7ff ff91 	bl	8008dde <_stat>
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	d0c3      	beq.n	8008e48 <_swiopen+0x2c>
 8008ec0:	f000 f8fe 	bl	80090c0 <__errno>
 8008ec4:	2311      	movs	r3, #17
 8008ec6:	6003      	str	r3, [r0, #0]
 8008ec8:	0020      	movs	r0, r4
 8008eca:	b019      	add	sp, #100	; 0x64
 8008ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ece:	46c0      	nop			; (mov r8, r8)
 8008ed0:	20000428 	.word	0x20000428
 8008ed4:	00000601 	.word	0x00000601

08008ed8 <_get_semihosting_exts>:
 8008ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eda:	b085      	sub	sp, #20
 8008edc:	9000      	str	r0, [sp, #0]
 8008ede:	9101      	str	r1, [sp, #4]
 8008ee0:	4827      	ldr	r0, [pc, #156]	; (8008f80 <_get_semihosting_exts+0xa8>)
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	0015      	movs	r5, r2
 8008ee6:	f7ff ff99 	bl	8008e1c <_swiopen>
 8008eea:	0004      	movs	r4, r0
 8008eec:	002a      	movs	r2, r5
 8008eee:	2100      	movs	r1, #0
 8008ef0:	9800      	ldr	r0, [sp, #0]
 8008ef2:	f000 f9ee 	bl	80092d2 <memset>
 8008ef6:	1c63      	adds	r3, r4, #1
 8008ef8:	d015      	beq.n	8008f26 <_get_semihosting_exts+0x4e>
 8008efa:	0020      	movs	r0, r4
 8008efc:	f7ff fe3e 	bl	8008b7c <findslot>
 8008f00:	260c      	movs	r6, #12
 8008f02:	0007      	movs	r7, r0
 8008f04:	1c30      	adds	r0, r6, #0
 8008f06:	1c39      	adds	r1, r7, #0
 8008f08:	beab      	bkpt	0x00ab
 8008f0a:	1c06      	adds	r6, r0, #0
 8008f0c:	0030      	movs	r0, r6
 8008f0e:	f7ff fe4f 	bl	8008bb0 <checkerror>
 8008f12:	2803      	cmp	r0, #3
 8008f14:	dd02      	ble.n	8008f1c <_get_semihosting_exts+0x44>
 8008f16:	3803      	subs	r0, #3
 8008f18:	42a8      	cmp	r0, r5
 8008f1a:	dc07      	bgt.n	8008f2c <_get_semihosting_exts+0x54>
 8008f1c:	0020      	movs	r0, r4
 8008f1e:	2401      	movs	r4, #1
 8008f20:	f7ff ff08 	bl	8008d34 <_close>
 8008f24:	4264      	negs	r4, r4
 8008f26:	0020      	movs	r0, r4
 8008f28:	b005      	add	sp, #20
 8008f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f2c:	ae03      	add	r6, sp, #12
 8008f2e:	2204      	movs	r2, #4
 8008f30:	0031      	movs	r1, r6
 8008f32:	0020      	movs	r0, r4
 8008f34:	f7ff fe6a 	bl	8008c0c <_read>
 8008f38:	2803      	cmp	r0, #3
 8008f3a:	ddef      	ble.n	8008f1c <_get_semihosting_exts+0x44>
 8008f3c:	7833      	ldrb	r3, [r6, #0]
 8008f3e:	2b53      	cmp	r3, #83	; 0x53
 8008f40:	d1ec      	bne.n	8008f1c <_get_semihosting_exts+0x44>
 8008f42:	7873      	ldrb	r3, [r6, #1]
 8008f44:	2b48      	cmp	r3, #72	; 0x48
 8008f46:	d1e9      	bne.n	8008f1c <_get_semihosting_exts+0x44>
 8008f48:	78b3      	ldrb	r3, [r6, #2]
 8008f4a:	2b46      	cmp	r3, #70	; 0x46
 8008f4c:	d1e6      	bne.n	8008f1c <_get_semihosting_exts+0x44>
 8008f4e:	78f3      	ldrb	r3, [r6, #3]
 8008f50:	2b42      	cmp	r3, #66	; 0x42
 8008f52:	d1e3      	bne.n	8008f1c <_get_semihosting_exts+0x44>
 8008f54:	2201      	movs	r2, #1
 8008f56:	9901      	ldr	r1, [sp, #4]
 8008f58:	0020      	movs	r0, r4
 8008f5a:	f7ff fe71 	bl	8008c40 <_swilseek>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	dbdc      	blt.n	8008f1c <_get_semihosting_exts+0x44>
 8008f62:	002a      	movs	r2, r5
 8008f64:	9900      	ldr	r1, [sp, #0]
 8008f66:	0020      	movs	r0, r4
 8008f68:	f7ff fe50 	bl	8008c0c <_read>
 8008f6c:	0005      	movs	r5, r0
 8008f6e:	0020      	movs	r0, r4
 8008f70:	f7ff fee0 	bl	8008d34 <_close>
 8008f74:	0028      	movs	r0, r5
 8008f76:	f7ff fe1b 	bl	8008bb0 <checkerror>
 8008f7a:	0004      	movs	r4, r0
 8008f7c:	e7d3      	b.n	8008f26 <_get_semihosting_exts+0x4e>
 8008f7e:	46c0      	nop			; (mov r8, r8)
 8008f80:	0800bb04 	.word	0x0800bb04

08008f84 <initialise_semihosting_exts>:
 8008f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f86:	2401      	movs	r4, #1
 8008f88:	2100      	movs	r1, #0
 8008f8a:	4e09      	ldr	r6, [pc, #36]	; (8008fb0 <initialise_semihosting_exts+0x2c>)
 8008f8c:	4d09      	ldr	r5, [pc, #36]	; (8008fb4 <initialise_semihosting_exts+0x30>)
 8008f8e:	af01      	add	r7, sp, #4
 8008f90:	0022      	movs	r2, r4
 8008f92:	0038      	movs	r0, r7
 8008f94:	6031      	str	r1, [r6, #0]
 8008f96:	602c      	str	r4, [r5, #0]
 8008f98:	f7ff ff9e 	bl	8008ed8 <_get_semihosting_exts>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	dd05      	ble.n	8008fac <initialise_semihosting_exts+0x28>
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	783b      	ldrb	r3, [r7, #0]
 8008fa4:	401c      	ands	r4, r3
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	6034      	str	r4, [r6, #0]
 8008faa:	602b      	str	r3, [r5, #0]
 8008fac:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008fae:	46c0      	nop			; (mov r8, r8)
 8008fb0:	20000164 	.word	0x20000164
 8008fb4:	20000168 	.word	0x20000168

08008fb8 <_has_ext_stdout_stderr>:
 8008fb8:	b510      	push	{r4, lr}
 8008fba:	4c04      	ldr	r4, [pc, #16]	; (8008fcc <_has_ext_stdout_stderr+0x14>)
 8008fbc:	6823      	ldr	r3, [r4, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	da01      	bge.n	8008fc6 <_has_ext_stdout_stderr+0xe>
 8008fc2:	f7ff ffdf 	bl	8008f84 <initialise_semihosting_exts>
 8008fc6:	6820      	ldr	r0, [r4, #0]
 8008fc8:	bd10      	pop	{r4, pc}
 8008fca:	46c0      	nop			; (mov r8, r8)
 8008fcc:	20000168 	.word	0x20000168

08008fd0 <initialise_monitor_handles>:
 8008fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fd2:	4b27      	ldr	r3, [pc, #156]	; (8009070 <initialise_monitor_handles+0xa0>)
 8008fd4:	b085      	sub	sp, #20
 8008fd6:	9301      	str	r3, [sp, #4]
 8008fd8:	2500      	movs	r5, #0
 8008fda:	2303      	movs	r3, #3
 8008fdc:	ac01      	add	r4, sp, #4
 8008fde:	60a3      	str	r3, [r4, #8]
 8008fe0:	2701      	movs	r7, #1
 8008fe2:	6065      	str	r5, [r4, #4]
 8008fe4:	1c38      	adds	r0, r7, #0
 8008fe6:	1c21      	adds	r1, r4, #0
 8008fe8:	beab      	bkpt	0x00ab
 8008fea:	1c07      	adds	r7, r0, #0
 8008fec:	2101      	movs	r1, #1
 8008fee:	4b21      	ldr	r3, [pc, #132]	; (8009074 <initialise_monitor_handles+0xa4>)
 8008ff0:	4249      	negs	r1, r1
 8008ff2:	601f      	str	r7, [r3, #0]
 8008ff4:	002b      	movs	r3, r5
 8008ff6:	4d20      	ldr	r5, [pc, #128]	; (8009078 <initialise_monitor_handles+0xa8>)
 8008ff8:	00da      	lsls	r2, r3, #3
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	50a9      	str	r1, [r5, r2]
 8008ffe:	2b14      	cmp	r3, #20
 8009000:	d1fa      	bne.n	8008ff8 <initialise_monitor_handles+0x28>
 8009002:	f7ff ffd9 	bl	8008fb8 <_has_ext_stdout_stderr>
 8009006:	2800      	cmp	r0, #0
 8009008:	d018      	beq.n	800903c <initialise_monitor_handles+0x6c>
 800900a:	4b19      	ldr	r3, [pc, #100]	; (8009070 <initialise_monitor_handles+0xa0>)
 800900c:	2701      	movs	r7, #1
 800900e:	9301      	str	r3, [sp, #4]
 8009010:	2303      	movs	r3, #3
 8009012:	60a3      	str	r3, [r4, #8]
 8009014:	3301      	adds	r3, #1
 8009016:	6063      	str	r3, [r4, #4]
 8009018:	1c38      	adds	r0, r7, #0
 800901a:	1c21      	adds	r1, r4, #0
 800901c:	beab      	bkpt	0x00ab
 800901e:	1c06      	adds	r6, r0, #0
 8009020:	4b16      	ldr	r3, [pc, #88]	; (800907c <initialise_monitor_handles+0xac>)
 8009022:	4a13      	ldr	r2, [pc, #76]	; (8009070 <initialise_monitor_handles+0xa0>)
 8009024:	601e      	str	r6, [r3, #0]
 8009026:	2303      	movs	r3, #3
 8009028:	9201      	str	r2, [sp, #4]
 800902a:	60a3      	str	r3, [r4, #8]
 800902c:	3305      	adds	r3, #5
 800902e:	6063      	str	r3, [r4, #4]
 8009030:	1c38      	adds	r0, r7, #0
 8009032:	1c21      	adds	r1, r4, #0
 8009034:	beab      	bkpt	0x00ab
 8009036:	1c04      	adds	r4, r0, #0
 8009038:	4b11      	ldr	r3, [pc, #68]	; (8009080 <initialise_monitor_handles+0xb0>)
 800903a:	601c      	str	r4, [r3, #0]
 800903c:	4f10      	ldr	r7, [pc, #64]	; (8009080 <initialise_monitor_handles+0xb0>)
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	3301      	adds	r3, #1
 8009042:	d102      	bne.n	800904a <initialise_monitor_handles+0x7a>
 8009044:	4b0d      	ldr	r3, [pc, #52]	; (800907c <initialise_monitor_handles+0xac>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	603b      	str	r3, [r7, #0]
 800904a:	2400      	movs	r4, #0
 800904c:	4b09      	ldr	r3, [pc, #36]	; (8009074 <initialise_monitor_handles+0xa4>)
 800904e:	606c      	str	r4, [r5, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	602b      	str	r3, [r5, #0]
 8009054:	f7ff ffb0 	bl	8008fb8 <_has_ext_stdout_stderr>
 8009058:	42a0      	cmp	r0, r4
 800905a:	d006      	beq.n	800906a <initialise_monitor_handles+0x9a>
 800905c:	4b07      	ldr	r3, [pc, #28]	; (800907c <initialise_monitor_handles+0xac>)
 800905e:	60ec      	str	r4, [r5, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	616c      	str	r4, [r5, #20]
 8009064:	60ab      	str	r3, [r5, #8]
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	612b      	str	r3, [r5, #16]
 800906a:	b005      	add	sp, #20
 800906c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800906e:	46c0      	nop			; (mov r8, r8)
 8009070:	0800bb1a 	.word	0x0800bb1a
 8009074:	20000420 	.word	0x20000420
 8009078:	20000428 	.word	0x20000428
 800907c:	20000424 	.word	0x20000424
 8009080:	2000041c 	.word	0x2000041c

08009084 <_isatty>:
 8009084:	b570      	push	{r4, r5, r6, lr}
 8009086:	f7ff fd79 	bl	8008b7c <findslot>
 800908a:	2509      	movs	r5, #9
 800908c:	1e04      	subs	r4, r0, #0
 800908e:	d104      	bne.n	800909a <_isatty+0x16>
 8009090:	f000 f816 	bl	80090c0 <__errno>
 8009094:	6005      	str	r5, [r0, #0]
 8009096:	0020      	movs	r0, r4
 8009098:	bd70      	pop	{r4, r5, r6, pc}
 800909a:	1c28      	adds	r0, r5, #0
 800909c:	1c21      	adds	r1, r4, #0
 800909e:	beab      	bkpt	0x00ab
 80090a0:	1c04      	adds	r4, r0, #0
 80090a2:	0020      	movs	r0, r4
 80090a4:	2c01      	cmp	r4, #1
 80090a6:	d0f7      	beq.n	8009098 <_isatty+0x14>
 80090a8:	f000 f80a 	bl	80090c0 <__errno>
 80090ac:	2400      	movs	r4, #0
 80090ae:	0006      	movs	r6, r0
 80090b0:	2513      	movs	r5, #19
 80090b2:	1c28      	adds	r0, r5, #0
 80090b4:	1c21      	adds	r1, r4, #0
 80090b6:	beab      	bkpt	0x00ab
 80090b8:	1c05      	adds	r5, r0, #0
 80090ba:	6035      	str	r5, [r6, #0]
 80090bc:	e7eb      	b.n	8009096 <_isatty+0x12>
	...

080090c0 <__errno>:
 80090c0:	4b01      	ldr	r3, [pc, #4]	; (80090c8 <__errno+0x8>)
 80090c2:	6818      	ldr	r0, [r3, #0]
 80090c4:	4770      	bx	lr
 80090c6:	46c0      	nop			; (mov r8, r8)
 80090c8:	2000016c 	.word	0x2000016c

080090cc <std>:
 80090cc:	2300      	movs	r3, #0
 80090ce:	b510      	push	{r4, lr}
 80090d0:	0004      	movs	r4, r0
 80090d2:	6003      	str	r3, [r0, #0]
 80090d4:	6043      	str	r3, [r0, #4]
 80090d6:	6083      	str	r3, [r0, #8]
 80090d8:	8181      	strh	r1, [r0, #12]
 80090da:	6643      	str	r3, [r0, #100]	; 0x64
 80090dc:	81c2      	strh	r2, [r0, #14]
 80090de:	6103      	str	r3, [r0, #16]
 80090e0:	6143      	str	r3, [r0, #20]
 80090e2:	6183      	str	r3, [r0, #24]
 80090e4:	0019      	movs	r1, r3
 80090e6:	2208      	movs	r2, #8
 80090e8:	305c      	adds	r0, #92	; 0x5c
 80090ea:	f000 f8f2 	bl	80092d2 <memset>
 80090ee:	4b05      	ldr	r3, [pc, #20]	; (8009104 <std+0x38>)
 80090f0:	6224      	str	r4, [r4, #32]
 80090f2:	6263      	str	r3, [r4, #36]	; 0x24
 80090f4:	4b04      	ldr	r3, [pc, #16]	; (8009108 <std+0x3c>)
 80090f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80090f8:	4b04      	ldr	r3, [pc, #16]	; (800910c <std+0x40>)
 80090fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090fc:	4b04      	ldr	r3, [pc, #16]	; (8009110 <std+0x44>)
 80090fe:	6323      	str	r3, [r4, #48]	; 0x30
 8009100:	bd10      	pop	{r4, pc}
 8009102:	46c0      	nop			; (mov r8, r8)
 8009104:	08009d89 	.word	0x08009d89
 8009108:	08009db1 	.word	0x08009db1
 800910c:	08009de9 	.word	0x08009de9
 8009110:	08009e15 	.word	0x08009e15

08009114 <_cleanup_r>:
 8009114:	b510      	push	{r4, lr}
 8009116:	4902      	ldr	r1, [pc, #8]	; (8009120 <_cleanup_r+0xc>)
 8009118:	f000 f88c 	bl	8009234 <_fwalk_reent>
 800911c:	bd10      	pop	{r4, pc}
 800911e:	46c0      	nop			; (mov r8, r8)
 8009120:	0800ade5 	.word	0x0800ade5

08009124 <__sfmoreglue>:
 8009124:	b570      	push	{r4, r5, r6, lr}
 8009126:	2568      	movs	r5, #104	; 0x68
 8009128:	1e4a      	subs	r2, r1, #1
 800912a:	4355      	muls	r5, r2
 800912c:	000e      	movs	r6, r1
 800912e:	0029      	movs	r1, r5
 8009130:	3174      	adds	r1, #116	; 0x74
 8009132:	f000 f8d7 	bl	80092e4 <_malloc_r>
 8009136:	1e04      	subs	r4, r0, #0
 8009138:	d008      	beq.n	800914c <__sfmoreglue+0x28>
 800913a:	2100      	movs	r1, #0
 800913c:	002a      	movs	r2, r5
 800913e:	6001      	str	r1, [r0, #0]
 8009140:	6046      	str	r6, [r0, #4]
 8009142:	300c      	adds	r0, #12
 8009144:	60a0      	str	r0, [r4, #8]
 8009146:	3268      	adds	r2, #104	; 0x68
 8009148:	f000 f8c3 	bl	80092d2 <memset>
 800914c:	0020      	movs	r0, r4
 800914e:	bd70      	pop	{r4, r5, r6, pc}

08009150 <__sinit>:
 8009150:	6983      	ldr	r3, [r0, #24]
 8009152:	b513      	push	{r0, r1, r4, lr}
 8009154:	0004      	movs	r4, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d128      	bne.n	80091ac <__sinit+0x5c>
 800915a:	6483      	str	r3, [r0, #72]	; 0x48
 800915c:	64c3      	str	r3, [r0, #76]	; 0x4c
 800915e:	6503      	str	r3, [r0, #80]	; 0x50
 8009160:	4b13      	ldr	r3, [pc, #76]	; (80091b0 <__sinit+0x60>)
 8009162:	4a14      	ldr	r2, [pc, #80]	; (80091b4 <__sinit+0x64>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	6282      	str	r2, [r0, #40]	; 0x28
 8009168:	9301      	str	r3, [sp, #4]
 800916a:	4298      	cmp	r0, r3
 800916c:	d101      	bne.n	8009172 <__sinit+0x22>
 800916e:	2301      	movs	r3, #1
 8009170:	6183      	str	r3, [r0, #24]
 8009172:	0020      	movs	r0, r4
 8009174:	f000 f820 	bl	80091b8 <__sfp>
 8009178:	6060      	str	r0, [r4, #4]
 800917a:	0020      	movs	r0, r4
 800917c:	f000 f81c 	bl	80091b8 <__sfp>
 8009180:	60a0      	str	r0, [r4, #8]
 8009182:	0020      	movs	r0, r4
 8009184:	f000 f818 	bl	80091b8 <__sfp>
 8009188:	2200      	movs	r2, #0
 800918a:	60e0      	str	r0, [r4, #12]
 800918c:	2104      	movs	r1, #4
 800918e:	6860      	ldr	r0, [r4, #4]
 8009190:	f7ff ff9c 	bl	80090cc <std>
 8009194:	2201      	movs	r2, #1
 8009196:	2109      	movs	r1, #9
 8009198:	68a0      	ldr	r0, [r4, #8]
 800919a:	f7ff ff97 	bl	80090cc <std>
 800919e:	2202      	movs	r2, #2
 80091a0:	2112      	movs	r1, #18
 80091a2:	68e0      	ldr	r0, [r4, #12]
 80091a4:	f7ff ff92 	bl	80090cc <std>
 80091a8:	2301      	movs	r3, #1
 80091aa:	61a3      	str	r3, [r4, #24]
 80091ac:	bd13      	pop	{r0, r1, r4, pc}
 80091ae:	46c0      	nop			; (mov r8, r8)
 80091b0:	0800bb80 	.word	0x0800bb80
 80091b4:	08009115 	.word	0x08009115

080091b8 <__sfp>:
 80091b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ba:	4b1c      	ldr	r3, [pc, #112]	; (800922c <__sfp+0x74>)
 80091bc:	0007      	movs	r7, r0
 80091be:	681e      	ldr	r6, [r3, #0]
 80091c0:	69b3      	ldr	r3, [r6, #24]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d102      	bne.n	80091cc <__sfp+0x14>
 80091c6:	0030      	movs	r0, r6
 80091c8:	f7ff ffc2 	bl	8009150 <__sinit>
 80091cc:	3648      	adds	r6, #72	; 0x48
 80091ce:	68b4      	ldr	r4, [r6, #8]
 80091d0:	6873      	ldr	r3, [r6, #4]
 80091d2:	3b01      	subs	r3, #1
 80091d4:	d504      	bpl.n	80091e0 <__sfp+0x28>
 80091d6:	6833      	ldr	r3, [r6, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d007      	beq.n	80091ec <__sfp+0x34>
 80091dc:	6836      	ldr	r6, [r6, #0]
 80091de:	e7f6      	b.n	80091ce <__sfp+0x16>
 80091e0:	220c      	movs	r2, #12
 80091e2:	5ea5      	ldrsh	r5, [r4, r2]
 80091e4:	2d00      	cmp	r5, #0
 80091e6:	d00d      	beq.n	8009204 <__sfp+0x4c>
 80091e8:	3468      	adds	r4, #104	; 0x68
 80091ea:	e7f2      	b.n	80091d2 <__sfp+0x1a>
 80091ec:	2104      	movs	r1, #4
 80091ee:	0038      	movs	r0, r7
 80091f0:	f7ff ff98 	bl	8009124 <__sfmoreglue>
 80091f4:	6030      	str	r0, [r6, #0]
 80091f6:	2800      	cmp	r0, #0
 80091f8:	d1f0      	bne.n	80091dc <__sfp+0x24>
 80091fa:	230c      	movs	r3, #12
 80091fc:	0004      	movs	r4, r0
 80091fe:	603b      	str	r3, [r7, #0]
 8009200:	0020      	movs	r0, r4
 8009202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009204:	0020      	movs	r0, r4
 8009206:	4b0a      	ldr	r3, [pc, #40]	; (8009230 <__sfp+0x78>)
 8009208:	6665      	str	r5, [r4, #100]	; 0x64
 800920a:	6025      	str	r5, [r4, #0]
 800920c:	6065      	str	r5, [r4, #4]
 800920e:	60a5      	str	r5, [r4, #8]
 8009210:	60e3      	str	r3, [r4, #12]
 8009212:	6125      	str	r5, [r4, #16]
 8009214:	6165      	str	r5, [r4, #20]
 8009216:	61a5      	str	r5, [r4, #24]
 8009218:	2208      	movs	r2, #8
 800921a:	0029      	movs	r1, r5
 800921c:	305c      	adds	r0, #92	; 0x5c
 800921e:	f000 f858 	bl	80092d2 <memset>
 8009222:	6365      	str	r5, [r4, #52]	; 0x34
 8009224:	63a5      	str	r5, [r4, #56]	; 0x38
 8009226:	64a5      	str	r5, [r4, #72]	; 0x48
 8009228:	64e5      	str	r5, [r4, #76]	; 0x4c
 800922a:	e7e9      	b.n	8009200 <__sfp+0x48>
 800922c:	0800bb80 	.word	0x0800bb80
 8009230:	ffff0001 	.word	0xffff0001

08009234 <_fwalk_reent>:
 8009234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009236:	0004      	movs	r4, r0
 8009238:	0007      	movs	r7, r0
 800923a:	2600      	movs	r6, #0
 800923c:	9101      	str	r1, [sp, #4]
 800923e:	3448      	adds	r4, #72	; 0x48
 8009240:	2c00      	cmp	r4, #0
 8009242:	d101      	bne.n	8009248 <_fwalk_reent+0x14>
 8009244:	0030      	movs	r0, r6
 8009246:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009248:	6863      	ldr	r3, [r4, #4]
 800924a:	68a5      	ldr	r5, [r4, #8]
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	9b00      	ldr	r3, [sp, #0]
 8009250:	3b01      	subs	r3, #1
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	d501      	bpl.n	800925a <_fwalk_reent+0x26>
 8009256:	6824      	ldr	r4, [r4, #0]
 8009258:	e7f2      	b.n	8009240 <_fwalk_reent+0xc>
 800925a:	89ab      	ldrh	r3, [r5, #12]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d908      	bls.n	8009272 <_fwalk_reent+0x3e>
 8009260:	220e      	movs	r2, #14
 8009262:	5eab      	ldrsh	r3, [r5, r2]
 8009264:	3301      	adds	r3, #1
 8009266:	d004      	beq.n	8009272 <_fwalk_reent+0x3e>
 8009268:	0029      	movs	r1, r5
 800926a:	0038      	movs	r0, r7
 800926c:	9b01      	ldr	r3, [sp, #4]
 800926e:	4798      	blx	r3
 8009270:	4306      	orrs	r6, r0
 8009272:	3568      	adds	r5, #104	; 0x68
 8009274:	e7eb      	b.n	800924e <_fwalk_reent+0x1a>
	...

08009278 <__libc_init_array>:
 8009278:	b570      	push	{r4, r5, r6, lr}
 800927a:	2600      	movs	r6, #0
 800927c:	4d0c      	ldr	r5, [pc, #48]	; (80092b0 <__libc_init_array+0x38>)
 800927e:	4c0d      	ldr	r4, [pc, #52]	; (80092b4 <__libc_init_array+0x3c>)
 8009280:	1b64      	subs	r4, r4, r5
 8009282:	10a4      	asrs	r4, r4, #2
 8009284:	42a6      	cmp	r6, r4
 8009286:	d109      	bne.n	800929c <__libc_init_array+0x24>
 8009288:	2600      	movs	r6, #0
 800928a:	f002 fb4d 	bl	800b928 <_init>
 800928e:	4d0a      	ldr	r5, [pc, #40]	; (80092b8 <__libc_init_array+0x40>)
 8009290:	4c0a      	ldr	r4, [pc, #40]	; (80092bc <__libc_init_array+0x44>)
 8009292:	1b64      	subs	r4, r4, r5
 8009294:	10a4      	asrs	r4, r4, #2
 8009296:	42a6      	cmp	r6, r4
 8009298:	d105      	bne.n	80092a6 <__libc_init_array+0x2e>
 800929a:	bd70      	pop	{r4, r5, r6, pc}
 800929c:	00b3      	lsls	r3, r6, #2
 800929e:	58eb      	ldr	r3, [r5, r3]
 80092a0:	4798      	blx	r3
 80092a2:	3601      	adds	r6, #1
 80092a4:	e7ee      	b.n	8009284 <__libc_init_array+0xc>
 80092a6:	00b3      	lsls	r3, r6, #2
 80092a8:	58eb      	ldr	r3, [r5, r3]
 80092aa:	4798      	blx	r3
 80092ac:	3601      	adds	r6, #1
 80092ae:	e7f2      	b.n	8009296 <__libc_init_array+0x1e>
 80092b0:	0800bde0 	.word	0x0800bde0
 80092b4:	0800bde0 	.word	0x0800bde0
 80092b8:	0800bde0 	.word	0x0800bde0
 80092bc:	0800bde4 	.word	0x0800bde4

080092c0 <memcpy>:
 80092c0:	2300      	movs	r3, #0
 80092c2:	b510      	push	{r4, lr}
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d100      	bne.n	80092ca <memcpy+0xa>
 80092c8:	bd10      	pop	{r4, pc}
 80092ca:	5ccc      	ldrb	r4, [r1, r3]
 80092cc:	54c4      	strb	r4, [r0, r3]
 80092ce:	3301      	adds	r3, #1
 80092d0:	e7f8      	b.n	80092c4 <memcpy+0x4>

080092d2 <memset>:
 80092d2:	0003      	movs	r3, r0
 80092d4:	1812      	adds	r2, r2, r0
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d100      	bne.n	80092dc <memset+0xa>
 80092da:	4770      	bx	lr
 80092dc:	7019      	strb	r1, [r3, #0]
 80092de:	3301      	adds	r3, #1
 80092e0:	e7f9      	b.n	80092d6 <memset+0x4>
	...

080092e4 <_malloc_r>:
 80092e4:	2303      	movs	r3, #3
 80092e6:	b570      	push	{r4, r5, r6, lr}
 80092e8:	1ccd      	adds	r5, r1, #3
 80092ea:	439d      	bics	r5, r3
 80092ec:	3508      	adds	r5, #8
 80092ee:	0006      	movs	r6, r0
 80092f0:	2d0c      	cmp	r5, #12
 80092f2:	d21e      	bcs.n	8009332 <_malloc_r+0x4e>
 80092f4:	250c      	movs	r5, #12
 80092f6:	42a9      	cmp	r1, r5
 80092f8:	d81d      	bhi.n	8009336 <_malloc_r+0x52>
 80092fa:	0030      	movs	r0, r6
 80092fc:	f001 fe3f 	bl	800af7e <__malloc_lock>
 8009300:	4a25      	ldr	r2, [pc, #148]	; (8009398 <_malloc_r+0xb4>)
 8009302:	6814      	ldr	r4, [r2, #0]
 8009304:	0021      	movs	r1, r4
 8009306:	2900      	cmp	r1, #0
 8009308:	d119      	bne.n	800933e <_malloc_r+0x5a>
 800930a:	4c24      	ldr	r4, [pc, #144]	; (800939c <_malloc_r+0xb8>)
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d103      	bne.n	800931a <_malloc_r+0x36>
 8009312:	0030      	movs	r0, r6
 8009314:	f000 fd26 	bl	8009d64 <_sbrk_r>
 8009318:	6020      	str	r0, [r4, #0]
 800931a:	0029      	movs	r1, r5
 800931c:	0030      	movs	r0, r6
 800931e:	f000 fd21 	bl	8009d64 <_sbrk_r>
 8009322:	1c43      	adds	r3, r0, #1
 8009324:	d12b      	bne.n	800937e <_malloc_r+0x9a>
 8009326:	230c      	movs	r3, #12
 8009328:	0030      	movs	r0, r6
 800932a:	6033      	str	r3, [r6, #0]
 800932c:	f001 fe28 	bl	800af80 <__malloc_unlock>
 8009330:	e003      	b.n	800933a <_malloc_r+0x56>
 8009332:	2d00      	cmp	r5, #0
 8009334:	dadf      	bge.n	80092f6 <_malloc_r+0x12>
 8009336:	230c      	movs	r3, #12
 8009338:	6033      	str	r3, [r6, #0]
 800933a:	2000      	movs	r0, #0
 800933c:	bd70      	pop	{r4, r5, r6, pc}
 800933e:	680b      	ldr	r3, [r1, #0]
 8009340:	1b5b      	subs	r3, r3, r5
 8009342:	d419      	bmi.n	8009378 <_malloc_r+0x94>
 8009344:	2b0b      	cmp	r3, #11
 8009346:	d903      	bls.n	8009350 <_malloc_r+0x6c>
 8009348:	600b      	str	r3, [r1, #0]
 800934a:	18cc      	adds	r4, r1, r3
 800934c:	6025      	str	r5, [r4, #0]
 800934e:	e003      	b.n	8009358 <_malloc_r+0x74>
 8009350:	684b      	ldr	r3, [r1, #4]
 8009352:	428c      	cmp	r4, r1
 8009354:	d10d      	bne.n	8009372 <_malloc_r+0x8e>
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	0030      	movs	r0, r6
 800935a:	f001 fe11 	bl	800af80 <__malloc_unlock>
 800935e:	0020      	movs	r0, r4
 8009360:	2207      	movs	r2, #7
 8009362:	300b      	adds	r0, #11
 8009364:	1d23      	adds	r3, r4, #4
 8009366:	4390      	bics	r0, r2
 8009368:	1ac3      	subs	r3, r0, r3
 800936a:	d0e7      	beq.n	800933c <_malloc_r+0x58>
 800936c:	425a      	negs	r2, r3
 800936e:	50e2      	str	r2, [r4, r3]
 8009370:	e7e4      	b.n	800933c <_malloc_r+0x58>
 8009372:	6063      	str	r3, [r4, #4]
 8009374:	000c      	movs	r4, r1
 8009376:	e7ef      	b.n	8009358 <_malloc_r+0x74>
 8009378:	000c      	movs	r4, r1
 800937a:	6849      	ldr	r1, [r1, #4]
 800937c:	e7c3      	b.n	8009306 <_malloc_r+0x22>
 800937e:	2303      	movs	r3, #3
 8009380:	1cc4      	adds	r4, r0, #3
 8009382:	439c      	bics	r4, r3
 8009384:	42a0      	cmp	r0, r4
 8009386:	d0e1      	beq.n	800934c <_malloc_r+0x68>
 8009388:	1a21      	subs	r1, r4, r0
 800938a:	0030      	movs	r0, r6
 800938c:	f000 fcea 	bl	8009d64 <_sbrk_r>
 8009390:	1c43      	adds	r3, r0, #1
 8009392:	d1db      	bne.n	800934c <_malloc_r+0x68>
 8009394:	e7c7      	b.n	8009326 <_malloc_r+0x42>
 8009396:	46c0      	nop			; (mov r8, r8)
 8009398:	200004c8 	.word	0x200004c8
 800939c:	200004cc 	.word	0x200004cc

080093a0 <__cvt>:
 80093a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093a2:	b08b      	sub	sp, #44	; 0x2c
 80093a4:	0014      	movs	r4, r2
 80093a6:	1e1d      	subs	r5, r3, #0
 80093a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80093aa:	da53      	bge.n	8009454 <__cvt+0xb4>
 80093ac:	2480      	movs	r4, #128	; 0x80
 80093ae:	0624      	lsls	r4, r4, #24
 80093b0:	191b      	adds	r3, r3, r4
 80093b2:	001d      	movs	r5, r3
 80093b4:	0014      	movs	r4, r2
 80093b6:	232d      	movs	r3, #45	; 0x2d
 80093b8:	700b      	strb	r3, [r1, #0]
 80093ba:	2320      	movs	r3, #32
 80093bc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80093be:	2203      	movs	r2, #3
 80093c0:	439e      	bics	r6, r3
 80093c2:	2e46      	cmp	r6, #70	; 0x46
 80093c4:	d007      	beq.n	80093d6 <__cvt+0x36>
 80093c6:	0033      	movs	r3, r6
 80093c8:	3b45      	subs	r3, #69	; 0x45
 80093ca:	4259      	negs	r1, r3
 80093cc:	414b      	adcs	r3, r1
 80093ce:	9910      	ldr	r1, [sp, #64]	; 0x40
 80093d0:	3a01      	subs	r2, #1
 80093d2:	18cb      	adds	r3, r1, r3
 80093d4:	9310      	str	r3, [sp, #64]	; 0x40
 80093d6:	ab09      	add	r3, sp, #36	; 0x24
 80093d8:	9304      	str	r3, [sp, #16]
 80093da:	ab08      	add	r3, sp, #32
 80093dc:	9303      	str	r3, [sp, #12]
 80093de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093e0:	9200      	str	r2, [sp, #0]
 80093e2:	9302      	str	r3, [sp, #8]
 80093e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093e6:	0022      	movs	r2, r4
 80093e8:	9301      	str	r3, [sp, #4]
 80093ea:	002b      	movs	r3, r5
 80093ec:	f000 fe90 	bl	800a110 <_dtoa_r>
 80093f0:	0007      	movs	r7, r0
 80093f2:	2e47      	cmp	r6, #71	; 0x47
 80093f4:	d102      	bne.n	80093fc <__cvt+0x5c>
 80093f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093f8:	07db      	lsls	r3, r3, #31
 80093fa:	d524      	bpl.n	8009446 <__cvt+0xa6>
 80093fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093fe:	18fb      	adds	r3, r7, r3
 8009400:	9307      	str	r3, [sp, #28]
 8009402:	2e46      	cmp	r6, #70	; 0x46
 8009404:	d114      	bne.n	8009430 <__cvt+0x90>
 8009406:	783b      	ldrb	r3, [r7, #0]
 8009408:	2b30      	cmp	r3, #48	; 0x30
 800940a:	d10c      	bne.n	8009426 <__cvt+0x86>
 800940c:	2200      	movs	r2, #0
 800940e:	2300      	movs	r3, #0
 8009410:	0020      	movs	r0, r4
 8009412:	0029      	movs	r1, r5
 8009414:	f7f7 f810 	bl	8000438 <__aeabi_dcmpeq>
 8009418:	2800      	cmp	r0, #0
 800941a:	d104      	bne.n	8009426 <__cvt+0x86>
 800941c:	2301      	movs	r3, #1
 800941e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009420:	1a9b      	subs	r3, r3, r2
 8009422:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009424:	6013      	str	r3, [r2, #0]
 8009426:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009428:	9a07      	ldr	r2, [sp, #28]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	18d3      	adds	r3, r2, r3
 800942e:	9307      	str	r3, [sp, #28]
 8009430:	2200      	movs	r2, #0
 8009432:	2300      	movs	r3, #0
 8009434:	0020      	movs	r0, r4
 8009436:	0029      	movs	r1, r5
 8009438:	f7f6 fffe 	bl	8000438 <__aeabi_dcmpeq>
 800943c:	2230      	movs	r2, #48	; 0x30
 800943e:	2800      	cmp	r0, #0
 8009440:	d00d      	beq.n	800945e <__cvt+0xbe>
 8009442:	9b07      	ldr	r3, [sp, #28]
 8009444:	9309      	str	r3, [sp, #36]	; 0x24
 8009446:	0038      	movs	r0, r7
 8009448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800944a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800944c:	1bdb      	subs	r3, r3, r7
 800944e:	6013      	str	r3, [r2, #0]
 8009450:	b00b      	add	sp, #44	; 0x2c
 8009452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009454:	2300      	movs	r3, #0
 8009456:	e7af      	b.n	80093b8 <__cvt+0x18>
 8009458:	1c59      	adds	r1, r3, #1
 800945a:	9109      	str	r1, [sp, #36]	; 0x24
 800945c:	701a      	strb	r2, [r3, #0]
 800945e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009460:	9907      	ldr	r1, [sp, #28]
 8009462:	428b      	cmp	r3, r1
 8009464:	d3f8      	bcc.n	8009458 <__cvt+0xb8>
 8009466:	e7ee      	b.n	8009446 <__cvt+0xa6>

08009468 <__exponent>:
 8009468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800946a:	1c83      	adds	r3, r0, #2
 800946c:	b085      	sub	sp, #20
 800946e:	9301      	str	r3, [sp, #4]
 8009470:	0006      	movs	r6, r0
 8009472:	000c      	movs	r4, r1
 8009474:	7002      	strb	r2, [r0, #0]
 8009476:	232b      	movs	r3, #43	; 0x2b
 8009478:	2900      	cmp	r1, #0
 800947a:	da01      	bge.n	8009480 <__exponent+0x18>
 800947c:	232d      	movs	r3, #45	; 0x2d
 800947e:	424c      	negs	r4, r1
 8009480:	7073      	strb	r3, [r6, #1]
 8009482:	2c09      	cmp	r4, #9
 8009484:	dd22      	ble.n	80094cc <__exponent+0x64>
 8009486:	ab02      	add	r3, sp, #8
 8009488:	1ddd      	adds	r5, r3, #7
 800948a:	0020      	movs	r0, r4
 800948c:	210a      	movs	r1, #10
 800948e:	f7f6 ffbd 	bl	800040c <__aeabi_idivmod>
 8009492:	1e6f      	subs	r7, r5, #1
 8009494:	3130      	adds	r1, #48	; 0x30
 8009496:	7039      	strb	r1, [r7, #0]
 8009498:	0020      	movs	r0, r4
 800949a:	210a      	movs	r1, #10
 800949c:	f7f6 fed0 	bl	8000240 <__divsi3>
 80094a0:	0004      	movs	r4, r0
 80094a2:	2809      	cmp	r0, #9
 80094a4:	dc0b      	bgt.n	80094be <__exponent+0x56>
 80094a6:	3d02      	subs	r5, #2
 80094a8:	3430      	adds	r4, #48	; 0x30
 80094aa:	9b01      	ldr	r3, [sp, #4]
 80094ac:	702c      	strb	r4, [r5, #0]
 80094ae:	aa02      	add	r2, sp, #8
 80094b0:	3207      	adds	r2, #7
 80094b2:	0018      	movs	r0, r3
 80094b4:	42aa      	cmp	r2, r5
 80094b6:	d804      	bhi.n	80094c2 <__exponent+0x5a>
 80094b8:	1b80      	subs	r0, r0, r6
 80094ba:	b005      	add	sp, #20
 80094bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094be:	003d      	movs	r5, r7
 80094c0:	e7e3      	b.n	800948a <__exponent+0x22>
 80094c2:	782a      	ldrb	r2, [r5, #0]
 80094c4:	3501      	adds	r5, #1
 80094c6:	701a      	strb	r2, [r3, #0]
 80094c8:	3301      	adds	r3, #1
 80094ca:	e7f0      	b.n	80094ae <__exponent+0x46>
 80094cc:	2330      	movs	r3, #48	; 0x30
 80094ce:	18e4      	adds	r4, r4, r3
 80094d0:	70b3      	strb	r3, [r6, #2]
 80094d2:	1d30      	adds	r0, r6, #4
 80094d4:	70f4      	strb	r4, [r6, #3]
 80094d6:	e7ef      	b.n	80094b8 <__exponent+0x50>

080094d8 <_printf_float>:
 80094d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094da:	b095      	sub	sp, #84	; 0x54
 80094dc:	000c      	movs	r4, r1
 80094de:	920a      	str	r2, [sp, #40]	; 0x28
 80094e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80094e2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80094e4:	9009      	str	r0, [sp, #36]	; 0x24
 80094e6:	f001 fca9 	bl	800ae3c <_localeconv_r>
 80094ea:	6803      	ldr	r3, [r0, #0]
 80094ec:	0018      	movs	r0, r3
 80094ee:	930c      	str	r3, [sp, #48]	; 0x30
 80094f0:	f7f6 fe0a 	bl	8000108 <strlen>
 80094f4:	2300      	movs	r3, #0
 80094f6:	9312      	str	r3, [sp, #72]	; 0x48
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	900e      	str	r0, [sp, #56]	; 0x38
 80094fc:	930d      	str	r3, [sp, #52]	; 0x34
 80094fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009500:	7e27      	ldrb	r7, [r4, #24]
 8009502:	682b      	ldr	r3, [r5, #0]
 8009504:	2207      	movs	r2, #7
 8009506:	05c9      	lsls	r1, r1, #23
 8009508:	d545      	bpl.n	8009596 <_printf_float+0xbe>
 800950a:	189b      	adds	r3, r3, r2
 800950c:	4393      	bics	r3, r2
 800950e:	001a      	movs	r2, r3
 8009510:	3208      	adds	r2, #8
 8009512:	602a      	str	r2, [r5, #0]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	64a2      	str	r2, [r4, #72]	; 0x48
 800951a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800951c:	2201      	movs	r2, #1
 800951e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009520:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8009522:	006b      	lsls	r3, r5, #1
 8009524:	085b      	lsrs	r3, r3, #1
 8009526:	930f      	str	r3, [sp, #60]	; 0x3c
 8009528:	4252      	negs	r2, r2
 800952a:	4bac      	ldr	r3, [pc, #688]	; (80097dc <_printf_float+0x304>)
 800952c:	0030      	movs	r0, r6
 800952e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009530:	f7f8 fc90 	bl	8001e54 <__aeabi_dcmpun>
 8009534:	2800      	cmp	r0, #0
 8009536:	d130      	bne.n	800959a <_printf_float+0xc2>
 8009538:	2201      	movs	r2, #1
 800953a:	4ba8      	ldr	r3, [pc, #672]	; (80097dc <_printf_float+0x304>)
 800953c:	4252      	negs	r2, r2
 800953e:	0030      	movs	r0, r6
 8009540:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009542:	f7f6 ff89 	bl	8000458 <__aeabi_dcmple>
 8009546:	2800      	cmp	r0, #0
 8009548:	d127      	bne.n	800959a <_printf_float+0xc2>
 800954a:	2200      	movs	r2, #0
 800954c:	2300      	movs	r3, #0
 800954e:	0030      	movs	r0, r6
 8009550:	0029      	movs	r1, r5
 8009552:	f7f6 ff77 	bl	8000444 <__aeabi_dcmplt>
 8009556:	2800      	cmp	r0, #0
 8009558:	d003      	beq.n	8009562 <_printf_float+0x8a>
 800955a:	0023      	movs	r3, r4
 800955c:	222d      	movs	r2, #45	; 0x2d
 800955e:	3343      	adds	r3, #67	; 0x43
 8009560:	701a      	strb	r2, [r3, #0]
 8009562:	4d9f      	ldr	r5, [pc, #636]	; (80097e0 <_printf_float+0x308>)
 8009564:	2f47      	cmp	r7, #71	; 0x47
 8009566:	d800      	bhi.n	800956a <_printf_float+0x92>
 8009568:	4d9e      	ldr	r5, [pc, #632]	; (80097e4 <_printf_float+0x30c>)
 800956a:	2303      	movs	r3, #3
 800956c:	2600      	movs	r6, #0
 800956e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009570:	6123      	str	r3, [r4, #16]
 8009572:	3301      	adds	r3, #1
 8009574:	439a      	bics	r2, r3
 8009576:	6022      	str	r2, [r4, #0]
 8009578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800957a:	aa13      	add	r2, sp, #76	; 0x4c
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	0021      	movs	r1, r4
 8009580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009582:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009584:	f000 f9f4 	bl	8009970 <_printf_common>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d000      	beq.n	800958e <_printf_float+0xb6>
 800958c:	e093      	b.n	80096b6 <_printf_float+0x1de>
 800958e:	2001      	movs	r0, #1
 8009590:	4240      	negs	r0, r0
 8009592:	b015      	add	sp, #84	; 0x54
 8009594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009596:	3307      	adds	r3, #7
 8009598:	e7b8      	b.n	800950c <_printf_float+0x34>
 800959a:	0032      	movs	r2, r6
 800959c:	002b      	movs	r3, r5
 800959e:	0030      	movs	r0, r6
 80095a0:	0029      	movs	r1, r5
 80095a2:	f7f8 fc57 	bl	8001e54 <__aeabi_dcmpun>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d004      	beq.n	80095b4 <_printf_float+0xdc>
 80095aa:	4d8f      	ldr	r5, [pc, #572]	; (80097e8 <_printf_float+0x310>)
 80095ac:	2f47      	cmp	r7, #71	; 0x47
 80095ae:	d8dc      	bhi.n	800956a <_printf_float+0x92>
 80095b0:	4d8e      	ldr	r5, [pc, #568]	; (80097ec <_printf_float+0x314>)
 80095b2:	e7da      	b.n	800956a <_printf_float+0x92>
 80095b4:	2380      	movs	r3, #128	; 0x80
 80095b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80095b8:	6862      	ldr	r2, [r4, #4]
 80095ba:	00db      	lsls	r3, r3, #3
 80095bc:	430b      	orrs	r3, r1
 80095be:	1c51      	adds	r1, r2, #1
 80095c0:	d143      	bne.n	800964a <_printf_float+0x172>
 80095c2:	3207      	adds	r2, #7
 80095c4:	6062      	str	r2, [r4, #4]
 80095c6:	aa12      	add	r2, sp, #72	; 0x48
 80095c8:	2100      	movs	r1, #0
 80095ca:	9205      	str	r2, [sp, #20]
 80095cc:	aa11      	add	r2, sp, #68	; 0x44
 80095ce:	9203      	str	r2, [sp, #12]
 80095d0:	2223      	movs	r2, #35	; 0x23
 80095d2:	6023      	str	r3, [r4, #0]
 80095d4:	9106      	str	r1, [sp, #24]
 80095d6:	9301      	str	r3, [sp, #4]
 80095d8:	a908      	add	r1, sp, #32
 80095da:	6863      	ldr	r3, [r4, #4]
 80095dc:	1852      	adds	r2, r2, r1
 80095de:	9202      	str	r2, [sp, #8]
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	0032      	movs	r2, r6
 80095e4:	002b      	movs	r3, r5
 80095e6:	9704      	str	r7, [sp, #16]
 80095e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095ea:	f7ff fed9 	bl	80093a0 <__cvt>
 80095ee:	2320      	movs	r3, #32
 80095f0:	003a      	movs	r2, r7
 80095f2:	0005      	movs	r5, r0
 80095f4:	439a      	bics	r2, r3
 80095f6:	2a47      	cmp	r2, #71	; 0x47
 80095f8:	d107      	bne.n	800960a <_printf_float+0x132>
 80095fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095fc:	1cda      	adds	r2, r3, #3
 80095fe:	db02      	blt.n	8009606 <_printf_float+0x12e>
 8009600:	6862      	ldr	r2, [r4, #4]
 8009602:	4293      	cmp	r3, r2
 8009604:	dd45      	ble.n	8009692 <_printf_float+0x1ba>
 8009606:	3f02      	subs	r7, #2
 8009608:	b2ff      	uxtb	r7, r7
 800960a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800960c:	2f65      	cmp	r7, #101	; 0x65
 800960e:	d825      	bhi.n	800965c <_printf_float+0x184>
 8009610:	0020      	movs	r0, r4
 8009612:	3901      	subs	r1, #1
 8009614:	003a      	movs	r2, r7
 8009616:	3050      	adds	r0, #80	; 0x50
 8009618:	9111      	str	r1, [sp, #68]	; 0x44
 800961a:	f7ff ff25 	bl	8009468 <__exponent>
 800961e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009620:	0006      	movs	r6, r0
 8009622:	1813      	adds	r3, r2, r0
 8009624:	6123      	str	r3, [r4, #16]
 8009626:	2a01      	cmp	r2, #1
 8009628:	dc02      	bgt.n	8009630 <_printf_float+0x158>
 800962a:	6822      	ldr	r2, [r4, #0]
 800962c:	07d2      	lsls	r2, r2, #31
 800962e:	d501      	bpl.n	8009634 <_printf_float+0x15c>
 8009630:	3301      	adds	r3, #1
 8009632:	6123      	str	r3, [r4, #16]
 8009634:	2323      	movs	r3, #35	; 0x23
 8009636:	aa08      	add	r2, sp, #32
 8009638:	189b      	adds	r3, r3, r2
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d09b      	beq.n	8009578 <_printf_float+0xa0>
 8009640:	0023      	movs	r3, r4
 8009642:	222d      	movs	r2, #45	; 0x2d
 8009644:	3343      	adds	r3, #67	; 0x43
 8009646:	701a      	strb	r2, [r3, #0]
 8009648:	e796      	b.n	8009578 <_printf_float+0xa0>
 800964a:	2f67      	cmp	r7, #103	; 0x67
 800964c:	d100      	bne.n	8009650 <_printf_float+0x178>
 800964e:	e176      	b.n	800993e <_printf_float+0x466>
 8009650:	2f47      	cmp	r7, #71	; 0x47
 8009652:	d1b8      	bne.n	80095c6 <_printf_float+0xee>
 8009654:	2a00      	cmp	r2, #0
 8009656:	d1b6      	bne.n	80095c6 <_printf_float+0xee>
 8009658:	2201      	movs	r2, #1
 800965a:	e7b3      	b.n	80095c4 <_printf_float+0xec>
 800965c:	2f66      	cmp	r7, #102	; 0x66
 800965e:	d119      	bne.n	8009694 <_printf_float+0x1bc>
 8009660:	6863      	ldr	r3, [r4, #4]
 8009662:	2900      	cmp	r1, #0
 8009664:	dd0c      	ble.n	8009680 <_printf_float+0x1a8>
 8009666:	6121      	str	r1, [r4, #16]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d102      	bne.n	8009672 <_printf_float+0x19a>
 800966c:	6822      	ldr	r2, [r4, #0]
 800966e:	07d2      	lsls	r2, r2, #31
 8009670:	d502      	bpl.n	8009678 <_printf_float+0x1a0>
 8009672:	3301      	adds	r3, #1
 8009674:	185b      	adds	r3, r3, r1
 8009676:	6123      	str	r3, [r4, #16]
 8009678:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800967a:	2600      	movs	r6, #0
 800967c:	65a3      	str	r3, [r4, #88]	; 0x58
 800967e:	e7d9      	b.n	8009634 <_printf_float+0x15c>
 8009680:	2b00      	cmp	r3, #0
 8009682:	d103      	bne.n	800968c <_printf_float+0x1b4>
 8009684:	2201      	movs	r2, #1
 8009686:	6821      	ldr	r1, [r4, #0]
 8009688:	4211      	tst	r1, r2
 800968a:	d000      	beq.n	800968e <_printf_float+0x1b6>
 800968c:	1c9a      	adds	r2, r3, #2
 800968e:	6122      	str	r2, [r4, #16]
 8009690:	e7f2      	b.n	8009678 <_printf_float+0x1a0>
 8009692:	2767      	movs	r7, #103	; 0x67
 8009694:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009696:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009698:	4293      	cmp	r3, r2
 800969a:	db05      	blt.n	80096a8 <_printf_float+0x1d0>
 800969c:	6822      	ldr	r2, [r4, #0]
 800969e:	6123      	str	r3, [r4, #16]
 80096a0:	07d2      	lsls	r2, r2, #31
 80096a2:	d5e9      	bpl.n	8009678 <_printf_float+0x1a0>
 80096a4:	3301      	adds	r3, #1
 80096a6:	e7e6      	b.n	8009676 <_printf_float+0x19e>
 80096a8:	2101      	movs	r1, #1
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	dc01      	bgt.n	80096b2 <_printf_float+0x1da>
 80096ae:	1849      	adds	r1, r1, r1
 80096b0:	1ac9      	subs	r1, r1, r3
 80096b2:	1852      	adds	r2, r2, r1
 80096b4:	e7eb      	b.n	800968e <_printf_float+0x1b6>
 80096b6:	6822      	ldr	r2, [r4, #0]
 80096b8:	0553      	lsls	r3, r2, #21
 80096ba:	d408      	bmi.n	80096ce <_printf_float+0x1f6>
 80096bc:	6923      	ldr	r3, [r4, #16]
 80096be:	002a      	movs	r2, r5
 80096c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80096c6:	47a8      	blx	r5
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	d129      	bne.n	8009720 <_printf_float+0x248>
 80096cc:	e75f      	b.n	800958e <_printf_float+0xb6>
 80096ce:	2f65      	cmp	r7, #101	; 0x65
 80096d0:	d800      	bhi.n	80096d4 <_printf_float+0x1fc>
 80096d2:	e0e0      	b.n	8009896 <_printf_float+0x3be>
 80096d4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80096d6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80096d8:	2200      	movs	r2, #0
 80096da:	2300      	movs	r3, #0
 80096dc:	f7f6 feac 	bl	8000438 <__aeabi_dcmpeq>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d034      	beq.n	800974e <_printf_float+0x276>
 80096e4:	2301      	movs	r3, #1
 80096e6:	4a42      	ldr	r2, [pc, #264]	; (80097f0 <_printf_float+0x318>)
 80096e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80096ee:	47a8      	blx	r5
 80096f0:	1c43      	adds	r3, r0, #1
 80096f2:	d100      	bne.n	80096f6 <_printf_float+0x21e>
 80096f4:	e74b      	b.n	800958e <_printf_float+0xb6>
 80096f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80096fa:	4293      	cmp	r3, r2
 80096fc:	db02      	blt.n	8009704 <_printf_float+0x22c>
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	07db      	lsls	r3, r3, #31
 8009702:	d50d      	bpl.n	8009720 <_printf_float+0x248>
 8009704:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009708:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800970a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800970c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800970e:	47a8      	blx	r5
 8009710:	2500      	movs	r5, #0
 8009712:	1c43      	adds	r3, r0, #1
 8009714:	d100      	bne.n	8009718 <_printf_float+0x240>
 8009716:	e73a      	b.n	800958e <_printf_float+0xb6>
 8009718:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800971a:	3b01      	subs	r3, #1
 800971c:	42ab      	cmp	r3, r5
 800971e:	dc0a      	bgt.n	8009736 <_printf_float+0x25e>
 8009720:	6823      	ldr	r3, [r4, #0]
 8009722:	079b      	lsls	r3, r3, #30
 8009724:	d500      	bpl.n	8009728 <_printf_float+0x250>
 8009726:	e108      	b.n	800993a <_printf_float+0x462>
 8009728:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800972a:	68e0      	ldr	r0, [r4, #12]
 800972c:	4298      	cmp	r0, r3
 800972e:	db00      	blt.n	8009732 <_printf_float+0x25a>
 8009730:	e72f      	b.n	8009592 <_printf_float+0xba>
 8009732:	0018      	movs	r0, r3
 8009734:	e72d      	b.n	8009592 <_printf_float+0xba>
 8009736:	0022      	movs	r2, r4
 8009738:	2301      	movs	r3, #1
 800973a:	321a      	adds	r2, #26
 800973c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800973e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009740:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009742:	47b0      	blx	r6
 8009744:	1c43      	adds	r3, r0, #1
 8009746:	d100      	bne.n	800974a <_printf_float+0x272>
 8009748:	e721      	b.n	800958e <_printf_float+0xb6>
 800974a:	3501      	adds	r5, #1
 800974c:	e7e4      	b.n	8009718 <_printf_float+0x240>
 800974e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009750:	2b00      	cmp	r3, #0
 8009752:	dc2d      	bgt.n	80097b0 <_printf_float+0x2d8>
 8009754:	2301      	movs	r3, #1
 8009756:	4a26      	ldr	r2, [pc, #152]	; (80097f0 <_printf_float+0x318>)
 8009758:	990a      	ldr	r1, [sp, #40]	; 0x28
 800975a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800975c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800975e:	47b0      	blx	r6
 8009760:	1c43      	adds	r3, r0, #1
 8009762:	d100      	bne.n	8009766 <_printf_float+0x28e>
 8009764:	e713      	b.n	800958e <_printf_float+0xb6>
 8009766:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009768:	2b00      	cmp	r3, #0
 800976a:	d105      	bne.n	8009778 <_printf_float+0x2a0>
 800976c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800976e:	2b00      	cmp	r3, #0
 8009770:	d102      	bne.n	8009778 <_printf_float+0x2a0>
 8009772:	6823      	ldr	r3, [r4, #0]
 8009774:	07db      	lsls	r3, r3, #31
 8009776:	d5d3      	bpl.n	8009720 <_printf_float+0x248>
 8009778:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800977a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800977c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800977e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009780:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009782:	47b0      	blx	r6
 8009784:	2600      	movs	r6, #0
 8009786:	1c43      	adds	r3, r0, #1
 8009788:	d100      	bne.n	800978c <_printf_float+0x2b4>
 800978a:	e700      	b.n	800958e <_printf_float+0xb6>
 800978c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800978e:	425b      	negs	r3, r3
 8009790:	42b3      	cmp	r3, r6
 8009792:	dc01      	bgt.n	8009798 <_printf_float+0x2c0>
 8009794:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009796:	e792      	b.n	80096be <_printf_float+0x1e6>
 8009798:	0022      	movs	r2, r4
 800979a:	2301      	movs	r3, #1
 800979c:	321a      	adds	r2, #26
 800979e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80097a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097a2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80097a4:	47b8      	blx	r7
 80097a6:	1c43      	adds	r3, r0, #1
 80097a8:	d100      	bne.n	80097ac <_printf_float+0x2d4>
 80097aa:	e6f0      	b.n	800958e <_printf_float+0xb6>
 80097ac:	3601      	adds	r6, #1
 80097ae:	e7ed      	b.n	800978c <_printf_float+0x2b4>
 80097b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097b2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80097b4:	429f      	cmp	r7, r3
 80097b6:	dd00      	ble.n	80097ba <_printf_float+0x2e2>
 80097b8:	001f      	movs	r7, r3
 80097ba:	2f00      	cmp	r7, #0
 80097bc:	dd08      	ble.n	80097d0 <_printf_float+0x2f8>
 80097be:	003b      	movs	r3, r7
 80097c0:	002a      	movs	r2, r5
 80097c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80097c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097c6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80097c8:	47b0      	blx	r6
 80097ca:	1c43      	adds	r3, r0, #1
 80097cc:	d100      	bne.n	80097d0 <_printf_float+0x2f8>
 80097ce:	e6de      	b.n	800958e <_printf_float+0xb6>
 80097d0:	2300      	movs	r3, #0
 80097d2:	930d      	str	r3, [sp, #52]	; 0x34
 80097d4:	43fb      	mvns	r3, r7
 80097d6:	17db      	asrs	r3, r3, #31
 80097d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80097da:	e018      	b.n	800980e <_printf_float+0x336>
 80097dc:	7fefffff 	.word	0x7fefffff
 80097e0:	0800bb88 	.word	0x0800bb88
 80097e4:	0800bb84 	.word	0x0800bb84
 80097e8:	0800bb90 	.word	0x0800bb90
 80097ec:	0800bb8c 	.word	0x0800bb8c
 80097f0:	0800bb94 	.word	0x0800bb94
 80097f4:	0022      	movs	r2, r4
 80097f6:	2301      	movs	r3, #1
 80097f8:	321a      	adds	r2, #26
 80097fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80097fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097fe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009800:	47b0      	blx	r6
 8009802:	1c43      	adds	r3, r0, #1
 8009804:	d100      	bne.n	8009808 <_printf_float+0x330>
 8009806:	e6c2      	b.n	800958e <_printf_float+0xb6>
 8009808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800980a:	3301      	adds	r3, #1
 800980c:	930d      	str	r3, [sp, #52]	; 0x34
 800980e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009810:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8009812:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009814:	403b      	ands	r3, r7
 8009816:	1af3      	subs	r3, r6, r3
 8009818:	4293      	cmp	r3, r2
 800981a:	dceb      	bgt.n	80097f4 <_printf_float+0x31c>
 800981c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800981e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009820:	19ad      	adds	r5, r5, r6
 8009822:	4293      	cmp	r3, r2
 8009824:	db10      	blt.n	8009848 <_printf_float+0x370>
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	07db      	lsls	r3, r3, #31
 800982a:	d40d      	bmi.n	8009848 <_printf_float+0x370>
 800982c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800982e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009830:	1bbe      	subs	r6, r7, r6
 8009832:	1aff      	subs	r7, r7, r3
 8009834:	42b7      	cmp	r7, r6
 8009836:	dd00      	ble.n	800983a <_printf_float+0x362>
 8009838:	0037      	movs	r7, r6
 800983a:	2f00      	cmp	r7, #0
 800983c:	dc0d      	bgt.n	800985a <_printf_float+0x382>
 800983e:	43fe      	mvns	r6, r7
 8009840:	17f3      	asrs	r3, r6, #31
 8009842:	2500      	movs	r5, #0
 8009844:	930c      	str	r3, [sp, #48]	; 0x30
 8009846:	e01c      	b.n	8009882 <_printf_float+0x3aa>
 8009848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800984a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800984c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800984e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009850:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009852:	47b8      	blx	r7
 8009854:	1c43      	adds	r3, r0, #1
 8009856:	d1e9      	bne.n	800982c <_printf_float+0x354>
 8009858:	e699      	b.n	800958e <_printf_float+0xb6>
 800985a:	003b      	movs	r3, r7
 800985c:	002a      	movs	r2, r5
 800985e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009862:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009864:	47a8      	blx	r5
 8009866:	1c43      	adds	r3, r0, #1
 8009868:	d1e9      	bne.n	800983e <_printf_float+0x366>
 800986a:	e690      	b.n	800958e <_printf_float+0xb6>
 800986c:	0022      	movs	r2, r4
 800986e:	2301      	movs	r3, #1
 8009870:	321a      	adds	r2, #26
 8009872:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009876:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009878:	47b0      	blx	r6
 800987a:	1c43      	adds	r3, r0, #1
 800987c:	d100      	bne.n	8009880 <_printf_float+0x3a8>
 800987e:	e686      	b.n	800958e <_printf_float+0xb6>
 8009880:	3501      	adds	r5, #1
 8009882:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009884:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009886:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009888:	1a9b      	subs	r3, r3, r2
 800988a:	003a      	movs	r2, r7
 800988c:	400a      	ands	r2, r1
 800988e:	1a9b      	subs	r3, r3, r2
 8009890:	42ab      	cmp	r3, r5
 8009892:	dceb      	bgt.n	800986c <_printf_float+0x394>
 8009894:	e744      	b.n	8009720 <_printf_float+0x248>
 8009896:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009898:	2b01      	cmp	r3, #1
 800989a:	dc02      	bgt.n	80098a2 <_printf_float+0x3ca>
 800989c:	2301      	movs	r3, #1
 800989e:	421a      	tst	r2, r3
 80098a0:	d032      	beq.n	8009908 <_printf_float+0x430>
 80098a2:	2301      	movs	r3, #1
 80098a4:	002a      	movs	r2, r5
 80098a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80098a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098aa:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80098ac:	47b8      	blx	r7
 80098ae:	1c43      	adds	r3, r0, #1
 80098b0:	d100      	bne.n	80098b4 <_printf_float+0x3dc>
 80098b2:	e66c      	b.n	800958e <_printf_float+0xb6>
 80098b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80098ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098bc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80098be:	3501      	adds	r5, #1
 80098c0:	47b8      	blx	r7
 80098c2:	1c43      	adds	r3, r0, #1
 80098c4:	d100      	bne.n	80098c8 <_printf_float+0x3f0>
 80098c6:	e662      	b.n	800958e <_printf_float+0xb6>
 80098c8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80098ca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80098cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098ce:	2200      	movs	r2, #0
 80098d0:	1e5f      	subs	r7, r3, #1
 80098d2:	2300      	movs	r3, #0
 80098d4:	f7f6 fdb0 	bl	8000438 <__aeabi_dcmpeq>
 80098d8:	003b      	movs	r3, r7
 80098da:	2800      	cmp	r0, #0
 80098dc:	d014      	beq.n	8009908 <_printf_float+0x430>
 80098de:	2500      	movs	r5, #0
 80098e0:	e00a      	b.n	80098f8 <_printf_float+0x420>
 80098e2:	0022      	movs	r2, r4
 80098e4:	2301      	movs	r3, #1
 80098e6:	321a      	adds	r2, #26
 80098e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80098ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098ec:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80098ee:	47b8      	blx	r7
 80098f0:	1c43      	adds	r3, r0, #1
 80098f2:	d100      	bne.n	80098f6 <_printf_float+0x41e>
 80098f4:	e64b      	b.n	800958e <_printf_float+0xb6>
 80098f6:	3501      	adds	r5, #1
 80098f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098fa:	3b01      	subs	r3, #1
 80098fc:	42ab      	cmp	r3, r5
 80098fe:	dcf0      	bgt.n	80098e2 <_printf_float+0x40a>
 8009900:	0022      	movs	r2, r4
 8009902:	0033      	movs	r3, r6
 8009904:	3250      	adds	r2, #80	; 0x50
 8009906:	e6db      	b.n	80096c0 <_printf_float+0x1e8>
 8009908:	002a      	movs	r2, r5
 800990a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800990c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800990e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009910:	47a8      	blx	r5
 8009912:	1c43      	adds	r3, r0, #1
 8009914:	d1f4      	bne.n	8009900 <_printf_float+0x428>
 8009916:	e63a      	b.n	800958e <_printf_float+0xb6>
 8009918:	0022      	movs	r2, r4
 800991a:	2301      	movs	r3, #1
 800991c:	3219      	adds	r2, #25
 800991e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009920:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009922:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009924:	47b0      	blx	r6
 8009926:	1c43      	adds	r3, r0, #1
 8009928:	d100      	bne.n	800992c <_printf_float+0x454>
 800992a:	e630      	b.n	800958e <_printf_float+0xb6>
 800992c:	3501      	adds	r5, #1
 800992e:	68e3      	ldr	r3, [r4, #12]
 8009930:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009932:	1a9b      	subs	r3, r3, r2
 8009934:	42ab      	cmp	r3, r5
 8009936:	dcef      	bgt.n	8009918 <_printf_float+0x440>
 8009938:	e6f6      	b.n	8009728 <_printf_float+0x250>
 800993a:	2500      	movs	r5, #0
 800993c:	e7f7      	b.n	800992e <_printf_float+0x456>
 800993e:	2a00      	cmp	r2, #0
 8009940:	d100      	bne.n	8009944 <_printf_float+0x46c>
 8009942:	e689      	b.n	8009658 <_printf_float+0x180>
 8009944:	2100      	movs	r1, #0
 8009946:	9106      	str	r1, [sp, #24]
 8009948:	a912      	add	r1, sp, #72	; 0x48
 800994a:	9105      	str	r1, [sp, #20]
 800994c:	a911      	add	r1, sp, #68	; 0x44
 800994e:	9103      	str	r1, [sp, #12]
 8009950:	2123      	movs	r1, #35	; 0x23
 8009952:	a808      	add	r0, sp, #32
 8009954:	1809      	adds	r1, r1, r0
 8009956:	6023      	str	r3, [r4, #0]
 8009958:	9301      	str	r3, [sp, #4]
 800995a:	9200      	str	r2, [sp, #0]
 800995c:	002b      	movs	r3, r5
 800995e:	9704      	str	r7, [sp, #16]
 8009960:	9102      	str	r1, [sp, #8]
 8009962:	0032      	movs	r2, r6
 8009964:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009966:	f7ff fd1b 	bl	80093a0 <__cvt>
 800996a:	0005      	movs	r5, r0
 800996c:	e645      	b.n	80095fa <_printf_float+0x122>
 800996e:	46c0      	nop			; (mov r8, r8)

08009970 <_printf_common>:
 8009970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009972:	0015      	movs	r5, r2
 8009974:	9301      	str	r3, [sp, #4]
 8009976:	688a      	ldr	r2, [r1, #8]
 8009978:	690b      	ldr	r3, [r1, #16]
 800997a:	9000      	str	r0, [sp, #0]
 800997c:	000c      	movs	r4, r1
 800997e:	4293      	cmp	r3, r2
 8009980:	da00      	bge.n	8009984 <_printf_common+0x14>
 8009982:	0013      	movs	r3, r2
 8009984:	0022      	movs	r2, r4
 8009986:	602b      	str	r3, [r5, #0]
 8009988:	3243      	adds	r2, #67	; 0x43
 800998a:	7812      	ldrb	r2, [r2, #0]
 800998c:	2a00      	cmp	r2, #0
 800998e:	d001      	beq.n	8009994 <_printf_common+0x24>
 8009990:	3301      	adds	r3, #1
 8009992:	602b      	str	r3, [r5, #0]
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	069b      	lsls	r3, r3, #26
 8009998:	d502      	bpl.n	80099a0 <_printf_common+0x30>
 800999a:	682b      	ldr	r3, [r5, #0]
 800999c:	3302      	adds	r3, #2
 800999e:	602b      	str	r3, [r5, #0]
 80099a0:	2706      	movs	r7, #6
 80099a2:	6823      	ldr	r3, [r4, #0]
 80099a4:	401f      	ands	r7, r3
 80099a6:	d027      	beq.n	80099f8 <_printf_common+0x88>
 80099a8:	0023      	movs	r3, r4
 80099aa:	3343      	adds	r3, #67	; 0x43
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	1e5a      	subs	r2, r3, #1
 80099b0:	4193      	sbcs	r3, r2
 80099b2:	6822      	ldr	r2, [r4, #0]
 80099b4:	0692      	lsls	r2, r2, #26
 80099b6:	d430      	bmi.n	8009a1a <_printf_common+0xaa>
 80099b8:	0022      	movs	r2, r4
 80099ba:	9901      	ldr	r1, [sp, #4]
 80099bc:	3243      	adds	r2, #67	; 0x43
 80099be:	9800      	ldr	r0, [sp, #0]
 80099c0:	9e08      	ldr	r6, [sp, #32]
 80099c2:	47b0      	blx	r6
 80099c4:	1c43      	adds	r3, r0, #1
 80099c6:	d025      	beq.n	8009a14 <_printf_common+0xa4>
 80099c8:	2306      	movs	r3, #6
 80099ca:	6820      	ldr	r0, [r4, #0]
 80099cc:	682a      	ldr	r2, [r5, #0]
 80099ce:	68e1      	ldr	r1, [r4, #12]
 80099d0:	4003      	ands	r3, r0
 80099d2:	2500      	movs	r5, #0
 80099d4:	2b04      	cmp	r3, #4
 80099d6:	d103      	bne.n	80099e0 <_printf_common+0x70>
 80099d8:	1a8d      	subs	r5, r1, r2
 80099da:	43eb      	mvns	r3, r5
 80099dc:	17db      	asrs	r3, r3, #31
 80099de:	401d      	ands	r5, r3
 80099e0:	68a3      	ldr	r3, [r4, #8]
 80099e2:	6922      	ldr	r2, [r4, #16]
 80099e4:	4293      	cmp	r3, r2
 80099e6:	dd01      	ble.n	80099ec <_printf_common+0x7c>
 80099e8:	1a9b      	subs	r3, r3, r2
 80099ea:	18ed      	adds	r5, r5, r3
 80099ec:	2700      	movs	r7, #0
 80099ee:	42bd      	cmp	r5, r7
 80099f0:	d120      	bne.n	8009a34 <_printf_common+0xc4>
 80099f2:	2000      	movs	r0, #0
 80099f4:	e010      	b.n	8009a18 <_printf_common+0xa8>
 80099f6:	3701      	adds	r7, #1
 80099f8:	68e3      	ldr	r3, [r4, #12]
 80099fa:	682a      	ldr	r2, [r5, #0]
 80099fc:	1a9b      	subs	r3, r3, r2
 80099fe:	42bb      	cmp	r3, r7
 8009a00:	ddd2      	ble.n	80099a8 <_printf_common+0x38>
 8009a02:	0022      	movs	r2, r4
 8009a04:	2301      	movs	r3, #1
 8009a06:	3219      	adds	r2, #25
 8009a08:	9901      	ldr	r1, [sp, #4]
 8009a0a:	9800      	ldr	r0, [sp, #0]
 8009a0c:	9e08      	ldr	r6, [sp, #32]
 8009a0e:	47b0      	blx	r6
 8009a10:	1c43      	adds	r3, r0, #1
 8009a12:	d1f0      	bne.n	80099f6 <_printf_common+0x86>
 8009a14:	2001      	movs	r0, #1
 8009a16:	4240      	negs	r0, r0
 8009a18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a1a:	2030      	movs	r0, #48	; 0x30
 8009a1c:	18e1      	adds	r1, r4, r3
 8009a1e:	3143      	adds	r1, #67	; 0x43
 8009a20:	7008      	strb	r0, [r1, #0]
 8009a22:	0021      	movs	r1, r4
 8009a24:	1c5a      	adds	r2, r3, #1
 8009a26:	3145      	adds	r1, #69	; 0x45
 8009a28:	7809      	ldrb	r1, [r1, #0]
 8009a2a:	18a2      	adds	r2, r4, r2
 8009a2c:	3243      	adds	r2, #67	; 0x43
 8009a2e:	3302      	adds	r3, #2
 8009a30:	7011      	strb	r1, [r2, #0]
 8009a32:	e7c1      	b.n	80099b8 <_printf_common+0x48>
 8009a34:	0022      	movs	r2, r4
 8009a36:	2301      	movs	r3, #1
 8009a38:	321a      	adds	r2, #26
 8009a3a:	9901      	ldr	r1, [sp, #4]
 8009a3c:	9800      	ldr	r0, [sp, #0]
 8009a3e:	9e08      	ldr	r6, [sp, #32]
 8009a40:	47b0      	blx	r6
 8009a42:	1c43      	adds	r3, r0, #1
 8009a44:	d0e6      	beq.n	8009a14 <_printf_common+0xa4>
 8009a46:	3701      	adds	r7, #1
 8009a48:	e7d1      	b.n	80099ee <_printf_common+0x7e>
	...

08009a4c <_printf_i>:
 8009a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a4e:	b089      	sub	sp, #36	; 0x24
 8009a50:	9204      	str	r2, [sp, #16]
 8009a52:	000a      	movs	r2, r1
 8009a54:	3243      	adds	r2, #67	; 0x43
 8009a56:	9305      	str	r3, [sp, #20]
 8009a58:	9003      	str	r0, [sp, #12]
 8009a5a:	9202      	str	r2, [sp, #8]
 8009a5c:	7e0a      	ldrb	r2, [r1, #24]
 8009a5e:	000c      	movs	r4, r1
 8009a60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a62:	2a6e      	cmp	r2, #110	; 0x6e
 8009a64:	d100      	bne.n	8009a68 <_printf_i+0x1c>
 8009a66:	e086      	b.n	8009b76 <_printf_i+0x12a>
 8009a68:	d81f      	bhi.n	8009aaa <_printf_i+0x5e>
 8009a6a:	2a63      	cmp	r2, #99	; 0x63
 8009a6c:	d033      	beq.n	8009ad6 <_printf_i+0x8a>
 8009a6e:	d808      	bhi.n	8009a82 <_printf_i+0x36>
 8009a70:	2a00      	cmp	r2, #0
 8009a72:	d100      	bne.n	8009a76 <_printf_i+0x2a>
 8009a74:	e08c      	b.n	8009b90 <_printf_i+0x144>
 8009a76:	2a58      	cmp	r2, #88	; 0x58
 8009a78:	d04d      	beq.n	8009b16 <_printf_i+0xca>
 8009a7a:	0025      	movs	r5, r4
 8009a7c:	3542      	adds	r5, #66	; 0x42
 8009a7e:	702a      	strb	r2, [r5, #0]
 8009a80:	e030      	b.n	8009ae4 <_printf_i+0x98>
 8009a82:	2a64      	cmp	r2, #100	; 0x64
 8009a84:	d001      	beq.n	8009a8a <_printf_i+0x3e>
 8009a86:	2a69      	cmp	r2, #105	; 0x69
 8009a88:	d1f7      	bne.n	8009a7a <_printf_i+0x2e>
 8009a8a:	6819      	ldr	r1, [r3, #0]
 8009a8c:	6825      	ldr	r5, [r4, #0]
 8009a8e:	1d0a      	adds	r2, r1, #4
 8009a90:	0628      	lsls	r0, r5, #24
 8009a92:	d529      	bpl.n	8009ae8 <_printf_i+0x9c>
 8009a94:	6808      	ldr	r0, [r1, #0]
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	da03      	bge.n	8009aa4 <_printf_i+0x58>
 8009a9c:	232d      	movs	r3, #45	; 0x2d
 8009a9e:	9a02      	ldr	r2, [sp, #8]
 8009aa0:	4240      	negs	r0, r0
 8009aa2:	7013      	strb	r3, [r2, #0]
 8009aa4:	4e6b      	ldr	r6, [pc, #428]	; (8009c54 <_printf_i+0x208>)
 8009aa6:	270a      	movs	r7, #10
 8009aa8:	e04f      	b.n	8009b4a <_printf_i+0xfe>
 8009aaa:	2a73      	cmp	r2, #115	; 0x73
 8009aac:	d074      	beq.n	8009b98 <_printf_i+0x14c>
 8009aae:	d808      	bhi.n	8009ac2 <_printf_i+0x76>
 8009ab0:	2a6f      	cmp	r2, #111	; 0x6f
 8009ab2:	d01f      	beq.n	8009af4 <_printf_i+0xa8>
 8009ab4:	2a70      	cmp	r2, #112	; 0x70
 8009ab6:	d1e0      	bne.n	8009a7a <_printf_i+0x2e>
 8009ab8:	2220      	movs	r2, #32
 8009aba:	6809      	ldr	r1, [r1, #0]
 8009abc:	430a      	orrs	r2, r1
 8009abe:	6022      	str	r2, [r4, #0]
 8009ac0:	e003      	b.n	8009aca <_printf_i+0x7e>
 8009ac2:	2a75      	cmp	r2, #117	; 0x75
 8009ac4:	d016      	beq.n	8009af4 <_printf_i+0xa8>
 8009ac6:	2a78      	cmp	r2, #120	; 0x78
 8009ac8:	d1d7      	bne.n	8009a7a <_printf_i+0x2e>
 8009aca:	0022      	movs	r2, r4
 8009acc:	2178      	movs	r1, #120	; 0x78
 8009ace:	3245      	adds	r2, #69	; 0x45
 8009ad0:	7011      	strb	r1, [r2, #0]
 8009ad2:	4e61      	ldr	r6, [pc, #388]	; (8009c58 <_printf_i+0x20c>)
 8009ad4:	e022      	b.n	8009b1c <_printf_i+0xd0>
 8009ad6:	0025      	movs	r5, r4
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	3542      	adds	r5, #66	; 0x42
 8009adc:	1d11      	adds	r1, r2, #4
 8009ade:	6019      	str	r1, [r3, #0]
 8009ae0:	6813      	ldr	r3, [r2, #0]
 8009ae2:	702b      	strb	r3, [r5, #0]
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e065      	b.n	8009bb4 <_printf_i+0x168>
 8009ae8:	6808      	ldr	r0, [r1, #0]
 8009aea:	601a      	str	r2, [r3, #0]
 8009aec:	0669      	lsls	r1, r5, #25
 8009aee:	d5d3      	bpl.n	8009a98 <_printf_i+0x4c>
 8009af0:	b200      	sxth	r0, r0
 8009af2:	e7d1      	b.n	8009a98 <_printf_i+0x4c>
 8009af4:	6819      	ldr	r1, [r3, #0]
 8009af6:	6825      	ldr	r5, [r4, #0]
 8009af8:	1d08      	adds	r0, r1, #4
 8009afa:	6018      	str	r0, [r3, #0]
 8009afc:	6808      	ldr	r0, [r1, #0]
 8009afe:	062e      	lsls	r6, r5, #24
 8009b00:	d505      	bpl.n	8009b0e <_printf_i+0xc2>
 8009b02:	4e54      	ldr	r6, [pc, #336]	; (8009c54 <_printf_i+0x208>)
 8009b04:	2708      	movs	r7, #8
 8009b06:	2a6f      	cmp	r2, #111	; 0x6f
 8009b08:	d01b      	beq.n	8009b42 <_printf_i+0xf6>
 8009b0a:	270a      	movs	r7, #10
 8009b0c:	e019      	b.n	8009b42 <_printf_i+0xf6>
 8009b0e:	066d      	lsls	r5, r5, #25
 8009b10:	d5f7      	bpl.n	8009b02 <_printf_i+0xb6>
 8009b12:	b280      	uxth	r0, r0
 8009b14:	e7f5      	b.n	8009b02 <_printf_i+0xb6>
 8009b16:	3145      	adds	r1, #69	; 0x45
 8009b18:	4e4e      	ldr	r6, [pc, #312]	; (8009c54 <_printf_i+0x208>)
 8009b1a:	700a      	strb	r2, [r1, #0]
 8009b1c:	6818      	ldr	r0, [r3, #0]
 8009b1e:	6822      	ldr	r2, [r4, #0]
 8009b20:	1d01      	adds	r1, r0, #4
 8009b22:	6800      	ldr	r0, [r0, #0]
 8009b24:	6019      	str	r1, [r3, #0]
 8009b26:	0615      	lsls	r5, r2, #24
 8009b28:	d521      	bpl.n	8009b6e <_printf_i+0x122>
 8009b2a:	07d3      	lsls	r3, r2, #31
 8009b2c:	d502      	bpl.n	8009b34 <_printf_i+0xe8>
 8009b2e:	2320      	movs	r3, #32
 8009b30:	431a      	orrs	r2, r3
 8009b32:	6022      	str	r2, [r4, #0]
 8009b34:	2710      	movs	r7, #16
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d103      	bne.n	8009b42 <_printf_i+0xf6>
 8009b3a:	2320      	movs	r3, #32
 8009b3c:	6822      	ldr	r2, [r4, #0]
 8009b3e:	439a      	bics	r2, r3
 8009b40:	6022      	str	r2, [r4, #0]
 8009b42:	0023      	movs	r3, r4
 8009b44:	2200      	movs	r2, #0
 8009b46:	3343      	adds	r3, #67	; 0x43
 8009b48:	701a      	strb	r2, [r3, #0]
 8009b4a:	6863      	ldr	r3, [r4, #4]
 8009b4c:	60a3      	str	r3, [r4, #8]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	db58      	blt.n	8009c04 <_printf_i+0x1b8>
 8009b52:	2204      	movs	r2, #4
 8009b54:	6821      	ldr	r1, [r4, #0]
 8009b56:	4391      	bics	r1, r2
 8009b58:	6021      	str	r1, [r4, #0]
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	d154      	bne.n	8009c08 <_printf_i+0x1bc>
 8009b5e:	9d02      	ldr	r5, [sp, #8]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d05a      	beq.n	8009c1a <_printf_i+0x1ce>
 8009b64:	0025      	movs	r5, r4
 8009b66:	7833      	ldrb	r3, [r6, #0]
 8009b68:	3542      	adds	r5, #66	; 0x42
 8009b6a:	702b      	strb	r3, [r5, #0]
 8009b6c:	e055      	b.n	8009c1a <_printf_i+0x1ce>
 8009b6e:	0655      	lsls	r5, r2, #25
 8009b70:	d5db      	bpl.n	8009b2a <_printf_i+0xde>
 8009b72:	b280      	uxth	r0, r0
 8009b74:	e7d9      	b.n	8009b2a <_printf_i+0xde>
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	680d      	ldr	r5, [r1, #0]
 8009b7a:	1d10      	adds	r0, r2, #4
 8009b7c:	6949      	ldr	r1, [r1, #20]
 8009b7e:	6018      	str	r0, [r3, #0]
 8009b80:	6813      	ldr	r3, [r2, #0]
 8009b82:	062e      	lsls	r6, r5, #24
 8009b84:	d501      	bpl.n	8009b8a <_printf_i+0x13e>
 8009b86:	6019      	str	r1, [r3, #0]
 8009b88:	e002      	b.n	8009b90 <_printf_i+0x144>
 8009b8a:	066d      	lsls	r5, r5, #25
 8009b8c:	d5fb      	bpl.n	8009b86 <_printf_i+0x13a>
 8009b8e:	8019      	strh	r1, [r3, #0]
 8009b90:	2300      	movs	r3, #0
 8009b92:	9d02      	ldr	r5, [sp, #8]
 8009b94:	6123      	str	r3, [r4, #16]
 8009b96:	e04f      	b.n	8009c38 <_printf_i+0x1ec>
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	1d11      	adds	r1, r2, #4
 8009b9c:	6019      	str	r1, [r3, #0]
 8009b9e:	6815      	ldr	r5, [r2, #0]
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	6862      	ldr	r2, [r4, #4]
 8009ba4:	0028      	movs	r0, r5
 8009ba6:	f001 f9df 	bl	800af68 <memchr>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d001      	beq.n	8009bb2 <_printf_i+0x166>
 8009bae:	1b40      	subs	r0, r0, r5
 8009bb0:	6060      	str	r0, [r4, #4]
 8009bb2:	6863      	ldr	r3, [r4, #4]
 8009bb4:	6123      	str	r3, [r4, #16]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	9a02      	ldr	r2, [sp, #8]
 8009bba:	7013      	strb	r3, [r2, #0]
 8009bbc:	e03c      	b.n	8009c38 <_printf_i+0x1ec>
 8009bbe:	6923      	ldr	r3, [r4, #16]
 8009bc0:	002a      	movs	r2, r5
 8009bc2:	9904      	ldr	r1, [sp, #16]
 8009bc4:	9803      	ldr	r0, [sp, #12]
 8009bc6:	9d05      	ldr	r5, [sp, #20]
 8009bc8:	47a8      	blx	r5
 8009bca:	1c43      	adds	r3, r0, #1
 8009bcc:	d03e      	beq.n	8009c4c <_printf_i+0x200>
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	079b      	lsls	r3, r3, #30
 8009bd2:	d415      	bmi.n	8009c00 <_printf_i+0x1b4>
 8009bd4:	9b07      	ldr	r3, [sp, #28]
 8009bd6:	68e0      	ldr	r0, [r4, #12]
 8009bd8:	4298      	cmp	r0, r3
 8009bda:	da39      	bge.n	8009c50 <_printf_i+0x204>
 8009bdc:	0018      	movs	r0, r3
 8009bde:	e037      	b.n	8009c50 <_printf_i+0x204>
 8009be0:	0022      	movs	r2, r4
 8009be2:	2301      	movs	r3, #1
 8009be4:	3219      	adds	r2, #25
 8009be6:	9904      	ldr	r1, [sp, #16]
 8009be8:	9803      	ldr	r0, [sp, #12]
 8009bea:	9e05      	ldr	r6, [sp, #20]
 8009bec:	47b0      	blx	r6
 8009bee:	1c43      	adds	r3, r0, #1
 8009bf0:	d02c      	beq.n	8009c4c <_printf_i+0x200>
 8009bf2:	3501      	adds	r5, #1
 8009bf4:	68e3      	ldr	r3, [r4, #12]
 8009bf6:	9a07      	ldr	r2, [sp, #28]
 8009bf8:	1a9b      	subs	r3, r3, r2
 8009bfa:	42ab      	cmp	r3, r5
 8009bfc:	dcf0      	bgt.n	8009be0 <_printf_i+0x194>
 8009bfe:	e7e9      	b.n	8009bd4 <_printf_i+0x188>
 8009c00:	2500      	movs	r5, #0
 8009c02:	e7f7      	b.n	8009bf4 <_printf_i+0x1a8>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d0ad      	beq.n	8009b64 <_printf_i+0x118>
 8009c08:	9d02      	ldr	r5, [sp, #8]
 8009c0a:	0039      	movs	r1, r7
 8009c0c:	f7f6 fb14 	bl	8000238 <__aeabi_uidivmod>
 8009c10:	5c73      	ldrb	r3, [r6, r1]
 8009c12:	3d01      	subs	r5, #1
 8009c14:	702b      	strb	r3, [r5, #0]
 8009c16:	2800      	cmp	r0, #0
 8009c18:	d1f7      	bne.n	8009c0a <_printf_i+0x1be>
 8009c1a:	2f08      	cmp	r7, #8
 8009c1c:	d109      	bne.n	8009c32 <_printf_i+0x1e6>
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	07db      	lsls	r3, r3, #31
 8009c22:	d506      	bpl.n	8009c32 <_printf_i+0x1e6>
 8009c24:	6863      	ldr	r3, [r4, #4]
 8009c26:	6922      	ldr	r2, [r4, #16]
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	dc02      	bgt.n	8009c32 <_printf_i+0x1e6>
 8009c2c:	2330      	movs	r3, #48	; 0x30
 8009c2e:	3d01      	subs	r5, #1
 8009c30:	702b      	strb	r3, [r5, #0]
 8009c32:	9b02      	ldr	r3, [sp, #8]
 8009c34:	1b5b      	subs	r3, r3, r5
 8009c36:	6123      	str	r3, [r4, #16]
 8009c38:	9b05      	ldr	r3, [sp, #20]
 8009c3a:	aa07      	add	r2, sp, #28
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	0021      	movs	r1, r4
 8009c40:	9b04      	ldr	r3, [sp, #16]
 8009c42:	9803      	ldr	r0, [sp, #12]
 8009c44:	f7ff fe94 	bl	8009970 <_printf_common>
 8009c48:	1c43      	adds	r3, r0, #1
 8009c4a:	d1b8      	bne.n	8009bbe <_printf_i+0x172>
 8009c4c:	2001      	movs	r0, #1
 8009c4e:	4240      	negs	r0, r0
 8009c50:	b009      	add	sp, #36	; 0x24
 8009c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c54:	0800bb96 	.word	0x0800bb96
 8009c58:	0800bba7 	.word	0x0800bba7

08009c5c <iprintf>:
 8009c5c:	b40f      	push	{r0, r1, r2, r3}
 8009c5e:	4b0b      	ldr	r3, [pc, #44]	; (8009c8c <iprintf+0x30>)
 8009c60:	b513      	push	{r0, r1, r4, lr}
 8009c62:	681c      	ldr	r4, [r3, #0]
 8009c64:	2c00      	cmp	r4, #0
 8009c66:	d005      	beq.n	8009c74 <iprintf+0x18>
 8009c68:	69a3      	ldr	r3, [r4, #24]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d102      	bne.n	8009c74 <iprintf+0x18>
 8009c6e:	0020      	movs	r0, r4
 8009c70:	f7ff fa6e 	bl	8009150 <__sinit>
 8009c74:	ab05      	add	r3, sp, #20
 8009c76:	9a04      	ldr	r2, [sp, #16]
 8009c78:	68a1      	ldr	r1, [r4, #8]
 8009c7a:	0020      	movs	r0, r4
 8009c7c:	9301      	str	r3, [sp, #4]
 8009c7e:	f001 fce7 	bl	800b650 <_vfiprintf_r>
 8009c82:	bc16      	pop	{r1, r2, r4}
 8009c84:	bc08      	pop	{r3}
 8009c86:	b004      	add	sp, #16
 8009c88:	4718      	bx	r3
 8009c8a:	46c0      	nop			; (mov r8, r8)
 8009c8c:	2000016c 	.word	0x2000016c

08009c90 <_puts_r>:
 8009c90:	b570      	push	{r4, r5, r6, lr}
 8009c92:	0005      	movs	r5, r0
 8009c94:	000e      	movs	r6, r1
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d004      	beq.n	8009ca4 <_puts_r+0x14>
 8009c9a:	6983      	ldr	r3, [r0, #24]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d101      	bne.n	8009ca4 <_puts_r+0x14>
 8009ca0:	f7ff fa56 	bl	8009150 <__sinit>
 8009ca4:	69ab      	ldr	r3, [r5, #24]
 8009ca6:	68ac      	ldr	r4, [r5, #8]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d102      	bne.n	8009cb2 <_puts_r+0x22>
 8009cac:	0028      	movs	r0, r5
 8009cae:	f7ff fa4f 	bl	8009150 <__sinit>
 8009cb2:	4b24      	ldr	r3, [pc, #144]	; (8009d44 <_puts_r+0xb4>)
 8009cb4:	429c      	cmp	r4, r3
 8009cb6:	d10f      	bne.n	8009cd8 <_puts_r+0x48>
 8009cb8:	686c      	ldr	r4, [r5, #4]
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	071b      	lsls	r3, r3, #28
 8009cbe:	d502      	bpl.n	8009cc6 <_puts_r+0x36>
 8009cc0:	6923      	ldr	r3, [r4, #16]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d11f      	bne.n	8009d06 <_puts_r+0x76>
 8009cc6:	0021      	movs	r1, r4
 8009cc8:	0028      	movs	r0, r5
 8009cca:	f000 f913 	bl	8009ef4 <__swsetup_r>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d019      	beq.n	8009d06 <_puts_r+0x76>
 8009cd2:	2001      	movs	r0, #1
 8009cd4:	4240      	negs	r0, r0
 8009cd6:	bd70      	pop	{r4, r5, r6, pc}
 8009cd8:	4b1b      	ldr	r3, [pc, #108]	; (8009d48 <_puts_r+0xb8>)
 8009cda:	429c      	cmp	r4, r3
 8009cdc:	d101      	bne.n	8009ce2 <_puts_r+0x52>
 8009cde:	68ac      	ldr	r4, [r5, #8]
 8009ce0:	e7eb      	b.n	8009cba <_puts_r+0x2a>
 8009ce2:	4b1a      	ldr	r3, [pc, #104]	; (8009d4c <_puts_r+0xbc>)
 8009ce4:	429c      	cmp	r4, r3
 8009ce6:	d1e8      	bne.n	8009cba <_puts_r+0x2a>
 8009ce8:	68ec      	ldr	r4, [r5, #12]
 8009cea:	e7e6      	b.n	8009cba <_puts_r+0x2a>
 8009cec:	3601      	adds	r6, #1
 8009cee:	60a3      	str	r3, [r4, #8]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	da04      	bge.n	8009cfe <_puts_r+0x6e>
 8009cf4:	69a2      	ldr	r2, [r4, #24]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	dc16      	bgt.n	8009d28 <_puts_r+0x98>
 8009cfa:	290a      	cmp	r1, #10
 8009cfc:	d014      	beq.n	8009d28 <_puts_r+0x98>
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	1c5a      	adds	r2, r3, #1
 8009d02:	6022      	str	r2, [r4, #0]
 8009d04:	7019      	strb	r1, [r3, #0]
 8009d06:	68a3      	ldr	r3, [r4, #8]
 8009d08:	7831      	ldrb	r1, [r6, #0]
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	2900      	cmp	r1, #0
 8009d0e:	d1ed      	bne.n	8009cec <_puts_r+0x5c>
 8009d10:	60a3      	str	r3, [r4, #8]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	da0f      	bge.n	8009d36 <_puts_r+0xa6>
 8009d16:	0022      	movs	r2, r4
 8009d18:	310a      	adds	r1, #10
 8009d1a:	0028      	movs	r0, r5
 8009d1c:	f000 f880 	bl	8009e20 <__swbuf_r>
 8009d20:	1c43      	adds	r3, r0, #1
 8009d22:	d0d6      	beq.n	8009cd2 <_puts_r+0x42>
 8009d24:	200a      	movs	r0, #10
 8009d26:	e7d6      	b.n	8009cd6 <_puts_r+0x46>
 8009d28:	0022      	movs	r2, r4
 8009d2a:	0028      	movs	r0, r5
 8009d2c:	f000 f878 	bl	8009e20 <__swbuf_r>
 8009d30:	1c43      	adds	r3, r0, #1
 8009d32:	d1e8      	bne.n	8009d06 <_puts_r+0x76>
 8009d34:	e7cd      	b.n	8009cd2 <_puts_r+0x42>
 8009d36:	200a      	movs	r0, #10
 8009d38:	6823      	ldr	r3, [r4, #0]
 8009d3a:	1c5a      	adds	r2, r3, #1
 8009d3c:	6022      	str	r2, [r4, #0]
 8009d3e:	7018      	strb	r0, [r3, #0]
 8009d40:	e7c9      	b.n	8009cd6 <_puts_r+0x46>
 8009d42:	46c0      	nop			; (mov r8, r8)
 8009d44:	0800bb40 	.word	0x0800bb40
 8009d48:	0800bb60 	.word	0x0800bb60
 8009d4c:	0800bb20 	.word	0x0800bb20

08009d50 <puts>:
 8009d50:	b510      	push	{r4, lr}
 8009d52:	4b03      	ldr	r3, [pc, #12]	; (8009d60 <puts+0x10>)
 8009d54:	0001      	movs	r1, r0
 8009d56:	6818      	ldr	r0, [r3, #0]
 8009d58:	f7ff ff9a 	bl	8009c90 <_puts_r>
 8009d5c:	bd10      	pop	{r4, pc}
 8009d5e:	46c0      	nop			; (mov r8, r8)
 8009d60:	2000016c 	.word	0x2000016c

08009d64 <_sbrk_r>:
 8009d64:	2300      	movs	r3, #0
 8009d66:	b570      	push	{r4, r5, r6, lr}
 8009d68:	4c06      	ldr	r4, [pc, #24]	; (8009d84 <_sbrk_r+0x20>)
 8009d6a:	0005      	movs	r5, r0
 8009d6c:	0008      	movs	r0, r1
 8009d6e:	6023      	str	r3, [r4, #0]
 8009d70:	f7f8 fccc 	bl	800270c <_sbrk>
 8009d74:	1c43      	adds	r3, r0, #1
 8009d76:	d103      	bne.n	8009d80 <_sbrk_r+0x1c>
 8009d78:	6823      	ldr	r3, [r4, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d000      	beq.n	8009d80 <_sbrk_r+0x1c>
 8009d7e:	602b      	str	r3, [r5, #0]
 8009d80:	bd70      	pop	{r4, r5, r6, pc}
 8009d82:	46c0      	nop			; (mov r8, r8)
 8009d84:	20000ce4 	.word	0x20000ce4

08009d88 <__sread>:
 8009d88:	b570      	push	{r4, r5, r6, lr}
 8009d8a:	000c      	movs	r4, r1
 8009d8c:	250e      	movs	r5, #14
 8009d8e:	5f49      	ldrsh	r1, [r1, r5]
 8009d90:	f001 fd74 	bl	800b87c <_read_r>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	db03      	blt.n	8009da0 <__sread+0x18>
 8009d98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009d9a:	181b      	adds	r3, r3, r0
 8009d9c:	6563      	str	r3, [r4, #84]	; 0x54
 8009d9e:	bd70      	pop	{r4, r5, r6, pc}
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	4a02      	ldr	r2, [pc, #8]	; (8009dac <__sread+0x24>)
 8009da4:	4013      	ands	r3, r2
 8009da6:	81a3      	strh	r3, [r4, #12]
 8009da8:	e7f9      	b.n	8009d9e <__sread+0x16>
 8009daa:	46c0      	nop			; (mov r8, r8)
 8009dac:	ffffefff 	.word	0xffffefff

08009db0 <__swrite>:
 8009db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db2:	001f      	movs	r7, r3
 8009db4:	898b      	ldrh	r3, [r1, #12]
 8009db6:	0005      	movs	r5, r0
 8009db8:	000c      	movs	r4, r1
 8009dba:	0016      	movs	r6, r2
 8009dbc:	05db      	lsls	r3, r3, #23
 8009dbe:	d505      	bpl.n	8009dcc <__swrite+0x1c>
 8009dc0:	230e      	movs	r3, #14
 8009dc2:	5ec9      	ldrsh	r1, [r1, r3]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	2302      	movs	r3, #2
 8009dc8:	f001 f844 	bl	800ae54 <_lseek_r>
 8009dcc:	89a3      	ldrh	r3, [r4, #12]
 8009dce:	4a05      	ldr	r2, [pc, #20]	; (8009de4 <__swrite+0x34>)
 8009dd0:	0028      	movs	r0, r5
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	81a3      	strh	r3, [r4, #12]
 8009dd6:	0032      	movs	r2, r6
 8009dd8:	230e      	movs	r3, #14
 8009dda:	5ee1      	ldrsh	r1, [r4, r3]
 8009ddc:	003b      	movs	r3, r7
 8009dde:	f000 f875 	bl	8009ecc <_write_r>
 8009de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009de4:	ffffefff 	.word	0xffffefff

08009de8 <__sseek>:
 8009de8:	b570      	push	{r4, r5, r6, lr}
 8009dea:	000c      	movs	r4, r1
 8009dec:	250e      	movs	r5, #14
 8009dee:	5f49      	ldrsh	r1, [r1, r5]
 8009df0:	f001 f830 	bl	800ae54 <_lseek_r>
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	1c42      	adds	r2, r0, #1
 8009df8:	d103      	bne.n	8009e02 <__sseek+0x1a>
 8009dfa:	4a05      	ldr	r2, [pc, #20]	; (8009e10 <__sseek+0x28>)
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	81a3      	strh	r3, [r4, #12]
 8009e00:	bd70      	pop	{r4, r5, r6, pc}
 8009e02:	2280      	movs	r2, #128	; 0x80
 8009e04:	0152      	lsls	r2, r2, #5
 8009e06:	4313      	orrs	r3, r2
 8009e08:	81a3      	strh	r3, [r4, #12]
 8009e0a:	6560      	str	r0, [r4, #84]	; 0x54
 8009e0c:	e7f8      	b.n	8009e00 <__sseek+0x18>
 8009e0e:	46c0      	nop			; (mov r8, r8)
 8009e10:	ffffefff 	.word	0xffffefff

08009e14 <__sclose>:
 8009e14:	b510      	push	{r4, lr}
 8009e16:	230e      	movs	r3, #14
 8009e18:	5ec9      	ldrsh	r1, [r1, r3]
 8009e1a:	f000 f8e1 	bl	8009fe0 <_close_r>
 8009e1e:	bd10      	pop	{r4, pc}

08009e20 <__swbuf_r>:
 8009e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e22:	0005      	movs	r5, r0
 8009e24:	000e      	movs	r6, r1
 8009e26:	0014      	movs	r4, r2
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	d004      	beq.n	8009e36 <__swbuf_r+0x16>
 8009e2c:	6983      	ldr	r3, [r0, #24]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <__swbuf_r+0x16>
 8009e32:	f7ff f98d 	bl	8009150 <__sinit>
 8009e36:	4b22      	ldr	r3, [pc, #136]	; (8009ec0 <__swbuf_r+0xa0>)
 8009e38:	429c      	cmp	r4, r3
 8009e3a:	d12d      	bne.n	8009e98 <__swbuf_r+0x78>
 8009e3c:	686c      	ldr	r4, [r5, #4]
 8009e3e:	69a3      	ldr	r3, [r4, #24]
 8009e40:	60a3      	str	r3, [r4, #8]
 8009e42:	89a3      	ldrh	r3, [r4, #12]
 8009e44:	071b      	lsls	r3, r3, #28
 8009e46:	d531      	bpl.n	8009eac <__swbuf_r+0x8c>
 8009e48:	6923      	ldr	r3, [r4, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d02e      	beq.n	8009eac <__swbuf_r+0x8c>
 8009e4e:	6823      	ldr	r3, [r4, #0]
 8009e50:	6922      	ldr	r2, [r4, #16]
 8009e52:	b2f7      	uxtb	r7, r6
 8009e54:	1a98      	subs	r0, r3, r2
 8009e56:	6963      	ldr	r3, [r4, #20]
 8009e58:	b2f6      	uxtb	r6, r6
 8009e5a:	4283      	cmp	r3, r0
 8009e5c:	dc05      	bgt.n	8009e6a <__swbuf_r+0x4a>
 8009e5e:	0021      	movs	r1, r4
 8009e60:	0028      	movs	r0, r5
 8009e62:	f000 ffbf 	bl	800ade4 <_fflush_r>
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d126      	bne.n	8009eb8 <__swbuf_r+0x98>
 8009e6a:	68a3      	ldr	r3, [r4, #8]
 8009e6c:	3001      	adds	r0, #1
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	60a3      	str	r3, [r4, #8]
 8009e72:	6823      	ldr	r3, [r4, #0]
 8009e74:	1c5a      	adds	r2, r3, #1
 8009e76:	6022      	str	r2, [r4, #0]
 8009e78:	701f      	strb	r7, [r3, #0]
 8009e7a:	6963      	ldr	r3, [r4, #20]
 8009e7c:	4283      	cmp	r3, r0
 8009e7e:	d004      	beq.n	8009e8a <__swbuf_r+0x6a>
 8009e80:	89a3      	ldrh	r3, [r4, #12]
 8009e82:	07db      	lsls	r3, r3, #31
 8009e84:	d51a      	bpl.n	8009ebc <__swbuf_r+0x9c>
 8009e86:	2e0a      	cmp	r6, #10
 8009e88:	d118      	bne.n	8009ebc <__swbuf_r+0x9c>
 8009e8a:	0021      	movs	r1, r4
 8009e8c:	0028      	movs	r0, r5
 8009e8e:	f000 ffa9 	bl	800ade4 <_fflush_r>
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d012      	beq.n	8009ebc <__swbuf_r+0x9c>
 8009e96:	e00f      	b.n	8009eb8 <__swbuf_r+0x98>
 8009e98:	4b0a      	ldr	r3, [pc, #40]	; (8009ec4 <__swbuf_r+0xa4>)
 8009e9a:	429c      	cmp	r4, r3
 8009e9c:	d101      	bne.n	8009ea2 <__swbuf_r+0x82>
 8009e9e:	68ac      	ldr	r4, [r5, #8]
 8009ea0:	e7cd      	b.n	8009e3e <__swbuf_r+0x1e>
 8009ea2:	4b09      	ldr	r3, [pc, #36]	; (8009ec8 <__swbuf_r+0xa8>)
 8009ea4:	429c      	cmp	r4, r3
 8009ea6:	d1ca      	bne.n	8009e3e <__swbuf_r+0x1e>
 8009ea8:	68ec      	ldr	r4, [r5, #12]
 8009eaa:	e7c8      	b.n	8009e3e <__swbuf_r+0x1e>
 8009eac:	0021      	movs	r1, r4
 8009eae:	0028      	movs	r0, r5
 8009eb0:	f000 f820 	bl	8009ef4 <__swsetup_r>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d0ca      	beq.n	8009e4e <__swbuf_r+0x2e>
 8009eb8:	2601      	movs	r6, #1
 8009eba:	4276      	negs	r6, r6
 8009ebc:	0030      	movs	r0, r6
 8009ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ec0:	0800bb40 	.word	0x0800bb40
 8009ec4:	0800bb60 	.word	0x0800bb60
 8009ec8:	0800bb20 	.word	0x0800bb20

08009ecc <_write_r>:
 8009ecc:	b570      	push	{r4, r5, r6, lr}
 8009ece:	0005      	movs	r5, r0
 8009ed0:	0008      	movs	r0, r1
 8009ed2:	0011      	movs	r1, r2
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	4c06      	ldr	r4, [pc, #24]	; (8009ef0 <_write_r+0x24>)
 8009ed8:	6022      	str	r2, [r4, #0]
 8009eda:	001a      	movs	r2, r3
 8009edc:	f7fe feff 	bl	8008cde <_write>
 8009ee0:	1c43      	adds	r3, r0, #1
 8009ee2:	d103      	bne.n	8009eec <_write_r+0x20>
 8009ee4:	6823      	ldr	r3, [r4, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d000      	beq.n	8009eec <_write_r+0x20>
 8009eea:	602b      	str	r3, [r5, #0]
 8009eec:	bd70      	pop	{r4, r5, r6, pc}
 8009eee:	46c0      	nop			; (mov r8, r8)
 8009ef0:	20000ce4 	.word	0x20000ce4

08009ef4 <__swsetup_r>:
 8009ef4:	4b36      	ldr	r3, [pc, #216]	; (8009fd0 <__swsetup_r+0xdc>)
 8009ef6:	b570      	push	{r4, r5, r6, lr}
 8009ef8:	681d      	ldr	r5, [r3, #0]
 8009efa:	0006      	movs	r6, r0
 8009efc:	000c      	movs	r4, r1
 8009efe:	2d00      	cmp	r5, #0
 8009f00:	d005      	beq.n	8009f0e <__swsetup_r+0x1a>
 8009f02:	69ab      	ldr	r3, [r5, #24]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d102      	bne.n	8009f0e <__swsetup_r+0x1a>
 8009f08:	0028      	movs	r0, r5
 8009f0a:	f7ff f921 	bl	8009150 <__sinit>
 8009f0e:	4b31      	ldr	r3, [pc, #196]	; (8009fd4 <__swsetup_r+0xe0>)
 8009f10:	429c      	cmp	r4, r3
 8009f12:	d10f      	bne.n	8009f34 <__swsetup_r+0x40>
 8009f14:	686c      	ldr	r4, [r5, #4]
 8009f16:	230c      	movs	r3, #12
 8009f18:	5ee2      	ldrsh	r2, [r4, r3]
 8009f1a:	b293      	uxth	r3, r2
 8009f1c:	0719      	lsls	r1, r3, #28
 8009f1e:	d42d      	bmi.n	8009f7c <__swsetup_r+0x88>
 8009f20:	06d9      	lsls	r1, r3, #27
 8009f22:	d411      	bmi.n	8009f48 <__swsetup_r+0x54>
 8009f24:	2309      	movs	r3, #9
 8009f26:	2001      	movs	r0, #1
 8009f28:	6033      	str	r3, [r6, #0]
 8009f2a:	3337      	adds	r3, #55	; 0x37
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	81a3      	strh	r3, [r4, #12]
 8009f30:	4240      	negs	r0, r0
 8009f32:	bd70      	pop	{r4, r5, r6, pc}
 8009f34:	4b28      	ldr	r3, [pc, #160]	; (8009fd8 <__swsetup_r+0xe4>)
 8009f36:	429c      	cmp	r4, r3
 8009f38:	d101      	bne.n	8009f3e <__swsetup_r+0x4a>
 8009f3a:	68ac      	ldr	r4, [r5, #8]
 8009f3c:	e7eb      	b.n	8009f16 <__swsetup_r+0x22>
 8009f3e:	4b27      	ldr	r3, [pc, #156]	; (8009fdc <__swsetup_r+0xe8>)
 8009f40:	429c      	cmp	r4, r3
 8009f42:	d1e8      	bne.n	8009f16 <__swsetup_r+0x22>
 8009f44:	68ec      	ldr	r4, [r5, #12]
 8009f46:	e7e6      	b.n	8009f16 <__swsetup_r+0x22>
 8009f48:	075b      	lsls	r3, r3, #29
 8009f4a:	d513      	bpl.n	8009f74 <__swsetup_r+0x80>
 8009f4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f4e:	2900      	cmp	r1, #0
 8009f50:	d008      	beq.n	8009f64 <__swsetup_r+0x70>
 8009f52:	0023      	movs	r3, r4
 8009f54:	3344      	adds	r3, #68	; 0x44
 8009f56:	4299      	cmp	r1, r3
 8009f58:	d002      	beq.n	8009f60 <__swsetup_r+0x6c>
 8009f5a:	0030      	movs	r0, r6
 8009f5c:	f001 fb06 	bl	800b56c <_free_r>
 8009f60:	2300      	movs	r3, #0
 8009f62:	6363      	str	r3, [r4, #52]	; 0x34
 8009f64:	2224      	movs	r2, #36	; 0x24
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	4393      	bics	r3, r2
 8009f6a:	81a3      	strh	r3, [r4, #12]
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	6063      	str	r3, [r4, #4]
 8009f70:	6923      	ldr	r3, [r4, #16]
 8009f72:	6023      	str	r3, [r4, #0]
 8009f74:	2308      	movs	r3, #8
 8009f76:	89a2      	ldrh	r2, [r4, #12]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	81a3      	strh	r3, [r4, #12]
 8009f7c:	6923      	ldr	r3, [r4, #16]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10b      	bne.n	8009f9a <__swsetup_r+0xa6>
 8009f82:	21a0      	movs	r1, #160	; 0xa0
 8009f84:	2280      	movs	r2, #128	; 0x80
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	0089      	lsls	r1, r1, #2
 8009f8a:	0092      	lsls	r2, r2, #2
 8009f8c:	400b      	ands	r3, r1
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d003      	beq.n	8009f9a <__swsetup_r+0xa6>
 8009f92:	0021      	movs	r1, r4
 8009f94:	0030      	movs	r0, r6
 8009f96:	f000 ff99 	bl	800aecc <__smakebuf_r>
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	89a2      	ldrh	r2, [r4, #12]
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	d011      	beq.n	8009fc6 <__swsetup_r+0xd2>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	60a3      	str	r3, [r4, #8]
 8009fa6:	6963      	ldr	r3, [r4, #20]
 8009fa8:	425b      	negs	r3, r3
 8009faa:	61a3      	str	r3, [r4, #24]
 8009fac:	2000      	movs	r0, #0
 8009fae:	6923      	ldr	r3, [r4, #16]
 8009fb0:	4283      	cmp	r3, r0
 8009fb2:	d1be      	bne.n	8009f32 <__swsetup_r+0x3e>
 8009fb4:	230c      	movs	r3, #12
 8009fb6:	5ee2      	ldrsh	r2, [r4, r3]
 8009fb8:	0613      	lsls	r3, r2, #24
 8009fba:	d5ba      	bpl.n	8009f32 <__swsetup_r+0x3e>
 8009fbc:	2340      	movs	r3, #64	; 0x40
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	81a3      	strh	r3, [r4, #12]
 8009fc2:	3801      	subs	r0, #1
 8009fc4:	e7b5      	b.n	8009f32 <__swsetup_r+0x3e>
 8009fc6:	0792      	lsls	r2, r2, #30
 8009fc8:	d400      	bmi.n	8009fcc <__swsetup_r+0xd8>
 8009fca:	6963      	ldr	r3, [r4, #20]
 8009fcc:	60a3      	str	r3, [r4, #8]
 8009fce:	e7ed      	b.n	8009fac <__swsetup_r+0xb8>
 8009fd0:	2000016c 	.word	0x2000016c
 8009fd4:	0800bb40 	.word	0x0800bb40
 8009fd8:	0800bb60 	.word	0x0800bb60
 8009fdc:	0800bb20 	.word	0x0800bb20

08009fe0 <_close_r>:
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	b570      	push	{r4, r5, r6, lr}
 8009fe4:	4c06      	ldr	r4, [pc, #24]	; (800a000 <_close_r+0x20>)
 8009fe6:	0005      	movs	r5, r0
 8009fe8:	0008      	movs	r0, r1
 8009fea:	6023      	str	r3, [r4, #0]
 8009fec:	f7fe fea2 	bl	8008d34 <_close>
 8009ff0:	1c43      	adds	r3, r0, #1
 8009ff2:	d103      	bne.n	8009ffc <_close_r+0x1c>
 8009ff4:	6823      	ldr	r3, [r4, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d000      	beq.n	8009ffc <_close_r+0x1c>
 8009ffa:	602b      	str	r3, [r5, #0]
 8009ffc:	bd70      	pop	{r4, r5, r6, pc}
 8009ffe:	46c0      	nop			; (mov r8, r8)
 800a000:	20000ce4 	.word	0x20000ce4

0800a004 <quorem>:
 800a004:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a006:	6903      	ldr	r3, [r0, #16]
 800a008:	690c      	ldr	r4, [r1, #16]
 800a00a:	b089      	sub	sp, #36	; 0x24
 800a00c:	0007      	movs	r7, r0
 800a00e:	9105      	str	r1, [sp, #20]
 800a010:	2600      	movs	r6, #0
 800a012:	42a3      	cmp	r3, r4
 800a014:	db65      	blt.n	800a0e2 <quorem+0xde>
 800a016:	000b      	movs	r3, r1
 800a018:	3c01      	subs	r4, #1
 800a01a:	3314      	adds	r3, #20
 800a01c:	00a5      	lsls	r5, r4, #2
 800a01e:	9303      	str	r3, [sp, #12]
 800a020:	195b      	adds	r3, r3, r5
 800a022:	9304      	str	r3, [sp, #16]
 800a024:	0003      	movs	r3, r0
 800a026:	3314      	adds	r3, #20
 800a028:	9302      	str	r3, [sp, #8]
 800a02a:	195d      	adds	r5, r3, r5
 800a02c:	9b04      	ldr	r3, [sp, #16]
 800a02e:	6828      	ldr	r0, [r5, #0]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	1c59      	adds	r1, r3, #1
 800a034:	9301      	str	r3, [sp, #4]
 800a036:	f7f6 f879 	bl	800012c <__udivsi3>
 800a03a:	9001      	str	r0, [sp, #4]
 800a03c:	42b0      	cmp	r0, r6
 800a03e:	d029      	beq.n	800a094 <quorem+0x90>
 800a040:	9b03      	ldr	r3, [sp, #12]
 800a042:	9802      	ldr	r0, [sp, #8]
 800a044:	469c      	mov	ip, r3
 800a046:	9606      	str	r6, [sp, #24]
 800a048:	4662      	mov	r2, ip
 800a04a:	ca08      	ldmia	r2!, {r3}
 800a04c:	4694      	mov	ip, r2
 800a04e:	9a01      	ldr	r2, [sp, #4]
 800a050:	b299      	uxth	r1, r3
 800a052:	4351      	muls	r1, r2
 800a054:	0c1b      	lsrs	r3, r3, #16
 800a056:	4353      	muls	r3, r2
 800a058:	1989      	adds	r1, r1, r6
 800a05a:	0c0a      	lsrs	r2, r1, #16
 800a05c:	189b      	adds	r3, r3, r2
 800a05e:	9307      	str	r3, [sp, #28]
 800a060:	0c1e      	lsrs	r6, r3, #16
 800a062:	6803      	ldr	r3, [r0, #0]
 800a064:	b289      	uxth	r1, r1
 800a066:	b29a      	uxth	r2, r3
 800a068:	9b06      	ldr	r3, [sp, #24]
 800a06a:	18d2      	adds	r2, r2, r3
 800a06c:	6803      	ldr	r3, [r0, #0]
 800a06e:	1a52      	subs	r2, r2, r1
 800a070:	0c19      	lsrs	r1, r3, #16
 800a072:	466b      	mov	r3, sp
 800a074:	8b9b      	ldrh	r3, [r3, #28]
 800a076:	1acb      	subs	r3, r1, r3
 800a078:	1411      	asrs	r1, r2, #16
 800a07a:	185b      	adds	r3, r3, r1
 800a07c:	1419      	asrs	r1, r3, #16
 800a07e:	b292      	uxth	r2, r2
 800a080:	041b      	lsls	r3, r3, #16
 800a082:	431a      	orrs	r2, r3
 800a084:	9b04      	ldr	r3, [sp, #16]
 800a086:	9106      	str	r1, [sp, #24]
 800a088:	c004      	stmia	r0!, {r2}
 800a08a:	4563      	cmp	r3, ip
 800a08c:	d2dc      	bcs.n	800a048 <quorem+0x44>
 800a08e:	682b      	ldr	r3, [r5, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d02d      	beq.n	800a0f0 <quorem+0xec>
 800a094:	9905      	ldr	r1, [sp, #20]
 800a096:	0038      	movs	r0, r7
 800a098:	f001 f988 	bl	800b3ac <__mcmp>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	db1f      	blt.n	800a0e0 <quorem+0xdc>
 800a0a0:	2500      	movs	r5, #0
 800a0a2:	9b01      	ldr	r3, [sp, #4]
 800a0a4:	9802      	ldr	r0, [sp, #8]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	9903      	ldr	r1, [sp, #12]
 800a0aa:	9301      	str	r3, [sp, #4]
 800a0ac:	6802      	ldr	r2, [r0, #0]
 800a0ae:	c908      	ldmia	r1!, {r3}
 800a0b0:	b292      	uxth	r2, r2
 800a0b2:	1955      	adds	r5, r2, r5
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	1aaa      	subs	r2, r5, r2
 800a0b8:	6805      	ldr	r5, [r0, #0]
 800a0ba:	0c1b      	lsrs	r3, r3, #16
 800a0bc:	0c2d      	lsrs	r5, r5, #16
 800a0be:	1aeb      	subs	r3, r5, r3
 800a0c0:	1415      	asrs	r5, r2, #16
 800a0c2:	195b      	adds	r3, r3, r5
 800a0c4:	141d      	asrs	r5, r3, #16
 800a0c6:	b292      	uxth	r2, r2
 800a0c8:	041b      	lsls	r3, r3, #16
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	c008      	stmia	r0!, {r3}
 800a0ce:	9b04      	ldr	r3, [sp, #16]
 800a0d0:	428b      	cmp	r3, r1
 800a0d2:	d2eb      	bcs.n	800a0ac <quorem+0xa8>
 800a0d4:	9a02      	ldr	r2, [sp, #8]
 800a0d6:	00a3      	lsls	r3, r4, #2
 800a0d8:	18d3      	adds	r3, r2, r3
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	2a00      	cmp	r2, #0
 800a0de:	d011      	beq.n	800a104 <quorem+0x100>
 800a0e0:	9e01      	ldr	r6, [sp, #4]
 800a0e2:	0030      	movs	r0, r6
 800a0e4:	b009      	add	sp, #36	; 0x24
 800a0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d104      	bne.n	800a0f8 <quorem+0xf4>
 800a0ee:	3c01      	subs	r4, #1
 800a0f0:	9b02      	ldr	r3, [sp, #8]
 800a0f2:	3d04      	subs	r5, #4
 800a0f4:	42ab      	cmp	r3, r5
 800a0f6:	d3f7      	bcc.n	800a0e8 <quorem+0xe4>
 800a0f8:	613c      	str	r4, [r7, #16]
 800a0fa:	e7cb      	b.n	800a094 <quorem+0x90>
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	2a00      	cmp	r2, #0
 800a100:	d104      	bne.n	800a10c <quorem+0x108>
 800a102:	3c01      	subs	r4, #1
 800a104:	9a02      	ldr	r2, [sp, #8]
 800a106:	3b04      	subs	r3, #4
 800a108:	429a      	cmp	r2, r3
 800a10a:	d3f7      	bcc.n	800a0fc <quorem+0xf8>
 800a10c:	613c      	str	r4, [r7, #16]
 800a10e:	e7e7      	b.n	800a0e0 <quorem+0xdc>

0800a110 <_dtoa_r>:
 800a110:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a112:	0016      	movs	r6, r2
 800a114:	001f      	movs	r7, r3
 800a116:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a118:	b09b      	sub	sp, #108	; 0x6c
 800a11a:	9002      	str	r0, [sp, #8]
 800a11c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800a11e:	9606      	str	r6, [sp, #24]
 800a120:	9707      	str	r7, [sp, #28]
 800a122:	2c00      	cmp	r4, #0
 800a124:	d108      	bne.n	800a138 <_dtoa_r+0x28>
 800a126:	2010      	movs	r0, #16
 800a128:	f000 ff14 	bl	800af54 <malloc>
 800a12c:	9b02      	ldr	r3, [sp, #8]
 800a12e:	6258      	str	r0, [r3, #36]	; 0x24
 800a130:	6044      	str	r4, [r0, #4]
 800a132:	6084      	str	r4, [r0, #8]
 800a134:	6004      	str	r4, [r0, #0]
 800a136:	60c4      	str	r4, [r0, #12]
 800a138:	9b02      	ldr	r3, [sp, #8]
 800a13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13c:	6819      	ldr	r1, [r3, #0]
 800a13e:	2900      	cmp	r1, #0
 800a140:	d00b      	beq.n	800a15a <_dtoa_r+0x4a>
 800a142:	685a      	ldr	r2, [r3, #4]
 800a144:	2301      	movs	r3, #1
 800a146:	4093      	lsls	r3, r2
 800a148:	604a      	str	r2, [r1, #4]
 800a14a:	608b      	str	r3, [r1, #8]
 800a14c:	9802      	ldr	r0, [sp, #8]
 800a14e:	f000 ff50 	bl	800aff2 <_Bfree>
 800a152:	2200      	movs	r2, #0
 800a154:	9b02      	ldr	r3, [sp, #8]
 800a156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a158:	601a      	str	r2, [r3, #0]
 800a15a:	2f00      	cmp	r7, #0
 800a15c:	da20      	bge.n	800a1a0 <_dtoa_r+0x90>
 800a15e:	2301      	movs	r3, #1
 800a160:	602b      	str	r3, [r5, #0]
 800a162:	007b      	lsls	r3, r7, #1
 800a164:	085b      	lsrs	r3, r3, #1
 800a166:	9307      	str	r3, [sp, #28]
 800a168:	9c07      	ldr	r4, [sp, #28]
 800a16a:	4bb2      	ldr	r3, [pc, #712]	; (800a434 <_dtoa_r+0x324>)
 800a16c:	0022      	movs	r2, r4
 800a16e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a170:	401a      	ands	r2, r3
 800a172:	429a      	cmp	r2, r3
 800a174:	d117      	bne.n	800a1a6 <_dtoa_r+0x96>
 800a176:	4bb0      	ldr	r3, [pc, #704]	; (800a438 <_dtoa_r+0x328>)
 800a178:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	9b06      	ldr	r3, [sp, #24]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d103      	bne.n	800a18a <_dtoa_r+0x7a>
 800a182:	0324      	lsls	r4, r4, #12
 800a184:	d101      	bne.n	800a18a <_dtoa_r+0x7a>
 800a186:	f000 fd87 	bl	800ac98 <_dtoa_r+0xb88>
 800a18a:	4bac      	ldr	r3, [pc, #688]	; (800a43c <_dtoa_r+0x32c>)
 800a18c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a18e:	9308      	str	r3, [sp, #32]
 800a190:	2a00      	cmp	r2, #0
 800a192:	d002      	beq.n	800a19a <_dtoa_r+0x8a>
 800a194:	4baa      	ldr	r3, [pc, #680]	; (800a440 <_dtoa_r+0x330>)
 800a196:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a198:	6013      	str	r3, [r2, #0]
 800a19a:	9808      	ldr	r0, [sp, #32]
 800a19c:	b01b      	add	sp, #108	; 0x6c
 800a19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	602b      	str	r3, [r5, #0]
 800a1a4:	e7e0      	b.n	800a168 <_dtoa_r+0x58>
 800a1a6:	9e06      	ldr	r6, [sp, #24]
 800a1a8:	9f07      	ldr	r7, [sp, #28]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	0030      	movs	r0, r6
 800a1b0:	0039      	movs	r1, r7
 800a1b2:	f7f6 f941 	bl	8000438 <__aeabi_dcmpeq>
 800a1b6:	1e05      	subs	r5, r0, #0
 800a1b8:	d00b      	beq.n	800a1d2 <_dtoa_r+0xc2>
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a1be:	6013      	str	r3, [r2, #0]
 800a1c0:	4ba0      	ldr	r3, [pc, #640]	; (800a444 <_dtoa_r+0x334>)
 800a1c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a1c4:	9308      	str	r3, [sp, #32]
 800a1c6:	2a00      	cmp	r2, #0
 800a1c8:	d0e7      	beq.n	800a19a <_dtoa_r+0x8a>
 800a1ca:	4a9f      	ldr	r2, [pc, #636]	; (800a448 <_dtoa_r+0x338>)
 800a1cc:	9924      	ldr	r1, [sp, #144]	; 0x90
 800a1ce:	600a      	str	r2, [r1, #0]
 800a1d0:	e7e3      	b.n	800a19a <_dtoa_r+0x8a>
 800a1d2:	ab18      	add	r3, sp, #96	; 0x60
 800a1d4:	9301      	str	r3, [sp, #4]
 800a1d6:	ab19      	add	r3, sp, #100	; 0x64
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	0032      	movs	r2, r6
 800a1dc:	003b      	movs	r3, r7
 800a1de:	9802      	ldr	r0, [sp, #8]
 800a1e0:	f001 f962 	bl	800b4a8 <__d2b>
 800a1e4:	0063      	lsls	r3, r4, #1
 800a1e6:	9003      	str	r0, [sp, #12]
 800a1e8:	0d5b      	lsrs	r3, r3, #21
 800a1ea:	d074      	beq.n	800a2d6 <_dtoa_r+0x1c6>
 800a1ec:	033a      	lsls	r2, r7, #12
 800a1ee:	4c97      	ldr	r4, [pc, #604]	; (800a44c <_dtoa_r+0x33c>)
 800a1f0:	0b12      	lsrs	r2, r2, #12
 800a1f2:	4314      	orrs	r4, r2
 800a1f4:	0021      	movs	r1, r4
 800a1f6:	4a96      	ldr	r2, [pc, #600]	; (800a450 <_dtoa_r+0x340>)
 800a1f8:	0030      	movs	r0, r6
 800a1fa:	9516      	str	r5, [sp, #88]	; 0x58
 800a1fc:	189e      	adds	r6, r3, r2
 800a1fe:	2200      	movs	r2, #0
 800a200:	4b94      	ldr	r3, [pc, #592]	; (800a454 <_dtoa_r+0x344>)
 800a202:	f7f7 fadf 	bl	80017c4 <__aeabi_dsub>
 800a206:	4a94      	ldr	r2, [pc, #592]	; (800a458 <_dtoa_r+0x348>)
 800a208:	4b94      	ldr	r3, [pc, #592]	; (800a45c <_dtoa_r+0x34c>)
 800a20a:	f7f7 f869 	bl	80012e0 <__aeabi_dmul>
 800a20e:	4a94      	ldr	r2, [pc, #592]	; (800a460 <_dtoa_r+0x350>)
 800a210:	4b94      	ldr	r3, [pc, #592]	; (800a464 <_dtoa_r+0x354>)
 800a212:	f7f6 f93f 	bl	8000494 <__aeabi_dadd>
 800a216:	0004      	movs	r4, r0
 800a218:	0030      	movs	r0, r6
 800a21a:	000d      	movs	r5, r1
 800a21c:	f7f7 fe6c 	bl	8001ef8 <__aeabi_i2d>
 800a220:	4a91      	ldr	r2, [pc, #580]	; (800a468 <_dtoa_r+0x358>)
 800a222:	4b92      	ldr	r3, [pc, #584]	; (800a46c <_dtoa_r+0x35c>)
 800a224:	f7f7 f85c 	bl	80012e0 <__aeabi_dmul>
 800a228:	0002      	movs	r2, r0
 800a22a:	000b      	movs	r3, r1
 800a22c:	0020      	movs	r0, r4
 800a22e:	0029      	movs	r1, r5
 800a230:	f7f6 f930 	bl	8000494 <__aeabi_dadd>
 800a234:	0004      	movs	r4, r0
 800a236:	000d      	movs	r5, r1
 800a238:	f7f7 fe28 	bl	8001e8c <__aeabi_d2iz>
 800a23c:	2200      	movs	r2, #0
 800a23e:	0007      	movs	r7, r0
 800a240:	2300      	movs	r3, #0
 800a242:	0020      	movs	r0, r4
 800a244:	0029      	movs	r1, r5
 800a246:	f7f6 f8fd 	bl	8000444 <__aeabi_dcmplt>
 800a24a:	2800      	cmp	r0, #0
 800a24c:	d009      	beq.n	800a262 <_dtoa_r+0x152>
 800a24e:	0038      	movs	r0, r7
 800a250:	f7f7 fe52 	bl	8001ef8 <__aeabi_i2d>
 800a254:	002b      	movs	r3, r5
 800a256:	0022      	movs	r2, r4
 800a258:	f7f6 f8ee 	bl	8000438 <__aeabi_dcmpeq>
 800a25c:	4243      	negs	r3, r0
 800a25e:	4158      	adcs	r0, r3
 800a260:	1a3f      	subs	r7, r7, r0
 800a262:	2301      	movs	r3, #1
 800a264:	9314      	str	r3, [sp, #80]	; 0x50
 800a266:	2f16      	cmp	r7, #22
 800a268:	d80d      	bhi.n	800a286 <_dtoa_r+0x176>
 800a26a:	4981      	ldr	r1, [pc, #516]	; (800a470 <_dtoa_r+0x360>)
 800a26c:	00fb      	lsls	r3, r7, #3
 800a26e:	18c9      	adds	r1, r1, r3
 800a270:	6808      	ldr	r0, [r1, #0]
 800a272:	6849      	ldr	r1, [r1, #4]
 800a274:	9a06      	ldr	r2, [sp, #24]
 800a276:	9b07      	ldr	r3, [sp, #28]
 800a278:	f7f6 f8f8 	bl	800046c <__aeabi_dcmpgt>
 800a27c:	2800      	cmp	r0, #0
 800a27e:	d046      	beq.n	800a30e <_dtoa_r+0x1fe>
 800a280:	2300      	movs	r3, #0
 800a282:	3f01      	subs	r7, #1
 800a284:	9314      	str	r3, [sp, #80]	; 0x50
 800a286:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a288:	1b9e      	subs	r6, r3, r6
 800a28a:	2300      	movs	r3, #0
 800a28c:	930a      	str	r3, [sp, #40]	; 0x28
 800a28e:	0033      	movs	r3, r6
 800a290:	3b01      	subs	r3, #1
 800a292:	930b      	str	r3, [sp, #44]	; 0x2c
 800a294:	d504      	bpl.n	800a2a0 <_dtoa_r+0x190>
 800a296:	2301      	movs	r3, #1
 800a298:	1b9b      	subs	r3, r3, r6
 800a29a:	930a      	str	r3, [sp, #40]	; 0x28
 800a29c:	2300      	movs	r3, #0
 800a29e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2a0:	2f00      	cmp	r7, #0
 800a2a2:	db36      	blt.n	800a312 <_dtoa_r+0x202>
 800a2a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2a6:	9711      	str	r7, [sp, #68]	; 0x44
 800a2a8:	19db      	adds	r3, r3, r7
 800a2aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	9304      	str	r3, [sp, #16]
 800a2b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a2b2:	2401      	movs	r4, #1
 800a2b4:	2b09      	cmp	r3, #9
 800a2b6:	d900      	bls.n	800a2ba <_dtoa_r+0x1aa>
 800a2b8:	e084      	b.n	800a3c4 <_dtoa_r+0x2b4>
 800a2ba:	2b05      	cmp	r3, #5
 800a2bc:	dd02      	ble.n	800a2c4 <_dtoa_r+0x1b4>
 800a2be:	2400      	movs	r4, #0
 800a2c0:	3b04      	subs	r3, #4
 800a2c2:	9320      	str	r3, [sp, #128]	; 0x80
 800a2c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a2c6:	1e98      	subs	r0, r3, #2
 800a2c8:	2803      	cmp	r0, #3
 800a2ca:	d900      	bls.n	800a2ce <_dtoa_r+0x1be>
 800a2cc:	e084      	b.n	800a3d8 <_dtoa_r+0x2c8>
 800a2ce:	f7f5 ff23 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a2d2:	7775      	.short	0x7775
 800a2d4:	6a28      	.short	0x6a28
 800a2d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a2d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a2da:	189e      	adds	r6, r3, r2
 800a2dc:	4b65      	ldr	r3, [pc, #404]	; (800a474 <_dtoa_r+0x364>)
 800a2de:	18f2      	adds	r2, r6, r3
 800a2e0:	2a20      	cmp	r2, #32
 800a2e2:	dd0f      	ble.n	800a304 <_dtoa_r+0x1f4>
 800a2e4:	2340      	movs	r3, #64	; 0x40
 800a2e6:	1a9b      	subs	r3, r3, r2
 800a2e8:	409c      	lsls	r4, r3
 800a2ea:	4b63      	ldr	r3, [pc, #396]	; (800a478 <_dtoa_r+0x368>)
 800a2ec:	9806      	ldr	r0, [sp, #24]
 800a2ee:	18f3      	adds	r3, r6, r3
 800a2f0:	40d8      	lsrs	r0, r3
 800a2f2:	4320      	orrs	r0, r4
 800a2f4:	f7f7 fe3a 	bl	8001f6c <__aeabi_ui2d>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	4c60      	ldr	r4, [pc, #384]	; (800a47c <_dtoa_r+0x36c>)
 800a2fc:	3e01      	subs	r6, #1
 800a2fe:	1909      	adds	r1, r1, r4
 800a300:	9316      	str	r3, [sp, #88]	; 0x58
 800a302:	e77c      	b.n	800a1fe <_dtoa_r+0xee>
 800a304:	2320      	movs	r3, #32
 800a306:	9806      	ldr	r0, [sp, #24]
 800a308:	1a9b      	subs	r3, r3, r2
 800a30a:	4098      	lsls	r0, r3
 800a30c:	e7f2      	b.n	800a2f4 <_dtoa_r+0x1e4>
 800a30e:	9014      	str	r0, [sp, #80]	; 0x50
 800a310:	e7b9      	b.n	800a286 <_dtoa_r+0x176>
 800a312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a314:	1bdb      	subs	r3, r3, r7
 800a316:	930a      	str	r3, [sp, #40]	; 0x28
 800a318:	427b      	negs	r3, r7
 800a31a:	9304      	str	r3, [sp, #16]
 800a31c:	2300      	movs	r3, #0
 800a31e:	9311      	str	r3, [sp, #68]	; 0x44
 800a320:	e7c6      	b.n	800a2b0 <_dtoa_r+0x1a0>
 800a322:	2301      	movs	r3, #1
 800a324:	930d      	str	r3, [sp, #52]	; 0x34
 800a326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a328:	2b00      	cmp	r3, #0
 800a32a:	dd59      	ble.n	800a3e0 <_dtoa_r+0x2d0>
 800a32c:	930c      	str	r3, [sp, #48]	; 0x30
 800a32e:	9309      	str	r3, [sp, #36]	; 0x24
 800a330:	9a02      	ldr	r2, [sp, #8]
 800a332:	6a55      	ldr	r5, [r2, #36]	; 0x24
 800a334:	2200      	movs	r2, #0
 800a336:	606a      	str	r2, [r5, #4]
 800a338:	3204      	adds	r2, #4
 800a33a:	0010      	movs	r0, r2
 800a33c:	3014      	adds	r0, #20
 800a33e:	6869      	ldr	r1, [r5, #4]
 800a340:	4298      	cmp	r0, r3
 800a342:	d952      	bls.n	800a3ea <_dtoa_r+0x2da>
 800a344:	9802      	ldr	r0, [sp, #8]
 800a346:	f000 fe1c 	bl	800af82 <_Balloc>
 800a34a:	9b02      	ldr	r3, [sp, #8]
 800a34c:	6028      	str	r0, [r5, #0]
 800a34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	9308      	str	r3, [sp, #32]
 800a354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a356:	2b0e      	cmp	r3, #14
 800a358:	d900      	bls.n	800a35c <_dtoa_r+0x24c>
 800a35a:	e10a      	b.n	800a572 <_dtoa_r+0x462>
 800a35c:	2c00      	cmp	r4, #0
 800a35e:	d100      	bne.n	800a362 <_dtoa_r+0x252>
 800a360:	e107      	b.n	800a572 <_dtoa_r+0x462>
 800a362:	9b06      	ldr	r3, [sp, #24]
 800a364:	9c07      	ldr	r4, [sp, #28]
 800a366:	9312      	str	r3, [sp, #72]	; 0x48
 800a368:	9413      	str	r4, [sp, #76]	; 0x4c
 800a36a:	2f00      	cmp	r7, #0
 800a36c:	dc00      	bgt.n	800a370 <_dtoa_r+0x260>
 800a36e:	e089      	b.n	800a484 <_dtoa_r+0x374>
 800a370:	210f      	movs	r1, #15
 800a372:	003a      	movs	r2, r7
 800a374:	4b3e      	ldr	r3, [pc, #248]	; (800a470 <_dtoa_r+0x360>)
 800a376:	400a      	ands	r2, r1
 800a378:	00d2      	lsls	r2, r2, #3
 800a37a:	189b      	adds	r3, r3, r2
 800a37c:	681d      	ldr	r5, [r3, #0]
 800a37e:	685e      	ldr	r6, [r3, #4]
 800a380:	2302      	movs	r3, #2
 800a382:	113c      	asrs	r4, r7, #4
 800a384:	930e      	str	r3, [sp, #56]	; 0x38
 800a386:	06e3      	lsls	r3, r4, #27
 800a388:	d50b      	bpl.n	800a3a2 <_dtoa_r+0x292>
 800a38a:	4b3d      	ldr	r3, [pc, #244]	; (800a480 <_dtoa_r+0x370>)
 800a38c:	400c      	ands	r4, r1
 800a38e:	6a1a      	ldr	r2, [r3, #32]
 800a390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a392:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a394:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a396:	f7f6 fb99 	bl	8000acc <__aeabi_ddiv>
 800a39a:	2303      	movs	r3, #3
 800a39c:	9006      	str	r0, [sp, #24]
 800a39e:	9107      	str	r1, [sp, #28]
 800a3a0:	930e      	str	r3, [sp, #56]	; 0x38
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	e03a      	b.n	800a41c <_dtoa_r+0x30c>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	930d      	str	r3, [sp, #52]	; 0x34
 800a3aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3ac:	18fb      	adds	r3, r7, r3
 800a3ae:	930c      	str	r3, [sp, #48]	; 0x30
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	dcbb      	bgt.n	800a330 <_dtoa_r+0x220>
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e7b9      	b.n	800a330 <_dtoa_r+0x220>
 800a3bc:	2300      	movs	r3, #0
 800a3be:	e7b1      	b.n	800a324 <_dtoa_r+0x214>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	e7f1      	b.n	800a3a8 <_dtoa_r+0x298>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	940d      	str	r4, [sp, #52]	; 0x34
 800a3c8:	9320      	str	r3, [sp, #128]	; 0x80
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	930c      	str	r3, [sp, #48]	; 0x30
 800a3d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a3d2:	3313      	adds	r3, #19
 800a3d4:	9221      	str	r2, [sp, #132]	; 0x84
 800a3d6:	e7ab      	b.n	800a330 <_dtoa_r+0x220>
 800a3d8:	2301      	movs	r3, #1
 800a3da:	930d      	str	r3, [sp, #52]	; 0x34
 800a3dc:	3b02      	subs	r3, #2
 800a3de:	e7f5      	b.n	800a3cc <_dtoa_r+0x2bc>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	930c      	str	r3, [sp, #48]	; 0x30
 800a3e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a3e6:	001a      	movs	r2, r3
 800a3e8:	e7f4      	b.n	800a3d4 <_dtoa_r+0x2c4>
 800a3ea:	3101      	adds	r1, #1
 800a3ec:	6069      	str	r1, [r5, #4]
 800a3ee:	0052      	lsls	r2, r2, #1
 800a3f0:	e7a3      	b.n	800a33a <_dtoa_r+0x22a>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	421c      	tst	r4, r3
 800a3f6:	d00e      	beq.n	800a416 <_dtoa_r+0x306>
 800a3f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3fa:	4a21      	ldr	r2, [pc, #132]	; (800a480 <_dtoa_r+0x370>)
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	930e      	str	r3, [sp, #56]	; 0x38
 800a400:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a402:	0028      	movs	r0, r5
 800a404:	00db      	lsls	r3, r3, #3
 800a406:	189b      	adds	r3, r3, r2
 800a408:	0031      	movs	r1, r6
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	f7f6 ff67 	bl	80012e0 <__aeabi_dmul>
 800a412:	0005      	movs	r5, r0
 800a414:	000e      	movs	r6, r1
 800a416:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a418:	1064      	asrs	r4, r4, #1
 800a41a:	3301      	adds	r3, #1
 800a41c:	9310      	str	r3, [sp, #64]	; 0x40
 800a41e:	2c00      	cmp	r4, #0
 800a420:	d1e7      	bne.n	800a3f2 <_dtoa_r+0x2e2>
 800a422:	9806      	ldr	r0, [sp, #24]
 800a424:	9907      	ldr	r1, [sp, #28]
 800a426:	002a      	movs	r2, r5
 800a428:	0033      	movs	r3, r6
 800a42a:	f7f6 fb4f 	bl	8000acc <__aeabi_ddiv>
 800a42e:	9006      	str	r0, [sp, #24]
 800a430:	9107      	str	r1, [sp, #28]
 800a432:	e042      	b.n	800a4ba <_dtoa_r+0x3aa>
 800a434:	7ff00000 	.word	0x7ff00000
 800a438:	0000270f 	.word	0x0000270f
 800a43c:	0800bbc1 	.word	0x0800bbc1
 800a440:	0800bbc4 	.word	0x0800bbc4
 800a444:	0800bb94 	.word	0x0800bb94
 800a448:	0800bb95 	.word	0x0800bb95
 800a44c:	3ff00000 	.word	0x3ff00000
 800a450:	fffffc01 	.word	0xfffffc01
 800a454:	3ff80000 	.word	0x3ff80000
 800a458:	636f4361 	.word	0x636f4361
 800a45c:	3fd287a7 	.word	0x3fd287a7
 800a460:	8b60c8b3 	.word	0x8b60c8b3
 800a464:	3fc68a28 	.word	0x3fc68a28
 800a468:	509f79fb 	.word	0x509f79fb
 800a46c:	3fd34413 	.word	0x3fd34413
 800a470:	0800bbf0 	.word	0x0800bbf0
 800a474:	00000432 	.word	0x00000432
 800a478:	00000412 	.word	0x00000412
 800a47c:	fe100000 	.word	0xfe100000
 800a480:	0800bbc8 	.word	0x0800bbc8
 800a484:	2302      	movs	r3, #2
 800a486:	930e      	str	r3, [sp, #56]	; 0x38
 800a488:	2f00      	cmp	r7, #0
 800a48a:	d016      	beq.n	800a4ba <_dtoa_r+0x3aa>
 800a48c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a48e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a490:	427c      	negs	r4, r7
 800a492:	330d      	adds	r3, #13
 800a494:	4023      	ands	r3, r4
 800a496:	4ace      	ldr	r2, [pc, #824]	; (800a7d0 <_dtoa_r+0x6c0>)
 800a498:	00db      	lsls	r3, r3, #3
 800a49a:	18d3      	adds	r3, r2, r3
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	f7f6 ff1e 	bl	80012e0 <__aeabi_dmul>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	2601      	movs	r6, #1
 800a4a8:	001d      	movs	r5, r3
 800a4aa:	9006      	str	r0, [sp, #24]
 800a4ac:	9107      	str	r1, [sp, #28]
 800a4ae:	1124      	asrs	r4, r4, #4
 800a4b0:	2c00      	cmp	r4, #0
 800a4b2:	d000      	beq.n	800a4b6 <_dtoa_r+0x3a6>
 800a4b4:	e08c      	b.n	800a5d0 <_dtoa_r+0x4c0>
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1b9      	bne.n	800a42e <_dtoa_r+0x31e>
 800a4ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d100      	bne.n	800a4c2 <_dtoa_r+0x3b2>
 800a4c0:	e096      	b.n	800a5f0 <_dtoa_r+0x4e0>
 800a4c2:	9c06      	ldr	r4, [sp, #24]
 800a4c4:	9d07      	ldr	r5, [sp, #28]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	4bc2      	ldr	r3, [pc, #776]	; (800a7d4 <_dtoa_r+0x6c4>)
 800a4ca:	0020      	movs	r0, r4
 800a4cc:	0029      	movs	r1, r5
 800a4ce:	f7f5 ffb9 	bl	8000444 <__aeabi_dcmplt>
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d100      	bne.n	800a4d8 <_dtoa_r+0x3c8>
 800a4d6:	e08b      	b.n	800a5f0 <_dtoa_r+0x4e0>
 800a4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d100      	bne.n	800a4e0 <_dtoa_r+0x3d0>
 800a4de:	e087      	b.n	800a5f0 <_dtoa_r+0x4e0>
 800a4e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	dd41      	ble.n	800a56a <_dtoa_r+0x45a>
 800a4e6:	4bbc      	ldr	r3, [pc, #752]	; (800a7d8 <_dtoa_r+0x6c8>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	0020      	movs	r0, r4
 800a4ec:	0029      	movs	r1, r5
 800a4ee:	f7f6 fef7 	bl	80012e0 <__aeabi_dmul>
 800a4f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4f4:	9006      	str	r0, [sp, #24]
 800a4f6:	9107      	str	r1, [sp, #28]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	930e      	str	r3, [sp, #56]	; 0x38
 800a4fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4fe:	1e7e      	subs	r6, r7, #1
 800a500:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a502:	9310      	str	r3, [sp, #64]	; 0x40
 800a504:	f7f7 fcf8 	bl	8001ef8 <__aeabi_i2d>
 800a508:	9a06      	ldr	r2, [sp, #24]
 800a50a:	9b07      	ldr	r3, [sp, #28]
 800a50c:	f7f6 fee8 	bl	80012e0 <__aeabi_dmul>
 800a510:	2200      	movs	r2, #0
 800a512:	4bb2      	ldr	r3, [pc, #712]	; (800a7dc <_dtoa_r+0x6cc>)
 800a514:	f7f5 ffbe 	bl	8000494 <__aeabi_dadd>
 800a518:	4ab1      	ldr	r2, [pc, #708]	; (800a7e0 <_dtoa_r+0x6d0>)
 800a51a:	900e      	str	r0, [sp, #56]	; 0x38
 800a51c:	910f      	str	r1, [sp, #60]	; 0x3c
 800a51e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800a520:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a522:	4694      	mov	ip, r2
 800a524:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a526:	4463      	add	r3, ip
 800a528:	9315      	str	r3, [sp, #84]	; 0x54
 800a52a:	001d      	movs	r5, r3
 800a52c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d161      	bne.n	800a5f6 <_dtoa_r+0x4e6>
 800a532:	9806      	ldr	r0, [sp, #24]
 800a534:	9907      	ldr	r1, [sp, #28]
 800a536:	2200      	movs	r2, #0
 800a538:	4baa      	ldr	r3, [pc, #680]	; (800a7e4 <_dtoa_r+0x6d4>)
 800a53a:	f7f7 f943 	bl	80017c4 <__aeabi_dsub>
 800a53e:	0022      	movs	r2, r4
 800a540:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a542:	9006      	str	r0, [sp, #24]
 800a544:	9107      	str	r1, [sp, #28]
 800a546:	f7f5 ff91 	bl	800046c <__aeabi_dcmpgt>
 800a54a:	2800      	cmp	r0, #0
 800a54c:	d000      	beq.n	800a550 <_dtoa_r+0x440>
 800a54e:	e2a8      	b.n	800aaa2 <_dtoa_r+0x992>
 800a550:	48a5      	ldr	r0, [pc, #660]	; (800a7e8 <_dtoa_r+0x6d8>)
 800a552:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a554:	4684      	mov	ip, r0
 800a556:	4461      	add	r1, ip
 800a558:	000b      	movs	r3, r1
 800a55a:	9806      	ldr	r0, [sp, #24]
 800a55c:	9907      	ldr	r1, [sp, #28]
 800a55e:	0022      	movs	r2, r4
 800a560:	f7f5 ff70 	bl	8000444 <__aeabi_dcmplt>
 800a564:	2800      	cmp	r0, #0
 800a566:	d000      	beq.n	800a56a <_dtoa_r+0x45a>
 800a568:	e295      	b.n	800aa96 <_dtoa_r+0x986>
 800a56a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a56c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a56e:	9306      	str	r3, [sp, #24]
 800a570:	9407      	str	r4, [sp, #28]
 800a572:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a574:	2b00      	cmp	r3, #0
 800a576:	da00      	bge.n	800a57a <_dtoa_r+0x46a>
 800a578:	e15c      	b.n	800a834 <_dtoa_r+0x724>
 800a57a:	2f0e      	cmp	r7, #14
 800a57c:	dd00      	ble.n	800a580 <_dtoa_r+0x470>
 800a57e:	e159      	b.n	800a834 <_dtoa_r+0x724>
 800a580:	4b93      	ldr	r3, [pc, #588]	; (800a7d0 <_dtoa_r+0x6c0>)
 800a582:	00fa      	lsls	r2, r7, #3
 800a584:	189b      	adds	r3, r3, r2
 800a586:	685c      	ldr	r4, [r3, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	9304      	str	r3, [sp, #16]
 800a58c:	9405      	str	r4, [sp, #20]
 800a58e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a590:	2b00      	cmp	r3, #0
 800a592:	db00      	blt.n	800a596 <_dtoa_r+0x486>
 800a594:	e0d8      	b.n	800a748 <_dtoa_r+0x638>
 800a596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a598:	2b00      	cmp	r3, #0
 800a59a:	dd00      	ble.n	800a59e <_dtoa_r+0x48e>
 800a59c:	e0d4      	b.n	800a748 <_dtoa_r+0x638>
 800a59e:	d000      	beq.n	800a5a2 <_dtoa_r+0x492>
 800a5a0:	e27d      	b.n	800aa9e <_dtoa_r+0x98e>
 800a5a2:	9804      	ldr	r0, [sp, #16]
 800a5a4:	9905      	ldr	r1, [sp, #20]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	4b8e      	ldr	r3, [pc, #568]	; (800a7e4 <_dtoa_r+0x6d4>)
 800a5aa:	f7f6 fe99 	bl	80012e0 <__aeabi_dmul>
 800a5ae:	9a06      	ldr	r2, [sp, #24]
 800a5b0:	9b07      	ldr	r3, [sp, #28]
 800a5b2:	f7f5 ff65 	bl	8000480 <__aeabi_dcmpge>
 800a5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b8:	9304      	str	r3, [sp, #16]
 800a5ba:	001e      	movs	r6, r3
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d000      	beq.n	800a5c2 <_dtoa_r+0x4b2>
 800a5c0:	e24f      	b.n	800aa62 <_dtoa_r+0x952>
 800a5c2:	9b08      	ldr	r3, [sp, #32]
 800a5c4:	9a08      	ldr	r2, [sp, #32]
 800a5c6:	1c5d      	adds	r5, r3, #1
 800a5c8:	2331      	movs	r3, #49	; 0x31
 800a5ca:	3701      	adds	r7, #1
 800a5cc:	7013      	strb	r3, [r2, #0]
 800a5ce:	e24b      	b.n	800aa68 <_dtoa_r+0x958>
 800a5d0:	4234      	tst	r4, r6
 800a5d2:	d00a      	beq.n	800a5ea <_dtoa_r+0x4da>
 800a5d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5d6:	4a85      	ldr	r2, [pc, #532]	; (800a7ec <_dtoa_r+0x6dc>)
 800a5d8:	3301      	adds	r3, #1
 800a5da:	930e      	str	r3, [sp, #56]	; 0x38
 800a5dc:	00eb      	lsls	r3, r5, #3
 800a5de:	189b      	adds	r3, r3, r2
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	f7f6 fe7c 	bl	80012e0 <__aeabi_dmul>
 800a5e8:	0033      	movs	r3, r6
 800a5ea:	1064      	asrs	r4, r4, #1
 800a5ec:	3501      	adds	r5, #1
 800a5ee:	e75f      	b.n	800a4b0 <_dtoa_r+0x3a0>
 800a5f0:	003e      	movs	r6, r7
 800a5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f4:	e784      	b.n	800a500 <_dtoa_r+0x3f0>
 800a5f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a5fa:	1e5a      	subs	r2, r3, #1
 800a5fc:	4b74      	ldr	r3, [pc, #464]	; (800a7d0 <_dtoa_r+0x6c0>)
 800a5fe:	00d2      	lsls	r2, r2, #3
 800a600:	189b      	adds	r3, r3, r2
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	2900      	cmp	r1, #0
 800a608:	d049      	beq.n	800a69e <_dtoa_r+0x58e>
 800a60a:	2000      	movs	r0, #0
 800a60c:	4978      	ldr	r1, [pc, #480]	; (800a7f0 <_dtoa_r+0x6e0>)
 800a60e:	f7f6 fa5d 	bl	8000acc <__aeabi_ddiv>
 800a612:	002b      	movs	r3, r5
 800a614:	0022      	movs	r2, r4
 800a616:	f7f7 f8d5 	bl	80017c4 <__aeabi_dsub>
 800a61a:	9b08      	ldr	r3, [sp, #32]
 800a61c:	900e      	str	r0, [sp, #56]	; 0x38
 800a61e:	910f      	str	r1, [sp, #60]	; 0x3c
 800a620:	9315      	str	r3, [sp, #84]	; 0x54
 800a622:	9806      	ldr	r0, [sp, #24]
 800a624:	9907      	ldr	r1, [sp, #28]
 800a626:	f7f7 fc31 	bl	8001e8c <__aeabi_d2iz>
 800a62a:	0004      	movs	r4, r0
 800a62c:	f7f7 fc64 	bl	8001ef8 <__aeabi_i2d>
 800a630:	0002      	movs	r2, r0
 800a632:	000b      	movs	r3, r1
 800a634:	9806      	ldr	r0, [sp, #24]
 800a636:	9907      	ldr	r1, [sp, #28]
 800a638:	f7f7 f8c4 	bl	80017c4 <__aeabi_dsub>
 800a63c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a63e:	3430      	adds	r4, #48	; 0x30
 800a640:	1c5d      	adds	r5, r3, #1
 800a642:	701c      	strb	r4, [r3, #0]
 800a644:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a648:	9006      	str	r0, [sp, #24]
 800a64a:	9107      	str	r1, [sp, #28]
 800a64c:	f7f5 fefa 	bl	8000444 <__aeabi_dcmplt>
 800a650:	2800      	cmp	r0, #0
 800a652:	d16c      	bne.n	800a72e <_dtoa_r+0x61e>
 800a654:	9a06      	ldr	r2, [sp, #24]
 800a656:	9b07      	ldr	r3, [sp, #28]
 800a658:	2000      	movs	r0, #0
 800a65a:	495e      	ldr	r1, [pc, #376]	; (800a7d4 <_dtoa_r+0x6c4>)
 800a65c:	f7f7 f8b2 	bl	80017c4 <__aeabi_dsub>
 800a660:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a662:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a664:	f7f5 feee 	bl	8000444 <__aeabi_dcmplt>
 800a668:	2800      	cmp	r0, #0
 800a66a:	d000      	beq.n	800a66e <_dtoa_r+0x55e>
 800a66c:	e0c3      	b.n	800a7f6 <_dtoa_r+0x6e6>
 800a66e:	9b08      	ldr	r3, [sp, #32]
 800a670:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a672:	1aeb      	subs	r3, r5, r3
 800a674:	429a      	cmp	r2, r3
 800a676:	dc00      	bgt.n	800a67a <_dtoa_r+0x56a>
 800a678:	e777      	b.n	800a56a <_dtoa_r+0x45a>
 800a67a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a67c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a67e:	2200      	movs	r2, #0
 800a680:	4b55      	ldr	r3, [pc, #340]	; (800a7d8 <_dtoa_r+0x6c8>)
 800a682:	f7f6 fe2d 	bl	80012e0 <__aeabi_dmul>
 800a686:	2200      	movs	r2, #0
 800a688:	900e      	str	r0, [sp, #56]	; 0x38
 800a68a:	910f      	str	r1, [sp, #60]	; 0x3c
 800a68c:	9806      	ldr	r0, [sp, #24]
 800a68e:	9907      	ldr	r1, [sp, #28]
 800a690:	4b51      	ldr	r3, [pc, #324]	; (800a7d8 <_dtoa_r+0x6c8>)
 800a692:	f7f6 fe25 	bl	80012e0 <__aeabi_dmul>
 800a696:	9515      	str	r5, [sp, #84]	; 0x54
 800a698:	9006      	str	r0, [sp, #24]
 800a69a:	9107      	str	r1, [sp, #28]
 800a69c:	e7c1      	b.n	800a622 <_dtoa_r+0x512>
 800a69e:	0020      	movs	r0, r4
 800a6a0:	0029      	movs	r1, r5
 800a6a2:	f7f6 fe1d 	bl	80012e0 <__aeabi_dmul>
 800a6a6:	9c08      	ldr	r4, [sp, #32]
 800a6a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a6aa:	0023      	movs	r3, r4
 800a6ac:	4694      	mov	ip, r2
 800a6ae:	900e      	str	r0, [sp, #56]	; 0x38
 800a6b0:	910f      	str	r1, [sp, #60]	; 0x3c
 800a6b2:	4463      	add	r3, ip
 800a6b4:	9315      	str	r3, [sp, #84]	; 0x54
 800a6b6:	9806      	ldr	r0, [sp, #24]
 800a6b8:	9907      	ldr	r1, [sp, #28]
 800a6ba:	f7f7 fbe7 	bl	8001e8c <__aeabi_d2iz>
 800a6be:	0005      	movs	r5, r0
 800a6c0:	f7f7 fc1a 	bl	8001ef8 <__aeabi_i2d>
 800a6c4:	000b      	movs	r3, r1
 800a6c6:	0002      	movs	r2, r0
 800a6c8:	9806      	ldr	r0, [sp, #24]
 800a6ca:	9907      	ldr	r1, [sp, #28]
 800a6cc:	f7f7 f87a 	bl	80017c4 <__aeabi_dsub>
 800a6d0:	3530      	adds	r5, #48	; 0x30
 800a6d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6d4:	7025      	strb	r5, [r4, #0]
 800a6d6:	3401      	adds	r4, #1
 800a6d8:	9006      	str	r0, [sp, #24]
 800a6da:	9107      	str	r1, [sp, #28]
 800a6dc:	42a3      	cmp	r3, r4
 800a6de:	d12a      	bne.n	800a736 <_dtoa_r+0x626>
 800a6e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a6e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a6e4:	9a08      	ldr	r2, [sp, #32]
 800a6e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6e8:	4694      	mov	ip, r2
 800a6ea:	4463      	add	r3, ip
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	001d      	movs	r5, r3
 800a6f0:	4b3f      	ldr	r3, [pc, #252]	; (800a7f0 <_dtoa_r+0x6e0>)
 800a6f2:	f7f5 fecf 	bl	8000494 <__aeabi_dadd>
 800a6f6:	0002      	movs	r2, r0
 800a6f8:	000b      	movs	r3, r1
 800a6fa:	9806      	ldr	r0, [sp, #24]
 800a6fc:	9907      	ldr	r1, [sp, #28]
 800a6fe:	f7f5 feb5 	bl	800046c <__aeabi_dcmpgt>
 800a702:	2800      	cmp	r0, #0
 800a704:	d000      	beq.n	800a708 <_dtoa_r+0x5f8>
 800a706:	e076      	b.n	800a7f6 <_dtoa_r+0x6e6>
 800a708:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a70a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a70c:	2000      	movs	r0, #0
 800a70e:	4938      	ldr	r1, [pc, #224]	; (800a7f0 <_dtoa_r+0x6e0>)
 800a710:	f7f7 f858 	bl	80017c4 <__aeabi_dsub>
 800a714:	0002      	movs	r2, r0
 800a716:	000b      	movs	r3, r1
 800a718:	9806      	ldr	r0, [sp, #24]
 800a71a:	9907      	ldr	r1, [sp, #28]
 800a71c:	f7f5 fe92 	bl	8000444 <__aeabi_dcmplt>
 800a720:	2800      	cmp	r0, #0
 800a722:	d100      	bne.n	800a726 <_dtoa_r+0x616>
 800a724:	e721      	b.n	800a56a <_dtoa_r+0x45a>
 800a726:	1e6b      	subs	r3, r5, #1
 800a728:	781a      	ldrb	r2, [r3, #0]
 800a72a:	2a30      	cmp	r2, #48	; 0x30
 800a72c:	d001      	beq.n	800a732 <_dtoa_r+0x622>
 800a72e:	0037      	movs	r7, r6
 800a730:	e03f      	b.n	800a7b2 <_dtoa_r+0x6a2>
 800a732:	001d      	movs	r5, r3
 800a734:	e7f7      	b.n	800a726 <_dtoa_r+0x616>
 800a736:	9806      	ldr	r0, [sp, #24]
 800a738:	9907      	ldr	r1, [sp, #28]
 800a73a:	2200      	movs	r2, #0
 800a73c:	4b26      	ldr	r3, [pc, #152]	; (800a7d8 <_dtoa_r+0x6c8>)
 800a73e:	f7f6 fdcf 	bl	80012e0 <__aeabi_dmul>
 800a742:	9006      	str	r0, [sp, #24]
 800a744:	9107      	str	r1, [sp, #28]
 800a746:	e7b6      	b.n	800a6b6 <_dtoa_r+0x5a6>
 800a748:	9e08      	ldr	r6, [sp, #32]
 800a74a:	9a04      	ldr	r2, [sp, #16]
 800a74c:	9b05      	ldr	r3, [sp, #20]
 800a74e:	9806      	ldr	r0, [sp, #24]
 800a750:	9907      	ldr	r1, [sp, #28]
 800a752:	f7f6 f9bb 	bl	8000acc <__aeabi_ddiv>
 800a756:	f7f7 fb99 	bl	8001e8c <__aeabi_d2iz>
 800a75a:	0004      	movs	r4, r0
 800a75c:	f7f7 fbcc 	bl	8001ef8 <__aeabi_i2d>
 800a760:	9a04      	ldr	r2, [sp, #16]
 800a762:	9b05      	ldr	r3, [sp, #20]
 800a764:	f7f6 fdbc 	bl	80012e0 <__aeabi_dmul>
 800a768:	0002      	movs	r2, r0
 800a76a:	000b      	movs	r3, r1
 800a76c:	9806      	ldr	r0, [sp, #24]
 800a76e:	9907      	ldr	r1, [sp, #28]
 800a770:	f7f7 f828 	bl	80017c4 <__aeabi_dsub>
 800a774:	0023      	movs	r3, r4
 800a776:	3330      	adds	r3, #48	; 0x30
 800a778:	7033      	strb	r3, [r6, #0]
 800a77a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a77c:	9b08      	ldr	r3, [sp, #32]
 800a77e:	1c75      	adds	r5, r6, #1
 800a780:	1aeb      	subs	r3, r5, r3
 800a782:	429a      	cmp	r2, r3
 800a784:	d148      	bne.n	800a818 <_dtoa_r+0x708>
 800a786:	0002      	movs	r2, r0
 800a788:	000b      	movs	r3, r1
 800a78a:	f7f5 fe83 	bl	8000494 <__aeabi_dadd>
 800a78e:	9a04      	ldr	r2, [sp, #16]
 800a790:	9b05      	ldr	r3, [sp, #20]
 800a792:	9006      	str	r0, [sp, #24]
 800a794:	9107      	str	r1, [sp, #28]
 800a796:	f7f5 fe69 	bl	800046c <__aeabi_dcmpgt>
 800a79a:	2800      	cmp	r0, #0
 800a79c:	d12a      	bne.n	800a7f4 <_dtoa_r+0x6e4>
 800a79e:	9a04      	ldr	r2, [sp, #16]
 800a7a0:	9b05      	ldr	r3, [sp, #20]
 800a7a2:	9806      	ldr	r0, [sp, #24]
 800a7a4:	9907      	ldr	r1, [sp, #28]
 800a7a6:	f7f5 fe47 	bl	8000438 <__aeabi_dcmpeq>
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	d001      	beq.n	800a7b2 <_dtoa_r+0x6a2>
 800a7ae:	07e3      	lsls	r3, r4, #31
 800a7b0:	d420      	bmi.n	800a7f4 <_dtoa_r+0x6e4>
 800a7b2:	9903      	ldr	r1, [sp, #12]
 800a7b4:	9802      	ldr	r0, [sp, #8]
 800a7b6:	f000 fc1c 	bl	800aff2 <_Bfree>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	702b      	strb	r3, [r5, #0]
 800a7be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7c0:	3701      	adds	r7, #1
 800a7c2:	601f      	str	r7, [r3, #0]
 800a7c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d100      	bne.n	800a7cc <_dtoa_r+0x6bc>
 800a7ca:	e4e6      	b.n	800a19a <_dtoa_r+0x8a>
 800a7cc:	601d      	str	r5, [r3, #0]
 800a7ce:	e4e4      	b.n	800a19a <_dtoa_r+0x8a>
 800a7d0:	0800bbf0 	.word	0x0800bbf0
 800a7d4:	3ff00000 	.word	0x3ff00000
 800a7d8:	40240000 	.word	0x40240000
 800a7dc:	401c0000 	.word	0x401c0000
 800a7e0:	fcc00000 	.word	0xfcc00000
 800a7e4:	40140000 	.word	0x40140000
 800a7e8:	7cc00000 	.word	0x7cc00000
 800a7ec:	0800bbc8 	.word	0x0800bbc8
 800a7f0:	3fe00000 	.word	0x3fe00000
 800a7f4:	003e      	movs	r6, r7
 800a7f6:	1e6b      	subs	r3, r5, #1
 800a7f8:	781a      	ldrb	r2, [r3, #0]
 800a7fa:	2a39      	cmp	r2, #57	; 0x39
 800a7fc:	d106      	bne.n	800a80c <_dtoa_r+0x6fc>
 800a7fe:	9a08      	ldr	r2, [sp, #32]
 800a800:	429a      	cmp	r2, r3
 800a802:	d107      	bne.n	800a814 <_dtoa_r+0x704>
 800a804:	2330      	movs	r3, #48	; 0x30
 800a806:	7013      	strb	r3, [r2, #0]
 800a808:	0013      	movs	r3, r2
 800a80a:	3601      	adds	r6, #1
 800a80c:	781a      	ldrb	r2, [r3, #0]
 800a80e:	3201      	adds	r2, #1
 800a810:	701a      	strb	r2, [r3, #0]
 800a812:	e78c      	b.n	800a72e <_dtoa_r+0x61e>
 800a814:	001d      	movs	r5, r3
 800a816:	e7ee      	b.n	800a7f6 <_dtoa_r+0x6e6>
 800a818:	2200      	movs	r2, #0
 800a81a:	4ba4      	ldr	r3, [pc, #656]	; (800aaac <_dtoa_r+0x99c>)
 800a81c:	f7f6 fd60 	bl	80012e0 <__aeabi_dmul>
 800a820:	2200      	movs	r2, #0
 800a822:	2300      	movs	r3, #0
 800a824:	9006      	str	r0, [sp, #24]
 800a826:	9107      	str	r1, [sp, #28]
 800a828:	002e      	movs	r6, r5
 800a82a:	f7f5 fe05 	bl	8000438 <__aeabi_dcmpeq>
 800a82e:	2800      	cmp	r0, #0
 800a830:	d08b      	beq.n	800a74a <_dtoa_r+0x63a>
 800a832:	e7be      	b.n	800a7b2 <_dtoa_r+0x6a2>
 800a834:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a836:	2a00      	cmp	r2, #0
 800a838:	d100      	bne.n	800a83c <_dtoa_r+0x72c>
 800a83a:	e0da      	b.n	800a9f2 <_dtoa_r+0x8e2>
 800a83c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a83e:	2a01      	cmp	r2, #1
 800a840:	dd00      	ble.n	800a844 <_dtoa_r+0x734>
 800a842:	e0bd      	b.n	800a9c0 <_dtoa_r+0x8b0>
 800a844:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a846:	2a00      	cmp	r2, #0
 800a848:	d100      	bne.n	800a84c <_dtoa_r+0x73c>
 800a84a:	e0b5      	b.n	800a9b8 <_dtoa_r+0x8a8>
 800a84c:	4a98      	ldr	r2, [pc, #608]	; (800aab0 <_dtoa_r+0x9a0>)
 800a84e:	189b      	adds	r3, r3, r2
 800a850:	9d04      	ldr	r5, [sp, #16]
 800a852:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a856:	2101      	movs	r1, #1
 800a858:	18d2      	adds	r2, r2, r3
 800a85a:	920a      	str	r2, [sp, #40]	; 0x28
 800a85c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a85e:	9802      	ldr	r0, [sp, #8]
 800a860:	18d3      	adds	r3, r2, r3
 800a862:	930b      	str	r3, [sp, #44]	; 0x2c
 800a864:	f000 fc65 	bl	800b132 <__i2b>
 800a868:	0006      	movs	r6, r0
 800a86a:	2c00      	cmp	r4, #0
 800a86c:	dd0e      	ble.n	800a88c <_dtoa_r+0x77c>
 800a86e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a870:	2b00      	cmp	r3, #0
 800a872:	dd0b      	ble.n	800a88c <_dtoa_r+0x77c>
 800a874:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a876:	0023      	movs	r3, r4
 800a878:	4294      	cmp	r4, r2
 800a87a:	dd00      	ble.n	800a87e <_dtoa_r+0x76e>
 800a87c:	0013      	movs	r3, r2
 800a87e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a880:	1ae4      	subs	r4, r4, r3
 800a882:	1ad2      	subs	r2, r2, r3
 800a884:	920a      	str	r2, [sp, #40]	; 0x28
 800a886:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a88c:	9b04      	ldr	r3, [sp, #16]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d01f      	beq.n	800a8d2 <_dtoa_r+0x7c2>
 800a892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a894:	2b00      	cmp	r3, #0
 800a896:	d100      	bne.n	800a89a <_dtoa_r+0x78a>
 800a898:	e0af      	b.n	800a9fa <_dtoa_r+0x8ea>
 800a89a:	2d00      	cmp	r5, #0
 800a89c:	d011      	beq.n	800a8c2 <_dtoa_r+0x7b2>
 800a89e:	0031      	movs	r1, r6
 800a8a0:	002a      	movs	r2, r5
 800a8a2:	9802      	ldr	r0, [sp, #8]
 800a8a4:	f000 fcde 	bl	800b264 <__pow5mult>
 800a8a8:	9a03      	ldr	r2, [sp, #12]
 800a8aa:	0001      	movs	r1, r0
 800a8ac:	0006      	movs	r6, r0
 800a8ae:	9802      	ldr	r0, [sp, #8]
 800a8b0:	f000 fc48 	bl	800b144 <__multiply>
 800a8b4:	9903      	ldr	r1, [sp, #12]
 800a8b6:	9010      	str	r0, [sp, #64]	; 0x40
 800a8b8:	9802      	ldr	r0, [sp, #8]
 800a8ba:	f000 fb9a 	bl	800aff2 <_Bfree>
 800a8be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8c0:	9303      	str	r3, [sp, #12]
 800a8c2:	9b04      	ldr	r3, [sp, #16]
 800a8c4:	1b5a      	subs	r2, r3, r5
 800a8c6:	d004      	beq.n	800a8d2 <_dtoa_r+0x7c2>
 800a8c8:	9903      	ldr	r1, [sp, #12]
 800a8ca:	9802      	ldr	r0, [sp, #8]
 800a8cc:	f000 fcca 	bl	800b264 <__pow5mult>
 800a8d0:	9003      	str	r0, [sp, #12]
 800a8d2:	2101      	movs	r1, #1
 800a8d4:	9802      	ldr	r0, [sp, #8]
 800a8d6:	f000 fc2c 	bl	800b132 <__i2b>
 800a8da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8dc:	9004      	str	r0, [sp, #16]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d100      	bne.n	800a8e4 <_dtoa_r+0x7d4>
 800a8e2:	e1e3      	b.n	800acac <_dtoa_r+0xb9c>
 800a8e4:	001a      	movs	r2, r3
 800a8e6:	0001      	movs	r1, r0
 800a8e8:	9802      	ldr	r0, [sp, #8]
 800a8ea:	f000 fcbb 	bl	800b264 <__pow5mult>
 800a8ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a8f0:	9004      	str	r0, [sp, #16]
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	dd00      	ble.n	800a8f8 <_dtoa_r+0x7e8>
 800a8f6:	e082      	b.n	800a9fe <_dtoa_r+0x8ee>
 800a8f8:	2500      	movs	r5, #0
 800a8fa:	9b06      	ldr	r3, [sp, #24]
 800a8fc:	42ab      	cmp	r3, r5
 800a8fe:	d10e      	bne.n	800a91e <_dtoa_r+0x80e>
 800a900:	9b07      	ldr	r3, [sp, #28]
 800a902:	031b      	lsls	r3, r3, #12
 800a904:	42ab      	cmp	r3, r5
 800a906:	d10a      	bne.n	800a91e <_dtoa_r+0x80e>
 800a908:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a90a:	9a07      	ldr	r2, [sp, #28]
 800a90c:	4213      	tst	r3, r2
 800a90e:	d006      	beq.n	800a91e <_dtoa_r+0x80e>
 800a910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a912:	3501      	adds	r5, #1
 800a914:	3301      	adds	r3, #1
 800a916:	930a      	str	r3, [sp, #40]	; 0x28
 800a918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a91a:	3301      	adds	r3, #1
 800a91c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a91e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a920:	2001      	movs	r0, #1
 800a922:	2b00      	cmp	r3, #0
 800a924:	d16c      	bne.n	800aa00 <_dtoa_r+0x8f0>
 800a926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a928:	1818      	adds	r0, r3, r0
 800a92a:	231f      	movs	r3, #31
 800a92c:	4018      	ands	r0, r3
 800a92e:	d07e      	beq.n	800aa2e <_dtoa_r+0x91e>
 800a930:	3301      	adds	r3, #1
 800a932:	1a1b      	subs	r3, r3, r0
 800a934:	2b04      	cmp	r3, #4
 800a936:	dd70      	ble.n	800aa1a <_dtoa_r+0x90a>
 800a938:	231c      	movs	r3, #28
 800a93a:	1a18      	subs	r0, r3, r0
 800a93c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a93e:	1824      	adds	r4, r4, r0
 800a940:	181b      	adds	r3, r3, r0
 800a942:	930a      	str	r3, [sp, #40]	; 0x28
 800a944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a946:	181b      	adds	r3, r3, r0
 800a948:	930b      	str	r3, [sp, #44]	; 0x2c
 800a94a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	dd05      	ble.n	800a95c <_dtoa_r+0x84c>
 800a950:	001a      	movs	r2, r3
 800a952:	9903      	ldr	r1, [sp, #12]
 800a954:	9802      	ldr	r0, [sp, #8]
 800a956:	f000 fcd7 	bl	800b308 <__lshift>
 800a95a:	9003      	str	r0, [sp, #12]
 800a95c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a95e:	2b00      	cmp	r3, #0
 800a960:	dd05      	ble.n	800a96e <_dtoa_r+0x85e>
 800a962:	001a      	movs	r2, r3
 800a964:	9904      	ldr	r1, [sp, #16]
 800a966:	9802      	ldr	r0, [sp, #8]
 800a968:	f000 fcce 	bl	800b308 <__lshift>
 800a96c:	9004      	str	r0, [sp, #16]
 800a96e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a970:	2b00      	cmp	r3, #0
 800a972:	d05e      	beq.n	800aa32 <_dtoa_r+0x922>
 800a974:	9904      	ldr	r1, [sp, #16]
 800a976:	9803      	ldr	r0, [sp, #12]
 800a978:	f000 fd18 	bl	800b3ac <__mcmp>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	da58      	bge.n	800aa32 <_dtoa_r+0x922>
 800a980:	2300      	movs	r3, #0
 800a982:	220a      	movs	r2, #10
 800a984:	9903      	ldr	r1, [sp, #12]
 800a986:	9802      	ldr	r0, [sp, #8]
 800a988:	f000 fb4c 	bl	800b024 <__multadd>
 800a98c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a98e:	3f01      	subs	r7, #1
 800a990:	9003      	str	r0, [sp, #12]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d100      	bne.n	800a998 <_dtoa_r+0x888>
 800a996:	e190      	b.n	800acba <_dtoa_r+0xbaa>
 800a998:	2300      	movs	r3, #0
 800a99a:	0031      	movs	r1, r6
 800a99c:	220a      	movs	r2, #10
 800a99e:	9802      	ldr	r0, [sp, #8]
 800a9a0:	f000 fb40 	bl	800b024 <__multadd>
 800a9a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9a6:	0006      	movs	r6, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	dd00      	ble.n	800a9ae <_dtoa_r+0x89e>
 800a9ac:	e088      	b.n	800aac0 <_dtoa_r+0x9b0>
 800a9ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	dc00      	bgt.n	800a9b6 <_dtoa_r+0x8a6>
 800a9b4:	e084      	b.n	800aac0 <_dtoa_r+0x9b0>
 800a9b6:	e044      	b.n	800aa42 <_dtoa_r+0x932>
 800a9b8:	2336      	movs	r3, #54	; 0x36
 800a9ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a9bc:	1a9b      	subs	r3, r3, r2
 800a9be:	e747      	b.n	800a850 <_dtoa_r+0x740>
 800a9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9c2:	1e5d      	subs	r5, r3, #1
 800a9c4:	9b04      	ldr	r3, [sp, #16]
 800a9c6:	42ab      	cmp	r3, r5
 800a9c8:	db08      	blt.n	800a9dc <_dtoa_r+0x8cc>
 800a9ca:	1b5d      	subs	r5, r3, r5
 800a9cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	da0c      	bge.n	800a9ec <_dtoa_r+0x8dc>
 800a9d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9d6:	1a9c      	subs	r4, r3, r2
 800a9d8:	2300      	movs	r3, #0
 800a9da:	e73b      	b.n	800a854 <_dtoa_r+0x744>
 800a9dc:	9b04      	ldr	r3, [sp, #16]
 800a9de:	9504      	str	r5, [sp, #16]
 800a9e0:	1aea      	subs	r2, r5, r3
 800a9e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9e4:	2500      	movs	r5, #0
 800a9e6:	189b      	adds	r3, r3, r2
 800a9e8:	9311      	str	r3, [sp, #68]	; 0x44
 800a9ea:	e7ef      	b.n	800a9cc <_dtoa_r+0x8bc>
 800a9ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a9ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f0:	e730      	b.n	800a854 <_dtoa_r+0x744>
 800a9f2:	9d04      	ldr	r5, [sp, #16]
 800a9f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a9f6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800a9f8:	e737      	b.n	800a86a <_dtoa_r+0x75a>
 800a9fa:	9a04      	ldr	r2, [sp, #16]
 800a9fc:	e764      	b.n	800a8c8 <_dtoa_r+0x7b8>
 800a9fe:	2500      	movs	r5, #0
 800aa00:	9b04      	ldr	r3, [sp, #16]
 800aa02:	9a04      	ldr	r2, [sp, #16]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	9310      	str	r3, [sp, #64]	; 0x40
 800aa08:	3303      	adds	r3, #3
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	18d3      	adds	r3, r2, r3
 800aa0e:	6858      	ldr	r0, [r3, #4]
 800aa10:	f000 fb46 	bl	800b0a0 <__hi0bits>
 800aa14:	2320      	movs	r3, #32
 800aa16:	1a18      	subs	r0, r3, r0
 800aa18:	e785      	b.n	800a926 <_dtoa_r+0x816>
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	d095      	beq.n	800a94a <_dtoa_r+0x83a>
 800aa1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa20:	331c      	adds	r3, #28
 800aa22:	18d2      	adds	r2, r2, r3
 800aa24:	920a      	str	r2, [sp, #40]	; 0x28
 800aa26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa28:	18e4      	adds	r4, r4, r3
 800aa2a:	18d3      	adds	r3, r2, r3
 800aa2c:	e78c      	b.n	800a948 <_dtoa_r+0x838>
 800aa2e:	0003      	movs	r3, r0
 800aa30:	e7f5      	b.n	800aa1e <_dtoa_r+0x90e>
 800aa32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	dc3d      	bgt.n	800aab4 <_dtoa_r+0x9a4>
 800aa38:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	dd3a      	ble.n	800aab4 <_dtoa_r+0x9a4>
 800aa3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa40:	930c      	str	r3, [sp, #48]	; 0x30
 800aa42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10c      	bne.n	800aa62 <_dtoa_r+0x952>
 800aa48:	9904      	ldr	r1, [sp, #16]
 800aa4a:	2205      	movs	r2, #5
 800aa4c:	9802      	ldr	r0, [sp, #8]
 800aa4e:	f000 fae9 	bl	800b024 <__multadd>
 800aa52:	9004      	str	r0, [sp, #16]
 800aa54:	0001      	movs	r1, r0
 800aa56:	9803      	ldr	r0, [sp, #12]
 800aa58:	f000 fca8 	bl	800b3ac <__mcmp>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	dd00      	ble.n	800aa62 <_dtoa_r+0x952>
 800aa60:	e5af      	b.n	800a5c2 <_dtoa_r+0x4b2>
 800aa62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa64:	9d08      	ldr	r5, [sp, #32]
 800aa66:	43df      	mvns	r7, r3
 800aa68:	2300      	movs	r3, #0
 800aa6a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa6c:	9904      	ldr	r1, [sp, #16]
 800aa6e:	9802      	ldr	r0, [sp, #8]
 800aa70:	f000 fabf 	bl	800aff2 <_Bfree>
 800aa74:	2e00      	cmp	r6, #0
 800aa76:	d100      	bne.n	800aa7a <_dtoa_r+0x96a>
 800aa78:	e69b      	b.n	800a7b2 <_dtoa_r+0x6a2>
 800aa7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d005      	beq.n	800aa8c <_dtoa_r+0x97c>
 800aa80:	42b3      	cmp	r3, r6
 800aa82:	d003      	beq.n	800aa8c <_dtoa_r+0x97c>
 800aa84:	0019      	movs	r1, r3
 800aa86:	9802      	ldr	r0, [sp, #8]
 800aa88:	f000 fab3 	bl	800aff2 <_Bfree>
 800aa8c:	0031      	movs	r1, r6
 800aa8e:	9802      	ldr	r0, [sp, #8]
 800aa90:	f000 faaf 	bl	800aff2 <_Bfree>
 800aa94:	e68d      	b.n	800a7b2 <_dtoa_r+0x6a2>
 800aa96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa98:	9304      	str	r3, [sp, #16]
 800aa9a:	001e      	movs	r6, r3
 800aa9c:	e7e1      	b.n	800aa62 <_dtoa_r+0x952>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	e7fa      	b.n	800aa98 <_dtoa_r+0x988>
 800aaa2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aaa4:	0037      	movs	r7, r6
 800aaa6:	9304      	str	r3, [sp, #16]
 800aaa8:	001e      	movs	r6, r3
 800aaaa:	e58a      	b.n	800a5c2 <_dtoa_r+0x4b2>
 800aaac:	40240000 	.word	0x40240000
 800aab0:	00000433 	.word	0x00000433
 800aab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d100      	bne.n	800aabc <_dtoa_r+0x9ac>
 800aaba:	e0b2      	b.n	800ac22 <_dtoa_r+0xb12>
 800aabc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aabe:	930c      	str	r3, [sp, #48]	; 0x30
 800aac0:	2c00      	cmp	r4, #0
 800aac2:	dd05      	ble.n	800aad0 <_dtoa_r+0x9c0>
 800aac4:	0031      	movs	r1, r6
 800aac6:	0022      	movs	r2, r4
 800aac8:	9802      	ldr	r0, [sp, #8]
 800aaca:	f000 fc1d 	bl	800b308 <__lshift>
 800aace:	0006      	movs	r6, r0
 800aad0:	0030      	movs	r0, r6
 800aad2:	2d00      	cmp	r5, #0
 800aad4:	d011      	beq.n	800aafa <_dtoa_r+0x9ea>
 800aad6:	6871      	ldr	r1, [r6, #4]
 800aad8:	9802      	ldr	r0, [sp, #8]
 800aada:	f000 fa52 	bl	800af82 <_Balloc>
 800aade:	0031      	movs	r1, r6
 800aae0:	0004      	movs	r4, r0
 800aae2:	6933      	ldr	r3, [r6, #16]
 800aae4:	310c      	adds	r1, #12
 800aae6:	1c9a      	adds	r2, r3, #2
 800aae8:	0092      	lsls	r2, r2, #2
 800aaea:	300c      	adds	r0, #12
 800aaec:	f7fe fbe8 	bl	80092c0 <memcpy>
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	0021      	movs	r1, r4
 800aaf4:	9802      	ldr	r0, [sp, #8]
 800aaf6:	f000 fc07 	bl	800b308 <__lshift>
 800aafa:	9609      	str	r6, [sp, #36]	; 0x24
 800aafc:	0006      	movs	r6, r0
 800aafe:	9b08      	ldr	r3, [sp, #32]
 800ab00:	930a      	str	r3, [sp, #40]	; 0x28
 800ab02:	9904      	ldr	r1, [sp, #16]
 800ab04:	9803      	ldr	r0, [sp, #12]
 800ab06:	f7ff fa7d 	bl	800a004 <quorem>
 800ab0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab0c:	900d      	str	r0, [sp, #52]	; 0x34
 800ab0e:	0004      	movs	r4, r0
 800ab10:	9803      	ldr	r0, [sp, #12]
 800ab12:	f000 fc4b 	bl	800b3ac <__mcmp>
 800ab16:	0032      	movs	r2, r6
 800ab18:	9010      	str	r0, [sp, #64]	; 0x40
 800ab1a:	9904      	ldr	r1, [sp, #16]
 800ab1c:	9802      	ldr	r0, [sp, #8]
 800ab1e:	f000 fc5f 	bl	800b3e0 <__mdiff>
 800ab22:	2301      	movs	r3, #1
 800ab24:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab26:	68c3      	ldr	r3, [r0, #12]
 800ab28:	3430      	adds	r4, #48	; 0x30
 800ab2a:	0005      	movs	r5, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d104      	bne.n	800ab3a <_dtoa_r+0xa2a>
 800ab30:	0001      	movs	r1, r0
 800ab32:	9803      	ldr	r0, [sp, #12]
 800ab34:	f000 fc3a 	bl	800b3ac <__mcmp>
 800ab38:	900b      	str	r0, [sp, #44]	; 0x2c
 800ab3a:	0029      	movs	r1, r5
 800ab3c:	9802      	ldr	r0, [sp, #8]
 800ab3e:	f000 fa58 	bl	800aff2 <_Bfree>
 800ab42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ab46:	4313      	orrs	r3, r2
 800ab48:	d10e      	bne.n	800ab68 <_dtoa_r+0xa58>
 800ab4a:	9a06      	ldr	r2, [sp, #24]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	4213      	tst	r3, r2
 800ab50:	d10a      	bne.n	800ab68 <_dtoa_r+0xa58>
 800ab52:	2c39      	cmp	r4, #57	; 0x39
 800ab54:	d026      	beq.n	800aba4 <_dtoa_r+0xa94>
 800ab56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	dd01      	ble.n	800ab60 <_dtoa_r+0xa50>
 800ab5c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ab5e:	3431      	adds	r4, #49	; 0x31
 800ab60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab62:	1c5d      	adds	r5, r3, #1
 800ab64:	701c      	strb	r4, [r3, #0]
 800ab66:	e781      	b.n	800aa6c <_dtoa_r+0x95c>
 800ab68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	db07      	blt.n	800ab7e <_dtoa_r+0xa6e>
 800ab6e:	001d      	movs	r5, r3
 800ab70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ab72:	431d      	orrs	r5, r3
 800ab74:	d122      	bne.n	800abbc <_dtoa_r+0xaac>
 800ab76:	2301      	movs	r3, #1
 800ab78:	9a06      	ldr	r2, [sp, #24]
 800ab7a:	4213      	tst	r3, r2
 800ab7c:	d11e      	bne.n	800abbc <_dtoa_r+0xaac>
 800ab7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	dded      	ble.n	800ab60 <_dtoa_r+0xa50>
 800ab84:	9903      	ldr	r1, [sp, #12]
 800ab86:	2201      	movs	r2, #1
 800ab88:	9802      	ldr	r0, [sp, #8]
 800ab8a:	f000 fbbd 	bl	800b308 <__lshift>
 800ab8e:	9904      	ldr	r1, [sp, #16]
 800ab90:	9003      	str	r0, [sp, #12]
 800ab92:	f000 fc0b 	bl	800b3ac <__mcmp>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	dc02      	bgt.n	800aba0 <_dtoa_r+0xa90>
 800ab9a:	d1e1      	bne.n	800ab60 <_dtoa_r+0xa50>
 800ab9c:	07e3      	lsls	r3, r4, #31
 800ab9e:	d5df      	bpl.n	800ab60 <_dtoa_r+0xa50>
 800aba0:	2c39      	cmp	r4, #57	; 0x39
 800aba2:	d1db      	bne.n	800ab5c <_dtoa_r+0xa4c>
 800aba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aba6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aba8:	1c5d      	adds	r5, r3, #1
 800abaa:	2339      	movs	r3, #57	; 0x39
 800abac:	7013      	strb	r3, [r2, #0]
 800abae:	1e6b      	subs	r3, r5, #1
 800abb0:	781a      	ldrb	r2, [r3, #0]
 800abb2:	2a39      	cmp	r2, #57	; 0x39
 800abb4:	d067      	beq.n	800ac86 <_dtoa_r+0xb76>
 800abb6:	3201      	adds	r2, #1
 800abb8:	701a      	strb	r2, [r3, #0]
 800abba:	e757      	b.n	800aa6c <_dtoa_r+0x95c>
 800abbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abbe:	1c5d      	adds	r5, r3, #1
 800abc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	dd04      	ble.n	800abd0 <_dtoa_r+0xac0>
 800abc6:	2c39      	cmp	r4, #57	; 0x39
 800abc8:	d0ec      	beq.n	800aba4 <_dtoa_r+0xa94>
 800abca:	3401      	adds	r4, #1
 800abcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abce:	e7c9      	b.n	800ab64 <_dtoa_r+0xa54>
 800abd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abd4:	701c      	strb	r4, [r3, #0]
 800abd6:	9b08      	ldr	r3, [sp, #32]
 800abd8:	1aeb      	subs	r3, r5, r3
 800abda:	4293      	cmp	r3, r2
 800abdc:	d03e      	beq.n	800ac5c <_dtoa_r+0xb4c>
 800abde:	2300      	movs	r3, #0
 800abe0:	220a      	movs	r2, #10
 800abe2:	9903      	ldr	r1, [sp, #12]
 800abe4:	9802      	ldr	r0, [sp, #8]
 800abe6:	f000 fa1d 	bl	800b024 <__multadd>
 800abea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abec:	9003      	str	r0, [sp, #12]
 800abee:	42b3      	cmp	r3, r6
 800abf0:	d109      	bne.n	800ac06 <_dtoa_r+0xaf6>
 800abf2:	2300      	movs	r3, #0
 800abf4:	220a      	movs	r2, #10
 800abf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abf8:	9802      	ldr	r0, [sp, #8]
 800abfa:	f000 fa13 	bl	800b024 <__multadd>
 800abfe:	9009      	str	r0, [sp, #36]	; 0x24
 800ac00:	0006      	movs	r6, r0
 800ac02:	950a      	str	r5, [sp, #40]	; 0x28
 800ac04:	e77d      	b.n	800ab02 <_dtoa_r+0x9f2>
 800ac06:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac08:	2300      	movs	r3, #0
 800ac0a:	220a      	movs	r2, #10
 800ac0c:	9802      	ldr	r0, [sp, #8]
 800ac0e:	f000 fa09 	bl	800b024 <__multadd>
 800ac12:	2300      	movs	r3, #0
 800ac14:	9009      	str	r0, [sp, #36]	; 0x24
 800ac16:	220a      	movs	r2, #10
 800ac18:	0031      	movs	r1, r6
 800ac1a:	9802      	ldr	r0, [sp, #8]
 800ac1c:	f000 fa02 	bl	800b024 <__multadd>
 800ac20:	e7ee      	b.n	800ac00 <_dtoa_r+0xaf0>
 800ac22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac24:	930c      	str	r3, [sp, #48]	; 0x30
 800ac26:	9b08      	ldr	r3, [sp, #32]
 800ac28:	9306      	str	r3, [sp, #24]
 800ac2a:	9904      	ldr	r1, [sp, #16]
 800ac2c:	9803      	ldr	r0, [sp, #12]
 800ac2e:	f7ff f9e9 	bl	800a004 <quorem>
 800ac32:	9b06      	ldr	r3, [sp, #24]
 800ac34:	3030      	adds	r0, #48	; 0x30
 800ac36:	1c5d      	adds	r5, r3, #1
 800ac38:	7018      	strb	r0, [r3, #0]
 800ac3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac3c:	9b08      	ldr	r3, [sp, #32]
 800ac3e:	0004      	movs	r4, r0
 800ac40:	1aeb      	subs	r3, r5, r3
 800ac42:	429a      	cmp	r2, r3
 800ac44:	dd08      	ble.n	800ac58 <_dtoa_r+0xb48>
 800ac46:	2300      	movs	r3, #0
 800ac48:	220a      	movs	r2, #10
 800ac4a:	9903      	ldr	r1, [sp, #12]
 800ac4c:	9802      	ldr	r0, [sp, #8]
 800ac4e:	f000 f9e9 	bl	800b024 <__multadd>
 800ac52:	9506      	str	r5, [sp, #24]
 800ac54:	9003      	str	r0, [sp, #12]
 800ac56:	e7e8      	b.n	800ac2a <_dtoa_r+0xb1a>
 800ac58:	2300      	movs	r3, #0
 800ac5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac5c:	9903      	ldr	r1, [sp, #12]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	9802      	ldr	r0, [sp, #8]
 800ac62:	f000 fb51 	bl	800b308 <__lshift>
 800ac66:	9904      	ldr	r1, [sp, #16]
 800ac68:	9003      	str	r0, [sp, #12]
 800ac6a:	f000 fb9f 	bl	800b3ac <__mcmp>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	dc9d      	bgt.n	800abae <_dtoa_r+0xa9e>
 800ac72:	d101      	bne.n	800ac78 <_dtoa_r+0xb68>
 800ac74:	07e3      	lsls	r3, r4, #31
 800ac76:	d49a      	bmi.n	800abae <_dtoa_r+0xa9e>
 800ac78:	1e6b      	subs	r3, r5, #1
 800ac7a:	781a      	ldrb	r2, [r3, #0]
 800ac7c:	2a30      	cmp	r2, #48	; 0x30
 800ac7e:	d000      	beq.n	800ac82 <_dtoa_r+0xb72>
 800ac80:	e6f4      	b.n	800aa6c <_dtoa_r+0x95c>
 800ac82:	001d      	movs	r5, r3
 800ac84:	e7f8      	b.n	800ac78 <_dtoa_r+0xb68>
 800ac86:	9a08      	ldr	r2, [sp, #32]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d103      	bne.n	800ac94 <_dtoa_r+0xb84>
 800ac8c:	2331      	movs	r3, #49	; 0x31
 800ac8e:	3701      	adds	r7, #1
 800ac90:	7013      	strb	r3, [r2, #0]
 800ac92:	e6eb      	b.n	800aa6c <_dtoa_r+0x95c>
 800ac94:	001d      	movs	r5, r3
 800ac96:	e78a      	b.n	800abae <_dtoa_r+0xa9e>
 800ac98:	4b0b      	ldr	r3, [pc, #44]	; (800acc8 <_dtoa_r+0xbb8>)
 800ac9a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ac9c:	9308      	str	r3, [sp, #32]
 800ac9e:	4b0b      	ldr	r3, [pc, #44]	; (800accc <_dtoa_r+0xbbc>)
 800aca0:	2a00      	cmp	r2, #0
 800aca2:	d001      	beq.n	800aca8 <_dtoa_r+0xb98>
 800aca4:	f7ff fa77 	bl	800a196 <_dtoa_r+0x86>
 800aca8:	f7ff fa77 	bl	800a19a <_dtoa_r+0x8a>
 800acac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800acae:	2b01      	cmp	r3, #1
 800acb0:	dc00      	bgt.n	800acb4 <_dtoa_r+0xba4>
 800acb2:	e621      	b.n	800a8f8 <_dtoa_r+0x7e8>
 800acb4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800acb6:	2001      	movs	r0, #1
 800acb8:	e635      	b.n	800a926 <_dtoa_r+0x816>
 800acba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	dcb2      	bgt.n	800ac26 <_dtoa_r+0xb16>
 800acc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	ddaf      	ble.n	800ac26 <_dtoa_r+0xb16>
 800acc6:	e6bc      	b.n	800aa42 <_dtoa_r+0x932>
 800acc8:	0800bbb8 	.word	0x0800bbb8
 800accc:	0800bbc0 	.word	0x0800bbc0

0800acd0 <__sflush_r>:
 800acd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acd2:	898a      	ldrh	r2, [r1, #12]
 800acd4:	0005      	movs	r5, r0
 800acd6:	000c      	movs	r4, r1
 800acd8:	0713      	lsls	r3, r2, #28
 800acda:	d460      	bmi.n	800ad9e <__sflush_r+0xce>
 800acdc:	684b      	ldr	r3, [r1, #4]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	dc04      	bgt.n	800acec <__sflush_r+0x1c>
 800ace2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	dc01      	bgt.n	800acec <__sflush_r+0x1c>
 800ace8:	2000      	movs	r0, #0
 800acea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800acec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800acee:	2f00      	cmp	r7, #0
 800acf0:	d0fa      	beq.n	800ace8 <__sflush_r+0x18>
 800acf2:	2300      	movs	r3, #0
 800acf4:	682e      	ldr	r6, [r5, #0]
 800acf6:	602b      	str	r3, [r5, #0]
 800acf8:	2380      	movs	r3, #128	; 0x80
 800acfa:	015b      	lsls	r3, r3, #5
 800acfc:	6a21      	ldr	r1, [r4, #32]
 800acfe:	401a      	ands	r2, r3
 800ad00:	d034      	beq.n	800ad6c <__sflush_r+0x9c>
 800ad02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	075b      	lsls	r3, r3, #29
 800ad08:	d506      	bpl.n	800ad18 <__sflush_r+0x48>
 800ad0a:	6863      	ldr	r3, [r4, #4]
 800ad0c:	1ac0      	subs	r0, r0, r3
 800ad0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d001      	beq.n	800ad18 <__sflush_r+0x48>
 800ad14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad16:	1ac0      	subs	r0, r0, r3
 800ad18:	0002      	movs	r2, r0
 800ad1a:	6a21      	ldr	r1, [r4, #32]
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	0028      	movs	r0, r5
 800ad20:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ad22:	47b8      	blx	r7
 800ad24:	89a1      	ldrh	r1, [r4, #12]
 800ad26:	1c43      	adds	r3, r0, #1
 800ad28:	d106      	bne.n	800ad38 <__sflush_r+0x68>
 800ad2a:	682b      	ldr	r3, [r5, #0]
 800ad2c:	2b1d      	cmp	r3, #29
 800ad2e:	d830      	bhi.n	800ad92 <__sflush_r+0xc2>
 800ad30:	4a2b      	ldr	r2, [pc, #172]	; (800ade0 <__sflush_r+0x110>)
 800ad32:	40da      	lsrs	r2, r3
 800ad34:	07d3      	lsls	r3, r2, #31
 800ad36:	d52c      	bpl.n	800ad92 <__sflush_r+0xc2>
 800ad38:	2300      	movs	r3, #0
 800ad3a:	6063      	str	r3, [r4, #4]
 800ad3c:	6923      	ldr	r3, [r4, #16]
 800ad3e:	6023      	str	r3, [r4, #0]
 800ad40:	04cb      	lsls	r3, r1, #19
 800ad42:	d505      	bpl.n	800ad50 <__sflush_r+0x80>
 800ad44:	1c43      	adds	r3, r0, #1
 800ad46:	d102      	bne.n	800ad4e <__sflush_r+0x7e>
 800ad48:	682b      	ldr	r3, [r5, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d100      	bne.n	800ad50 <__sflush_r+0x80>
 800ad4e:	6560      	str	r0, [r4, #84]	; 0x54
 800ad50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad52:	602e      	str	r6, [r5, #0]
 800ad54:	2900      	cmp	r1, #0
 800ad56:	d0c7      	beq.n	800ace8 <__sflush_r+0x18>
 800ad58:	0023      	movs	r3, r4
 800ad5a:	3344      	adds	r3, #68	; 0x44
 800ad5c:	4299      	cmp	r1, r3
 800ad5e:	d002      	beq.n	800ad66 <__sflush_r+0x96>
 800ad60:	0028      	movs	r0, r5
 800ad62:	f000 fc03 	bl	800b56c <_free_r>
 800ad66:	2000      	movs	r0, #0
 800ad68:	6360      	str	r0, [r4, #52]	; 0x34
 800ad6a:	e7be      	b.n	800acea <__sflush_r+0x1a>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	0028      	movs	r0, r5
 800ad70:	47b8      	blx	r7
 800ad72:	1c43      	adds	r3, r0, #1
 800ad74:	d1c6      	bne.n	800ad04 <__sflush_r+0x34>
 800ad76:	682b      	ldr	r3, [r5, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d0c3      	beq.n	800ad04 <__sflush_r+0x34>
 800ad7c:	2b1d      	cmp	r3, #29
 800ad7e:	d001      	beq.n	800ad84 <__sflush_r+0xb4>
 800ad80:	2b16      	cmp	r3, #22
 800ad82:	d101      	bne.n	800ad88 <__sflush_r+0xb8>
 800ad84:	602e      	str	r6, [r5, #0]
 800ad86:	e7af      	b.n	800ace8 <__sflush_r+0x18>
 800ad88:	2340      	movs	r3, #64	; 0x40
 800ad8a:	89a2      	ldrh	r2, [r4, #12]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	81a3      	strh	r3, [r4, #12]
 800ad90:	e7ab      	b.n	800acea <__sflush_r+0x1a>
 800ad92:	2340      	movs	r3, #64	; 0x40
 800ad94:	430b      	orrs	r3, r1
 800ad96:	2001      	movs	r0, #1
 800ad98:	81a3      	strh	r3, [r4, #12]
 800ad9a:	4240      	negs	r0, r0
 800ad9c:	e7a5      	b.n	800acea <__sflush_r+0x1a>
 800ad9e:	690f      	ldr	r7, [r1, #16]
 800ada0:	2f00      	cmp	r7, #0
 800ada2:	d0a1      	beq.n	800ace8 <__sflush_r+0x18>
 800ada4:	680b      	ldr	r3, [r1, #0]
 800ada6:	600f      	str	r7, [r1, #0]
 800ada8:	1bdb      	subs	r3, r3, r7
 800adaa:	9301      	str	r3, [sp, #4]
 800adac:	2300      	movs	r3, #0
 800adae:	0792      	lsls	r2, r2, #30
 800adb0:	d100      	bne.n	800adb4 <__sflush_r+0xe4>
 800adb2:	694b      	ldr	r3, [r1, #20]
 800adb4:	60a3      	str	r3, [r4, #8]
 800adb6:	9b01      	ldr	r3, [sp, #4]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	dc00      	bgt.n	800adbe <__sflush_r+0xee>
 800adbc:	e794      	b.n	800ace8 <__sflush_r+0x18>
 800adbe:	9b01      	ldr	r3, [sp, #4]
 800adc0:	003a      	movs	r2, r7
 800adc2:	6a21      	ldr	r1, [r4, #32]
 800adc4:	0028      	movs	r0, r5
 800adc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800adc8:	47b0      	blx	r6
 800adca:	2800      	cmp	r0, #0
 800adcc:	dc03      	bgt.n	800add6 <__sflush_r+0x106>
 800adce:	2340      	movs	r3, #64	; 0x40
 800add0:	89a2      	ldrh	r2, [r4, #12]
 800add2:	4313      	orrs	r3, r2
 800add4:	e7df      	b.n	800ad96 <__sflush_r+0xc6>
 800add6:	9b01      	ldr	r3, [sp, #4]
 800add8:	183f      	adds	r7, r7, r0
 800adda:	1a1b      	subs	r3, r3, r0
 800addc:	9301      	str	r3, [sp, #4]
 800adde:	e7ea      	b.n	800adb6 <__sflush_r+0xe6>
 800ade0:	20400001 	.word	0x20400001

0800ade4 <_fflush_r>:
 800ade4:	690b      	ldr	r3, [r1, #16]
 800ade6:	b570      	push	{r4, r5, r6, lr}
 800ade8:	0005      	movs	r5, r0
 800adea:	000c      	movs	r4, r1
 800adec:	2b00      	cmp	r3, #0
 800adee:	d101      	bne.n	800adf4 <_fflush_r+0x10>
 800adf0:	2000      	movs	r0, #0
 800adf2:	bd70      	pop	{r4, r5, r6, pc}
 800adf4:	2800      	cmp	r0, #0
 800adf6:	d004      	beq.n	800ae02 <_fflush_r+0x1e>
 800adf8:	6983      	ldr	r3, [r0, #24]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d101      	bne.n	800ae02 <_fflush_r+0x1e>
 800adfe:	f7fe f9a7 	bl	8009150 <__sinit>
 800ae02:	4b0b      	ldr	r3, [pc, #44]	; (800ae30 <_fflush_r+0x4c>)
 800ae04:	429c      	cmp	r4, r3
 800ae06:	d109      	bne.n	800ae1c <_fflush_r+0x38>
 800ae08:	686c      	ldr	r4, [r5, #4]
 800ae0a:	220c      	movs	r2, #12
 800ae0c:	5ea3      	ldrsh	r3, [r4, r2]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d0ee      	beq.n	800adf0 <_fflush_r+0xc>
 800ae12:	0021      	movs	r1, r4
 800ae14:	0028      	movs	r0, r5
 800ae16:	f7ff ff5b 	bl	800acd0 <__sflush_r>
 800ae1a:	e7ea      	b.n	800adf2 <_fflush_r+0xe>
 800ae1c:	4b05      	ldr	r3, [pc, #20]	; (800ae34 <_fflush_r+0x50>)
 800ae1e:	429c      	cmp	r4, r3
 800ae20:	d101      	bne.n	800ae26 <_fflush_r+0x42>
 800ae22:	68ac      	ldr	r4, [r5, #8]
 800ae24:	e7f1      	b.n	800ae0a <_fflush_r+0x26>
 800ae26:	4b04      	ldr	r3, [pc, #16]	; (800ae38 <_fflush_r+0x54>)
 800ae28:	429c      	cmp	r4, r3
 800ae2a:	d1ee      	bne.n	800ae0a <_fflush_r+0x26>
 800ae2c:	68ec      	ldr	r4, [r5, #12]
 800ae2e:	e7ec      	b.n	800ae0a <_fflush_r+0x26>
 800ae30:	0800bb40 	.word	0x0800bb40
 800ae34:	0800bb60 	.word	0x0800bb60
 800ae38:	0800bb20 	.word	0x0800bb20

0800ae3c <_localeconv_r>:
 800ae3c:	4b03      	ldr	r3, [pc, #12]	; (800ae4c <_localeconv_r+0x10>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	6a18      	ldr	r0, [r3, #32]
 800ae42:	2800      	cmp	r0, #0
 800ae44:	d100      	bne.n	800ae48 <_localeconv_r+0xc>
 800ae46:	4802      	ldr	r0, [pc, #8]	; (800ae50 <_localeconv_r+0x14>)
 800ae48:	30f0      	adds	r0, #240	; 0xf0
 800ae4a:	4770      	bx	lr
 800ae4c:	2000016c 	.word	0x2000016c
 800ae50:	200001d0 	.word	0x200001d0

0800ae54 <_lseek_r>:
 800ae54:	b570      	push	{r4, r5, r6, lr}
 800ae56:	0005      	movs	r5, r0
 800ae58:	0008      	movs	r0, r1
 800ae5a:	0011      	movs	r1, r2
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	4c06      	ldr	r4, [pc, #24]	; (800ae78 <_lseek_r+0x24>)
 800ae60:	6022      	str	r2, [r4, #0]
 800ae62:	001a      	movs	r2, r3
 800ae64:	f7fd ff27 	bl	8008cb6 <_lseek>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	d103      	bne.n	800ae74 <_lseek_r+0x20>
 800ae6c:	6823      	ldr	r3, [r4, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d000      	beq.n	800ae74 <_lseek_r+0x20>
 800ae72:	602b      	str	r3, [r5, #0]
 800ae74:	bd70      	pop	{r4, r5, r6, pc}
 800ae76:	46c0      	nop			; (mov r8, r8)
 800ae78:	20000ce4 	.word	0x20000ce4

0800ae7c <__swhatbuf_r>:
 800ae7c:	b570      	push	{r4, r5, r6, lr}
 800ae7e:	000e      	movs	r6, r1
 800ae80:	001d      	movs	r5, r3
 800ae82:	230e      	movs	r3, #14
 800ae84:	5ec9      	ldrsh	r1, [r1, r3]
 800ae86:	b096      	sub	sp, #88	; 0x58
 800ae88:	0014      	movs	r4, r2
 800ae8a:	2900      	cmp	r1, #0
 800ae8c:	da07      	bge.n	800ae9e <__swhatbuf_r+0x22>
 800ae8e:	2300      	movs	r3, #0
 800ae90:	602b      	str	r3, [r5, #0]
 800ae92:	89b3      	ldrh	r3, [r6, #12]
 800ae94:	061b      	lsls	r3, r3, #24
 800ae96:	d411      	bmi.n	800aebc <__swhatbuf_r+0x40>
 800ae98:	2380      	movs	r3, #128	; 0x80
 800ae9a:	00db      	lsls	r3, r3, #3
 800ae9c:	e00f      	b.n	800aebe <__swhatbuf_r+0x42>
 800ae9e:	466a      	mov	r2, sp
 800aea0:	f000 fd00 	bl	800b8a4 <_fstat_r>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	dbf2      	blt.n	800ae8e <__swhatbuf_r+0x12>
 800aea8:	22f0      	movs	r2, #240	; 0xf0
 800aeaa:	9b01      	ldr	r3, [sp, #4]
 800aeac:	0212      	lsls	r2, r2, #8
 800aeae:	4013      	ands	r3, r2
 800aeb0:	4a05      	ldr	r2, [pc, #20]	; (800aec8 <__swhatbuf_r+0x4c>)
 800aeb2:	189b      	adds	r3, r3, r2
 800aeb4:	425a      	negs	r2, r3
 800aeb6:	4153      	adcs	r3, r2
 800aeb8:	602b      	str	r3, [r5, #0]
 800aeba:	e7ed      	b.n	800ae98 <__swhatbuf_r+0x1c>
 800aebc:	2340      	movs	r3, #64	; 0x40
 800aebe:	2000      	movs	r0, #0
 800aec0:	6023      	str	r3, [r4, #0]
 800aec2:	b016      	add	sp, #88	; 0x58
 800aec4:	bd70      	pop	{r4, r5, r6, pc}
 800aec6:	46c0      	nop			; (mov r8, r8)
 800aec8:	ffffe000 	.word	0xffffe000

0800aecc <__smakebuf_r>:
 800aecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aece:	2602      	movs	r6, #2
 800aed0:	898b      	ldrh	r3, [r1, #12]
 800aed2:	0005      	movs	r5, r0
 800aed4:	000c      	movs	r4, r1
 800aed6:	4233      	tst	r3, r6
 800aed8:	d006      	beq.n	800aee8 <__smakebuf_r+0x1c>
 800aeda:	0023      	movs	r3, r4
 800aedc:	3347      	adds	r3, #71	; 0x47
 800aede:	6023      	str	r3, [r4, #0]
 800aee0:	6123      	str	r3, [r4, #16]
 800aee2:	2301      	movs	r3, #1
 800aee4:	6163      	str	r3, [r4, #20]
 800aee6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800aee8:	ab01      	add	r3, sp, #4
 800aeea:	466a      	mov	r2, sp
 800aeec:	f7ff ffc6 	bl	800ae7c <__swhatbuf_r>
 800aef0:	9900      	ldr	r1, [sp, #0]
 800aef2:	0007      	movs	r7, r0
 800aef4:	0028      	movs	r0, r5
 800aef6:	f7fe f9f5 	bl	80092e4 <_malloc_r>
 800aefa:	2800      	cmp	r0, #0
 800aefc:	d108      	bne.n	800af10 <__smakebuf_r+0x44>
 800aefe:	220c      	movs	r2, #12
 800af00:	5ea3      	ldrsh	r3, [r4, r2]
 800af02:	059a      	lsls	r2, r3, #22
 800af04:	d4ef      	bmi.n	800aee6 <__smakebuf_r+0x1a>
 800af06:	2203      	movs	r2, #3
 800af08:	4393      	bics	r3, r2
 800af0a:	431e      	orrs	r6, r3
 800af0c:	81a6      	strh	r6, [r4, #12]
 800af0e:	e7e4      	b.n	800aeda <__smakebuf_r+0xe>
 800af10:	4b0f      	ldr	r3, [pc, #60]	; (800af50 <__smakebuf_r+0x84>)
 800af12:	62ab      	str	r3, [r5, #40]	; 0x28
 800af14:	2380      	movs	r3, #128	; 0x80
 800af16:	89a2      	ldrh	r2, [r4, #12]
 800af18:	6020      	str	r0, [r4, #0]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	81a3      	strh	r3, [r4, #12]
 800af1e:	9b00      	ldr	r3, [sp, #0]
 800af20:	6120      	str	r0, [r4, #16]
 800af22:	6163      	str	r3, [r4, #20]
 800af24:	9b01      	ldr	r3, [sp, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00d      	beq.n	800af46 <__smakebuf_r+0x7a>
 800af2a:	230e      	movs	r3, #14
 800af2c:	5ee1      	ldrsh	r1, [r4, r3]
 800af2e:	0028      	movs	r0, r5
 800af30:	f000 fcca 	bl	800b8c8 <_isatty_r>
 800af34:	2800      	cmp	r0, #0
 800af36:	d006      	beq.n	800af46 <__smakebuf_r+0x7a>
 800af38:	2203      	movs	r2, #3
 800af3a:	89a3      	ldrh	r3, [r4, #12]
 800af3c:	4393      	bics	r3, r2
 800af3e:	001a      	movs	r2, r3
 800af40:	2301      	movs	r3, #1
 800af42:	4313      	orrs	r3, r2
 800af44:	81a3      	strh	r3, [r4, #12]
 800af46:	89a0      	ldrh	r0, [r4, #12]
 800af48:	4338      	orrs	r0, r7
 800af4a:	81a0      	strh	r0, [r4, #12]
 800af4c:	e7cb      	b.n	800aee6 <__smakebuf_r+0x1a>
 800af4e:	46c0      	nop			; (mov r8, r8)
 800af50:	08009115 	.word	0x08009115

0800af54 <malloc>:
 800af54:	b510      	push	{r4, lr}
 800af56:	4b03      	ldr	r3, [pc, #12]	; (800af64 <malloc+0x10>)
 800af58:	0001      	movs	r1, r0
 800af5a:	6818      	ldr	r0, [r3, #0]
 800af5c:	f7fe f9c2 	bl	80092e4 <_malloc_r>
 800af60:	bd10      	pop	{r4, pc}
 800af62:	46c0      	nop			; (mov r8, r8)
 800af64:	2000016c 	.word	0x2000016c

0800af68 <memchr>:
 800af68:	b2c9      	uxtb	r1, r1
 800af6a:	1882      	adds	r2, r0, r2
 800af6c:	4290      	cmp	r0, r2
 800af6e:	d101      	bne.n	800af74 <memchr+0xc>
 800af70:	2000      	movs	r0, #0
 800af72:	4770      	bx	lr
 800af74:	7803      	ldrb	r3, [r0, #0]
 800af76:	428b      	cmp	r3, r1
 800af78:	d0fb      	beq.n	800af72 <memchr+0xa>
 800af7a:	3001      	adds	r0, #1
 800af7c:	e7f6      	b.n	800af6c <memchr+0x4>

0800af7e <__malloc_lock>:
 800af7e:	4770      	bx	lr

0800af80 <__malloc_unlock>:
 800af80:	4770      	bx	lr

0800af82 <_Balloc>:
 800af82:	b570      	push	{r4, r5, r6, lr}
 800af84:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af86:	0004      	movs	r4, r0
 800af88:	000d      	movs	r5, r1
 800af8a:	2e00      	cmp	r6, #0
 800af8c:	d107      	bne.n	800af9e <_Balloc+0x1c>
 800af8e:	2010      	movs	r0, #16
 800af90:	f7ff ffe0 	bl	800af54 <malloc>
 800af94:	6260      	str	r0, [r4, #36]	; 0x24
 800af96:	6046      	str	r6, [r0, #4]
 800af98:	6086      	str	r6, [r0, #8]
 800af9a:	6006      	str	r6, [r0, #0]
 800af9c:	60c6      	str	r6, [r0, #12]
 800af9e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800afa0:	68f3      	ldr	r3, [r6, #12]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d013      	beq.n	800afce <_Balloc+0x4c>
 800afa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afa8:	00aa      	lsls	r2, r5, #2
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	189b      	adds	r3, r3, r2
 800afae:	6818      	ldr	r0, [r3, #0]
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d118      	bne.n	800afe6 <_Balloc+0x64>
 800afb4:	2101      	movs	r1, #1
 800afb6:	000e      	movs	r6, r1
 800afb8:	40ae      	lsls	r6, r5
 800afba:	1d72      	adds	r2, r6, #5
 800afbc:	0092      	lsls	r2, r2, #2
 800afbe:	0020      	movs	r0, r4
 800afc0:	f000 fac6 	bl	800b550 <_calloc_r>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d00c      	beq.n	800afe2 <_Balloc+0x60>
 800afc8:	6045      	str	r5, [r0, #4]
 800afca:	6086      	str	r6, [r0, #8]
 800afcc:	e00d      	b.n	800afea <_Balloc+0x68>
 800afce:	2221      	movs	r2, #33	; 0x21
 800afd0:	2104      	movs	r1, #4
 800afd2:	0020      	movs	r0, r4
 800afd4:	f000 fabc 	bl	800b550 <_calloc_r>
 800afd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afda:	60f0      	str	r0, [r6, #12]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d1e1      	bne.n	800afa6 <_Balloc+0x24>
 800afe2:	2000      	movs	r0, #0
 800afe4:	bd70      	pop	{r4, r5, r6, pc}
 800afe6:	6802      	ldr	r2, [r0, #0]
 800afe8:	601a      	str	r2, [r3, #0]
 800afea:	2300      	movs	r3, #0
 800afec:	6103      	str	r3, [r0, #16]
 800afee:	60c3      	str	r3, [r0, #12]
 800aff0:	e7f8      	b.n	800afe4 <_Balloc+0x62>

0800aff2 <_Bfree>:
 800aff2:	b570      	push	{r4, r5, r6, lr}
 800aff4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aff6:	0006      	movs	r6, r0
 800aff8:	000d      	movs	r5, r1
 800affa:	2c00      	cmp	r4, #0
 800affc:	d107      	bne.n	800b00e <_Bfree+0x1c>
 800affe:	2010      	movs	r0, #16
 800b000:	f7ff ffa8 	bl	800af54 <malloc>
 800b004:	6270      	str	r0, [r6, #36]	; 0x24
 800b006:	6044      	str	r4, [r0, #4]
 800b008:	6084      	str	r4, [r0, #8]
 800b00a:	6004      	str	r4, [r0, #0]
 800b00c:	60c4      	str	r4, [r0, #12]
 800b00e:	2d00      	cmp	r5, #0
 800b010:	d007      	beq.n	800b022 <_Bfree+0x30>
 800b012:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b014:	686a      	ldr	r2, [r5, #4]
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	0092      	lsls	r2, r2, #2
 800b01a:	189b      	adds	r3, r3, r2
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	602a      	str	r2, [r5, #0]
 800b020:	601d      	str	r5, [r3, #0]
 800b022:	bd70      	pop	{r4, r5, r6, pc}

0800b024 <__multadd>:
 800b024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b026:	001e      	movs	r6, r3
 800b028:	2314      	movs	r3, #20
 800b02a:	469c      	mov	ip, r3
 800b02c:	0007      	movs	r7, r0
 800b02e:	000c      	movs	r4, r1
 800b030:	2000      	movs	r0, #0
 800b032:	690d      	ldr	r5, [r1, #16]
 800b034:	448c      	add	ip, r1
 800b036:	4663      	mov	r3, ip
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	3001      	adds	r0, #1
 800b03c:	b299      	uxth	r1, r3
 800b03e:	4663      	mov	r3, ip
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4351      	muls	r1, r2
 800b044:	0c1b      	lsrs	r3, r3, #16
 800b046:	4353      	muls	r3, r2
 800b048:	1989      	adds	r1, r1, r6
 800b04a:	0c0e      	lsrs	r6, r1, #16
 800b04c:	199b      	adds	r3, r3, r6
 800b04e:	b289      	uxth	r1, r1
 800b050:	0c1e      	lsrs	r6, r3, #16
 800b052:	041b      	lsls	r3, r3, #16
 800b054:	185b      	adds	r3, r3, r1
 800b056:	4661      	mov	r1, ip
 800b058:	c108      	stmia	r1!, {r3}
 800b05a:	468c      	mov	ip, r1
 800b05c:	4285      	cmp	r5, r0
 800b05e:	dcea      	bgt.n	800b036 <__multadd+0x12>
 800b060:	2e00      	cmp	r6, #0
 800b062:	d01b      	beq.n	800b09c <__multadd+0x78>
 800b064:	68a3      	ldr	r3, [r4, #8]
 800b066:	42ab      	cmp	r3, r5
 800b068:	dc12      	bgt.n	800b090 <__multadd+0x6c>
 800b06a:	6863      	ldr	r3, [r4, #4]
 800b06c:	0038      	movs	r0, r7
 800b06e:	1c59      	adds	r1, r3, #1
 800b070:	f7ff ff87 	bl	800af82 <_Balloc>
 800b074:	0021      	movs	r1, r4
 800b076:	6923      	ldr	r3, [r4, #16]
 800b078:	9001      	str	r0, [sp, #4]
 800b07a:	1c9a      	adds	r2, r3, #2
 800b07c:	0092      	lsls	r2, r2, #2
 800b07e:	310c      	adds	r1, #12
 800b080:	300c      	adds	r0, #12
 800b082:	f7fe f91d 	bl	80092c0 <memcpy>
 800b086:	0021      	movs	r1, r4
 800b088:	0038      	movs	r0, r7
 800b08a:	f7ff ffb2 	bl	800aff2 <_Bfree>
 800b08e:	9c01      	ldr	r4, [sp, #4]
 800b090:	1d2b      	adds	r3, r5, #4
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	18e3      	adds	r3, r4, r3
 800b096:	3501      	adds	r5, #1
 800b098:	605e      	str	r6, [r3, #4]
 800b09a:	6125      	str	r5, [r4, #16]
 800b09c:	0020      	movs	r0, r4
 800b09e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800b0a0 <__hi0bits>:
 800b0a0:	0003      	movs	r3, r0
 800b0a2:	0c02      	lsrs	r2, r0, #16
 800b0a4:	2000      	movs	r0, #0
 800b0a6:	4282      	cmp	r2, r0
 800b0a8:	d101      	bne.n	800b0ae <__hi0bits+0xe>
 800b0aa:	041b      	lsls	r3, r3, #16
 800b0ac:	3010      	adds	r0, #16
 800b0ae:	0e1a      	lsrs	r2, r3, #24
 800b0b0:	d101      	bne.n	800b0b6 <__hi0bits+0x16>
 800b0b2:	3008      	adds	r0, #8
 800b0b4:	021b      	lsls	r3, r3, #8
 800b0b6:	0f1a      	lsrs	r2, r3, #28
 800b0b8:	d101      	bne.n	800b0be <__hi0bits+0x1e>
 800b0ba:	3004      	adds	r0, #4
 800b0bc:	011b      	lsls	r3, r3, #4
 800b0be:	0f9a      	lsrs	r2, r3, #30
 800b0c0:	d101      	bne.n	800b0c6 <__hi0bits+0x26>
 800b0c2:	3002      	adds	r0, #2
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	db03      	blt.n	800b0d2 <__hi0bits+0x32>
 800b0ca:	3001      	adds	r0, #1
 800b0cc:	005b      	lsls	r3, r3, #1
 800b0ce:	d400      	bmi.n	800b0d2 <__hi0bits+0x32>
 800b0d0:	2020      	movs	r0, #32
 800b0d2:	4770      	bx	lr

0800b0d4 <__lo0bits>:
 800b0d4:	2207      	movs	r2, #7
 800b0d6:	6803      	ldr	r3, [r0, #0]
 800b0d8:	b510      	push	{r4, lr}
 800b0da:	0001      	movs	r1, r0
 800b0dc:	401a      	ands	r2, r3
 800b0de:	d00d      	beq.n	800b0fc <__lo0bits+0x28>
 800b0e0:	2401      	movs	r4, #1
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	4223      	tst	r3, r4
 800b0e6:	d105      	bne.n	800b0f4 <__lo0bits+0x20>
 800b0e8:	3002      	adds	r0, #2
 800b0ea:	4203      	tst	r3, r0
 800b0ec:	d003      	beq.n	800b0f6 <__lo0bits+0x22>
 800b0ee:	40e3      	lsrs	r3, r4
 800b0f0:	0020      	movs	r0, r4
 800b0f2:	600b      	str	r3, [r1, #0]
 800b0f4:	bd10      	pop	{r4, pc}
 800b0f6:	089b      	lsrs	r3, r3, #2
 800b0f8:	600b      	str	r3, [r1, #0]
 800b0fa:	e7fb      	b.n	800b0f4 <__lo0bits+0x20>
 800b0fc:	b29c      	uxth	r4, r3
 800b0fe:	0010      	movs	r0, r2
 800b100:	2c00      	cmp	r4, #0
 800b102:	d101      	bne.n	800b108 <__lo0bits+0x34>
 800b104:	2010      	movs	r0, #16
 800b106:	0c1b      	lsrs	r3, r3, #16
 800b108:	b2da      	uxtb	r2, r3
 800b10a:	2a00      	cmp	r2, #0
 800b10c:	d101      	bne.n	800b112 <__lo0bits+0x3e>
 800b10e:	3008      	adds	r0, #8
 800b110:	0a1b      	lsrs	r3, r3, #8
 800b112:	071a      	lsls	r2, r3, #28
 800b114:	d101      	bne.n	800b11a <__lo0bits+0x46>
 800b116:	3004      	adds	r0, #4
 800b118:	091b      	lsrs	r3, r3, #4
 800b11a:	079a      	lsls	r2, r3, #30
 800b11c:	d101      	bne.n	800b122 <__lo0bits+0x4e>
 800b11e:	3002      	adds	r0, #2
 800b120:	089b      	lsrs	r3, r3, #2
 800b122:	07da      	lsls	r2, r3, #31
 800b124:	d4e8      	bmi.n	800b0f8 <__lo0bits+0x24>
 800b126:	085b      	lsrs	r3, r3, #1
 800b128:	d001      	beq.n	800b12e <__lo0bits+0x5a>
 800b12a:	3001      	adds	r0, #1
 800b12c:	e7e4      	b.n	800b0f8 <__lo0bits+0x24>
 800b12e:	2020      	movs	r0, #32
 800b130:	e7e0      	b.n	800b0f4 <__lo0bits+0x20>

0800b132 <__i2b>:
 800b132:	b510      	push	{r4, lr}
 800b134:	000c      	movs	r4, r1
 800b136:	2101      	movs	r1, #1
 800b138:	f7ff ff23 	bl	800af82 <_Balloc>
 800b13c:	2301      	movs	r3, #1
 800b13e:	6144      	str	r4, [r0, #20]
 800b140:	6103      	str	r3, [r0, #16]
 800b142:	bd10      	pop	{r4, pc}

0800b144 <__multiply>:
 800b144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b146:	690b      	ldr	r3, [r1, #16]
 800b148:	0014      	movs	r4, r2
 800b14a:	6912      	ldr	r2, [r2, #16]
 800b14c:	b089      	sub	sp, #36	; 0x24
 800b14e:	000d      	movs	r5, r1
 800b150:	4293      	cmp	r3, r2
 800b152:	da01      	bge.n	800b158 <__multiply+0x14>
 800b154:	0025      	movs	r5, r4
 800b156:	000c      	movs	r4, r1
 800b158:	692f      	ldr	r7, [r5, #16]
 800b15a:	6926      	ldr	r6, [r4, #16]
 800b15c:	6869      	ldr	r1, [r5, #4]
 800b15e:	19bb      	adds	r3, r7, r6
 800b160:	9302      	str	r3, [sp, #8]
 800b162:	68ab      	ldr	r3, [r5, #8]
 800b164:	19ba      	adds	r2, r7, r6
 800b166:	4293      	cmp	r3, r2
 800b168:	da00      	bge.n	800b16c <__multiply+0x28>
 800b16a:	3101      	adds	r1, #1
 800b16c:	f7ff ff09 	bl	800af82 <_Balloc>
 800b170:	0002      	movs	r2, r0
 800b172:	19bb      	adds	r3, r7, r6
 800b174:	3214      	adds	r2, #20
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	18d3      	adds	r3, r2, r3
 800b17a:	469c      	mov	ip, r3
 800b17c:	2100      	movs	r1, #0
 800b17e:	0013      	movs	r3, r2
 800b180:	9004      	str	r0, [sp, #16]
 800b182:	4563      	cmp	r3, ip
 800b184:	d31d      	bcc.n	800b1c2 <__multiply+0x7e>
 800b186:	3514      	adds	r5, #20
 800b188:	00bf      	lsls	r7, r7, #2
 800b18a:	19eb      	adds	r3, r5, r7
 800b18c:	3414      	adds	r4, #20
 800b18e:	00b6      	lsls	r6, r6, #2
 800b190:	9305      	str	r3, [sp, #20]
 800b192:	19a3      	adds	r3, r4, r6
 800b194:	9503      	str	r5, [sp, #12]
 800b196:	9401      	str	r4, [sp, #4]
 800b198:	9307      	str	r3, [sp, #28]
 800b19a:	9b07      	ldr	r3, [sp, #28]
 800b19c:	9901      	ldr	r1, [sp, #4]
 800b19e:	4299      	cmp	r1, r3
 800b1a0:	d311      	bcc.n	800b1c6 <__multiply+0x82>
 800b1a2:	9b02      	ldr	r3, [sp, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	dd06      	ble.n	800b1b6 <__multiply+0x72>
 800b1a8:	2304      	movs	r3, #4
 800b1aa:	425b      	negs	r3, r3
 800b1ac:	449c      	add	ip, r3
 800b1ae:	4663      	mov	r3, ip
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d051      	beq.n	800b25a <__multiply+0x116>
 800b1b6:	9b04      	ldr	r3, [sp, #16]
 800b1b8:	9a02      	ldr	r2, [sp, #8]
 800b1ba:	0018      	movs	r0, r3
 800b1bc:	611a      	str	r2, [r3, #16]
 800b1be:	b009      	add	sp, #36	; 0x24
 800b1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1c2:	c302      	stmia	r3!, {r1}
 800b1c4:	e7dd      	b.n	800b182 <__multiply+0x3e>
 800b1c6:	9b01      	ldr	r3, [sp, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	b298      	uxth	r0, r3
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	d01c      	beq.n	800b20a <__multiply+0xc6>
 800b1d0:	0015      	movs	r5, r2
 800b1d2:	2600      	movs	r6, #0
 800b1d4:	9f03      	ldr	r7, [sp, #12]
 800b1d6:	cf02      	ldmia	r7!, {r1}
 800b1d8:	682c      	ldr	r4, [r5, #0]
 800b1da:	b28b      	uxth	r3, r1
 800b1dc:	4343      	muls	r3, r0
 800b1de:	0c09      	lsrs	r1, r1, #16
 800b1e0:	4341      	muls	r1, r0
 800b1e2:	b2a4      	uxth	r4, r4
 800b1e4:	191b      	adds	r3, r3, r4
 800b1e6:	199b      	adds	r3, r3, r6
 800b1e8:	000e      	movs	r6, r1
 800b1ea:	6829      	ldr	r1, [r5, #0]
 800b1ec:	9506      	str	r5, [sp, #24]
 800b1ee:	0c09      	lsrs	r1, r1, #16
 800b1f0:	1871      	adds	r1, r6, r1
 800b1f2:	0c1e      	lsrs	r6, r3, #16
 800b1f4:	1989      	adds	r1, r1, r6
 800b1f6:	0c0e      	lsrs	r6, r1, #16
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	0409      	lsls	r1, r1, #16
 800b1fc:	430b      	orrs	r3, r1
 800b1fe:	c508      	stmia	r5!, {r3}
 800b200:	9b05      	ldr	r3, [sp, #20]
 800b202:	42bb      	cmp	r3, r7
 800b204:	d8e7      	bhi.n	800b1d6 <__multiply+0x92>
 800b206:	9b06      	ldr	r3, [sp, #24]
 800b208:	605e      	str	r6, [r3, #4]
 800b20a:	9b01      	ldr	r3, [sp, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	0c1d      	lsrs	r5, r3, #16
 800b210:	d01e      	beq.n	800b250 <__multiply+0x10c>
 800b212:	0010      	movs	r0, r2
 800b214:	2700      	movs	r7, #0
 800b216:	6813      	ldr	r3, [r2, #0]
 800b218:	9e03      	ldr	r6, [sp, #12]
 800b21a:	6831      	ldr	r1, [r6, #0]
 800b21c:	6804      	ldr	r4, [r0, #0]
 800b21e:	b289      	uxth	r1, r1
 800b220:	4369      	muls	r1, r5
 800b222:	0c24      	lsrs	r4, r4, #16
 800b224:	1909      	adds	r1, r1, r4
 800b226:	19c9      	adds	r1, r1, r7
 800b228:	040f      	lsls	r7, r1, #16
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	433b      	orrs	r3, r7
 800b22e:	6003      	str	r3, [r0, #0]
 800b230:	ce80      	ldmia	r6!, {r7}
 800b232:	6843      	ldr	r3, [r0, #4]
 800b234:	0c3f      	lsrs	r7, r7, #16
 800b236:	436f      	muls	r7, r5
 800b238:	b29b      	uxth	r3, r3
 800b23a:	18fb      	adds	r3, r7, r3
 800b23c:	0c09      	lsrs	r1, r1, #16
 800b23e:	185b      	adds	r3, r3, r1
 800b240:	9905      	ldr	r1, [sp, #20]
 800b242:	9006      	str	r0, [sp, #24]
 800b244:	0c1f      	lsrs	r7, r3, #16
 800b246:	3004      	adds	r0, #4
 800b248:	42b1      	cmp	r1, r6
 800b24a:	d8e6      	bhi.n	800b21a <__multiply+0xd6>
 800b24c:	9906      	ldr	r1, [sp, #24]
 800b24e:	604b      	str	r3, [r1, #4]
 800b250:	9b01      	ldr	r3, [sp, #4]
 800b252:	3204      	adds	r2, #4
 800b254:	3304      	adds	r3, #4
 800b256:	9301      	str	r3, [sp, #4]
 800b258:	e79f      	b.n	800b19a <__multiply+0x56>
 800b25a:	9b02      	ldr	r3, [sp, #8]
 800b25c:	3b01      	subs	r3, #1
 800b25e:	9302      	str	r3, [sp, #8]
 800b260:	e79f      	b.n	800b1a2 <__multiply+0x5e>
	...

0800b264 <__pow5mult>:
 800b264:	2303      	movs	r3, #3
 800b266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b268:	4013      	ands	r3, r2
 800b26a:	0005      	movs	r5, r0
 800b26c:	000e      	movs	r6, r1
 800b26e:	0014      	movs	r4, r2
 800b270:	2b00      	cmp	r3, #0
 800b272:	d008      	beq.n	800b286 <__pow5mult+0x22>
 800b274:	4922      	ldr	r1, [pc, #136]	; (800b300 <__pow5mult+0x9c>)
 800b276:	3b01      	subs	r3, #1
 800b278:	009a      	lsls	r2, r3, #2
 800b27a:	5852      	ldr	r2, [r2, r1]
 800b27c:	2300      	movs	r3, #0
 800b27e:	0031      	movs	r1, r6
 800b280:	f7ff fed0 	bl	800b024 <__multadd>
 800b284:	0006      	movs	r6, r0
 800b286:	10a3      	asrs	r3, r4, #2
 800b288:	9301      	str	r3, [sp, #4]
 800b28a:	d036      	beq.n	800b2fa <__pow5mult+0x96>
 800b28c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800b28e:	2c00      	cmp	r4, #0
 800b290:	d107      	bne.n	800b2a2 <__pow5mult+0x3e>
 800b292:	2010      	movs	r0, #16
 800b294:	f7ff fe5e 	bl	800af54 <malloc>
 800b298:	6268      	str	r0, [r5, #36]	; 0x24
 800b29a:	6044      	str	r4, [r0, #4]
 800b29c:	6084      	str	r4, [r0, #8]
 800b29e:	6004      	str	r4, [r0, #0]
 800b2a0:	60c4      	str	r4, [r0, #12]
 800b2a2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800b2a4:	68bc      	ldr	r4, [r7, #8]
 800b2a6:	2c00      	cmp	r4, #0
 800b2a8:	d107      	bne.n	800b2ba <__pow5mult+0x56>
 800b2aa:	4916      	ldr	r1, [pc, #88]	; (800b304 <__pow5mult+0xa0>)
 800b2ac:	0028      	movs	r0, r5
 800b2ae:	f7ff ff40 	bl	800b132 <__i2b>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	0004      	movs	r4, r0
 800b2b6:	60b8      	str	r0, [r7, #8]
 800b2b8:	6003      	str	r3, [r0, #0]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	9b01      	ldr	r3, [sp, #4]
 800b2be:	4213      	tst	r3, r2
 800b2c0:	d00a      	beq.n	800b2d8 <__pow5mult+0x74>
 800b2c2:	0031      	movs	r1, r6
 800b2c4:	0022      	movs	r2, r4
 800b2c6:	0028      	movs	r0, r5
 800b2c8:	f7ff ff3c 	bl	800b144 <__multiply>
 800b2cc:	0007      	movs	r7, r0
 800b2ce:	0031      	movs	r1, r6
 800b2d0:	0028      	movs	r0, r5
 800b2d2:	f7ff fe8e 	bl	800aff2 <_Bfree>
 800b2d6:	003e      	movs	r6, r7
 800b2d8:	9b01      	ldr	r3, [sp, #4]
 800b2da:	105b      	asrs	r3, r3, #1
 800b2dc:	9301      	str	r3, [sp, #4]
 800b2de:	d00c      	beq.n	800b2fa <__pow5mult+0x96>
 800b2e0:	6820      	ldr	r0, [r4, #0]
 800b2e2:	2800      	cmp	r0, #0
 800b2e4:	d107      	bne.n	800b2f6 <__pow5mult+0x92>
 800b2e6:	0022      	movs	r2, r4
 800b2e8:	0021      	movs	r1, r4
 800b2ea:	0028      	movs	r0, r5
 800b2ec:	f7ff ff2a 	bl	800b144 <__multiply>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	6020      	str	r0, [r4, #0]
 800b2f4:	6003      	str	r3, [r0, #0]
 800b2f6:	0004      	movs	r4, r0
 800b2f8:	e7df      	b.n	800b2ba <__pow5mult+0x56>
 800b2fa:	0030      	movs	r0, r6
 800b2fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b2fe:	46c0      	nop			; (mov r8, r8)
 800b300:	0800bcb8 	.word	0x0800bcb8
 800b304:	00000271 	.word	0x00000271

0800b308 <__lshift>:
 800b308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b30a:	000d      	movs	r5, r1
 800b30c:	0017      	movs	r7, r2
 800b30e:	692b      	ldr	r3, [r5, #16]
 800b310:	1154      	asrs	r4, r2, #5
 800b312:	b085      	sub	sp, #20
 800b314:	18e3      	adds	r3, r4, r3
 800b316:	9301      	str	r3, [sp, #4]
 800b318:	3301      	adds	r3, #1
 800b31a:	9300      	str	r3, [sp, #0]
 800b31c:	6849      	ldr	r1, [r1, #4]
 800b31e:	68ab      	ldr	r3, [r5, #8]
 800b320:	9002      	str	r0, [sp, #8]
 800b322:	9a00      	ldr	r2, [sp, #0]
 800b324:	4293      	cmp	r3, r2
 800b326:	db35      	blt.n	800b394 <__lshift+0x8c>
 800b328:	9802      	ldr	r0, [sp, #8]
 800b32a:	f7ff fe2a 	bl	800af82 <_Balloc>
 800b32e:	2300      	movs	r3, #0
 800b330:	0002      	movs	r2, r0
 800b332:	0006      	movs	r6, r0
 800b334:	0019      	movs	r1, r3
 800b336:	3214      	adds	r2, #20
 800b338:	42a3      	cmp	r3, r4
 800b33a:	db2e      	blt.n	800b39a <__lshift+0x92>
 800b33c:	43e3      	mvns	r3, r4
 800b33e:	17db      	asrs	r3, r3, #31
 800b340:	401c      	ands	r4, r3
 800b342:	002b      	movs	r3, r5
 800b344:	00a4      	lsls	r4, r4, #2
 800b346:	1914      	adds	r4, r2, r4
 800b348:	692a      	ldr	r2, [r5, #16]
 800b34a:	3314      	adds	r3, #20
 800b34c:	0092      	lsls	r2, r2, #2
 800b34e:	189a      	adds	r2, r3, r2
 800b350:	4694      	mov	ip, r2
 800b352:	221f      	movs	r2, #31
 800b354:	4017      	ands	r7, r2
 800b356:	d024      	beq.n	800b3a2 <__lshift+0x9a>
 800b358:	3201      	adds	r2, #1
 800b35a:	1bd2      	subs	r2, r2, r7
 800b35c:	9203      	str	r2, [sp, #12]
 800b35e:	2200      	movs	r2, #0
 800b360:	6819      	ldr	r1, [r3, #0]
 800b362:	0020      	movs	r0, r4
 800b364:	40b9      	lsls	r1, r7
 800b366:	430a      	orrs	r2, r1
 800b368:	c404      	stmia	r4!, {r2}
 800b36a:	cb04      	ldmia	r3!, {r2}
 800b36c:	9903      	ldr	r1, [sp, #12]
 800b36e:	40ca      	lsrs	r2, r1
 800b370:	459c      	cmp	ip, r3
 800b372:	d8f5      	bhi.n	800b360 <__lshift+0x58>
 800b374:	6042      	str	r2, [r0, #4]
 800b376:	2a00      	cmp	r2, #0
 800b378:	d002      	beq.n	800b380 <__lshift+0x78>
 800b37a:	9b01      	ldr	r3, [sp, #4]
 800b37c:	3302      	adds	r3, #2
 800b37e:	9300      	str	r3, [sp, #0]
 800b380:	9b00      	ldr	r3, [sp, #0]
 800b382:	9802      	ldr	r0, [sp, #8]
 800b384:	3b01      	subs	r3, #1
 800b386:	6133      	str	r3, [r6, #16]
 800b388:	0029      	movs	r1, r5
 800b38a:	f7ff fe32 	bl	800aff2 <_Bfree>
 800b38e:	0030      	movs	r0, r6
 800b390:	b005      	add	sp, #20
 800b392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b394:	3101      	adds	r1, #1
 800b396:	005b      	lsls	r3, r3, #1
 800b398:	e7c3      	b.n	800b322 <__lshift+0x1a>
 800b39a:	0098      	lsls	r0, r3, #2
 800b39c:	5011      	str	r1, [r2, r0]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	e7ca      	b.n	800b338 <__lshift+0x30>
 800b3a2:	cb04      	ldmia	r3!, {r2}
 800b3a4:	c404      	stmia	r4!, {r2}
 800b3a6:	459c      	cmp	ip, r3
 800b3a8:	d8fb      	bhi.n	800b3a2 <__lshift+0x9a>
 800b3aa:	e7e9      	b.n	800b380 <__lshift+0x78>

0800b3ac <__mcmp>:
 800b3ac:	690a      	ldr	r2, [r1, #16]
 800b3ae:	6903      	ldr	r3, [r0, #16]
 800b3b0:	b530      	push	{r4, r5, lr}
 800b3b2:	1a9b      	subs	r3, r3, r2
 800b3b4:	d10d      	bne.n	800b3d2 <__mcmp+0x26>
 800b3b6:	0092      	lsls	r2, r2, #2
 800b3b8:	3014      	adds	r0, #20
 800b3ba:	3114      	adds	r1, #20
 800b3bc:	1884      	adds	r4, r0, r2
 800b3be:	1889      	adds	r1, r1, r2
 800b3c0:	3c04      	subs	r4, #4
 800b3c2:	3904      	subs	r1, #4
 800b3c4:	6825      	ldr	r5, [r4, #0]
 800b3c6:	680a      	ldr	r2, [r1, #0]
 800b3c8:	4295      	cmp	r5, r2
 800b3ca:	d004      	beq.n	800b3d6 <__mcmp+0x2a>
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	4295      	cmp	r5, r2
 800b3d0:	d304      	bcc.n	800b3dc <__mcmp+0x30>
 800b3d2:	0018      	movs	r0, r3
 800b3d4:	bd30      	pop	{r4, r5, pc}
 800b3d6:	42a0      	cmp	r0, r4
 800b3d8:	d3f2      	bcc.n	800b3c0 <__mcmp+0x14>
 800b3da:	e7fa      	b.n	800b3d2 <__mcmp+0x26>
 800b3dc:	425b      	negs	r3, r3
 800b3de:	e7f8      	b.n	800b3d2 <__mcmp+0x26>

0800b3e0 <__mdiff>:
 800b3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3e2:	000d      	movs	r5, r1
 800b3e4:	b085      	sub	sp, #20
 800b3e6:	0007      	movs	r7, r0
 800b3e8:	0011      	movs	r1, r2
 800b3ea:	0028      	movs	r0, r5
 800b3ec:	0014      	movs	r4, r2
 800b3ee:	f7ff ffdd 	bl	800b3ac <__mcmp>
 800b3f2:	1e06      	subs	r6, r0, #0
 800b3f4:	d108      	bne.n	800b408 <__mdiff+0x28>
 800b3f6:	0001      	movs	r1, r0
 800b3f8:	0038      	movs	r0, r7
 800b3fa:	f7ff fdc2 	bl	800af82 <_Balloc>
 800b3fe:	2301      	movs	r3, #1
 800b400:	6146      	str	r6, [r0, #20]
 800b402:	6103      	str	r3, [r0, #16]
 800b404:	b005      	add	sp, #20
 800b406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b408:	2301      	movs	r3, #1
 800b40a:	9301      	str	r3, [sp, #4]
 800b40c:	2800      	cmp	r0, #0
 800b40e:	db04      	blt.n	800b41a <__mdiff+0x3a>
 800b410:	0023      	movs	r3, r4
 800b412:	002c      	movs	r4, r5
 800b414:	001d      	movs	r5, r3
 800b416:	2300      	movs	r3, #0
 800b418:	9301      	str	r3, [sp, #4]
 800b41a:	6861      	ldr	r1, [r4, #4]
 800b41c:	0038      	movs	r0, r7
 800b41e:	f7ff fdb0 	bl	800af82 <_Balloc>
 800b422:	002f      	movs	r7, r5
 800b424:	2200      	movs	r2, #0
 800b426:	9b01      	ldr	r3, [sp, #4]
 800b428:	6926      	ldr	r6, [r4, #16]
 800b42a:	60c3      	str	r3, [r0, #12]
 800b42c:	3414      	adds	r4, #20
 800b42e:	00b3      	lsls	r3, r6, #2
 800b430:	18e3      	adds	r3, r4, r3
 800b432:	9302      	str	r3, [sp, #8]
 800b434:	692b      	ldr	r3, [r5, #16]
 800b436:	3714      	adds	r7, #20
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	18fb      	adds	r3, r7, r3
 800b43c:	9303      	str	r3, [sp, #12]
 800b43e:	0003      	movs	r3, r0
 800b440:	4694      	mov	ip, r2
 800b442:	3314      	adds	r3, #20
 800b444:	cc20      	ldmia	r4!, {r5}
 800b446:	cf04      	ldmia	r7!, {r2}
 800b448:	9201      	str	r2, [sp, #4]
 800b44a:	b2aa      	uxth	r2, r5
 800b44c:	4494      	add	ip, r2
 800b44e:	466a      	mov	r2, sp
 800b450:	4661      	mov	r1, ip
 800b452:	8892      	ldrh	r2, [r2, #4]
 800b454:	0c2d      	lsrs	r5, r5, #16
 800b456:	1a8a      	subs	r2, r1, r2
 800b458:	9901      	ldr	r1, [sp, #4]
 800b45a:	0c09      	lsrs	r1, r1, #16
 800b45c:	1a69      	subs	r1, r5, r1
 800b45e:	1415      	asrs	r5, r2, #16
 800b460:	1949      	adds	r1, r1, r5
 800b462:	140d      	asrs	r5, r1, #16
 800b464:	b292      	uxth	r2, r2
 800b466:	0409      	lsls	r1, r1, #16
 800b468:	430a      	orrs	r2, r1
 800b46a:	601a      	str	r2, [r3, #0]
 800b46c:	9a03      	ldr	r2, [sp, #12]
 800b46e:	46ac      	mov	ip, r5
 800b470:	3304      	adds	r3, #4
 800b472:	42ba      	cmp	r2, r7
 800b474:	d8e6      	bhi.n	800b444 <__mdiff+0x64>
 800b476:	9902      	ldr	r1, [sp, #8]
 800b478:	001a      	movs	r2, r3
 800b47a:	428c      	cmp	r4, r1
 800b47c:	d305      	bcc.n	800b48a <__mdiff+0xaa>
 800b47e:	3a04      	subs	r2, #4
 800b480:	6813      	ldr	r3, [r2, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00e      	beq.n	800b4a4 <__mdiff+0xc4>
 800b486:	6106      	str	r6, [r0, #16]
 800b488:	e7bc      	b.n	800b404 <__mdiff+0x24>
 800b48a:	cc04      	ldmia	r4!, {r2}
 800b48c:	b291      	uxth	r1, r2
 800b48e:	4461      	add	r1, ip
 800b490:	140d      	asrs	r5, r1, #16
 800b492:	0c12      	lsrs	r2, r2, #16
 800b494:	1952      	adds	r2, r2, r5
 800b496:	1415      	asrs	r5, r2, #16
 800b498:	b289      	uxth	r1, r1
 800b49a:	0412      	lsls	r2, r2, #16
 800b49c:	430a      	orrs	r2, r1
 800b49e:	46ac      	mov	ip, r5
 800b4a0:	c304      	stmia	r3!, {r2}
 800b4a2:	e7e8      	b.n	800b476 <__mdiff+0x96>
 800b4a4:	3e01      	subs	r6, #1
 800b4a6:	e7ea      	b.n	800b47e <__mdiff+0x9e>

0800b4a8 <__d2b>:
 800b4a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4aa:	001d      	movs	r5, r3
 800b4ac:	2101      	movs	r1, #1
 800b4ae:	0014      	movs	r4, r2
 800b4b0:	9f08      	ldr	r7, [sp, #32]
 800b4b2:	f7ff fd66 	bl	800af82 <_Balloc>
 800b4b6:	032b      	lsls	r3, r5, #12
 800b4b8:	006d      	lsls	r5, r5, #1
 800b4ba:	0006      	movs	r6, r0
 800b4bc:	0b1b      	lsrs	r3, r3, #12
 800b4be:	0d6d      	lsrs	r5, r5, #21
 800b4c0:	d124      	bne.n	800b50c <__d2b+0x64>
 800b4c2:	9301      	str	r3, [sp, #4]
 800b4c4:	2c00      	cmp	r4, #0
 800b4c6:	d027      	beq.n	800b518 <__d2b+0x70>
 800b4c8:	4668      	mov	r0, sp
 800b4ca:	9400      	str	r4, [sp, #0]
 800b4cc:	f7ff fe02 	bl	800b0d4 <__lo0bits>
 800b4d0:	9c00      	ldr	r4, [sp, #0]
 800b4d2:	2800      	cmp	r0, #0
 800b4d4:	d01e      	beq.n	800b514 <__d2b+0x6c>
 800b4d6:	9b01      	ldr	r3, [sp, #4]
 800b4d8:	2120      	movs	r1, #32
 800b4da:	001a      	movs	r2, r3
 800b4dc:	1a09      	subs	r1, r1, r0
 800b4de:	408a      	lsls	r2, r1
 800b4e0:	40c3      	lsrs	r3, r0
 800b4e2:	4322      	orrs	r2, r4
 800b4e4:	6172      	str	r2, [r6, #20]
 800b4e6:	9301      	str	r3, [sp, #4]
 800b4e8:	9c01      	ldr	r4, [sp, #4]
 800b4ea:	61b4      	str	r4, [r6, #24]
 800b4ec:	1e63      	subs	r3, r4, #1
 800b4ee:	419c      	sbcs	r4, r3
 800b4f0:	3401      	adds	r4, #1
 800b4f2:	6134      	str	r4, [r6, #16]
 800b4f4:	2d00      	cmp	r5, #0
 800b4f6:	d018      	beq.n	800b52a <__d2b+0x82>
 800b4f8:	4b12      	ldr	r3, [pc, #72]	; (800b544 <__d2b+0x9c>)
 800b4fa:	18ed      	adds	r5, r5, r3
 800b4fc:	2335      	movs	r3, #53	; 0x35
 800b4fe:	182d      	adds	r5, r5, r0
 800b500:	603d      	str	r5, [r7, #0]
 800b502:	1a18      	subs	r0, r3, r0
 800b504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b506:	6018      	str	r0, [r3, #0]
 800b508:	0030      	movs	r0, r6
 800b50a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b50c:	2280      	movs	r2, #128	; 0x80
 800b50e:	0352      	lsls	r2, r2, #13
 800b510:	4313      	orrs	r3, r2
 800b512:	e7d6      	b.n	800b4c2 <__d2b+0x1a>
 800b514:	6174      	str	r4, [r6, #20]
 800b516:	e7e7      	b.n	800b4e8 <__d2b+0x40>
 800b518:	a801      	add	r0, sp, #4
 800b51a:	f7ff fddb 	bl	800b0d4 <__lo0bits>
 800b51e:	2401      	movs	r4, #1
 800b520:	9b01      	ldr	r3, [sp, #4]
 800b522:	6134      	str	r4, [r6, #16]
 800b524:	6173      	str	r3, [r6, #20]
 800b526:	3020      	adds	r0, #32
 800b528:	e7e4      	b.n	800b4f4 <__d2b+0x4c>
 800b52a:	4b07      	ldr	r3, [pc, #28]	; (800b548 <__d2b+0xa0>)
 800b52c:	18c0      	adds	r0, r0, r3
 800b52e:	4b07      	ldr	r3, [pc, #28]	; (800b54c <__d2b+0xa4>)
 800b530:	6038      	str	r0, [r7, #0]
 800b532:	18e3      	adds	r3, r4, r3
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	18f3      	adds	r3, r6, r3
 800b538:	6958      	ldr	r0, [r3, #20]
 800b53a:	f7ff fdb1 	bl	800b0a0 <__hi0bits>
 800b53e:	0164      	lsls	r4, r4, #5
 800b540:	1a20      	subs	r0, r4, r0
 800b542:	e7df      	b.n	800b504 <__d2b+0x5c>
 800b544:	fffffbcd 	.word	0xfffffbcd
 800b548:	fffffbce 	.word	0xfffffbce
 800b54c:	3fffffff 	.word	0x3fffffff

0800b550 <_calloc_r>:
 800b550:	434a      	muls	r2, r1
 800b552:	b570      	push	{r4, r5, r6, lr}
 800b554:	0011      	movs	r1, r2
 800b556:	0014      	movs	r4, r2
 800b558:	f7fd fec4 	bl	80092e4 <_malloc_r>
 800b55c:	1e05      	subs	r5, r0, #0
 800b55e:	d003      	beq.n	800b568 <_calloc_r+0x18>
 800b560:	0022      	movs	r2, r4
 800b562:	2100      	movs	r1, #0
 800b564:	f7fd feb5 	bl	80092d2 <memset>
 800b568:	0028      	movs	r0, r5
 800b56a:	bd70      	pop	{r4, r5, r6, pc}

0800b56c <_free_r>:
 800b56c:	b570      	push	{r4, r5, r6, lr}
 800b56e:	0005      	movs	r5, r0
 800b570:	2900      	cmp	r1, #0
 800b572:	d010      	beq.n	800b596 <_free_r+0x2a>
 800b574:	1f0c      	subs	r4, r1, #4
 800b576:	6823      	ldr	r3, [r4, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	da00      	bge.n	800b57e <_free_r+0x12>
 800b57c:	18e4      	adds	r4, r4, r3
 800b57e:	0028      	movs	r0, r5
 800b580:	f7ff fcfd 	bl	800af7e <__malloc_lock>
 800b584:	4a1d      	ldr	r2, [pc, #116]	; (800b5fc <_free_r+0x90>)
 800b586:	6813      	ldr	r3, [r2, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d105      	bne.n	800b598 <_free_r+0x2c>
 800b58c:	6063      	str	r3, [r4, #4]
 800b58e:	6014      	str	r4, [r2, #0]
 800b590:	0028      	movs	r0, r5
 800b592:	f7ff fcf5 	bl	800af80 <__malloc_unlock>
 800b596:	bd70      	pop	{r4, r5, r6, pc}
 800b598:	42a3      	cmp	r3, r4
 800b59a:	d909      	bls.n	800b5b0 <_free_r+0x44>
 800b59c:	6821      	ldr	r1, [r4, #0]
 800b59e:	1860      	adds	r0, r4, r1
 800b5a0:	4283      	cmp	r3, r0
 800b5a2:	d1f3      	bne.n	800b58c <_free_r+0x20>
 800b5a4:	6818      	ldr	r0, [r3, #0]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	1841      	adds	r1, r0, r1
 800b5aa:	6021      	str	r1, [r4, #0]
 800b5ac:	e7ee      	b.n	800b58c <_free_r+0x20>
 800b5ae:	0013      	movs	r3, r2
 800b5b0:	685a      	ldr	r2, [r3, #4]
 800b5b2:	2a00      	cmp	r2, #0
 800b5b4:	d001      	beq.n	800b5ba <_free_r+0x4e>
 800b5b6:	42a2      	cmp	r2, r4
 800b5b8:	d9f9      	bls.n	800b5ae <_free_r+0x42>
 800b5ba:	6819      	ldr	r1, [r3, #0]
 800b5bc:	1858      	adds	r0, r3, r1
 800b5be:	42a0      	cmp	r0, r4
 800b5c0:	d10b      	bne.n	800b5da <_free_r+0x6e>
 800b5c2:	6820      	ldr	r0, [r4, #0]
 800b5c4:	1809      	adds	r1, r1, r0
 800b5c6:	1858      	adds	r0, r3, r1
 800b5c8:	6019      	str	r1, [r3, #0]
 800b5ca:	4282      	cmp	r2, r0
 800b5cc:	d1e0      	bne.n	800b590 <_free_r+0x24>
 800b5ce:	6810      	ldr	r0, [r2, #0]
 800b5d0:	6852      	ldr	r2, [r2, #4]
 800b5d2:	1841      	adds	r1, r0, r1
 800b5d4:	6019      	str	r1, [r3, #0]
 800b5d6:	605a      	str	r2, [r3, #4]
 800b5d8:	e7da      	b.n	800b590 <_free_r+0x24>
 800b5da:	42a0      	cmp	r0, r4
 800b5dc:	d902      	bls.n	800b5e4 <_free_r+0x78>
 800b5de:	230c      	movs	r3, #12
 800b5e0:	602b      	str	r3, [r5, #0]
 800b5e2:	e7d5      	b.n	800b590 <_free_r+0x24>
 800b5e4:	6821      	ldr	r1, [r4, #0]
 800b5e6:	1860      	adds	r0, r4, r1
 800b5e8:	4282      	cmp	r2, r0
 800b5ea:	d103      	bne.n	800b5f4 <_free_r+0x88>
 800b5ec:	6810      	ldr	r0, [r2, #0]
 800b5ee:	6852      	ldr	r2, [r2, #4]
 800b5f0:	1841      	adds	r1, r0, r1
 800b5f2:	6021      	str	r1, [r4, #0]
 800b5f4:	6062      	str	r2, [r4, #4]
 800b5f6:	605c      	str	r4, [r3, #4]
 800b5f8:	e7ca      	b.n	800b590 <_free_r+0x24>
 800b5fa:	46c0      	nop			; (mov r8, r8)
 800b5fc:	200004c8 	.word	0x200004c8

0800b600 <__sfputc_r>:
 800b600:	6893      	ldr	r3, [r2, #8]
 800b602:	b510      	push	{r4, lr}
 800b604:	3b01      	subs	r3, #1
 800b606:	6093      	str	r3, [r2, #8]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	da04      	bge.n	800b616 <__sfputc_r+0x16>
 800b60c:	6994      	ldr	r4, [r2, #24]
 800b60e:	42a3      	cmp	r3, r4
 800b610:	db07      	blt.n	800b622 <__sfputc_r+0x22>
 800b612:	290a      	cmp	r1, #10
 800b614:	d005      	beq.n	800b622 <__sfputc_r+0x22>
 800b616:	6813      	ldr	r3, [r2, #0]
 800b618:	1c58      	adds	r0, r3, #1
 800b61a:	6010      	str	r0, [r2, #0]
 800b61c:	7019      	strb	r1, [r3, #0]
 800b61e:	0008      	movs	r0, r1
 800b620:	bd10      	pop	{r4, pc}
 800b622:	f7fe fbfd 	bl	8009e20 <__swbuf_r>
 800b626:	0001      	movs	r1, r0
 800b628:	e7f9      	b.n	800b61e <__sfputc_r+0x1e>

0800b62a <__sfputs_r>:
 800b62a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b62c:	0006      	movs	r6, r0
 800b62e:	000f      	movs	r7, r1
 800b630:	0014      	movs	r4, r2
 800b632:	18d5      	adds	r5, r2, r3
 800b634:	42ac      	cmp	r4, r5
 800b636:	d101      	bne.n	800b63c <__sfputs_r+0x12>
 800b638:	2000      	movs	r0, #0
 800b63a:	e007      	b.n	800b64c <__sfputs_r+0x22>
 800b63c:	7821      	ldrb	r1, [r4, #0]
 800b63e:	003a      	movs	r2, r7
 800b640:	0030      	movs	r0, r6
 800b642:	f7ff ffdd 	bl	800b600 <__sfputc_r>
 800b646:	3401      	adds	r4, #1
 800b648:	1c43      	adds	r3, r0, #1
 800b64a:	d1f3      	bne.n	800b634 <__sfputs_r+0xa>
 800b64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b650 <_vfiprintf_r>:
 800b650:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b652:	b0a1      	sub	sp, #132	; 0x84
 800b654:	9003      	str	r0, [sp, #12]
 800b656:	000f      	movs	r7, r1
 800b658:	0016      	movs	r6, r2
 800b65a:	001d      	movs	r5, r3
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d005      	beq.n	800b66c <_vfiprintf_r+0x1c>
 800b660:	6983      	ldr	r3, [r0, #24]
 800b662:	9305      	str	r3, [sp, #20]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d101      	bne.n	800b66c <_vfiprintf_r+0x1c>
 800b668:	f7fd fd72 	bl	8009150 <__sinit>
 800b66c:	4b7b      	ldr	r3, [pc, #492]	; (800b85c <_vfiprintf_r+0x20c>)
 800b66e:	429f      	cmp	r7, r3
 800b670:	d15c      	bne.n	800b72c <_vfiprintf_r+0xdc>
 800b672:	9b03      	ldr	r3, [sp, #12]
 800b674:	685f      	ldr	r7, [r3, #4]
 800b676:	89bb      	ldrh	r3, [r7, #12]
 800b678:	071b      	lsls	r3, r3, #28
 800b67a:	d563      	bpl.n	800b744 <_vfiprintf_r+0xf4>
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d060      	beq.n	800b744 <_vfiprintf_r+0xf4>
 800b682:	2300      	movs	r3, #0
 800b684:	ac08      	add	r4, sp, #32
 800b686:	6163      	str	r3, [r4, #20]
 800b688:	3320      	adds	r3, #32
 800b68a:	7663      	strb	r3, [r4, #25]
 800b68c:	3310      	adds	r3, #16
 800b68e:	76a3      	strb	r3, [r4, #26]
 800b690:	9507      	str	r5, [sp, #28]
 800b692:	0035      	movs	r5, r6
 800b694:	782b      	ldrb	r3, [r5, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d001      	beq.n	800b69e <_vfiprintf_r+0x4e>
 800b69a:	2b25      	cmp	r3, #37	; 0x25
 800b69c:	d15c      	bne.n	800b758 <_vfiprintf_r+0x108>
 800b69e:	1bab      	subs	r3, r5, r6
 800b6a0:	9305      	str	r3, [sp, #20]
 800b6a2:	d00c      	beq.n	800b6be <_vfiprintf_r+0x6e>
 800b6a4:	0032      	movs	r2, r6
 800b6a6:	0039      	movs	r1, r7
 800b6a8:	9803      	ldr	r0, [sp, #12]
 800b6aa:	f7ff ffbe 	bl	800b62a <__sfputs_r>
 800b6ae:	1c43      	adds	r3, r0, #1
 800b6b0:	d100      	bne.n	800b6b4 <_vfiprintf_r+0x64>
 800b6b2:	e0c4      	b.n	800b83e <_vfiprintf_r+0x1ee>
 800b6b4:	6962      	ldr	r2, [r4, #20]
 800b6b6:	9b05      	ldr	r3, [sp, #20]
 800b6b8:	4694      	mov	ip, r2
 800b6ba:	4463      	add	r3, ip
 800b6bc:	6163      	str	r3, [r4, #20]
 800b6be:	782b      	ldrb	r3, [r5, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d100      	bne.n	800b6c6 <_vfiprintf_r+0x76>
 800b6c4:	e0bb      	b.n	800b83e <_vfiprintf_r+0x1ee>
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	4252      	negs	r2, r2
 800b6cc:	6062      	str	r2, [r4, #4]
 800b6ce:	a904      	add	r1, sp, #16
 800b6d0:	3254      	adds	r2, #84	; 0x54
 800b6d2:	1852      	adds	r2, r2, r1
 800b6d4:	1c6e      	adds	r6, r5, #1
 800b6d6:	6023      	str	r3, [r4, #0]
 800b6d8:	60e3      	str	r3, [r4, #12]
 800b6da:	60a3      	str	r3, [r4, #8]
 800b6dc:	7013      	strb	r3, [r2, #0]
 800b6de:	65a3      	str	r3, [r4, #88]	; 0x58
 800b6e0:	7831      	ldrb	r1, [r6, #0]
 800b6e2:	2205      	movs	r2, #5
 800b6e4:	485e      	ldr	r0, [pc, #376]	; (800b860 <_vfiprintf_r+0x210>)
 800b6e6:	f7ff fc3f 	bl	800af68 <memchr>
 800b6ea:	1c75      	adds	r5, r6, #1
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	d135      	bne.n	800b75c <_vfiprintf_r+0x10c>
 800b6f0:	6822      	ldr	r2, [r4, #0]
 800b6f2:	06d3      	lsls	r3, r2, #27
 800b6f4:	d504      	bpl.n	800b700 <_vfiprintf_r+0xb0>
 800b6f6:	2353      	movs	r3, #83	; 0x53
 800b6f8:	a904      	add	r1, sp, #16
 800b6fa:	185b      	adds	r3, r3, r1
 800b6fc:	2120      	movs	r1, #32
 800b6fe:	7019      	strb	r1, [r3, #0]
 800b700:	0713      	lsls	r3, r2, #28
 800b702:	d504      	bpl.n	800b70e <_vfiprintf_r+0xbe>
 800b704:	2353      	movs	r3, #83	; 0x53
 800b706:	a904      	add	r1, sp, #16
 800b708:	185b      	adds	r3, r3, r1
 800b70a:	212b      	movs	r1, #43	; 0x2b
 800b70c:	7019      	strb	r1, [r3, #0]
 800b70e:	7833      	ldrb	r3, [r6, #0]
 800b710:	2b2a      	cmp	r3, #42	; 0x2a
 800b712:	d02c      	beq.n	800b76e <_vfiprintf_r+0x11e>
 800b714:	0035      	movs	r5, r6
 800b716:	2100      	movs	r1, #0
 800b718:	200a      	movs	r0, #10
 800b71a:	68e3      	ldr	r3, [r4, #12]
 800b71c:	782a      	ldrb	r2, [r5, #0]
 800b71e:	1c6e      	adds	r6, r5, #1
 800b720:	3a30      	subs	r2, #48	; 0x30
 800b722:	2a09      	cmp	r2, #9
 800b724:	d964      	bls.n	800b7f0 <_vfiprintf_r+0x1a0>
 800b726:	2900      	cmp	r1, #0
 800b728:	d02e      	beq.n	800b788 <_vfiprintf_r+0x138>
 800b72a:	e026      	b.n	800b77a <_vfiprintf_r+0x12a>
 800b72c:	4b4d      	ldr	r3, [pc, #308]	; (800b864 <_vfiprintf_r+0x214>)
 800b72e:	429f      	cmp	r7, r3
 800b730:	d102      	bne.n	800b738 <_vfiprintf_r+0xe8>
 800b732:	9b03      	ldr	r3, [sp, #12]
 800b734:	689f      	ldr	r7, [r3, #8]
 800b736:	e79e      	b.n	800b676 <_vfiprintf_r+0x26>
 800b738:	4b4b      	ldr	r3, [pc, #300]	; (800b868 <_vfiprintf_r+0x218>)
 800b73a:	429f      	cmp	r7, r3
 800b73c:	d19b      	bne.n	800b676 <_vfiprintf_r+0x26>
 800b73e:	9b03      	ldr	r3, [sp, #12]
 800b740:	68df      	ldr	r7, [r3, #12]
 800b742:	e798      	b.n	800b676 <_vfiprintf_r+0x26>
 800b744:	0039      	movs	r1, r7
 800b746:	9803      	ldr	r0, [sp, #12]
 800b748:	f7fe fbd4 	bl	8009ef4 <__swsetup_r>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	d098      	beq.n	800b682 <_vfiprintf_r+0x32>
 800b750:	2001      	movs	r0, #1
 800b752:	4240      	negs	r0, r0
 800b754:	b021      	add	sp, #132	; 0x84
 800b756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b758:	3501      	adds	r5, #1
 800b75a:	e79b      	b.n	800b694 <_vfiprintf_r+0x44>
 800b75c:	4b40      	ldr	r3, [pc, #256]	; (800b860 <_vfiprintf_r+0x210>)
 800b75e:	6822      	ldr	r2, [r4, #0]
 800b760:	1ac0      	subs	r0, r0, r3
 800b762:	2301      	movs	r3, #1
 800b764:	4083      	lsls	r3, r0
 800b766:	4313      	orrs	r3, r2
 800b768:	6023      	str	r3, [r4, #0]
 800b76a:	002e      	movs	r6, r5
 800b76c:	e7b8      	b.n	800b6e0 <_vfiprintf_r+0x90>
 800b76e:	9b07      	ldr	r3, [sp, #28]
 800b770:	1d19      	adds	r1, r3, #4
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	9107      	str	r1, [sp, #28]
 800b776:	2b00      	cmp	r3, #0
 800b778:	db01      	blt.n	800b77e <_vfiprintf_r+0x12e>
 800b77a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b77c:	e004      	b.n	800b788 <_vfiprintf_r+0x138>
 800b77e:	425b      	negs	r3, r3
 800b780:	60e3      	str	r3, [r4, #12]
 800b782:	2302      	movs	r3, #2
 800b784:	4313      	orrs	r3, r2
 800b786:	6023      	str	r3, [r4, #0]
 800b788:	782b      	ldrb	r3, [r5, #0]
 800b78a:	2b2e      	cmp	r3, #46	; 0x2e
 800b78c:	d10a      	bne.n	800b7a4 <_vfiprintf_r+0x154>
 800b78e:	786b      	ldrb	r3, [r5, #1]
 800b790:	2b2a      	cmp	r3, #42	; 0x2a
 800b792:	d135      	bne.n	800b800 <_vfiprintf_r+0x1b0>
 800b794:	9b07      	ldr	r3, [sp, #28]
 800b796:	3502      	adds	r5, #2
 800b798:	1d1a      	adds	r2, r3, #4
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	9207      	str	r2, [sp, #28]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	db2b      	blt.n	800b7fa <_vfiprintf_r+0x1aa>
 800b7a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b7a4:	4e31      	ldr	r6, [pc, #196]	; (800b86c <_vfiprintf_r+0x21c>)
 800b7a6:	7829      	ldrb	r1, [r5, #0]
 800b7a8:	2203      	movs	r2, #3
 800b7aa:	0030      	movs	r0, r6
 800b7ac:	f7ff fbdc 	bl	800af68 <memchr>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	d006      	beq.n	800b7c2 <_vfiprintf_r+0x172>
 800b7b4:	2340      	movs	r3, #64	; 0x40
 800b7b6:	1b80      	subs	r0, r0, r6
 800b7b8:	4083      	lsls	r3, r0
 800b7ba:	6822      	ldr	r2, [r4, #0]
 800b7bc:	3501      	adds	r5, #1
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	6023      	str	r3, [r4, #0]
 800b7c2:	7829      	ldrb	r1, [r5, #0]
 800b7c4:	2206      	movs	r2, #6
 800b7c6:	482a      	ldr	r0, [pc, #168]	; (800b870 <_vfiprintf_r+0x220>)
 800b7c8:	1c6e      	adds	r6, r5, #1
 800b7ca:	7621      	strb	r1, [r4, #24]
 800b7cc:	f7ff fbcc 	bl	800af68 <memchr>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	d03a      	beq.n	800b84a <_vfiprintf_r+0x1fa>
 800b7d4:	4b27      	ldr	r3, [pc, #156]	; (800b874 <_vfiprintf_r+0x224>)
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d125      	bne.n	800b826 <_vfiprintf_r+0x1d6>
 800b7da:	2207      	movs	r2, #7
 800b7dc:	9b07      	ldr	r3, [sp, #28]
 800b7de:	3307      	adds	r3, #7
 800b7e0:	4393      	bics	r3, r2
 800b7e2:	3308      	adds	r3, #8
 800b7e4:	9307      	str	r3, [sp, #28]
 800b7e6:	6963      	ldr	r3, [r4, #20]
 800b7e8:	9a04      	ldr	r2, [sp, #16]
 800b7ea:	189b      	adds	r3, r3, r2
 800b7ec:	6163      	str	r3, [r4, #20]
 800b7ee:	e750      	b.n	800b692 <_vfiprintf_r+0x42>
 800b7f0:	4343      	muls	r3, r0
 800b7f2:	2101      	movs	r1, #1
 800b7f4:	189b      	adds	r3, r3, r2
 800b7f6:	0035      	movs	r5, r6
 800b7f8:	e790      	b.n	800b71c <_vfiprintf_r+0xcc>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	425b      	negs	r3, r3
 800b7fe:	e7d0      	b.n	800b7a2 <_vfiprintf_r+0x152>
 800b800:	2300      	movs	r3, #0
 800b802:	200a      	movs	r0, #10
 800b804:	001a      	movs	r2, r3
 800b806:	3501      	adds	r5, #1
 800b808:	6063      	str	r3, [r4, #4]
 800b80a:	7829      	ldrb	r1, [r5, #0]
 800b80c:	1c6e      	adds	r6, r5, #1
 800b80e:	3930      	subs	r1, #48	; 0x30
 800b810:	2909      	cmp	r1, #9
 800b812:	d903      	bls.n	800b81c <_vfiprintf_r+0x1cc>
 800b814:	2b00      	cmp	r3, #0
 800b816:	d0c5      	beq.n	800b7a4 <_vfiprintf_r+0x154>
 800b818:	9209      	str	r2, [sp, #36]	; 0x24
 800b81a:	e7c3      	b.n	800b7a4 <_vfiprintf_r+0x154>
 800b81c:	4342      	muls	r2, r0
 800b81e:	2301      	movs	r3, #1
 800b820:	1852      	adds	r2, r2, r1
 800b822:	0035      	movs	r5, r6
 800b824:	e7f1      	b.n	800b80a <_vfiprintf_r+0x1ba>
 800b826:	ab07      	add	r3, sp, #28
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	003a      	movs	r2, r7
 800b82c:	4b12      	ldr	r3, [pc, #72]	; (800b878 <_vfiprintf_r+0x228>)
 800b82e:	0021      	movs	r1, r4
 800b830:	9803      	ldr	r0, [sp, #12]
 800b832:	f7fd fe51 	bl	80094d8 <_printf_float>
 800b836:	9004      	str	r0, [sp, #16]
 800b838:	9b04      	ldr	r3, [sp, #16]
 800b83a:	3301      	adds	r3, #1
 800b83c:	d1d3      	bne.n	800b7e6 <_vfiprintf_r+0x196>
 800b83e:	89bb      	ldrh	r3, [r7, #12]
 800b840:	065b      	lsls	r3, r3, #25
 800b842:	d500      	bpl.n	800b846 <_vfiprintf_r+0x1f6>
 800b844:	e784      	b.n	800b750 <_vfiprintf_r+0x100>
 800b846:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b848:	e784      	b.n	800b754 <_vfiprintf_r+0x104>
 800b84a:	ab07      	add	r3, sp, #28
 800b84c:	9300      	str	r3, [sp, #0]
 800b84e:	003a      	movs	r2, r7
 800b850:	4b09      	ldr	r3, [pc, #36]	; (800b878 <_vfiprintf_r+0x228>)
 800b852:	0021      	movs	r1, r4
 800b854:	9803      	ldr	r0, [sp, #12]
 800b856:	f7fe f8f9 	bl	8009a4c <_printf_i>
 800b85a:	e7ec      	b.n	800b836 <_vfiprintf_r+0x1e6>
 800b85c:	0800bb40 	.word	0x0800bb40
 800b860:	0800bcc4 	.word	0x0800bcc4
 800b864:	0800bb60 	.word	0x0800bb60
 800b868:	0800bb20 	.word	0x0800bb20
 800b86c:	0800bcca 	.word	0x0800bcca
 800b870:	0800bcce 	.word	0x0800bcce
 800b874:	080094d9 	.word	0x080094d9
 800b878:	0800b62b 	.word	0x0800b62b

0800b87c <_read_r>:
 800b87c:	b570      	push	{r4, r5, r6, lr}
 800b87e:	0005      	movs	r5, r0
 800b880:	0008      	movs	r0, r1
 800b882:	0011      	movs	r1, r2
 800b884:	2200      	movs	r2, #0
 800b886:	4c06      	ldr	r4, [pc, #24]	; (800b8a0 <_read_r+0x24>)
 800b888:	6022      	str	r2, [r4, #0]
 800b88a:	001a      	movs	r2, r3
 800b88c:	f7fd f9be 	bl	8008c0c <_read>
 800b890:	1c43      	adds	r3, r0, #1
 800b892:	d103      	bne.n	800b89c <_read_r+0x20>
 800b894:	6823      	ldr	r3, [r4, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d000      	beq.n	800b89c <_read_r+0x20>
 800b89a:	602b      	str	r3, [r5, #0]
 800b89c:	bd70      	pop	{r4, r5, r6, pc}
 800b89e:	46c0      	nop			; (mov r8, r8)
 800b8a0:	20000ce4 	.word	0x20000ce4

0800b8a4 <_fstat_r>:
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	b570      	push	{r4, r5, r6, lr}
 800b8a8:	4c06      	ldr	r4, [pc, #24]	; (800b8c4 <_fstat_r+0x20>)
 800b8aa:	0005      	movs	r5, r0
 800b8ac:	0008      	movs	r0, r1
 800b8ae:	0011      	movs	r1, r2
 800b8b0:	6023      	str	r3, [r4, #0]
 800b8b2:	f7fd fa87 	bl	8008dc4 <_fstat>
 800b8b6:	1c43      	adds	r3, r0, #1
 800b8b8:	d103      	bne.n	800b8c2 <_fstat_r+0x1e>
 800b8ba:	6823      	ldr	r3, [r4, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d000      	beq.n	800b8c2 <_fstat_r+0x1e>
 800b8c0:	602b      	str	r3, [r5, #0]
 800b8c2:	bd70      	pop	{r4, r5, r6, pc}
 800b8c4:	20000ce4 	.word	0x20000ce4

0800b8c8 <_isatty_r>:
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	b570      	push	{r4, r5, r6, lr}
 800b8cc:	4c06      	ldr	r4, [pc, #24]	; (800b8e8 <_isatty_r+0x20>)
 800b8ce:	0005      	movs	r5, r0
 800b8d0:	0008      	movs	r0, r1
 800b8d2:	6023      	str	r3, [r4, #0]
 800b8d4:	f7fd fbd6 	bl	8009084 <_isatty>
 800b8d8:	1c43      	adds	r3, r0, #1
 800b8da:	d103      	bne.n	800b8e4 <_isatty_r+0x1c>
 800b8dc:	6823      	ldr	r3, [r4, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d000      	beq.n	800b8e4 <_isatty_r+0x1c>
 800b8e2:	602b      	str	r3, [r5, #0]
 800b8e4:	bd70      	pop	{r4, r5, r6, pc}
 800b8e6:	46c0      	nop			; (mov r8, r8)
 800b8e8:	20000ce4 	.word	0x20000ce4

0800b8ec <__ascii_mbtowc>:
 800b8ec:	b082      	sub	sp, #8
 800b8ee:	2900      	cmp	r1, #0
 800b8f0:	d100      	bne.n	800b8f4 <__ascii_mbtowc+0x8>
 800b8f2:	a901      	add	r1, sp, #4
 800b8f4:	1e10      	subs	r0, r2, #0
 800b8f6:	d006      	beq.n	800b906 <__ascii_mbtowc+0x1a>
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d006      	beq.n	800b90a <__ascii_mbtowc+0x1e>
 800b8fc:	7813      	ldrb	r3, [r2, #0]
 800b8fe:	600b      	str	r3, [r1, #0]
 800b900:	7810      	ldrb	r0, [r2, #0]
 800b902:	1e43      	subs	r3, r0, #1
 800b904:	4198      	sbcs	r0, r3
 800b906:	b002      	add	sp, #8
 800b908:	4770      	bx	lr
 800b90a:	2002      	movs	r0, #2
 800b90c:	4240      	negs	r0, r0
 800b90e:	e7fa      	b.n	800b906 <__ascii_mbtowc+0x1a>

0800b910 <__ascii_wctomb>:
 800b910:	1e0b      	subs	r3, r1, #0
 800b912:	d004      	beq.n	800b91e <__ascii_wctomb+0xe>
 800b914:	2aff      	cmp	r2, #255	; 0xff
 800b916:	d904      	bls.n	800b922 <__ascii_wctomb+0x12>
 800b918:	238a      	movs	r3, #138	; 0x8a
 800b91a:	6003      	str	r3, [r0, #0]
 800b91c:	3b8b      	subs	r3, #139	; 0x8b
 800b91e:	0018      	movs	r0, r3
 800b920:	4770      	bx	lr
 800b922:	700a      	strb	r2, [r1, #0]
 800b924:	2301      	movs	r3, #1
 800b926:	e7fa      	b.n	800b91e <__ascii_wctomb+0xe>

0800b928 <_init>:
 800b928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b92a:	46c0      	nop			; (mov r8, r8)
 800b92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b92e:	bc08      	pop	{r3}
 800b930:	469e      	mov	lr, r3
 800b932:	4770      	bx	lr

0800b934 <_fini>:
 800b934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b936:	46c0      	nop			; (mov r8, r8)
 800b938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b93a:	bc08      	pop	{r3}
 800b93c:	469e      	mov	lr, r3
 800b93e:	4770      	bx	lr
